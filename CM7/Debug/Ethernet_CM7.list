
Ethernet_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017f44  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000398c  080181e4  080181e4  000191e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bb70  0801bb70  0001d090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801bb70  0801bb70  0001cb70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bb78  0801bb78  0001d090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bb78  0801bb78  0001cb78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801bb7c  0801bb7c  0001cb7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  24000000  0801bb80  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cee0  24000090  0801bc10  0001d090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2400cf70  0801bc10  0001df70  2**0
                  ALLOC
 11 .lwip_sec     00004a83  30000000  30000000  0001e000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0001d090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003614a  00000000  00000000  0001d0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007f60  00000000  00000000  00053208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002620  00000000  00000000  0005b168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001dff  00000000  00000000  0005d788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004c749  00000000  00000000  0005f587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003b72f  00000000  00000000  000abcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001a7cbc  00000000  00000000  000e73ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0028f0bb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a744  00000000  00000000  0028f100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00299844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000090 	.word	0x24000090
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080181cc 	.word	0x080181cc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000094 	.word	0x24000094
 80002dc:	080181cc 	.word	0x080181cc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b49      	ldr	r3, [pc, #292]	@ (80004ac <SystemInit+0x12c>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800038a:	4a48      	ldr	r2, [pc, #288]	@ (80004ac <SystemInit+0x12c>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b45      	ldr	r3, [pc, #276]	@ (80004ac <SystemInit+0x12c>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a44      	ldr	r2, [pc, #272]	@ (80004ac <SystemInit+0x12c>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003a0:	4b43      	ldr	r3, [pc, #268]	@ (80004b0 <SystemInit+0x130>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	d807      	bhi.n	80003bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ac:	4b40      	ldr	r3, [pc, #256]	@ (80004b0 <SystemInit+0x130>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f023 030f 	bic.w	r3, r3, #15
 80003b4:	4a3e      	ldr	r2, [pc, #248]	@ (80004b0 <SystemInit+0x130>)
 80003b6:	f043 0307 	orr.w	r3, r3, #7
 80003ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003bc:	4b3d      	ldr	r3, [pc, #244]	@ (80004b4 <SystemInit+0x134>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a3c      	ldr	r2, [pc, #240]	@ (80004b4 <SystemInit+0x134>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c8:	4b3a      	ldr	r3, [pc, #232]	@ (80004b4 <SystemInit+0x134>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ce:	4b39      	ldr	r3, [pc, #228]	@ (80004b4 <SystemInit+0x134>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	4938      	ldr	r1, [pc, #224]	@ (80004b4 <SystemInit+0x134>)
 80003d4:	4b38      	ldr	r3, [pc, #224]	@ (80004b8 <SystemInit+0x138>)
 80003d6:	4013      	ands	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003da:	4b35      	ldr	r3, [pc, #212]	@ (80004b0 <SystemInit+0x130>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0308 	and.w	r3, r3, #8
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d007      	beq.n	80003f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003e6:	4b32      	ldr	r3, [pc, #200]	@ (80004b0 <SystemInit+0x130>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 030f 	bic.w	r3, r3, #15
 80003ee:	4a30      	ldr	r2, [pc, #192]	@ (80004b0 <SystemInit+0x130>)
 80003f0:	f043 0307 	orr.w	r3, r3, #7
 80003f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003f6:	4b2f      	ldr	r3, [pc, #188]	@ (80004b4 <SystemInit+0x134>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003fc:	4b2d      	ldr	r3, [pc, #180]	@ (80004b4 <SystemInit+0x134>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000402:	4b2c      	ldr	r3, [pc, #176]	@ (80004b4 <SystemInit+0x134>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000408:	4b2a      	ldr	r3, [pc, #168]	@ (80004b4 <SystemInit+0x134>)
 800040a:	4a2c      	ldr	r2, [pc, #176]	@ (80004bc <SystemInit+0x13c>)
 800040c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800040e:	4b29      	ldr	r3, [pc, #164]	@ (80004b4 <SystemInit+0x134>)
 8000410:	4a2b      	ldr	r2, [pc, #172]	@ (80004c0 <SystemInit+0x140>)
 8000412:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000414:	4b27      	ldr	r3, [pc, #156]	@ (80004b4 <SystemInit+0x134>)
 8000416:	4a2b      	ldr	r2, [pc, #172]	@ (80004c4 <SystemInit+0x144>)
 8000418:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800041a:	4b26      	ldr	r3, [pc, #152]	@ (80004b4 <SystemInit+0x134>)
 800041c:	2200      	movs	r2, #0
 800041e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000420:	4b24      	ldr	r3, [pc, #144]	@ (80004b4 <SystemInit+0x134>)
 8000422:	4a28      	ldr	r2, [pc, #160]	@ (80004c4 <SystemInit+0x144>)
 8000424:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000426:	4b23      	ldr	r3, [pc, #140]	@ (80004b4 <SystemInit+0x134>)
 8000428:	2200      	movs	r2, #0
 800042a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800042c:	4b21      	ldr	r3, [pc, #132]	@ (80004b4 <SystemInit+0x134>)
 800042e:	4a25      	ldr	r2, [pc, #148]	@ (80004c4 <SystemInit+0x144>)
 8000430:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000432:	4b20      	ldr	r3, [pc, #128]	@ (80004b4 <SystemInit+0x134>)
 8000434:	2200      	movs	r2, #0
 8000436:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000438:	4b1e      	ldr	r3, [pc, #120]	@ (80004b4 <SystemInit+0x134>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a1d      	ldr	r2, [pc, #116]	@ (80004b4 <SystemInit+0x134>)
 800043e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000444:	4b1b      	ldr	r3, [pc, #108]	@ (80004b4 <SystemInit+0x134>)
 8000446:	2200      	movs	r2, #0
 8000448:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800044a:	4b1f      	ldr	r3, [pc, #124]	@ (80004c8 <SystemInit+0x148>)
 800044c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800044e:	4a1e      	ldr	r2, [pc, #120]	@ (80004c8 <SystemInit+0x148>)
 8000450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000454:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000456:	4b1d      	ldr	r3, [pc, #116]	@ (80004cc <SystemInit+0x14c>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b1d      	ldr	r3, [pc, #116]	@ (80004d0 <SystemInit+0x150>)
 800045c:	4013      	ands	r3, r2
 800045e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000462:	d202      	bcs.n	800046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000464:	4b1b      	ldr	r3, [pc, #108]	@ (80004d4 <SystemInit+0x154>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800046a:	4b12      	ldr	r3, [pc, #72]	@ (80004b4 <SystemInit+0x134>)
 800046c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000470:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000474:	2b00      	cmp	r3, #0
 8000476:	d113      	bne.n	80004a0 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000478:	4b0e      	ldr	r3, [pc, #56]	@ (80004b4 <SystemInit+0x134>)
 800047a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800047e:	4a0d      	ldr	r2, [pc, #52]	@ (80004b4 <SystemInit+0x134>)
 8000480:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000484:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000488:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <SystemInit+0x158>)
 800048a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800048e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000490:	4b08      	ldr	r3, [pc, #32]	@ (80004b4 <SystemInit+0x134>)
 8000492:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000496:	4a07      	ldr	r2, [pc, #28]	@ (80004b4 <SystemInit+0x134>)
 8000498:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800049c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	e000ed00 	.word	0xe000ed00
 80004b0:	52002000 	.word	0x52002000
 80004b4:	58024400 	.word	0x58024400
 80004b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80004bc:	02020200 	.word	0x02020200
 80004c0:	01ff0000 	.word	0x01ff0000
 80004c4:	01010280 	.word	0x01010280
 80004c8:	580000c0 	.word	0x580000c0
 80004cc:	5c001000 	.word	0x5c001000
 80004d0:	ffff0000 	.word	0xffff0000
 80004d4:	51008108 	.word	0x51008108
 80004d8:	52004000 	.word	0x52004000

080004dc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80004e0:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <ExitRun0Mode+0x2c>)
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	4a08      	ldr	r2, [pc, #32]	@ (8000508 <ExitRun0Mode+0x2c>)
 80004e6:	f023 0302 	bic.w	r3, r3, #2
 80004ea:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80004ec:	bf00      	nop
 80004ee:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <ExitRun0Mode+0x2c>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d0f9      	beq.n	80004ee <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80004fa:	bf00      	nop
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	58024800 	.word	0x58024800

0800050c <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
//  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800052a:	f000 f94d 	bl	80007c8 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800052e:	4b3b      	ldr	r3, [pc, #236]	@ (800061c <main+0xf8>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000536:	2b00      	cmp	r3, #0
 8000538:	d11b      	bne.n	8000572 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800053a:	f3bf 8f4f 	dsb	sy
}
 800053e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000540:	f3bf 8f6f 	isb	sy
}
 8000544:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000546:	4b35      	ldr	r3, [pc, #212]	@ (800061c <main+0xf8>)
 8000548:	2200      	movs	r2, #0
 800054a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800054e:	f3bf 8f4f 	dsb	sy
}
 8000552:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000554:	f3bf 8f6f 	isb	sy
}
 8000558:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800055a:	4b30      	ldr	r3, [pc, #192]	@ (800061c <main+0xf8>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	4a2f      	ldr	r2, [pc, #188]	@ (800061c <main+0xf8>)
 8000560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000564:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000566:	f3bf 8f4f 	dsb	sy
}
 800056a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800056c:	f3bf 8f6f 	isb	sy
}
 8000570:	e000      	b.n	8000574 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000572:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000574:	4b29      	ldr	r3, [pc, #164]	@ (800061c <main+0xf8>)
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800057c:	2b00      	cmp	r3, #0
 800057e:	d138      	bne.n	80005f2 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000580:	4b26      	ldr	r3, [pc, #152]	@ (800061c <main+0xf8>)
 8000582:	2200      	movs	r2, #0
 8000584:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000588:	f3bf 8f4f 	dsb	sy
}
 800058c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800058e:	4b23      	ldr	r3, [pc, #140]	@ (800061c <main+0xf8>)
 8000590:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000594:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	0b5b      	lsrs	r3, r3, #13
 800059a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800059e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	08db      	lsrs	r3, r3, #3
 80005a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005a8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	015a      	lsls	r2, r3, #5
 80005ae:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80005b2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005b8:	4918      	ldr	r1, [pc, #96]	@ (800061c <main+0xf8>)
 80005ba:	4313      	orrs	r3, r2
 80005bc:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	1e5a      	subs	r2, r3, #1
 80005c4:	607a      	str	r2, [r7, #4]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1ef      	bne.n	80005aa <main+0x86>
    } while(sets-- != 0U);
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	1e5a      	subs	r2, r3, #1
 80005ce:	60ba      	str	r2, [r7, #8]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d1e5      	bne.n	80005a0 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80005d4:	f3bf 8f4f 	dsb	sy
}
 80005d8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005da:	4b10      	ldr	r3, [pc, #64]	@ (800061c <main+0xf8>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a0f      	ldr	r2, [pc, #60]	@ (800061c <main+0xf8>)
 80005e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80005e4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005e6:	f3bf 8f4f 	dsb	sy
}
 80005ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ec:	f3bf 8f6f 	isb	sy
}
 80005f0:	e000      	b.n	80005f4 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80005f2:	bf00      	nop
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fc98 	bl	8000f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f818 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f890 	bl	8000720 <MX_GPIO_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000600:	f004 ff80 	bl	8005504 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000604:	4a06      	ldr	r2, [pc, #24]	@ (8000620 <main+0xfc>)
 8000606:	2100      	movs	r1, #0
 8000608:	4806      	ldr	r0, [pc, #24]	@ (8000624 <main+0x100>)
 800060a:	f004 ffda 	bl	80055c2 <osThreadNew>
 800060e:	4603      	mov	r3, r0
 8000610:	4a05      	ldr	r2, [pc, #20]	@ (8000628 <main+0x104>)
 8000612:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000614:	f004 ff9a 	bl	800554c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <main+0xf4>
 800061c:	e000ed00 	.word	0xe000ed00
 8000620:	0801b938 	.word	0x0801b938
 8000624:	080007b1 	.word	0x080007b1
 8000628:	240000ac 	.word	0x240000ac

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b09c      	sub	sp, #112	@ 0x70
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000636:	224c      	movs	r2, #76	@ 0x4c
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f016 fd2f 	bl	801709e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2220      	movs	r2, #32
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f016 fd29 	bl	801709e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800064c:	2004      	movs	r0, #4
 800064e:	f002 fd7f 	bl	8003150 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000652:	2300      	movs	r3, #0
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	4b30      	ldr	r3, [pc, #192]	@ (8000718 <SystemClock_Config+0xec>)
 8000658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800065a:	4a2f      	ldr	r2, [pc, #188]	@ (8000718 <SystemClock_Config+0xec>)
 800065c:	f023 0301 	bic.w	r3, r3, #1
 8000660:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000662:	4b2d      	ldr	r3, [pc, #180]	@ (8000718 <SystemClock_Config+0xec>)
 8000664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	4b2b      	ldr	r3, [pc, #172]	@ (800071c <SystemClock_Config+0xf0>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a2a      	ldr	r2, [pc, #168]	@ (800071c <SystemClock_Config+0xf0>)
 8000672:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b28      	ldr	r3, [pc, #160]	@ (800071c <SystemClock_Config+0xf0>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000684:	bf00      	nop
 8000686:	4b25      	ldr	r3, [pc, #148]	@ (800071c <SystemClock_Config+0xf0>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800068e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000692:	d1f8      	bne.n	8000686 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000694:	2301      	movs	r3, #1
 8000696:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000698:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800069c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	2302      	movs	r3, #2
 80006a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80006a6:	2305      	movs	r3, #5
 80006a8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80006aa:	23a0      	movs	r3, #160	@ 0xa0
 80006ac:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80006b2:	2305      	movs	r3, #5
 80006b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80006ba:	2308      	movs	r3, #8
 80006bc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006be:	2300      	movs	r3, #0
 80006c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 fd9a 	bl	8003204 <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006d6:	f000 f8c7 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	233f      	movs	r3, #63	@ 0x3f
 80006dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2303      	movs	r3, #3
 80006e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006e6:	2308      	movs	r3, #8
 80006e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006ea:	2340      	movs	r3, #64	@ 0x40
 80006ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006ee:	2340      	movs	r3, #64	@ 0x40
 80006f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006f8:	2340      	movs	r3, #64	@ 0x40
 80006fa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2102      	movs	r1, #2
 8000700:	4618      	mov	r0, r3
 8000702:	f003 f9d9 	bl	8003ab8 <HAL_RCC_ClockConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800070c:	f000 f8ac 	bl	8000868 <Error_Handler>
  }
}
 8000710:	bf00      	nop
 8000712:	3770      	adds	r7, #112	@ 0x70
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	58000400 	.word	0x58000400
 800071c:	58024800 	.word	0x58024800

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	4b21      	ldr	r3, [pc, #132]	@ (80007ac <MX_GPIO_Init+0x8c>)
 8000728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800072c:	4a1f      	ldr	r2, [pc, #124]	@ (80007ac <MX_GPIO_Init+0x8c>)
 800072e:	f043 0304 	orr.w	r3, r3, #4
 8000732:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000736:	4b1d      	ldr	r3, [pc, #116]	@ (80007ac <MX_GPIO_Init+0x8c>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073c:	f003 0304 	and.w	r3, r3, #4
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000744:	4b19      	ldr	r3, [pc, #100]	@ (80007ac <MX_GPIO_Init+0x8c>)
 8000746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800074a:	4a18      	ldr	r2, [pc, #96]	@ (80007ac <MX_GPIO_Init+0x8c>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000754:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <MX_GPIO_Init+0x8c>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <MX_GPIO_Init+0x8c>)
 8000764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000768:	4a10      	ldr	r2, [pc, #64]	@ (80007ac <MX_GPIO_Init+0x8c>)
 800076a:	f043 0302 	orr.w	r3, r3, #2
 800076e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <MX_GPIO_Init+0x8c>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000778:	f003 0302 	and.w	r3, r3, #2
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000780:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <MX_GPIO_Init+0x8c>)
 8000782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000786:	4a09      	ldr	r2, [pc, #36]	@ (80007ac <MX_GPIO_Init+0x8c>)
 8000788:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800078c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_GPIO_Init+0x8c>)
 8000792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800079e:	bf00      	nop
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	58024400 	.word	0x58024400

080007b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80007b8:	f003 fffe 	bl	80047b8 <MX_LWIP_Init>
  udpserver_init();
 80007bc:	f000 fa6e 	bl	8000c9c <udpserver_init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007c0:	2001      	movs	r0, #1
 80007c2:	f004 ff91 	bl	80056e8 <osDelay>
 80007c6:	e7fb      	b.n	80007c0 <StartDefaultTask+0x10>

080007c8 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007ce:	463b      	mov	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80007da:	f000 fd01 	bl	80011e0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007de:	2301      	movs	r3, #1
 80007e0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80007ea:	231f      	movs	r3, #31
 80007ec:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80007ee:	2387      	movs	r3, #135	@ 0x87
 80007f0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80007f6:	2300      	movs	r3, #0
 80007f8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007fa:	2301      	movs	r3, #1
 80007fc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80007fe:	2301      	movs	r3, #1
 8000800:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000802:	2300      	movs	r3, #0
 8000804:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800080a:	463b      	mov	r3, r7
 800080c:	4618      	mov	r0, r3
 800080e:	f000 fd1f 	bl	8001250 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000812:	2301      	movs	r3, #1
 8000814:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000816:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800081a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 800081c:	230e      	movs	r3, #14
 800081e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000820:	2300      	movs	r3, #0
 8000822:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000824:	2301      	movs	r3, #1
 8000826:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000828:	2303      	movs	r3, #3
 800082a:	72fb      	strb	r3, [r7, #11]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800082c:	463b      	mov	r3, r7
 800082e:	4618      	mov	r0, r3
 8000830:	f000 fd0e 	bl	8001250 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000834:	2004      	movs	r0, #4
 8000836:	f000 fceb 	bl	8001210 <HAL_MPU_Enable>

}
 800083a:	bf00      	nop
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a04      	ldr	r2, [pc, #16]	@ (8000864 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d101      	bne.n	800085a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000856:	f000 fba3 	bl	8000fa0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40001000 	.word	0x40001000

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <Error_Handler+0x8>

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <HAL_MspInit+0x38>)
 800087c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000880:	4a0a      	ldr	r2, [pc, #40]	@ (80008ac <HAL_MspInit+0x38>)
 8000882:	f043 0302 	orr.w	r3, r3, #2
 8000886:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800088a:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <HAL_MspInit+0x38>)
 800088c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000890:	f003 0302 	and.w	r3, r3, #2
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	210f      	movs	r1, #15
 800089c:	f06f 0001 	mvn.w	r0, #1
 80008a0:	f000 fc76 	bl	8001190 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	58024400 	.word	0x58024400

080008b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b090      	sub	sp, #64	@ 0x40
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b0f      	cmp	r3, #15
 80008bc:	d827      	bhi.n	800090e <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80008be:	2200      	movs	r2, #0
 80008c0:	6879      	ldr	r1, [r7, #4]
 80008c2:	2036      	movs	r0, #54	@ 0x36
 80008c4:	f000 fc64 	bl	8001190 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008c8:	2036      	movs	r0, #54	@ 0x36
 80008ca:	f000 fc7b 	bl	80011c4 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80008ce:	4a29      	ldr	r2, [pc, #164]	@ (8000974 <HAL_InitTick+0xc4>)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008d4:	4b28      	ldr	r3, [pc, #160]	@ (8000978 <HAL_InitTick+0xc8>)
 80008d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80008da:	4a27      	ldr	r2, [pc, #156]	@ (8000978 <HAL_InitTick+0xc8>)
 80008dc:	f043 0310 	orr.w	r3, r3, #16
 80008e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80008e4:	4b24      	ldr	r3, [pc, #144]	@ (8000978 <HAL_InitTick+0xc8>)
 80008e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80008ea:	f003 0310 	and.w	r3, r3, #16
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008f2:	f107 0210 	add.w	r2, r7, #16
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4611      	mov	r1, r2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f003 fc51 	bl	80041a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000904:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000908:	2b00      	cmp	r3, #0
 800090a:	d106      	bne.n	800091a <HAL_InitTick+0x6a>
 800090c:	e001      	b.n	8000912 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	e02b      	b.n	800096a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000912:	f003 fc31 	bl	8004178 <HAL_RCC_GetPCLK1Freq>
 8000916:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000918:	e004      	b.n	8000924 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800091a:	f003 fc2d 	bl	8004178 <HAL_RCC_GetPCLK1Freq>
 800091e:	4603      	mov	r3, r0
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000926:	4a15      	ldr	r2, [pc, #84]	@ (800097c <HAL_InitTick+0xcc>)
 8000928:	fba2 2303 	umull	r2, r3, r2, r3
 800092c:	0c9b      	lsrs	r3, r3, #18
 800092e:	3b01      	subs	r3, #1
 8000930:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000932:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <HAL_InitTick+0xd0>)
 8000934:	4a13      	ldr	r2, [pc, #76]	@ (8000984 <HAL_InitTick+0xd4>)
 8000936:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000938:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <HAL_InitTick+0xd0>)
 800093a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800093e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000940:	4a0f      	ldr	r2, [pc, #60]	@ (8000980 <HAL_InitTick+0xd0>)
 8000942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000944:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000946:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <HAL_InitTick+0xd0>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <HAL_InitTick+0xd0>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000952:	480b      	ldr	r0, [pc, #44]	@ (8000980 <HAL_InitTick+0xd0>)
 8000954:	f003 fc68 	bl	8004228 <HAL_TIM_Base_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d104      	bne.n	8000968 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800095e:	4808      	ldr	r0, [pc, #32]	@ (8000980 <HAL_InitTick+0xd0>)
 8000960:	f003 fcc4 	bl	80042ec <HAL_TIM_Base_Start_IT>
 8000964:	4603      	mov	r3, r0
 8000966:	e000      	b.n	800096a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000968:	2301      	movs	r3, #1
}
 800096a:	4618      	mov	r0, r3
 800096c:	3740      	adds	r7, #64	@ 0x40
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	24000008 	.word	0x24000008
 8000978:	58024400 	.word	0x58024400
 800097c:	431bde83 	.word	0x431bde83
 8000980:	240000b0 	.word	0x240000b0
 8000984:	40001000 	.word	0x40001000

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <NMI_Handler+0x4>

08000990 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <MemManage_Handler+0x4>

080009a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <UsageFault_Handler+0x4>

080009b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009c4:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <TIM6_DAC_IRQHandler+0x10>)
 80009c6:	f003 fd09 	bl	80043dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	240000b0 	.word	0x240000b0

080009d4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80009d8:	4802      	ldr	r0, [pc, #8]	@ (80009e4 <ETH_IRQHandler+0x10>)
 80009da:	f001 f85f 	bl	8001a9c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	240002c0 	.word	0x240002c0

080009e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return 1;
 80009ec:	2301      	movs	r3, #1
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <_kill>:

int _kill(int pid, int sig)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a02:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <_kill+0x20>)
 8000a04:	2216      	movs	r2, #22
 8000a06:	601a      	str	r2, [r3, #0]
  return -1;
 8000a08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	2400cf60 	.word	0x2400cf60

08000a1c <_exit>:

void _exit (int status)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a24:	f04f 31ff 	mov.w	r1, #4294967295
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff ffe5 	bl	80009f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a2e:	bf00      	nop
 8000a30:	e7fd      	b.n	8000a2e <_exit+0x12>

08000a32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b086      	sub	sp, #24
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	60f8      	str	r0, [r7, #12]
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	e00a      	b.n	8000a5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a44:	f3af 8000 	nop.w
 8000a48:	4601      	mov	r1, r0
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	1c5a      	adds	r2, r3, #1
 8000a4e:	60ba      	str	r2, [r7, #8]
 8000a50:	b2ca      	uxtb	r2, r1
 8000a52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	3301      	adds	r3, #1
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	697a      	ldr	r2, [r7, #20]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	dbf0      	blt.n	8000a44 <_read+0x12>
  }

  return len;
 8000a62:	687b      	ldr	r3, [r7, #4]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	e009      	b.n	8000a92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	1c5a      	adds	r2, r3, #1
 8000a82:	60ba      	str	r2, [r7, #8]
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	697a      	ldr	r2, [r7, #20]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	dbf1      	blt.n	8000a7e <_write+0x12>
  }
  return len;
 8000a9a:	687b      	ldr	r3, [r7, #4]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3718      	adds	r7, #24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <_close>:

int _close(int file)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000acc:	605a      	str	r2, [r3, #4]
  return 0;
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <_isatty>:

int _isatty(int file)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ae4:	2301      	movs	r3, #1
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b085      	sub	sp, #20
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	60f8      	str	r0, [r7, #12]
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000afe:	2300      	movs	r3, #0
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b087      	sub	sp, #28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b14:	4a14      	ldr	r2, [pc, #80]	@ (8000b68 <_sbrk+0x5c>)
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <_sbrk+0x60>)
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b20:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d102      	bne.n	8000b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b28:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <_sbrk+0x64>)
 8000b2a:	4a12      	ldr	r2, [pc, #72]	@ (8000b74 <_sbrk+0x68>)
 8000b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2e:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d205      	bcs.n	8000b48 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <_sbrk+0x6c>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	e009      	b.n	8000b5c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b48:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	4a06      	ldr	r2, [pc, #24]	@ (8000b70 <_sbrk+0x64>)
 8000b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	371c      	adds	r7, #28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	24080000 	.word	0x24080000
 8000b6c:	00000400 	.word	0x00000400
 8000b70:	240000fc 	.word	0x240000fc
 8000b74:	2400cf70 	.word	0x2400cf70
 8000b78:	2400cf60 	.word	0x2400cf60

08000b7c <udp_thread>:
char smsg[200];

/*-----------------------------------------------------------------------------------*/
/**** Send RESPONSE every time the client sends some data ******/
static void udp_thread(void *arg)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	err_t err, recv_err;
	struct pbuf *txBuf;

	/* Create a new connection identifier */
	conn = netconn_new(NETCONN_UDP);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	2020      	movs	r0, #32
 8000b8a:	f008 fbbb 	bl	8009304 <netconn_new_with_proto_and_callback>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	4a3a      	ldr	r2, [pc, #232]	@ (8000c7c <udp_thread+0x100>)
 8000b92:	6013      	str	r3, [r2, #0]

	if (conn!= NULL)
 8000b94:	4b39      	ldr	r3, [pc, #228]	@ (8000c7c <udp_thread+0x100>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d06b      	beq.n	8000c74 <udp_thread+0xf8>
	{
		/* Bind connection to the port 7 */
		err = netconn_bind(conn, IP_ADDR_ANY, 7);
 8000b9c:	4b37      	ldr	r3, [pc, #220]	@ (8000c7c <udp_thread+0x100>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2207      	movs	r2, #7
 8000ba2:	4937      	ldr	r1, [pc, #220]	@ (8000c80 <udp_thread+0x104>)
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f008 fc67 	bl	8009478 <netconn_bind>
 8000baa:	4603      	mov	r3, r0
 8000bac:	75fb      	strb	r3, [r7, #23]

		if (err == ERR_OK)
 8000bae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d159      	bne.n	8000c6a <udp_thread+0xee>
		{
			/* The while loop will run everytime this Task is executed */
			while (1)
			{
				/* Receive the data from the connection */
				recv_err = netconn_recv(conn, &buf);
 8000bb6:	4b31      	ldr	r3, [pc, #196]	@ (8000c7c <udp_thread+0x100>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4932      	ldr	r1, [pc, #200]	@ (8000c84 <udp_thread+0x108>)
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f008 fe47 	bl	8009850 <netconn_recv>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	75bb      	strb	r3, [r7, #22]

				if (recv_err == ERR_OK) // if the data is received
 8000bc6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1f3      	bne.n	8000bb6 <udp_thread+0x3a>
				{
					addr = netbuf_fromaddr(buf);  // get the address of the client
 8000bce:	4b2d      	ldr	r3, [pc, #180]	@ (8000c84 <udp_thread+0x108>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	3308      	adds	r3, #8
 8000bd4:	4a2c      	ldr	r2, [pc, #176]	@ (8000c88 <udp_thread+0x10c>)
 8000bd6:	6013      	str	r3, [r2, #0]
					port = netbuf_fromport(buf);  // get the Port of the client
 8000bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c84 <udp_thread+0x108>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	899a      	ldrh	r2, [r3, #12]
 8000bde:	4b2b      	ldr	r3, [pc, #172]	@ (8000c8c <udp_thread+0x110>)
 8000be0:	801a      	strh	r2, [r3, #0]
					strcpy (msg, buf->p->payload);   // get the message from the client
 8000be2:	4b28      	ldr	r3, [pc, #160]	@ (8000c84 <udp_thread+0x108>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	4619      	mov	r1, r3
 8000bec:	4828      	ldr	r0, [pc, #160]	@ (8000c90 <udp_thread+0x114>)
 8000bee:	f016 fb2a 	bl	8017246 <strcpy>

					// Or modify the message received, so that we can send it back to the client
					int len = sprintf (smsg, "\"%s\" was sent by the Client\n", (char *) buf->p->payload);
 8000bf2:	4b24      	ldr	r3, [pc, #144]	@ (8000c84 <udp_thread+0x108>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4925      	ldr	r1, [pc, #148]	@ (8000c94 <udp_thread+0x118>)
 8000bfe:	4826      	ldr	r0, [pc, #152]	@ (8000c98 <udp_thread+0x11c>)
 8000c00:	f016 f9be 	bl	8016f80 <siprintf>
 8000c04:	6138      	str	r0, [r7, #16]

					/* allocate pbuf from RAM*/
					txBuf = pbuf_alloc(PBUF_TRANSPORT,len, PBUF_RAM);
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000c0e:	4619      	mov	r1, r3
 8000c10:	2036      	movs	r0, #54	@ 0x36
 8000c12:	f00d ff73 	bl	800eafc <pbuf_alloc>
 8000c16:	60f8      	str	r0, [r7, #12]

					/* copy the data into the buffer  */
					pbuf_take(txBuf, smsg, len);
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	491e      	ldr	r1, [pc, #120]	@ (8000c98 <udp_thread+0x11c>)
 8000c20:	68f8      	ldr	r0, [r7, #12]
 8000c22:	f00e fcc7 	bl	800f5b4 <pbuf_take>

					// refer the nebuf->pbuf to our pbuf
					buf->p = txBuf;
 8000c26:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <udp_thread+0x108>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	601a      	str	r2, [r3, #0]

					netconn_connect(conn, addr, port);  // connect to the destination address and port
 8000c2e:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <udp_thread+0x100>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a15      	ldr	r2, [pc, #84]	@ (8000c88 <udp_thread+0x10c>)
 8000c34:	6811      	ldr	r1, [r2, #0]
 8000c36:	4a15      	ldr	r2, [pc, #84]	@ (8000c8c <udp_thread+0x110>)
 8000c38:	8812      	ldrh	r2, [r2, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f008 fc54 	bl	80094e8 <netconn_connect>

					netconn_send(conn,buf);  // send the netbuf to the client
 8000c40:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <udp_thread+0x100>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0f      	ldr	r2, [pc, #60]	@ (8000c84 <udp_thread+0x108>)
 8000c46:	6812      	ldr	r2, [r2, #0]
 8000c48:	4611      	mov	r1, r2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f008 fe7a 	bl	8009944 <netconn_send>

					buf->addr.addr = 0;  // clear the address
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <udp_thread+0x108>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
					pbuf_free(txBuf);   // clear the pbuf
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f00e fa33 	bl	800f0c4 <pbuf_free>
					netbuf_delete(buf);  // delete the netbuf
 8000c5e:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <udp_thread+0x108>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f00d fb96 	bl	800e394 <netbuf_delete>
				recv_err = netconn_recv(conn, &buf);
 8000c68:	e7a5      	b.n	8000bb6 <udp_thread+0x3a>
				}
			}
		}
		else
		{
			netconn_delete(conn);
 8000c6a:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <udp_thread+0x100>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f008 fbe6 	bl	8009440 <netconn_delete>
		}
	}
}
 8000c74:	bf00      	nop
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	24000100 	.word	0x24000100
 8000c80:	0801b97c 	.word	0x0801b97c
 8000c84:	24000104 	.word	0x24000104
 8000c88:	24000108 	.word	0x24000108
 8000c8c:	2400010c 	.word	0x2400010c
 8000c90:	24000110 	.word	0x24000110
 8000c94:	080181f0 	.word	0x080181f0
 8000c98:	24000174 	.word	0x24000174

08000c9c <udpserver_init>:


void udpserver_init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af02      	add	r7, sp, #8
  sys_thread_new("udp_thread", udp_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8000ca2:	2318      	movs	r3, #24
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000caa:	2200      	movs	r2, #0
 8000cac:	4903      	ldr	r1, [pc, #12]	@ (8000cbc <udpserver_init+0x20>)
 8000cae:	4804      	ldr	r0, [pc, #16]	@ (8000cc0 <udpserver_init+0x24>)
 8000cb0:	f00e febc 	bl	800fa2c <sys_thread_new>
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	08000b7d 	.word	0x08000b7d
 8000cc0:	08018210 	.word	0x08018210

08000cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000cc4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000d00 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000cc8:	f7ff fc08 	bl	80004dc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ccc:	f7ff fb58 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd0:	480c      	ldr	r0, [pc, #48]	@ (8000d04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cd2:	490d      	ldr	r1, [pc, #52]	@ (8000d08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce8:	4c0a      	ldr	r4, [pc, #40]	@ (8000d14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f016 fa7f 	bl	80171f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfa:	f7ff fc13 	bl	8000524 <main>
  bx  lr
 8000cfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d00:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d08:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 8000d0c:	0801bb80 	.word	0x0801bb80
  ldr r2, =_sbss
 8000d10:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 8000d14:	2400cf70 	.word	0x2400cf70

08000d18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC3_IRQHandler>

08000d1a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d00b      	beq.n	8000d42 <LAN8742_RegisterBusIO+0x28>
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d007      	beq.n	8000d42 <LAN8742_RegisterBusIO+0x28>
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d003      	beq.n	8000d42 <LAN8742_RegisterBusIO+0x28>
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	691b      	ldr	r3, [r3, #16]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d102      	bne.n	8000d48 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
 8000d46:	e014      	b.n	8000d72 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	68da      	ldr	r2, [r3, #12]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	689a      	ldr	r2, [r3, #8]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	691a      	ldr	r2, [r3, #16]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d139      	bne.n	8000e0e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d002      	beq.n	8000da8 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2220      	movs	r2, #32
 8000dac:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	e01c      	b.n	8000dee <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	695b      	ldr	r3, [r3, #20]
 8000db8:	f107 020c 	add.w	r2, r7, #12
 8000dbc:	2112      	movs	r1, #18
 8000dbe:	6978      	ldr	r0, [r7, #20]
 8000dc0:	4798      	blx	r3
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	da03      	bge.n	8000dd0 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000dc8:	f06f 0304 	mvn.w	r3, #4
 8000dcc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000dce:	e00b      	b.n	8000de8 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f003 031f 	and.w	r3, r3, #31
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d105      	bne.n	8000de8 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
         break;
 8000de6:	e005      	b.n	8000df4 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	3301      	adds	r3, #1
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	2b1f      	cmp	r3, #31
 8000df2:	d9df      	bls.n	8000db4 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b1f      	cmp	r3, #31
 8000dfa:	d902      	bls.n	8000e02 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000dfc:	f06f 0302 	mvn.w	r3, #2
 8000e00:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000e0e:	693b      	ldr	r3, [r7, #16]
 }
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	6810      	ldr	r0, [r2, #0]
 8000e2c:	f107 020c 	add.w	r2, r7, #12
 8000e30:	2101      	movs	r1, #1
 8000e32:	4798      	blx	r3
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	da02      	bge.n	8000e40 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e3a:	f06f 0304 	mvn.w	r3, #4
 8000e3e:	e06e      	b.n	8000f1e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	695b      	ldr	r3, [r3, #20]
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	6810      	ldr	r0, [r2, #0]
 8000e48:	f107 020c 	add.w	r2, r7, #12
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	4798      	blx	r3
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	da02      	bge.n	8000e5c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e56:	f06f 0304 	mvn.w	r3, #4
 8000e5a:	e060      	b.n	8000f1e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d101      	bne.n	8000e6a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e059      	b.n	8000f1e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	6810      	ldr	r0, [r2, #0]
 8000e72:	f107 020c 	add.w	r2, r7, #12
 8000e76:	2100      	movs	r1, #0
 8000e78:	4798      	blx	r3
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	da02      	bge.n	8000e86 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e80:	f06f 0304 	mvn.w	r3, #4
 8000e84:	e04b      	b.n	8000f1e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d11b      	bne.n	8000ec8 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d006      	beq.n	8000ea8 <LAN8742_GetLinkState+0x90>
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	e03a      	b.n	8000f1e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e033      	b.n	8000f1e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	e02c      	b.n	8000f1e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000ec4:	2305      	movs	r3, #5
 8000ec6:	e02a      	b.n	8000f1e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	695b      	ldr	r3, [r3, #20]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	6810      	ldr	r0, [r2, #0]
 8000ed0:	f107 020c 	add.w	r2, r7, #12
 8000ed4:	211f      	movs	r1, #31
 8000ed6:	4798      	blx	r3
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	da02      	bge.n	8000ee4 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000ede:	f06f 0304 	mvn.w	r3, #4
 8000ee2:	e01c      	b.n	8000f1e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d101      	bne.n	8000ef2 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000eee:	2306      	movs	r3, #6
 8000ef0:	e015      	b.n	8000f1e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	f003 031c 	and.w	r3, r3, #28
 8000ef8:	2b18      	cmp	r3, #24
 8000efa:	d101      	bne.n	8000f00 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000efc:	2302      	movs	r3, #2
 8000efe:	e00e      	b.n	8000f1e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f003 031c 	and.w	r3, r3, #28
 8000f06:	2b08      	cmp	r3, #8
 8000f08:	d101      	bne.n	8000f0e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e007      	b.n	8000f1e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f003 031c 	and.w	r3, r3, #28
 8000f14:	2b14      	cmp	r3, #20
 8000f16:	d101      	bne.n	8000f1c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f18:	2304      	movs	r3, #4
 8000f1a:	e000      	b.n	8000f1e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f1c:	2305      	movs	r3, #5
    }
  }
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2e:	2003      	movs	r0, #3
 8000f30:	f000 f923 	bl	800117a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f34:	f002 ff76 	bl	8003e24 <HAL_RCC_GetSysClockFreq>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <HAL_Init+0x68>)
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	0a1b      	lsrs	r3, r3, #8
 8000f40:	f003 030f 	and.w	r3, r3, #15
 8000f44:	4913      	ldr	r1, [pc, #76]	@ (8000f94 <HAL_Init+0x6c>)
 8000f46:	5ccb      	ldrb	r3, [r1, r3]
 8000f48:	f003 031f 	and.w	r3, r3, #31
 8000f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f50:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f52:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <HAL_Init+0x68>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f94 <HAL_Init+0x6c>)
 8000f5c:	5cd3      	ldrb	r3, [r2, r3]
 8000f5e:	f003 031f 	and.w	r3, r3, #31
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	fa22 f303 	lsr.w	r3, r2, r3
 8000f68:	4a0b      	ldr	r2, [pc, #44]	@ (8000f98 <HAL_Init+0x70>)
 8000f6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f9c <HAL_Init+0x74>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f72:	200f      	movs	r0, #15
 8000f74:	f7ff fc9c 	bl	80008b0 <HAL_InitTick>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e002      	b.n	8000f88 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f82:	f7ff fc77 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	58024400 	.word	0x58024400
 8000f94:	0801b928 	.word	0x0801b928
 8000f98:	24000004 	.word	0x24000004
 8000f9c:	24000000 	.word	0x24000000

08000fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <HAL_IncTick+0x20>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <HAL_IncTick+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <HAL_IncTick+0x24>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	2400000c 	.word	0x2400000c
 8000fc4:	2400023c 	.word	0x2400023c

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	@ (8000fdc <HAL_GetTick+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	2400023c 	.word	0x2400023c

08000fe0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fe4:	4b03      	ldr	r3, [pc, #12]	@ (8000ff4 <HAL_GetREVID+0x14>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	0c1b      	lsrs	r3, r3, #16
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	5c001000 	.word	0x5c001000

08000ff8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001008:	4904      	ldr	r1, [pc, #16]	@ (800101c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4313      	orrs	r3, r2
 800100e:	604b      	str	r3, [r1, #4]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	58000400 	.word	0x58000400

08001020 <__NVIC_SetPriorityGrouping>:
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001030:	4b0b      	ldr	r3, [pc, #44]	@ (8001060 <__NVIC_SetPriorityGrouping+0x40>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800103c:	4013      	ands	r3, r2
 800103e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 800104a:	4313      	orrs	r3, r2
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <__NVIC_SetPriorityGrouping+0x40>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00
 8001064:	05fa0000 	.word	0x05fa0000

08001068 <__NVIC_GetPriorityGrouping>:
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800106c:	4b04      	ldr	r3, [pc, #16]	@ (8001080 <__NVIC_GetPriorityGrouping+0x18>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	f003 0307 	and.w	r3, r3, #7
}
 8001076:	4618      	mov	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_EnableIRQ>:
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800108e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001092:	2b00      	cmp	r3, #0
 8001094:	db0b      	blt.n	80010ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001096:	88fb      	ldrh	r3, [r7, #6]
 8001098:	f003 021f 	and.w	r2, r3, #31
 800109c:	4907      	ldr	r1, [pc, #28]	@ (80010bc <__NVIC_EnableIRQ+0x38>)
 800109e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a2:	095b      	lsrs	r3, r3, #5
 80010a4:	2001      	movs	r0, #1
 80010a6:	fa00 f202 	lsl.w	r2, r0, r2
 80010aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000e100 	.word	0xe000e100

080010c0 <__NVIC_SetPriority>:
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	db0a      	blt.n	80010ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	490c      	ldr	r1, [pc, #48]	@ (800110c <__NVIC_SetPriority+0x4c>)
 80010da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010de:	0112      	lsls	r2, r2, #4
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	440b      	add	r3, r1
 80010e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80010e8:	e00a      	b.n	8001100 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4908      	ldr	r1, [pc, #32]	@ (8001110 <__NVIC_SetPriority+0x50>)
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	3b04      	subs	r3, #4
 80010f8:	0112      	lsls	r2, r2, #4
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	440b      	add	r3, r1
 80010fe:	761a      	strb	r2, [r3, #24]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000e100 	.word	0xe000e100
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <NVIC_EncodePriority>:
{
 8001114:	b480      	push	{r7}
 8001116:	b089      	sub	sp, #36	@ 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f1c3 0307 	rsb	r3, r3, #7
 800112e:	2b04      	cmp	r3, #4
 8001130:	bf28      	it	cs
 8001132:	2304      	movcs	r3, #4
 8001134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3304      	adds	r3, #4
 800113a:	2b06      	cmp	r3, #6
 800113c:	d902      	bls.n	8001144 <NVIC_EncodePriority+0x30>
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3b03      	subs	r3, #3
 8001142:	e000      	b.n	8001146 <NVIC_EncodePriority+0x32>
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	f04f 32ff 	mov.w	r2, #4294967295
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43da      	mvns	r2, r3
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	401a      	ands	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800115c:	f04f 31ff 	mov.w	r1, #4294967295
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43d9      	mvns	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	4313      	orrs	r3, r2
}
 800116e:	4618      	mov	r0, r3
 8001170:	3724      	adds	r7, #36	@ 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ff4c 	bl	8001020 <__NVIC_SetPriorityGrouping>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800119e:	f7ff ff63 	bl	8001068 <__NVIC_GetPriorityGrouping>
 80011a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	68b9      	ldr	r1, [r7, #8]
 80011a8:	6978      	ldr	r0, [r7, #20]
 80011aa:	f7ff ffb3 	bl	8001114 <NVIC_EncodePriority>
 80011ae:	4602      	mov	r2, r0
 80011b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011b4:	4611      	mov	r1, r2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff82 	bl	80010c0 <__NVIC_SetPriority>
}
 80011bc:	bf00      	nop
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff56 	bl	8001084 <__NVIC_EnableIRQ>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80011e4:	f3bf 8f5f 	dmb	sy
}
 80011e8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80011ea:	4b07      	ldr	r3, [pc, #28]	@ (8001208 <HAL_MPU_Disable+0x28>)
 80011ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ee:	4a06      	ldr	r2, [pc, #24]	@ (8001208 <HAL_MPU_Disable+0x28>)
 80011f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011f4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80011f6:	4b05      	ldr	r3, [pc, #20]	@ (800120c <HAL_MPU_Disable+0x2c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	605a      	str	r2, [r3, #4]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00
 800120c:	e000ed90 	.word	0xe000ed90

08001210 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001218:	4a0b      	ldr	r2, [pc, #44]	@ (8001248 <HAL_MPU_Enable+0x38>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001222:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <HAL_MPU_Enable+0x3c>)
 8001224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001226:	4a09      	ldr	r2, [pc, #36]	@ (800124c <HAL_MPU_Enable+0x3c>)
 8001228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800122c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800122e:	f3bf 8f4f 	dsb	sy
}
 8001232:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001234:	f3bf 8f6f 	isb	sy
}
 8001238:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed90 	.word	0xe000ed90
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	785a      	ldrb	r2, [r3, #1]
 800125c:	4b1b      	ldr	r3, [pc, #108]	@ (80012cc <HAL_MPU_ConfigRegion+0x7c>)
 800125e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001260:	4b1a      	ldr	r3, [pc, #104]	@ (80012cc <HAL_MPU_ConfigRegion+0x7c>)
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	4a19      	ldr	r2, [pc, #100]	@ (80012cc <HAL_MPU_ConfigRegion+0x7c>)
 8001266:	f023 0301 	bic.w	r3, r3, #1
 800126a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800126c:	4a17      	ldr	r2, [pc, #92]	@ (80012cc <HAL_MPU_ConfigRegion+0x7c>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	7b1b      	ldrb	r3, [r3, #12]
 8001278:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	7adb      	ldrb	r3, [r3, #11]
 800127e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001280:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	7a9b      	ldrb	r3, [r3, #10]
 8001286:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001288:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	7b5b      	ldrb	r3, [r3, #13]
 800128e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001290:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	7b9b      	ldrb	r3, [r3, #14]
 8001296:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001298:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	7bdb      	ldrb	r3, [r3, #15]
 800129e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7a5b      	ldrb	r3, [r3, #9]
 80012a6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7a1b      	ldrb	r3, [r3, #8]
 80012ae:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012b0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	7812      	ldrb	r2, [r2, #0]
 80012b6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012b8:	4a04      	ldr	r2, [pc, #16]	@ (80012cc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012ba:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012bc:	6113      	str	r3, [r2, #16]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed90 	.word	0xe000ed90

080012d0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80012d4:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <HAL_GetCurrentCPUID+0x20>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012dc:	2b70      	cmp	r3, #112	@ 0x70
 80012de:	d101      	bne.n	80012e4 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e000      	b.n	80012e6 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 80012e4:	2301      	movs	r3, #1
  }
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e0e3      	b.n	80014ce <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800130c:	2b00      	cmp	r3, #0
 800130e:	d106      	bne.n	800131e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2220      	movs	r2, #32
 8001314:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f003 fe59 	bl	8004fd0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	4b6e      	ldr	r3, [pc, #440]	@ (80014d8 <HAL_ETH_Init+0x1e4>)
 8001320:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001324:	4a6c      	ldr	r2, [pc, #432]	@ (80014d8 <HAL_ETH_Init+0x1e4>)
 8001326:	f043 0302 	orr.w	r3, r3, #2
 800132a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800132e:	4b6a      	ldr	r3, [pc, #424]	@ (80014d8 <HAL_ETH_Init+0x1e4>)
 8001330:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	7a1b      	ldrb	r3, [r3, #8]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d103      	bne.n	800134c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff fe57 	bl	8000ff8 <HAL_SYSCFG_ETHInterfaceSelect>
 800134a:	e003      	b.n	8001354 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800134c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001350:	f7ff fe52 	bl	8000ff8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001354:	4b61      	ldr	r3, [pc, #388]	@ (80014dc <HAL_ETH_Init+0x1e8>)
 8001356:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6812      	ldr	r2, [r2, #0]
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800136e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001370:	f7ff fe2a 	bl	8000fc8 <HAL_GetTick>
 8001374:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001376:	e011      	b.n	800139c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001378:	f7ff fe26 	bl	8000fc8 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001386:	d909      	bls.n	800139c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2204      	movs	r2, #4
 800138c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	22e0      	movs	r2, #224	@ 0xe0
 8001394:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e098      	b.n	80014ce <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1e4      	bne.n	8001378 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 ff32 	bl	8002218 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80013b4:	f002 feb0 	bl	8004118 <HAL_RCC_GetHCLKFreq>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4a49      	ldr	r2, [pc, #292]	@ (80014e0 <HAL_ETH_Init+0x1ec>)
 80013bc:	fba2 2303 	umull	r2, r3, r2, r3
 80013c0:	0c9a      	lsrs	r2, r3, #18
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	3a01      	subs	r2, #1
 80013c8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f001 f92f 	bl	8002630 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013da:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80013de:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80013ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013ee:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d009      	beq.n	8001412 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	22e0      	movs	r2, #224	@ 0xe0
 800140a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e05d      	b.n	80014ce <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800141a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800141e:	4b31      	ldr	r3, [pc, #196]	@ (80014e4 <HAL_ETH_Init+0x1f0>)
 8001420:	4013      	ands	r3, r2
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6952      	ldr	r2, [r2, #20]
 8001426:	0051      	lsls	r1, r2, #1
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	430b      	orrs	r3, r1
 800142e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001432:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f001 f997 	bl	800276a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f001 f9dd 	bl	80027fc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	3305      	adds	r3, #5
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	021a      	lsls	r2, r3, #8
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	3304      	adds	r3, #4
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	3303      	adds	r3, #3
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	061a      	lsls	r2, r3, #24
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	3302      	adds	r3, #2
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	041b      	lsls	r3, r3, #16
 8001474:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	3301      	adds	r3, #1
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001480:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800148e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001490:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <HAL_ETH_Init+0x1f4>)
 80014a2:	430b      	orrs	r3, r1
 80014a4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b0d      	ldr	r3, [pc, #52]	@ (80014ec <HAL_ETH_Init+0x1f8>)
 80014b6:	430b      	orrs	r3, r1
 80014b8:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2210      	movs	r2, #16
 80014c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	58024400 	.word	0x58024400
 80014dc:	58000400 	.word	0x58000400
 80014e0:	431bde83 	.word	0x431bde83
 80014e4:	ffff8001 	.word	0xffff8001
 80014e8:	0c020060 	.word	0x0c020060
 80014ec:	0c20c000 	.word	0x0c20c000

080014f0 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014fe:	2b10      	cmp	r3, #16
 8001500:	d165      	bne.n	80015ce <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2220      	movs	r2, #32
 8001506:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2204      	movs	r2, #4
 8001514:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 f9e4 	bl	80018e4 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001524:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001534:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001540:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001550:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800155c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8001568:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800156c:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f042 0201 	orr.w	r2, r2, #1
 8001580:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 0202 	orr.w	r2, r2, #2
 8001592:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0201 	orr.w	r2, r2, #1
 80015a2:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015ac:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 80015b8:	430b      	orrs	r3, r1
 80015ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015be:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2240      	movs	r2, #64	@ 0x40
 80015c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e000      	b.n	80015d0 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
  }
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015e6:	2b40      	cmp	r3, #64	@ 0x40
 80015e8:	d165      	bne.n	80016b6 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2220      	movs	r2, #32
 80015ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015fa:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4b30      	ldr	r3, [pc, #192]	@ (80016c4 <HAL_ETH_Stop_IT+0xec>)
 8001604:	400b      	ands	r3, r1
 8001606:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800160a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001616:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6812      	ldr	r2, [r2, #0]
 800161e:	f023 0301 	bic.w	r3, r3, #1
 8001622:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001626:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001632:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	f023 0301 	bic.w	r3, r3, #1
 800163e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001642:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 0201 	bic.w	r2, r2, #1
 8001654:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0201 	orr.w	r2, r2, #1
 8001666:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0202 	bic.w	r2, r2, #2
 8001678:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	e00e      	b.n	800169e <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	3212      	adds	r2, #18
 8001686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168a:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	3301      	adds	r3, #1
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	d9ed      	bls.n	8001680 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2210      	movs	r2, #16
 80016ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	e000      	b.n	80016b8 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
  }
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	ffff2f3e 	.word	0xffff2f3e

080016c8 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d109      	bne.n	80016ec <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016de:	f043 0201 	orr.w	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e03a      	b.n	8001762 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80016f2:	2b40      	cmp	r3, #64	@ 0x40
 80016f4:	d134      	bne.n	8001760 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80016fe:	2201      	movs	r2, #1
 8001700:	6839      	ldr	r1, [r7, #0]
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f001 f8d8 	bl	80028b8 <ETH_Prepare_Tx_Descriptors>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d009      	beq.n	8001722 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001714:	f043 0202 	orr.w	r2, r3, #2
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e01f      	b.n	8001762 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8001722:	f3bf 8f4f 	dsb	sy
}
 8001726:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	629a      	str	r2, [r3, #40]	@ 0x28
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001736:	2b03      	cmp	r3, #3
 8001738:	d904      	bls.n	8001744 <HAL_ETH_Transmit_IT+0x7c>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800173e:	1f1a      	subs	r2, r3, #4
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3106      	adds	r1, #6
 8001750:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001754:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001758:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 800175c:	2300      	movs	r3, #0
 800175e:	e000      	b.n	8001762 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
  }
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b088      	sub	sp, #32
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d109      	bne.n	8001796 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001788:	f043 0201 	orr.w	r2, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e0a2      	b.n	80018dc <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800179c:	2b40      	cmp	r3, #64	@ 0x40
 800179e:	d001      	beq.n	80017a4 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e09b      	b.n	80018dc <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	3212      	adds	r2, #18
 80017b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b4:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80017ba:	f1c3 0304 	rsb	r3, r3, #4
 80017be:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017c0:	e064      	b.n	800188c <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d007      	beq.n	80017de <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d103      	bne.n	80017f2 <HAL_ETH_ReadData+0x88>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d03a      	beq.n	8001868 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d005      	beq.n	800180a <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d005      	beq.n	8001832 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800182e:	2301      	movs	r3, #1
 8001830:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001842:	461a      	mov	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	b29b      	uxth	r3, r3
 8001848:	f003 fda4 	bl	8005394 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	441a      	add	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	3301      	adds	r3, #1
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	2b03      	cmp	r3, #3
 8001872:	d902      	bls.n	800187a <HAL_ETH_ReadData+0x110>
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	3b04      	subs	r3, #4
 8001878:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	3212      	adds	r2, #18
 8001880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001884:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3301      	adds	r3, #1
 800188a:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8001890:	2b00      	cmp	r3, #0
 8001892:	db06      	blt.n	80018a2 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	429a      	cmp	r2, r3
 800189a:	d202      	bcs.n	80018a2 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 800189c:	7cfb      	ldrb	r3, [r7, #19]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d08f      	beq.n	80017c2 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	441a      	add	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f814 	bl	80018e4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80018c2:	7cfb      	ldrb	r3, [r7, #19]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d108      	bne.n	80018da <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e000      	b.n	80018dc <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3720      	adds	r7, #32
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80018f0:	2301      	movs	r3, #1
 80018f2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80018f8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69fa      	ldr	r2, [r7, #28]
 80018fe:	3212      	adds	r2, #18
 8001900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001904:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800190a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800190c:	e038      	b.n	8001980 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d112      	bne.n	800193c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001916:	f107 0308 	add.w	r3, r7, #8
 800191a:	4618      	mov	r0, r3
 800191c:	f003 fd0a 	bl	8005334 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d102      	bne.n	800192c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001926:	2300      	movs	r3, #0
 8001928:	74fb      	strb	r3, [r7, #19]
 800192a:	e007      	b.n	800193c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	461a      	mov	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	461a      	mov	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 800193c:	7cfb      	ldrb	r3, [r7, #19]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d01e      	beq.n	8001980 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001946:	2b00      	cmp	r3, #0
 8001948:	d004      	beq.n	8001954 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	e003      	b.n	800195c <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 800195a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	3301      	adds	r3, #1
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	2b03      	cmp	r3, #3
 8001966:	d902      	bls.n	800196e <ETH_UpdateDescriptor+0x8a>
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	3b04      	subs	r3, #4
 800196c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	3212      	adds	r2, #18
 8001974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001978:	617b      	str	r3, [r7, #20]
      desccount--;
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	3b01      	subs	r3, #1
 800197e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <ETH_UpdateDescriptor+0xa8>
 8001986:	7cfb      	ldrb	r3, [r7, #19]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1c0      	bne.n	800190e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	429a      	cmp	r2, r3
 8001994:	d01b      	beq.n	80019ce <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3303      	adds	r3, #3
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80019a0:	f3bf 8f5f 	dmb	sy
}
 80019a4:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6919      	ldr	r1, [r3, #16]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4613      	mov	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	18ca      	adds	r2, r1, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019be:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80019ce:	bf00      	nop
 80019d0:	3720      	adds	r7, #32
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3318      	adds	r3, #24
 80019e2:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e8:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ee:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80019f0:	2301      	movs	r3, #1
 80019f2:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80019f4:	e047      	b.n	8001a86 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80019f6:	2301      	movs	r3, #1
 80019f8:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	3304      	adds	r3, #4
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10a      	bne.n	8001a26 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	3301      	adds	r3, #1
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	d902      	bls.n	8001a22 <HAL_ETH_ReleaseTxPacket+0x4c>
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	3b04      	subs	r3, #4
 8001a20:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001a26:	7bbb      	ldrb	r3, [r7, #14]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d02c      	beq.n	8001a86 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68d9      	ldr	r1, [r3, #12]
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4613      	mov	r3, r2
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	4413      	add	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	440b      	add	r3, r1
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	db1f      	blt.n	8001a82 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	3304      	adds	r3, #4
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f003 fd08 	bl	8005464 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	2200      	movs	r2, #0
 8001a60:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	3301      	adds	r3, #1
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d902      	bls.n	8001a74 <HAL_ETH_ReleaseTxPacket+0x9e>
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	3b04      	subs	r3, #4
 8001a72:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a80:	e001      	b.n	8001a86 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d002      	beq.n	8001a92 <HAL_ETH_ReleaseTxPacket+0xbc>
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1b1      	bne.n	80019f6 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001aac:	61fb      	str	r3, [r7, #28]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ab6:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001aba:	61bb      	str	r3, [r7, #24]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ac4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001ac8:	617b      	str	r3, [r7, #20]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8001aca:	4b77      	ldr	r3, [pc, #476]	@ (8001ca8 <HAL_ETH_IRQHandler+0x20c>)
 8001acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ace:	613b      	str	r3, [r7, #16]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
 8001ad0:	4b76      	ldr	r3, [pc, #472]	@ (8001cac <HAL_ETH_IRQHandler+0x210>)
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad4:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d010      	beq.n	8001b02 <HAL_ETH_IRQHandler+0x66>
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00b      	beq.n	8001b02 <HAL_ETH_IRQHandler+0x66>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001af2:	461a      	mov	r2, r3
 8001af4:	f248 0340 	movw	r3, #32832	@ 0x8040
 8001af8:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f002 ffa7 	bl	8004a50 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d010      	beq.n	8001b2e <HAL_ETH_IRQHandler+0x92>
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00b      	beq.n	8001b2e <HAL_ETH_IRQHandler+0x92>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b1e:	461a      	mov	r2, r3
 8001b20:	f248 0301 	movw	r3, #32769	@ 0x8001
 8001b24:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f002 ffa1 	bl	8004a70 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d047      	beq.n	8001bc8 <HAL_ETH_IRQHandler+0x12c>
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d042      	beq.n	8001bc8 <HAL_ETH_IRQHandler+0x12c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b48:	f043 0208 	orr.w	r2, r3, #8
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d01e      	beq.n	8001b9a <HAL_ETH_IRQHandler+0xfe>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b64:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8001b68:	f241 1302 	movw	r3, #4354	@ 0x1102
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b7c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001b88:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b8c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	22e0      	movs	r2, #224	@ 0xe0
 8001b94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001b98:	e013      	b.n	8001bc2 <HAL_ETH_IRQHandler+0x126>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ba2:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001ba6:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bb8:	461a      	mov	r2, r3
 8001bba:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8001bbe:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f002 ff64 	bl	8004a90 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d104      	bne.n	8001bdc <HAL_ETH_IRQHandler+0x140>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d019      	beq.n	8001c10 <HAL_ETH_IRQHandler+0x174>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001be2:	f043 0210 	orr.w	r2, r3, #16
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	22e0      	movs	r2, #224	@ 0xe0
 8001bfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f002 ff44 	bl	8004a90 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00f      	beq.n	8001c3a <HAL_ETH_IRQHandler+0x19e>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001c22:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f83f 	bl	8001cb0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	f003 0320 	and.w	r3, r3, #32
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00f      	beq.n	8001c64 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001c4c:	f003 020f 	and.w	r2, r3, #15
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f834 	bl	8001cc4 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001c64:	f7ff fb34 	bl	80012d0 <HAL_GetCurrentCPUID>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d10c      	bne.n	8001c88 <HAL_ETH_IRQHandler+0x1ec>
  {
    /* check ETH WAKEUP exti flag */
    if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d013      	beq.n	8001ca0 <HAL_ETH_IRQHandler+0x204>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001c78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <HAL_ETH_IRQHandler+0x20c>)
 8001c7a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001c7e:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f829 	bl	8001cd8 <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8001c86:	e00b      	b.n	8001ca0 <HAL_ETH_IRQHandler+0x204>
    if ((exti_d2_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d006      	beq.n	8001ca0 <HAL_ETH_IRQHandler+0x204>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_ETH_IRQHandler+0x210>)
 8001c94:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001c98:	629a      	str	r2, [r3, #40]	@ 0x28
      HAL_ETH_WakeUpCallback(heth);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f81c 	bl	8001cd8 <HAL_ETH_WakeUpCallback>
}
 8001ca0:	bf00      	nop
 8001ca2:	3720      	adds	r7, #32
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	58000080 	.word	0x58000080
 8001cac:	580000c0 	.word	0x580000c0

08001cb0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e03e      	b.n	8001d8c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d16:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	055b      	lsls	r3, r3, #21
 8001d22:	4313      	orrs	r3, r2
 8001d24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	041b      	lsls	r3, r3, #16
 8001d30:	4313      	orrs	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f043 030c 	orr.w	r3, r3, #12
 8001d3a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8001d4e:	f7ff f93b 	bl	8000fc8 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001d54:	e009      	b.n	8001d6a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001d56:	f7ff f937 	bl	8000fc8 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d64:	d901      	bls.n	8001d6a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e010      	b.n	8001d8c <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1ed      	bne.n	8001d56 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e03c      	b.n	8001e30 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001dbe:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	055b      	lsls	r3, r3, #21
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	041b      	lsls	r3, r3, #16
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f023 030c 	bic.w	r3, r3, #12
 8001de2:	f043 0304 	orr.w	r3, r3, #4
 8001de6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <HAL_ETH_WritePHYRegister+0xa4>)
 8001df6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001dfa:	4a0f      	ldr	r2, [pc, #60]	@ (8001e38 <HAL_ETH_WritePHYRegister+0xa4>)
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8001e02:	f7ff f8e1 	bl	8000fc8 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001e08:	e009      	b.n	8001e1e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001e0a:	f7ff f8dd 	bl	8000fc8 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e18:	d901      	bls.n	8001e1e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e008      	b.n	8001e30 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1ed      	bne.n	8001e0a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40028000 	.word	0x40028000

08001e3c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e1c3      	b.n	80021d8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 020c 	and.w	r2, r3, #12
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0310 	and.w	r3, r3, #16
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	bf14      	ite	ne
 8001e6c:	2301      	movne	r3, #1
 8001e6e:	2300      	moveq	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	bf0c      	ite	eq
 8001e96:	2301      	moveq	r3, #1
 8001e98:	2300      	movne	r3, #0
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bf14      	ite	ne
 8001eb2:	2301      	movne	r3, #1
 8001eb4:	2300      	moveq	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	bf0c      	ite	eq
 8001ecc:	2301      	moveq	r3, #1
 8001ece:	2300      	movne	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001ede:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	bf14      	ite	ne
 8001ee6:	2301      	movne	r3, #1
 8001ee8:	2300      	moveq	r3, #0
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	bf14      	ite	ne
 8001f00:	2301      	movne	r3, #1
 8001f02:	2300      	moveq	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	bf14      	ite	ne
 8001f36:	2301      	movne	r3, #1
 8001f38:	2300      	moveq	r3, #0
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	bf0c      	ite	eq
 8001f50:	2301      	moveq	r3, #1
 8001f52:	2300      	movne	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	bf0c      	ite	eq
 8001f6a:	2301      	moveq	r3, #1
 8001f6c:	2300      	movne	r3, #0
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf14      	ite	ne
 8001f84:	2301      	movne	r3, #1
 8001f86:	2300      	moveq	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	bf14      	ite	ne
 8001f9e:	2301      	movne	r3, #1
 8001fa0:	2300      	moveq	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bf14      	ite	ne
 8001fb8:	2301      	movne	r3, #1
 8001fba:	2300      	moveq	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8001fca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	bf14      	ite	ne
 8001fd2:	2301      	movne	r3, #1
 8001fd4:	2300      	moveq	r3, #0
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	bf14      	ite	ne
 8001ffa:	2301      	movne	r3, #1
 8001ffc:	2300      	moveq	r3, #0
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	461a      	mov	r2, r3
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800202c:	2b00      	cmp	r3, #0
 800202e:	bf0c      	ite	eq
 8002030:	2301      	moveq	r3, #1
 8002032:	2300      	movne	r3, #0
 8002034:	b2db      	uxtb	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002048:	2b00      	cmp	r3, #0
 800204a:	bf14      	ite	ne
 800204c:	2301      	movne	r3, #1
 800204e:	2300      	moveq	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	461a      	mov	r2, r3
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002060:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf14      	ite	ne
 8002068:	2301      	movne	r3, #1
 800206a:	2300      	moveq	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8002080:	2b00      	cmp	r3, #0
 8002082:	bf14      	ite	ne
 8002084:	2301      	movne	r3, #1
 8002086:	2300      	moveq	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	0e5b      	lsrs	r3, r3, #25
 800209a:	f003 021f 	and.w	r2, r3, #31
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	bf14      	ite	ne
 80020b0:	2301      	movne	r3, #1
 80020b2:	2300      	moveq	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 020f 	and.w	r2, r3, #15
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	bf14      	ite	ne
 80020da:	2301      	movne	r3, #1
 80020dc:	2300      	moveq	r3, #0
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	461a      	mov	r2, r3
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	bf0c      	ite	eq
 80020f6:	2301      	moveq	r3, #1
 80020f8:	2300      	movne	r3, #0
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	461a      	mov	r2, r3
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002118:	0c1b      	lsrs	r3, r3, #16
 800211a:	b29a      	uxth	r2, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf14      	ite	ne
 8002130:	2301      	movne	r3, #1
 8002132:	2300      	moveq	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	461a      	mov	r2, r3
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002146:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800214a:	2b00      	cmp	r3, #0
 800214c:	bf14      	ite	ne
 800214e:	2301      	movne	r3, #1
 8002150:	2300      	moveq	r3, #0
 8002152:	b2db      	uxtb	r3, r3
 8002154:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002164:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002174:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b00      	cmp	r3, #0
 800218a:	bf14      	ite	ne
 800218c:	2301      	movne	r3, #1
 800218e:	2300      	moveq	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80021a2:	f003 0310 	and.w	r3, r3, #16
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	bf14      	ite	ne
 80021aa:	2301      	movne	r3, #1
 80021ac:	2300      	moveq	r3, #0
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80021c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e00b      	b.n	8002210 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021fe:	2b10      	cmp	r3, #16
 8002200:	d105      	bne.n	800220e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002202:	6839      	ldr	r1, [r7, #0]
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f871 	bl	80022ec <ETH_SetMACConfig>

    return HAL_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	e000      	b.n	8002210 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
  }
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002228:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002230:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002232:	f001 ff71 	bl	8004118 <HAL_RCC_GetHCLKFreq>
 8002236:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4a1a      	ldr	r2, [pc, #104]	@ (80022a4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d804      	bhi.n	800224a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	e022      	b.n	8002290 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	4a16      	ldr	r2, [pc, #88]	@ (80022a8 <HAL_ETH_SetMDIOClockRange+0x90>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d204      	bcs.n	800225c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	e019      	b.n	8002290 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4a13      	ldr	r2, [pc, #76]	@ (80022ac <HAL_ETH_SetMDIOClockRange+0x94>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d915      	bls.n	8002290 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	4a12      	ldr	r2, [pc, #72]	@ (80022b0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d804      	bhi.n	8002276 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	e00c      	b.n	8002290 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	4a0e      	ldr	r2, [pc, #56]	@ (80022b4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d804      	bhi.n	8002288 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	e003      	b.n	8002290 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800228e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	02160ebf 	.word	0x02160ebf
 80022a8:	03938700 	.word	0x03938700
 80022ac:	05f5e0ff 	.word	0x05f5e0ff
 80022b0:	08f0d17f 	.word	0x08f0d17f
 80022b4:	0ee6b27f 	.word	0x0ee6b27f

080022b8 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80022fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	791b      	ldrb	r3, [r3, #4]
 8002304:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002306:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	7b1b      	ldrb	r3, [r3, #12]
 800230c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800230e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	7b5b      	ldrb	r3, [r3, #13]
 8002314:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002316:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	7b9b      	ldrb	r3, [r3, #14]
 800231c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800231e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	7bdb      	ldrb	r3, [r3, #15]
 8002324:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002326:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	7c12      	ldrb	r2, [r2, #16]
 800232c:	2a00      	cmp	r2, #0
 800232e:	d102      	bne.n	8002336 <ETH_SetMACConfig+0x4a>
 8002330:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002334:	e000      	b.n	8002338 <ETH_SetMACConfig+0x4c>
 8002336:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002338:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	7c52      	ldrb	r2, [r2, #17]
 800233e:	2a00      	cmp	r2, #0
 8002340:	d102      	bne.n	8002348 <ETH_SetMACConfig+0x5c>
 8002342:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002346:	e000      	b.n	800234a <ETH_SetMACConfig+0x5e>
 8002348:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800234a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	7c9b      	ldrb	r3, [r3, #18]
 8002350:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002352:	431a      	orrs	r2, r3
               macconf->Speed |
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002358:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800235e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	7f1b      	ldrb	r3, [r3, #28]
 8002364:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002366:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	7f5b      	ldrb	r3, [r3, #29]
 800236c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800236e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	7f92      	ldrb	r2, [r2, #30]
 8002374:	2a00      	cmp	r2, #0
 8002376:	d102      	bne.n	800237e <ETH_SetMACConfig+0x92>
 8002378:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800237c:	e000      	b.n	8002380 <ETH_SetMACConfig+0x94>
 800237e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002380:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	7fdb      	ldrb	r3, [r3, #31]
 8002386:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002388:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002390:	2a00      	cmp	r2, #0
 8002392:	d102      	bne.n	800239a <ETH_SetMACConfig+0xae>
 8002394:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002398:	e000      	b.n	800239c <ETH_SetMACConfig+0xb0>
 800239a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800239c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80023a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80023aa:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80023ac:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80023b2:	4313      	orrs	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b56      	ldr	r3, [pc, #344]	@ (8002518 <ETH_SetMACConfig+0x22c>)
 80023be:	4013      	ands	r3, r2
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	68f9      	ldr	r1, [r7, #12]
 80023c6:	430b      	orrs	r3, r1
 80023c8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ce:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023d6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80023d8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023e0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80023e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80023ea:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80023ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80023f4:	2a00      	cmp	r2, #0
 80023f6:	d102      	bne.n	80023fe <ETH_SetMACConfig+0x112>
 80023f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80023fc:	e000      	b.n	8002400 <ETH_SetMACConfig+0x114>
 80023fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002400:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002406:	4313      	orrs	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	4b42      	ldr	r3, [pc, #264]	@ (800251c <ETH_SetMACConfig+0x230>)
 8002412:	4013      	ands	r3, r2
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	68f9      	ldr	r1, [r7, #12]
 800241a:	430b      	orrs	r3, r1
 800241c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002424:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800242a:	4313      	orrs	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	4b3a      	ldr	r3, [pc, #232]	@ (8002520 <ETH_SetMACConfig+0x234>)
 8002436:	4013      	ands	r3, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	68f9      	ldr	r1, [r7, #12]
 800243e:	430b      	orrs	r3, r1
 8002440:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002448:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800244e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002456:	2a00      	cmp	r2, #0
 8002458:	d101      	bne.n	800245e <ETH_SetMACConfig+0x172>
 800245a:	2280      	movs	r2, #128	@ 0x80
 800245c:	e000      	b.n	8002460 <ETH_SetMACConfig+0x174>
 800245e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002460:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002466:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002468:	4313      	orrs	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002472:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002476:	4013      	ands	r3, r2
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	68f9      	ldr	r1, [r7, #12]
 800247e:	430b      	orrs	r3, r1
 8002480:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002488:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002490:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002492:	4313      	orrs	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800249e:	f023 0103 	bic.w	r1, r3, #3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80024b6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80024d2:	2a00      	cmp	r2, #0
 80024d4:	d101      	bne.n	80024da <ETH_SetMACConfig+0x1ee>
 80024d6:	2240      	movs	r2, #64	@ 0x40
 80024d8:	e000      	b.n	80024dc <ETH_SetMACConfig+0x1f0>
 80024da:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80024dc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80024e4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80024e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80024ee:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80024f0:	4313      	orrs	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80024fc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	430a      	orrs	r2, r1
 8002508:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	00048083 	.word	0x00048083
 800251c:	c0f88000 	.word	0xc0f88000
 8002520:	fffffef0 	.word	0xfffffef0

08002524 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4b38      	ldr	r3, [pc, #224]	@ (800261c <ETH_SetDMAConfig+0xf8>)
 800253a:	4013      	ands	r3, r2
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	6811      	ldr	r1, [r2, #0]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	430b      	orrs	r3, r1
 8002546:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800254a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	791b      	ldrb	r3, [r3, #4]
 8002550:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002556:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	7b1b      	ldrb	r3, [r3, #12]
 800255c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	4b2c      	ldr	r3, [pc, #176]	@ (8002620 <ETH_SetDMAConfig+0xfc>)
 800256e:	4013      	ands	r3, r2
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	68f9      	ldr	r1, [r7, #12]
 8002576:	430b      	orrs	r3, r1
 8002578:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800257c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	7b5b      	ldrb	r3, [r3, #13]
 8002582:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002588:	4313      	orrs	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002594:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002598:	4b22      	ldr	r3, [pc, #136]	@ (8002624 <ETH_SetDMAConfig+0x100>)
 800259a:	4013      	ands	r3, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	68f9      	ldr	r1, [r7, #12]
 80025a2:	430b      	orrs	r3, r1
 80025a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025a8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	7d1b      	ldrb	r3, [r3, #20]
 80025b4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80025b6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	7f5b      	ldrb	r3, [r3, #29]
 80025bc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80025be:	4313      	orrs	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80025ce:	4b16      	ldr	r3, [pc, #88]	@ (8002628 <ETH_SetDMAConfig+0x104>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	68f9      	ldr	r1, [r7, #12]
 80025d8:	430b      	orrs	r3, r1
 80025da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025de:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	7f1b      	ldrb	r3, [r3, #28]
 80025e6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80025ec:	4313      	orrs	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025f8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80025fc:	4b0b      	ldr	r3, [pc, #44]	@ (800262c <ETH_SetDMAConfig+0x108>)
 80025fe:	4013      	ands	r3, r2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	68f9      	ldr	r1, [r7, #12]
 8002606:	430b      	orrs	r3, r1
 8002608:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800260c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002610:	bf00      	nop
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	ffff87fd 	.word	0xffff87fd
 8002620:	ffff2ffe 	.word	0xffff2ffe
 8002624:	fffec000 	.word	0xfffec000
 8002628:	ffc0efef 	.word	0xffc0efef
 800262c:	7fc0ffff 	.word	0x7fc0ffff

08002630 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b0a4      	sub	sp, #144	@ 0x90
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002638:	2301      	movs	r3, #1
 800263a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800263e:	2300      	movs	r3, #0
 8002640:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002642:	2300      	movs	r3, #0
 8002644:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002648:	2300      	movs	r3, #0
 800264a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800264e:	2301      	movs	r3, #1
 8002650:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002654:	2301      	movs	r3, #1
 8002656:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800265a:	2301      	movs	r3, #1
 800265c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002660:	2300      	movs	r3, #0
 8002662:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002666:	2301      	movs	r3, #1
 8002668:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800266c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002670:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002672:	2300      	movs	r3, #0
 8002674:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002678:	2300      	movs	r3, #0
 800267a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800267c:	2300      	movs	r3, #0
 800267e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002682:	2300      	movs	r3, #0
 8002684:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002688:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800268c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800268e:	2300      	movs	r3, #0
 8002690:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002694:	2300      	movs	r3, #0
 8002696:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002698:	2301      	movs	r3, #1
 800269a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800269e:	2300      	movs	r3, #0
 80026a0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80026aa:	2300      	movs	r3, #0
 80026ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80026b2:	2300      	movs	r3, #0
 80026b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80026bc:	2300      	movs	r3, #0
 80026be:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80026c2:	2301      	movs	r3, #1
 80026c4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80026c8:	2320      	movs	r3, #32
 80026ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80026ce:	2301      	movs	r3, #1
 80026d0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80026da:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80026de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80026e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80026e4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80026ec:	2302      	movs	r3, #2
 80026ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80026fe:	2300      	movs	r3, #0
 8002700:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002704:	2301      	movs	r3, #1
 8002706:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800270a:	2300      	movs	r3, #0
 800270c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800270e:	2301      	movs	r3, #1
 8002710:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002714:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002718:	4619      	mov	r1, r3
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff fde6 	bl	80022ec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002720:	2301      	movs	r3, #1
 8002722:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002724:	2301      	movs	r3, #1
 8002726:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002728:	2300      	movs	r3, #0
 800272a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800272c:	2300      	movs	r3, #0
 800272e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002732:	2300      	movs	r3, #0
 8002734:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002736:	2300      	movs	r3, #0
 8002738:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800273a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800273e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002740:	2300      	movs	r3, #0
 8002742:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002744:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002748:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800274a:	2300      	movs	r3, #0
 800274c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002750:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002754:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002756:	f107 0308 	add.w	r3, r7, #8
 800275a:	4619      	mov	r1, r3
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff fee1 	bl	8002524 <ETH_SetDMAConfig>
}
 8002762:	bf00      	nop
 8002764:	3790      	adds	r7, #144	@ 0x90
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800276a:	b480      	push	{r7}
 800276c:	b085      	sub	sp, #20
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	e01d      	b.n	80027b4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68d9      	ldr	r1, [r3, #12]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4613      	mov	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	440b      	add	r3, r1
 8002788:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2200      	movs	r2, #0
 8002794:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2200      	movs	r2, #0
 800279a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2200      	movs	r2, #0
 80027a0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80027a2:	68b9      	ldr	r1, [r7, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	3206      	adds	r2, #6
 80027aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	3301      	adds	r3, #1
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d9de      	bls.n	8002778 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027c8:	461a      	mov	r2, r3
 80027ca:	2303      	movs	r3, #3
 80027cc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027dc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027ec:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80027f0:	bf00      	nop
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	e023      	b.n	8002852 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6919      	ldr	r1, [r3, #16]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4613      	mov	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	440b      	add	r3, r1
 800281a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2200      	movs	r2, #0
 8002826:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2200      	movs	r2, #0
 8002832:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2200      	movs	r2, #0
 8002838:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2200      	movs	r2, #0
 800283e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002840:	68b9      	ldr	r1, [r7, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	3212      	adds	r2, #18
 8002848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	3301      	adds	r3, #1
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b03      	cmp	r3, #3
 8002856:	d9d8      	bls.n	800280a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800287e:	461a      	mov	r2, r3
 8002880:	2303      	movs	r3, #3
 8002882:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691a      	ldr	r2, [r3, #16]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002892:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028a6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80028aa:	bf00      	nop
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b091      	sub	sp, #68	@ 0x44
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	3318      	adds	r3, #24
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80028ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e2:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80028ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80028f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028fa:	d007      	beq.n	800290c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80028fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002900:	3304      	adds	r3, #4
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800290c:	2302      	movs	r3, #2
 800290e:	e266      	b.n	8002dde <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d044      	beq.n	80029a6 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800291c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	4b75      	ldr	r3, [pc, #468]	@ (8002af8 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002922:	4013      	ands	r3, r2
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002928:	431a      	orrs	r2, r3
 800292a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800292c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800292e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002938:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002948:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d027      	beq.n	80029a6 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	b29a      	uxth	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002960:	041b      	lsls	r3, r3, #16
 8002962:	431a      	orrs	r2, r3
 8002964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002966:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002972:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002980:	431a      	orrs	r2, r3
 8002982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002984:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002994:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80029a4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00e      	beq.n	80029d0 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80029b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	4b51      	ldr	r3, [pc, #324]	@ (8002afc <ETH_Prepare_Tx_Descriptors+0x244>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	6992      	ldr	r2, [r2, #24]
 80029be:	431a      	orrs	r2, r3
 80029c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c2:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80029c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80029cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ce:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d105      	bne.n	80029e8 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d036      	beq.n	8002a56 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80029e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80029f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80029f4:	f3bf 8f5f 	dmb	sy
}
 80029f8:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80029fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a04:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a08:	3301      	adds	r3, #1
 8002a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d902      	bls.n	8002a18 <ETH_Prepare_Tx_Descriptors+0x160>
 8002a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a14:	3b04      	subs	r3, #4
 8002a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a20:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8002a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a24:	3301      	adds	r3, #1
 8002a26:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a34:	d10f      	bne.n	8002a56 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	6a3a      	ldr	r2, [r7, #32]
 8002a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a3e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002a40:	f3bf 8f5f 	dmb	sy
}
 8002a44:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a50:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002a52:	2302      	movs	r3, #2
 8002a54:	e1c3      	b.n	8002dde <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a58:	3301      	adds	r3, #1
 8002a5a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a64:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	4b24      	ldr	r3, [pc, #144]	@ (8002afc <ETH_Prepare_Tx_Descriptors+0x244>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a70:	6852      	ldr	r2, [r2, #4]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a76:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d012      	beq.n	8002aa6 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	4b1a      	ldr	r3, [pc, #104]	@ (8002b00 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a9a:	6852      	ldr	r2, [r2, #4]
 8002a9c:	0412      	lsls	r2, r2, #16
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	e008      	b.n	8002ab8 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	4b13      	ldr	r3, [pc, #76]	@ (8002b00 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ab6:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d021      	beq.n	8002b08 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	04db      	lsls	r3, r3, #19
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad6:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	4b09      	ldr	r3, [pc, #36]	@ (8002b04 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	69d2      	ldr	r2, [r2, #28]
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae8:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	e02e      	b.n	8002b56 <ETH_Prepare_Tx_Descriptors+0x29e>
 8002af8:	ffff0000 	.word	0xffff0000
 8002afc:	ffffc000 	.word	0xffffc000
 8002b00:	c000ffff 	.word	0xc000ffff
 8002b04:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	4b7b      	ldr	r3, [pc, #492]	@ (8002cfc <ETH_Prepare_Tx_Descriptors+0x444>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	6852      	ldr	r2, [r2, #4]
 8002b14:	431a      	orrs	r2, r3
 8002b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b18:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d008      	beq.n	8002b38 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b36:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0320 	and.w	r3, r3, #32
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	431a      	orrs	r2, r3
 8002b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b54:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d008      	beq.n	8002b74 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b72:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b8a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b8c:	f3bf 8f5f 	dmb	sy
}
 8002b90:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9c:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 80da 	beq.w	8002d60 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bbc:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002bbe:	e0cf      	b.n	8002d60 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bca:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bce:	3301      	adds	r3, #1
 8002bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d902      	bls.n	8002bde <ETH_Prepare_Tx_Descriptors+0x326>
 8002bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bda:	3b04      	subs	r3, #4
 8002bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf2:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c00:	d007      	beq.n	8002c12 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c06:	3304      	adds	r3, #4
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d029      	beq.n	8002c66 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c1e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002c20:	2300      	movs	r3, #0
 8002c22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c24:	e019      	b.n	8002c5a <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002c26:	f3bf 8f5f 	dmb	sy
}
 8002c2a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c36:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d902      	bls.n	8002c4a <ETH_Prepare_Tx_Descriptors+0x392>
 8002c44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c46:	3b04      	subs	r3, #4
 8002c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c52:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c56:	3301      	adds	r3, #1
 8002c58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d3e1      	bcc.n	8002c26 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002c62:	2302      	movs	r3, #2
 8002c64:	e0bb      	b.n	8002dde <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8002c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c68:	3301      	adds	r3, #1
 8002c6a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c7a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	4b1f      	ldr	r3, [pc, #124]	@ (8002d00 <ETH_Prepare_Tx_Descriptors+0x448>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c86:	6852      	ldr	r2, [r2, #4]
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c8c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d012      	beq.n	8002cbc <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	4b16      	ldr	r3, [pc, #88]	@ (8002d04 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cb0:	6852      	ldr	r2, [r2, #4]
 8002cb2:	0412      	lsls	r2, r2, #16
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb8:	609a      	str	r2, [r3, #8]
 8002cba:	e008      	b.n	8002cce <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d04 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ccc:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d018      	beq.n	8002d0c <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	4b0a      	ldr	r3, [pc, #40]	@ (8002d08 <ETH_Prepare_Tx_Descriptors+0x450>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	69d2      	ldr	r2, [r2, #28]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cea:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf6:	60da      	str	r2, [r3, #12]
 8002cf8:	e020      	b.n	8002d3c <ETH_Prepare_Tx_Descriptors+0x484>
 8002cfa:	bf00      	nop
 8002cfc:	ffff8000 	.word	0xffff8000
 8002d00:	ffffc000 	.word	0xffffc000
 8002d04:	c000ffff 	.word	0xc000ffff
 8002d08:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	4b36      	ldr	r3, [pc, #216]	@ (8002dec <ETH_Prepare_Tx_Descriptors+0x534>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	6852      	ldr	r2, [r2, #4]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d1c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d008      	beq.n	8002d3c <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	431a      	orrs	r2, r3
 8002d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d3e:	3301      	adds	r3, #1
 8002d40:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002d42:	f3bf 8f5f 	dmb	sy
}
 8002d46:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d52:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d5e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f47f af2b 	bne.w	8002bc0 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d006      	beq.n	8002d7e <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	e005      	b.n	8002d8a <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d88:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d94:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d9e:	3304      	adds	r3, #4
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002daa:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dac:	f3ef 8310 	mrs	r3, PRIMASK
 8002db0:	61bb      	str	r3, [r7, #24]
  return(result);
 8002db2:	69bb      	ldr	r3, [r7, #24]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002db4:	61fb      	str	r3, [r7, #28]
 8002db6:	2301      	movs	r3, #1
 8002db8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f383 8810 	msr	PRIMASK, r3
}
 8002dc0:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc8:	4413      	add	r3, r2
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dce:	629a      	str	r2, [r3, #40]	@ 0x28
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f383 8810 	msr	PRIMASK, r3
}
 8002dda:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3744      	adds	r7, #68	@ 0x44
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	ffff8000 	.word	0xffff8000

08002df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b089      	sub	sp, #36	@ 0x24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002dfe:	4b89      	ldr	r3, [pc, #548]	@ (8003024 <HAL_GPIO_Init+0x234>)
 8002e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e02:	e194      	b.n	800312e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	2101      	movs	r1, #1
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e10:	4013      	ands	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 8186 	beq.w	8003128 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d005      	beq.n	8002e34 <HAL_GPIO_Init+0x44>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d130      	bne.n	8002e96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	2203      	movs	r2, #3
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4013      	ands	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	091b      	lsrs	r3, r3, #4
 8002e80:	f003 0201 	and.w	r2, r3, #1
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d017      	beq.n	8002ed2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	2203      	movs	r2, #3
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d123      	bne.n	8002f26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	08da      	lsrs	r2, r3, #3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3208      	adds	r2, #8
 8002ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	220f      	movs	r2, #15
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	691a      	ldr	r2, [r3, #16]
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	08da      	lsrs	r2, r3, #3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3208      	adds	r2, #8
 8002f20:	69b9      	ldr	r1, [r7, #24]
 8002f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	2203      	movs	r2, #3
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 0203 	and.w	r2, r3, #3
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 80e0 	beq.w	8003128 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f68:	4b2f      	ldr	r3, [pc, #188]	@ (8003028 <HAL_GPIO_Init+0x238>)
 8002f6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002f6e:	4a2e      	ldr	r2, [pc, #184]	@ (8003028 <HAL_GPIO_Init+0x238>)
 8002f70:	f043 0302 	orr.w	r3, r3, #2
 8002f74:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002f78:	4b2b      	ldr	r3, [pc, #172]	@ (8003028 <HAL_GPIO_Init+0x238>)
 8002f7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f86:	4a29      	ldr	r2, [pc, #164]	@ (800302c <HAL_GPIO_Init+0x23c>)
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	089b      	lsrs	r3, r3, #2
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	220f      	movs	r2, #15
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a20      	ldr	r2, [pc, #128]	@ (8003030 <HAL_GPIO_Init+0x240>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d052      	beq.n	8003058 <HAL_GPIO_Init+0x268>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8003034 <HAL_GPIO_Init+0x244>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d031      	beq.n	800301e <HAL_GPIO_Init+0x22e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8003038 <HAL_GPIO_Init+0x248>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d02b      	beq.n	800301a <HAL_GPIO_Init+0x22a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800303c <HAL_GPIO_Init+0x24c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d025      	beq.n	8003016 <HAL_GPIO_Init+0x226>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8003040 <HAL_GPIO_Init+0x250>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d01f      	beq.n	8003012 <HAL_GPIO_Init+0x222>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8003044 <HAL_GPIO_Init+0x254>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d019      	beq.n	800300e <HAL_GPIO_Init+0x21e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8003048 <HAL_GPIO_Init+0x258>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d013      	beq.n	800300a <HAL_GPIO_Init+0x21a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a19      	ldr	r2, [pc, #100]	@ (800304c <HAL_GPIO_Init+0x25c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d00d      	beq.n	8003006 <HAL_GPIO_Init+0x216>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a18      	ldr	r2, [pc, #96]	@ (8003050 <HAL_GPIO_Init+0x260>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d007      	beq.n	8003002 <HAL_GPIO_Init+0x212>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a17      	ldr	r2, [pc, #92]	@ (8003054 <HAL_GPIO_Init+0x264>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d101      	bne.n	8002ffe <HAL_GPIO_Init+0x20e>
 8002ffa:	2309      	movs	r3, #9
 8002ffc:	e02d      	b.n	800305a <HAL_GPIO_Init+0x26a>
 8002ffe:	230a      	movs	r3, #10
 8003000:	e02b      	b.n	800305a <HAL_GPIO_Init+0x26a>
 8003002:	2308      	movs	r3, #8
 8003004:	e029      	b.n	800305a <HAL_GPIO_Init+0x26a>
 8003006:	2307      	movs	r3, #7
 8003008:	e027      	b.n	800305a <HAL_GPIO_Init+0x26a>
 800300a:	2306      	movs	r3, #6
 800300c:	e025      	b.n	800305a <HAL_GPIO_Init+0x26a>
 800300e:	2305      	movs	r3, #5
 8003010:	e023      	b.n	800305a <HAL_GPIO_Init+0x26a>
 8003012:	2304      	movs	r3, #4
 8003014:	e021      	b.n	800305a <HAL_GPIO_Init+0x26a>
 8003016:	2303      	movs	r3, #3
 8003018:	e01f      	b.n	800305a <HAL_GPIO_Init+0x26a>
 800301a:	2302      	movs	r3, #2
 800301c:	e01d      	b.n	800305a <HAL_GPIO_Init+0x26a>
 800301e:	2301      	movs	r3, #1
 8003020:	e01b      	b.n	800305a <HAL_GPIO_Init+0x26a>
 8003022:	bf00      	nop
 8003024:	58000080 	.word	0x58000080
 8003028:	58024400 	.word	0x58024400
 800302c:	58000400 	.word	0x58000400
 8003030:	58020000 	.word	0x58020000
 8003034:	58020400 	.word	0x58020400
 8003038:	58020800 	.word	0x58020800
 800303c:	58020c00 	.word	0x58020c00
 8003040:	58021000 	.word	0x58021000
 8003044:	58021400 	.word	0x58021400
 8003048:	58021800 	.word	0x58021800
 800304c:	58021c00 	.word	0x58021c00
 8003050:	58022000 	.word	0x58022000
 8003054:	58022400 	.word	0x58022400
 8003058:	2300      	movs	r3, #0
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	f002 0203 	and.w	r2, r2, #3
 8003060:	0092      	lsls	r2, r2, #2
 8003062:	4093      	lsls	r3, r2
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4313      	orrs	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800306a:	4938      	ldr	r1, [pc, #224]	@ (800314c <HAL_GPIO_Init+0x35c>)
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	089b      	lsrs	r3, r3, #2
 8003070:	3302      	adds	r3, #2
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003078:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	43db      	mvns	r3, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4013      	ands	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800309e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80030a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	43db      	mvns	r3, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80030cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	43db      	mvns	r3, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4013      	ands	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	3301      	adds	r3, #1
 800312c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	fa22 f303 	lsr.w	r3, r2, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	f47f ae63 	bne.w	8002e04 <HAL_GPIO_Init+0x14>
  }
}
 800313e:	bf00      	nop
 8003140:	bf00      	nop
 8003142:	3724      	adds	r7, #36	@ 0x24
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	58000400 	.word	0x58000400

08003150 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003158:	4b29      	ldr	r3, [pc, #164]	@ (8003200 <HAL_PWREx_ConfigSupply+0xb0>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	2b06      	cmp	r3, #6
 8003162:	d00a      	beq.n	800317a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003164:	4b26      	ldr	r3, [pc, #152]	@ (8003200 <HAL_PWREx_ConfigSupply+0xb0>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	429a      	cmp	r2, r3
 8003170:	d001      	beq.n	8003176 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e040      	b.n	80031f8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	e03e      	b.n	80031f8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800317a:	4b21      	ldr	r3, [pc, #132]	@ (8003200 <HAL_PWREx_ConfigSupply+0xb0>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003182:	491f      	ldr	r1, [pc, #124]	@ (8003200 <HAL_PWREx_ConfigSupply+0xb0>)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4313      	orrs	r3, r2
 8003188:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800318a:	f7fd ff1d 	bl	8000fc8 <HAL_GetTick>
 800318e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003190:	e009      	b.n	80031a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003192:	f7fd ff19 	bl	8000fc8 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031a0:	d901      	bls.n	80031a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e028      	b.n	80031f8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031a6:	4b16      	ldr	r3, [pc, #88]	@ (8003200 <HAL_PWREx_ConfigSupply+0xb0>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031b2:	d1ee      	bne.n	8003192 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b1e      	cmp	r3, #30
 80031b8:	d008      	beq.n	80031cc <HAL_PWREx_ConfigSupply+0x7c>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80031be:	d005      	beq.n	80031cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b1d      	cmp	r3, #29
 80031c4:	d002      	beq.n	80031cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b2d      	cmp	r3, #45	@ 0x2d
 80031ca:	d114      	bne.n	80031f6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80031cc:	f7fd fefc 	bl	8000fc8 <HAL_GetTick>
 80031d0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80031d2:	e009      	b.n	80031e8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80031d4:	f7fd fef8 	bl	8000fc8 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031e2:	d901      	bls.n	80031e8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e007      	b.n	80031f8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80031e8:	4b05      	ldr	r3, [pc, #20]	@ (8003200 <HAL_PWREx_ConfigSupply+0xb0>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031f4:	d1ee      	bne.n	80031d4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	58024800 	.word	0x58024800

08003204 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08c      	sub	sp, #48	@ 0x30
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d102      	bne.n	8003218 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	f000 bc48 	b.w	8003aa8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 8088 	beq.w	8003336 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003226:	4b99      	ldr	r3, [pc, #612]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800322e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003230:	4b96      	ldr	r3, [pc, #600]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 8003232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003234:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003238:	2b10      	cmp	r3, #16
 800323a:	d007      	beq.n	800324c <HAL_RCC_OscConfig+0x48>
 800323c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800323e:	2b18      	cmp	r3, #24
 8003240:	d111      	bne.n	8003266 <HAL_RCC_OscConfig+0x62>
 8003242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d10c      	bne.n	8003266 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324c:	4b8f      	ldr	r3, [pc, #572]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d06d      	beq.n	8003334 <HAL_RCC_OscConfig+0x130>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d169      	bne.n	8003334 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	f000 bc21 	b.w	8003aa8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800326e:	d106      	bne.n	800327e <HAL_RCC_OscConfig+0x7a>
 8003270:	4b86      	ldr	r3, [pc, #536]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a85      	ldr	r2, [pc, #532]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 8003276:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	e02e      	b.n	80032dc <HAL_RCC_OscConfig+0xd8>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10c      	bne.n	80032a0 <HAL_RCC_OscConfig+0x9c>
 8003286:	4b81      	ldr	r3, [pc, #516]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a80      	ldr	r2, [pc, #512]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 800328c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	4b7e      	ldr	r3, [pc, #504]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a7d      	ldr	r2, [pc, #500]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 8003298:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	e01d      	b.n	80032dc <HAL_RCC_OscConfig+0xd8>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032a8:	d10c      	bne.n	80032c4 <HAL_RCC_OscConfig+0xc0>
 80032aa:	4b78      	ldr	r3, [pc, #480]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a77      	ldr	r2, [pc, #476]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 80032b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	4b75      	ldr	r3, [pc, #468]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a74      	ldr	r2, [pc, #464]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 80032bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	e00b      	b.n	80032dc <HAL_RCC_OscConfig+0xd8>
 80032c4:	4b71      	ldr	r3, [pc, #452]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a70      	ldr	r2, [pc, #448]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 80032ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	4b6e      	ldr	r3, [pc, #440]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a6d      	ldr	r2, [pc, #436]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 80032d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d013      	beq.n	800330c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fd fe70 	bl	8000fc8 <HAL_GetTick>
 80032e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ec:	f7fd fe6c 	bl	8000fc8 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	@ 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e3d4      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032fe:	4b63      	ldr	r3, [pc, #396]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0xe8>
 800330a:	e014      	b.n	8003336 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330c:	f7fd fe5c 	bl	8000fc8 <HAL_GetTick>
 8003310:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003314:	f7fd fe58 	bl	8000fc8 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b64      	cmp	r3, #100	@ 0x64
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e3c0      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003326:	4b59      	ldr	r3, [pc, #356]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x110>
 8003332:	e000      	b.n	8003336 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 80ca 	beq.w	80034d8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003344:	4b51      	ldr	r3, [pc, #324]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800334c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800334e:	4b4f      	ldr	r3, [pc, #316]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 8003350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003352:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d007      	beq.n	800336a <HAL_RCC_OscConfig+0x166>
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	2b18      	cmp	r3, #24
 800335e:	d156      	bne.n	800340e <HAL_RCC_OscConfig+0x20a>
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d151      	bne.n	800340e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800336a:	4b48      	ldr	r3, [pc, #288]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	d005      	beq.n	8003382 <HAL_RCC_OscConfig+0x17e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e392      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003382:	4b42      	ldr	r3, [pc, #264]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f023 0219 	bic.w	r2, r3, #25
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	493f      	ldr	r1, [pc, #252]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 8003390:	4313      	orrs	r3, r2
 8003392:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003394:	f7fd fe18 	bl	8000fc8 <HAL_GetTick>
 8003398:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800339c:	f7fd fe14 	bl	8000fc8 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e37c      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033ae:	4b37      	ldr	r3, [pc, #220]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ba:	f7fd fe11 	bl	8000fe0 <HAL_GetREVID>
 80033be:	4603      	mov	r3, r0
 80033c0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d817      	bhi.n	80033f8 <HAL_RCC_OscConfig+0x1f4>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	2b40      	cmp	r3, #64	@ 0x40
 80033ce:	d108      	bne.n	80033e2 <HAL_RCC_OscConfig+0x1de>
 80033d0:	4b2e      	ldr	r3, [pc, #184]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80033d8:	4a2c      	ldr	r2, [pc, #176]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 80033da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033de:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033e0:	e07a      	b.n	80034d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e2:	4b2a      	ldr	r3, [pc, #168]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	031b      	lsls	r3, r3, #12
 80033f0:	4926      	ldr	r1, [pc, #152]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033f6:	e06f      	b.n	80034d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f8:	4b24      	ldr	r3, [pc, #144]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	061b      	lsls	r3, r3, #24
 8003406:	4921      	ldr	r1, [pc, #132]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 8003408:	4313      	orrs	r3, r2
 800340a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800340c:	e064      	b.n	80034d8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d047      	beq.n	80034a6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003416:	4b1d      	ldr	r3, [pc, #116]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 0219 	bic.w	r2, r3, #25
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	491a      	ldr	r1, [pc, #104]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 8003424:	4313      	orrs	r3, r2
 8003426:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7fd fdce 	bl	8000fc8 <HAL_GetTick>
 800342c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003430:	f7fd fdca 	bl	8000fc8 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e332      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003442:	4b12      	ldr	r3, [pc, #72]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344e:	f7fd fdc7 	bl	8000fe0 <HAL_GetREVID>
 8003452:	4603      	mov	r3, r0
 8003454:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003458:	4293      	cmp	r3, r2
 800345a:	d819      	bhi.n	8003490 <HAL_RCC_OscConfig+0x28c>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	2b40      	cmp	r3, #64	@ 0x40
 8003462:	d108      	bne.n	8003476 <HAL_RCC_OscConfig+0x272>
 8003464:	4b09      	ldr	r3, [pc, #36]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800346c:	4a07      	ldr	r2, [pc, #28]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 800346e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003472:	6053      	str	r3, [r2, #4]
 8003474:	e030      	b.n	80034d8 <HAL_RCC_OscConfig+0x2d4>
 8003476:	4b05      	ldr	r3, [pc, #20]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	031b      	lsls	r3, r3, #12
 8003484:	4901      	ldr	r1, [pc, #4]	@ (800348c <HAL_RCC_OscConfig+0x288>)
 8003486:	4313      	orrs	r3, r2
 8003488:	604b      	str	r3, [r1, #4]
 800348a:	e025      	b.n	80034d8 <HAL_RCC_OscConfig+0x2d4>
 800348c:	58024400 	.word	0x58024400
 8003490:	4b9a      	ldr	r3, [pc, #616]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	061b      	lsls	r3, r3, #24
 800349e:	4997      	ldr	r1, [pc, #604]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]
 80034a4:	e018      	b.n	80034d8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034a6:	4b95      	ldr	r3, [pc, #596]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a94      	ldr	r2, [pc, #592]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 80034ac:	f023 0301 	bic.w	r3, r3, #1
 80034b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b2:	f7fd fd89 	bl	8000fc8 <HAL_GetTick>
 80034b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ba:	f7fd fd85 	bl	8000fc8 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e2ed      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034cc:	4b8b      	ldr	r3, [pc, #556]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1f0      	bne.n	80034ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80a9 	beq.w	8003638 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034e6:	4b85      	ldr	r3, [pc, #532]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034f0:	4b82      	ldr	r3, [pc, #520]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 80034f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d007      	beq.n	800350c <HAL_RCC_OscConfig+0x308>
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	2b18      	cmp	r3, #24
 8003500:	d13a      	bne.n	8003578 <HAL_RCC_OscConfig+0x374>
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f003 0303 	and.w	r3, r3, #3
 8003508:	2b01      	cmp	r3, #1
 800350a:	d135      	bne.n	8003578 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800350c:	4b7b      	ldr	r3, [pc, #492]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_RCC_OscConfig+0x320>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	2b80      	cmp	r3, #128	@ 0x80
 800351e:	d001      	beq.n	8003524 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e2c1      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003524:	f7fd fd5c 	bl	8000fe0 <HAL_GetREVID>
 8003528:	4603      	mov	r3, r0
 800352a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800352e:	4293      	cmp	r3, r2
 8003530:	d817      	bhi.n	8003562 <HAL_RCC_OscConfig+0x35e>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	2b20      	cmp	r3, #32
 8003538:	d108      	bne.n	800354c <HAL_RCC_OscConfig+0x348>
 800353a:	4b70      	ldr	r3, [pc, #448]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003542:	4a6e      	ldr	r2, [pc, #440]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 8003544:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003548:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800354a:	e075      	b.n	8003638 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800354c:	4b6b      	ldr	r3, [pc, #428]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	069b      	lsls	r3, r3, #26
 800355a:	4968      	ldr	r1, [pc, #416]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 800355c:	4313      	orrs	r3, r2
 800355e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003560:	e06a      	b.n	8003638 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003562:	4b66      	ldr	r3, [pc, #408]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	061b      	lsls	r3, r3, #24
 8003570:	4962      	ldr	r1, [pc, #392]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 8003572:	4313      	orrs	r3, r2
 8003574:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003576:	e05f      	b.n	8003638 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d042      	beq.n	8003606 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003580:	4b5e      	ldr	r3, [pc, #376]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a5d      	ldr	r2, [pc, #372]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 8003586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800358a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fd fd1c 	bl	8000fc8 <HAL_GetTick>
 8003590:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003594:	f7fd fd18 	bl	8000fc8 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e280      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035a6:	4b55      	ldr	r3, [pc, #340]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035b2:	f7fd fd15 	bl	8000fe0 <HAL_GetREVID>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80035bc:	4293      	cmp	r3, r2
 80035be:	d817      	bhi.n	80035f0 <HAL_RCC_OscConfig+0x3ec>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d108      	bne.n	80035da <HAL_RCC_OscConfig+0x3d6>
 80035c8:	4b4c      	ldr	r3, [pc, #304]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80035d0:	4a4a      	ldr	r2, [pc, #296]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 80035d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80035d6:	6053      	str	r3, [r2, #4]
 80035d8:	e02e      	b.n	8003638 <HAL_RCC_OscConfig+0x434>
 80035da:	4b48      	ldr	r3, [pc, #288]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	069b      	lsls	r3, r3, #26
 80035e8:	4944      	ldr	r1, [pc, #272]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	604b      	str	r3, [r1, #4]
 80035ee:	e023      	b.n	8003638 <HAL_RCC_OscConfig+0x434>
 80035f0:	4b42      	ldr	r3, [pc, #264]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	061b      	lsls	r3, r3, #24
 80035fe:	493f      	ldr	r1, [pc, #252]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 8003600:	4313      	orrs	r3, r2
 8003602:	60cb      	str	r3, [r1, #12]
 8003604:	e018      	b.n	8003638 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003606:	4b3d      	ldr	r3, [pc, #244]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a3c      	ldr	r2, [pc, #240]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 800360c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003612:	f7fd fcd9 	bl	8000fc8 <HAL_GetTick>
 8003616:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800361a:	f7fd fcd5 	bl	8000fc8 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e23d      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800362c:	4b33      	ldr	r3, [pc, #204]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f0      	bne.n	800361a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b00      	cmp	r3, #0
 8003642:	d036      	beq.n	80036b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d019      	beq.n	8003680 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800364c:	4b2b      	ldr	r3, [pc, #172]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 800364e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003650:	4a2a      	ldr	r2, [pc, #168]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 8003652:	f043 0301 	orr.w	r3, r3, #1
 8003656:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003658:	f7fd fcb6 	bl	8000fc8 <HAL_GetTick>
 800365c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003660:	f7fd fcb2 	bl	8000fc8 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e21a      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003672:	4b22      	ldr	r3, [pc, #136]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 8003674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCC_OscConfig+0x45c>
 800367e:	e018      	b.n	80036b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003680:	4b1e      	ldr	r3, [pc, #120]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 8003682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003684:	4a1d      	ldr	r2, [pc, #116]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 8003686:	f023 0301 	bic.w	r3, r3, #1
 800368a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368c:	f7fd fc9c 	bl	8000fc8 <HAL_GetTick>
 8003690:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003694:	f7fd fc98 	bl	8000fc8 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e200      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036a6:	4b15      	ldr	r3, [pc, #84]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 80036a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d039      	beq.n	8003732 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d01c      	beq.n	8003700 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036c6:	4b0d      	ldr	r3, [pc, #52]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a0c      	ldr	r2, [pc, #48]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 80036cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80036d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80036d2:	f7fd fc79 	bl	8000fc8 <HAL_GetTick>
 80036d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036da:	f7fd fc75 	bl	8000fc8 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e1dd      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80036ec:	4b03      	ldr	r3, [pc, #12]	@ (80036fc <HAL_RCC_OscConfig+0x4f8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x4d6>
 80036f8:	e01b      	b.n	8003732 <HAL_RCC_OscConfig+0x52e>
 80036fa:	bf00      	nop
 80036fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003700:	4b9b      	ldr	r3, [pc, #620]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a9a      	ldr	r2, [pc, #616]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 8003706:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800370a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800370c:	f7fd fc5c 	bl	8000fc8 <HAL_GetTick>
 8003710:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003714:	f7fd fc58 	bl	8000fc8 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e1c0      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003726:	4b92      	ldr	r3, [pc, #584]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 8081 	beq.w	8003842 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003740:	4b8c      	ldr	r3, [pc, #560]	@ (8003974 <HAL_RCC_OscConfig+0x770>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a8b      	ldr	r2, [pc, #556]	@ (8003974 <HAL_RCC_OscConfig+0x770>)
 8003746:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800374a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800374c:	f7fd fc3c 	bl	8000fc8 <HAL_GetTick>
 8003750:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003754:	f7fd fc38 	bl	8000fc8 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b64      	cmp	r3, #100	@ 0x64
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e1a0      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003766:	4b83      	ldr	r3, [pc, #524]	@ (8003974 <HAL_RCC_OscConfig+0x770>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f0      	beq.n	8003754 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d106      	bne.n	8003788 <HAL_RCC_OscConfig+0x584>
 800377a:	4b7d      	ldr	r3, [pc, #500]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 800377c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800377e:	4a7c      	ldr	r2, [pc, #496]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	6713      	str	r3, [r2, #112]	@ 0x70
 8003786:	e02d      	b.n	80037e4 <HAL_RCC_OscConfig+0x5e0>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10c      	bne.n	80037aa <HAL_RCC_OscConfig+0x5a6>
 8003790:	4b77      	ldr	r3, [pc, #476]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 8003792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003794:	4a76      	ldr	r2, [pc, #472]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 8003796:	f023 0301 	bic.w	r3, r3, #1
 800379a:	6713      	str	r3, [r2, #112]	@ 0x70
 800379c:	4b74      	ldr	r3, [pc, #464]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 800379e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a0:	4a73      	ldr	r2, [pc, #460]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 80037a2:	f023 0304 	bic.w	r3, r3, #4
 80037a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037a8:	e01c      	b.n	80037e4 <HAL_RCC_OscConfig+0x5e0>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b05      	cmp	r3, #5
 80037b0:	d10c      	bne.n	80037cc <HAL_RCC_OscConfig+0x5c8>
 80037b2:	4b6f      	ldr	r3, [pc, #444]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b6:	4a6e      	ldr	r2, [pc, #440]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 80037b8:	f043 0304 	orr.w	r3, r3, #4
 80037bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80037be:	4b6c      	ldr	r3, [pc, #432]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c2:	4a6b      	ldr	r2, [pc, #428]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ca:	e00b      	b.n	80037e4 <HAL_RCC_OscConfig+0x5e0>
 80037cc:	4b68      	ldr	r3, [pc, #416]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 80037ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d0:	4a67      	ldr	r2, [pc, #412]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 80037d2:	f023 0301 	bic.w	r3, r3, #1
 80037d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d8:	4b65      	ldr	r3, [pc, #404]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 80037da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037dc:	4a64      	ldr	r2, [pc, #400]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 80037de:	f023 0304 	bic.w	r3, r3, #4
 80037e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d015      	beq.n	8003818 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ec:	f7fd fbec 	bl	8000fc8 <HAL_GetTick>
 80037f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037f2:	e00a      	b.n	800380a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f4:	f7fd fbe8 	bl	8000fc8 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e14e      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800380a:	4b59      	ldr	r3, [pc, #356]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0ee      	beq.n	80037f4 <HAL_RCC_OscConfig+0x5f0>
 8003816:	e014      	b.n	8003842 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003818:	f7fd fbd6 	bl	8000fc8 <HAL_GetTick>
 800381c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800381e:	e00a      	b.n	8003836 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003820:	f7fd fbd2 	bl	8000fc8 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800382e:	4293      	cmp	r3, r2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e138      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003836:	4b4e      	ldr	r3, [pc, #312]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1ee      	bne.n	8003820 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 812d 	beq.w	8003aa6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800384c:	4b48      	ldr	r3, [pc, #288]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003854:	2b18      	cmp	r3, #24
 8003856:	f000 80bd 	beq.w	80039d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385e:	2b02      	cmp	r3, #2
 8003860:	f040 809e 	bne.w	80039a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003864:	4b42      	ldr	r3, [pc, #264]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a41      	ldr	r2, [pc, #260]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 800386a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800386e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fd fbaa 	bl	8000fc8 <HAL_GetTick>
 8003874:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003878:	f7fd fba6 	bl	8000fc8 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e10e      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800388a:	4b39      	ldr	r3, [pc, #228]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003896:	4b36      	ldr	r3, [pc, #216]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 8003898:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800389a:	4b37      	ldr	r3, [pc, #220]	@ (8003978 <HAL_RCC_OscConfig+0x774>)
 800389c:	4013      	ands	r3, r2
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80038a6:	0112      	lsls	r2, r2, #4
 80038a8:	430a      	orrs	r2, r1
 80038aa:	4931      	ldr	r1, [pc, #196]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b4:	3b01      	subs	r3, #1
 80038b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038be:	3b01      	subs	r3, #1
 80038c0:	025b      	lsls	r3, r3, #9
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ca:	3b01      	subs	r3, #1
 80038cc:	041b      	lsls	r3, r3, #16
 80038ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d8:	3b01      	subs	r3, #1
 80038da:	061b      	lsls	r3, r3, #24
 80038dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80038e0:	4923      	ldr	r1, [pc, #140]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80038e6:	4b22      	ldr	r3, [pc, #136]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 80038e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ea:	4a21      	ldr	r2, [pc, #132]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 80038ec:	f023 0301 	bic.w	r3, r3, #1
 80038f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80038f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 80038f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038f6:	4b21      	ldr	r3, [pc, #132]	@ (800397c <HAL_RCC_OscConfig+0x778>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80038fe:	00d2      	lsls	r2, r2, #3
 8003900:	491b      	ldr	r1, [pc, #108]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 8003902:	4313      	orrs	r3, r2
 8003904:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003906:	4b1a      	ldr	r3, [pc, #104]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 8003908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390a:	f023 020c 	bic.w	r2, r3, #12
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	4917      	ldr	r1, [pc, #92]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 8003914:	4313      	orrs	r3, r2
 8003916:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003918:	4b15      	ldr	r3, [pc, #84]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 800391a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391c:	f023 0202 	bic.w	r2, r3, #2
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003924:	4912      	ldr	r1, [pc, #72]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 8003926:	4313      	orrs	r3, r2
 8003928:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800392a:	4b11      	ldr	r3, [pc, #68]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 800392c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392e:	4a10      	ldr	r2, [pc, #64]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 8003930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003934:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003936:	4b0e      	ldr	r3, [pc, #56]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 8003938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393a:	4a0d      	ldr	r2, [pc, #52]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 800393c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003940:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003942:	4b0b      	ldr	r3, [pc, #44]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 8003944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003946:	4a0a      	ldr	r2, [pc, #40]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 8003948:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800394c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800394e:	4b08      	ldr	r3, [pc, #32]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 8003950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003952:	4a07      	ldr	r2, [pc, #28]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800395a:	4b05      	ldr	r3, [pc, #20]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a04      	ldr	r2, [pc, #16]	@ (8003970 <HAL_RCC_OscConfig+0x76c>)
 8003960:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003966:	f7fd fb2f 	bl	8000fc8 <HAL_GetTick>
 800396a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800396c:	e011      	b.n	8003992 <HAL_RCC_OscConfig+0x78e>
 800396e:	bf00      	nop
 8003970:	58024400 	.word	0x58024400
 8003974:	58024800 	.word	0x58024800
 8003978:	fffffc0c 	.word	0xfffffc0c
 800397c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003980:	f7fd fb22 	bl	8000fc8 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e08a      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003992:	4b47      	ldr	r3, [pc, #284]	@ (8003ab0 <HAL_RCC_OscConfig+0x8ac>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0x77c>
 800399e:	e082      	b.n	8003aa6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a0:	4b43      	ldr	r3, [pc, #268]	@ (8003ab0 <HAL_RCC_OscConfig+0x8ac>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a42      	ldr	r2, [pc, #264]	@ (8003ab0 <HAL_RCC_OscConfig+0x8ac>)
 80039a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ac:	f7fd fb0c 	bl	8000fc8 <HAL_GetTick>
 80039b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b4:	f7fd fb08 	bl	8000fc8 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e070      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039c6:	4b3a      	ldr	r3, [pc, #232]	@ (8003ab0 <HAL_RCC_OscConfig+0x8ac>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0x7b0>
 80039d2:	e068      	b.n	8003aa6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80039d4:	4b36      	ldr	r3, [pc, #216]	@ (8003ab0 <HAL_RCC_OscConfig+0x8ac>)
 80039d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80039da:	4b35      	ldr	r3, [pc, #212]	@ (8003ab0 <HAL_RCC_OscConfig+0x8ac>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d031      	beq.n	8003a4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	f003 0203 	and.w	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d12a      	bne.n	8003a4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d122      	bne.n	8003a4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a10:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d11a      	bne.n	8003a4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	0a5b      	lsrs	r3, r3, #9
 8003a1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a22:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d111      	bne.n	8003a4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	0c1b      	lsrs	r3, r3, #16
 8003a2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a34:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d108      	bne.n	8003a4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	0e1b      	lsrs	r3, r3, #24
 8003a3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a46:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e02b      	b.n	8003aa8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003a50:	4b17      	ldr	r3, [pc, #92]	@ (8003ab0 <HAL_RCC_OscConfig+0x8ac>)
 8003a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a54:	08db      	lsrs	r3, r3, #3
 8003a56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a5a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d01f      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003a66:	4b12      	ldr	r3, [pc, #72]	@ (8003ab0 <HAL_RCC_OscConfig+0x8ac>)
 8003a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6a:	4a11      	ldr	r2, [pc, #68]	@ (8003ab0 <HAL_RCC_OscConfig+0x8ac>)
 8003a6c:	f023 0301 	bic.w	r3, r3, #1
 8003a70:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a72:	f7fd faa9 	bl	8000fc8 <HAL_GetTick>
 8003a76:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003a78:	bf00      	nop
 8003a7a:	f7fd faa5 	bl	8000fc8 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d0f9      	beq.n	8003a7a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a86:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab0 <HAL_RCC_OscConfig+0x8ac>)
 8003a88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab4 <HAL_RCC_OscConfig+0x8b0>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003a92:	00d2      	lsls	r2, r2, #3
 8003a94:	4906      	ldr	r1, [pc, #24]	@ (8003ab0 <HAL_RCC_OscConfig+0x8ac>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003a9a:	4b05      	ldr	r3, [pc, #20]	@ (8003ab0 <HAL_RCC_OscConfig+0x8ac>)
 8003a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9e:	4a04      	ldr	r2, [pc, #16]	@ (8003ab0 <HAL_RCC_OscConfig+0x8ac>)
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3730      	adds	r7, #48	@ 0x30
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	58024400 	.word	0x58024400
 8003ab4:	ffff0007 	.word	0xffff0007

08003ab8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e19c      	b.n	8003e06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003acc:	4b8a      	ldr	r3, [pc, #552]	@ (8003cf8 <HAL_RCC_ClockConfig+0x240>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d910      	bls.n	8003afc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ada:	4b87      	ldr	r3, [pc, #540]	@ (8003cf8 <HAL_RCC_ClockConfig+0x240>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f023 020f 	bic.w	r2, r3, #15
 8003ae2:	4985      	ldr	r1, [pc, #532]	@ (8003cf8 <HAL_RCC_ClockConfig+0x240>)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aea:	4b83      	ldr	r3, [pc, #524]	@ (8003cf8 <HAL_RCC_ClockConfig+0x240>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d001      	beq.n	8003afc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e184      	b.n	8003e06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d010      	beq.n	8003b2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	4b7b      	ldr	r3, [pc, #492]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d908      	bls.n	8003b2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b18:	4b78      	ldr	r3, [pc, #480]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	4975      	ldr	r1, [pc, #468]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d010      	beq.n	8003b58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	4b70      	ldr	r3, [pc, #448]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d908      	bls.n	8003b58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b46:	4b6d      	ldr	r3, [pc, #436]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	496a      	ldr	r1, [pc, #424]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0310 	and.w	r3, r3, #16
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d010      	beq.n	8003b86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699a      	ldr	r2, [r3, #24]
 8003b68:	4b64      	ldr	r3, [pc, #400]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d908      	bls.n	8003b86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b74:	4b61      	ldr	r3, [pc, #388]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	495e      	ldr	r1, [pc, #376]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0320 	and.w	r3, r3, #32
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d010      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69da      	ldr	r2, [r3, #28]
 8003b96:	4b59      	ldr	r3, [pc, #356]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d908      	bls.n	8003bb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003ba2:	4b56      	ldr	r3, [pc, #344]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	4953      	ldr	r1, [pc, #332]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d010      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	4b4d      	ldr	r3, [pc, #308]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d908      	bls.n	8003be2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd0:	4b4a      	ldr	r3, [pc, #296]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	f023 020f 	bic.w	r2, r3, #15
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4947      	ldr	r1, [pc, #284]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d055      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003bee:	4b43      	ldr	r3, [pc, #268]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	4940      	ldr	r1, [pc, #256]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d107      	bne.n	8003c18 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c08:	4b3c      	ldr	r3, [pc, #240]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d121      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e0f6      	b.n	8003e06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d107      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c20:	4b36      	ldr	r3, [pc, #216]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d115      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0ea      	b.n	8003e06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d107      	bne.n	8003c48 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c38:	4b30      	ldr	r3, [pc, #192]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d109      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e0de      	b.n	8003e06 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c48:	4b2c      	ldr	r3, [pc, #176]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0d6      	b.n	8003e06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c58:	4b28      	ldr	r3, [pc, #160]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	f023 0207 	bic.w	r2, r3, #7
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	4925      	ldr	r1, [pc, #148]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c6a:	f7fd f9ad 	bl	8000fc8 <HAL_GetTick>
 8003c6e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c70:	e00a      	b.n	8003c88 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c72:	f7fd f9a9 	bl	8000fc8 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e0be      	b.n	8003e06 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c88:	4b1c      	ldr	r3, [pc, #112]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d1eb      	bne.n	8003c72 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d010      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	4b14      	ldr	r3, [pc, #80]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d208      	bcs.n	8003cc8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb6:	4b11      	ldr	r3, [pc, #68]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	f023 020f 	bic.w	r2, r3, #15
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	490e      	ldr	r1, [pc, #56]	@ (8003cfc <HAL_RCC_ClockConfig+0x244>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf8 <HAL_RCC_ClockConfig+0x240>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 030f 	and.w	r3, r3, #15
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d214      	bcs.n	8003d00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd6:	4b08      	ldr	r3, [pc, #32]	@ (8003cf8 <HAL_RCC_ClockConfig+0x240>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 020f 	bic.w	r2, r3, #15
 8003cde:	4906      	ldr	r1, [pc, #24]	@ (8003cf8 <HAL_RCC_ClockConfig+0x240>)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce6:	4b04      	ldr	r3, [pc, #16]	@ (8003cf8 <HAL_RCC_ClockConfig+0x240>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e086      	b.n	8003e06 <HAL_RCC_ClockConfig+0x34e>
 8003cf8:	52002000 	.word	0x52002000
 8003cfc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d010      	beq.n	8003d2e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	4b3f      	ldr	r3, [pc, #252]	@ (8003e10 <HAL_RCC_ClockConfig+0x358>)
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d208      	bcs.n	8003d2e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003d1c:	4b3c      	ldr	r3, [pc, #240]	@ (8003e10 <HAL_RCC_ClockConfig+0x358>)
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	4939      	ldr	r1, [pc, #228]	@ (8003e10 <HAL_RCC_ClockConfig+0x358>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d010      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695a      	ldr	r2, [r3, #20]
 8003d3e:	4b34      	ldr	r3, [pc, #208]	@ (8003e10 <HAL_RCC_ClockConfig+0x358>)
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d208      	bcs.n	8003d5c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d4a:	4b31      	ldr	r3, [pc, #196]	@ (8003e10 <HAL_RCC_ClockConfig+0x358>)
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	492e      	ldr	r1, [pc, #184]	@ (8003e10 <HAL_RCC_ClockConfig+0x358>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0310 	and.w	r3, r3, #16
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d010      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	699a      	ldr	r2, [r3, #24]
 8003d6c:	4b28      	ldr	r3, [pc, #160]	@ (8003e10 <HAL_RCC_ClockConfig+0x358>)
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d208      	bcs.n	8003d8a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d78:	4b25      	ldr	r3, [pc, #148]	@ (8003e10 <HAL_RCC_ClockConfig+0x358>)
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	4922      	ldr	r1, [pc, #136]	@ (8003e10 <HAL_RCC_ClockConfig+0x358>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d010      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69da      	ldr	r2, [r3, #28]
 8003d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003e10 <HAL_RCC_ClockConfig+0x358>)
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d208      	bcs.n	8003db8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003da6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e10 <HAL_RCC_ClockConfig+0x358>)
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	4917      	ldr	r1, [pc, #92]	@ (8003e10 <HAL_RCC_ClockConfig+0x358>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003db8:	f000 f834 	bl	8003e24 <HAL_RCC_GetSysClockFreq>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	4b14      	ldr	r3, [pc, #80]	@ (8003e10 <HAL_RCC_ClockConfig+0x358>)
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	0a1b      	lsrs	r3, r3, #8
 8003dc4:	f003 030f 	and.w	r3, r3, #15
 8003dc8:	4912      	ldr	r1, [pc, #72]	@ (8003e14 <HAL_RCC_ClockConfig+0x35c>)
 8003dca:	5ccb      	ldrb	r3, [r1, r3]
 8003dcc:	f003 031f 	and.w	r3, r3, #31
 8003dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003e10 <HAL_RCC_ClockConfig+0x358>)
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	4a0d      	ldr	r2, [pc, #52]	@ (8003e14 <HAL_RCC_ClockConfig+0x35c>)
 8003de0:	5cd3      	ldrb	r3, [r2, r3]
 8003de2:	f003 031f 	and.w	r3, r3, #31
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dec:	4a0a      	ldr	r2, [pc, #40]	@ (8003e18 <HAL_RCC_ClockConfig+0x360>)
 8003dee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003df0:	4a0a      	ldr	r2, [pc, #40]	@ (8003e1c <HAL_RCC_ClockConfig+0x364>)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003df6:	4b0a      	ldr	r3, [pc, #40]	@ (8003e20 <HAL_RCC_ClockConfig+0x368>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fc fd58 	bl	80008b0 <HAL_InitTick>
 8003e00:	4603      	mov	r3, r0
 8003e02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	58024400 	.word	0x58024400
 8003e14:	0801b928 	.word	0x0801b928
 8003e18:	24000004 	.word	0x24000004
 8003e1c:	24000000 	.word	0x24000000
 8003e20:	24000008 	.word	0x24000008

08003e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b089      	sub	sp, #36	@ 0x24
 8003e28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e2a:	4bb3      	ldr	r3, [pc, #716]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e32:	2b18      	cmp	r3, #24
 8003e34:	f200 8155 	bhi.w	80040e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003e38:	a201      	add	r2, pc, #4	@ (adr r2, 8003e40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3e:	bf00      	nop
 8003e40:	08003ea5 	.word	0x08003ea5
 8003e44:	080040e3 	.word	0x080040e3
 8003e48:	080040e3 	.word	0x080040e3
 8003e4c:	080040e3 	.word	0x080040e3
 8003e50:	080040e3 	.word	0x080040e3
 8003e54:	080040e3 	.word	0x080040e3
 8003e58:	080040e3 	.word	0x080040e3
 8003e5c:	080040e3 	.word	0x080040e3
 8003e60:	08003ecb 	.word	0x08003ecb
 8003e64:	080040e3 	.word	0x080040e3
 8003e68:	080040e3 	.word	0x080040e3
 8003e6c:	080040e3 	.word	0x080040e3
 8003e70:	080040e3 	.word	0x080040e3
 8003e74:	080040e3 	.word	0x080040e3
 8003e78:	080040e3 	.word	0x080040e3
 8003e7c:	080040e3 	.word	0x080040e3
 8003e80:	08003ed1 	.word	0x08003ed1
 8003e84:	080040e3 	.word	0x080040e3
 8003e88:	080040e3 	.word	0x080040e3
 8003e8c:	080040e3 	.word	0x080040e3
 8003e90:	080040e3 	.word	0x080040e3
 8003e94:	080040e3 	.word	0x080040e3
 8003e98:	080040e3 	.word	0x080040e3
 8003e9c:	080040e3 	.word	0x080040e3
 8003ea0:	08003ed7 	.word	0x08003ed7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ea4:	4b94      	ldr	r3, [pc, #592]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d009      	beq.n	8003ec4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003eb0:	4b91      	ldr	r3, [pc, #580]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	08db      	lsrs	r3, r3, #3
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	4a90      	ldr	r2, [pc, #576]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003ec2:	e111      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003ec4:	4b8d      	ldr	r3, [pc, #564]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ec6:	61bb      	str	r3, [r7, #24]
      break;
 8003ec8:	e10e      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003eca:	4b8d      	ldr	r3, [pc, #564]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ecc:	61bb      	str	r3, [r7, #24]
      break;
 8003ece:	e10b      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003ed0:	4b8c      	ldr	r3, [pc, #560]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003ed2:	61bb      	str	r3, [r7, #24]
      break;
 8003ed4:	e108      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ed6:	4b88      	ldr	r3, [pc, #544]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003ee0:	4b85      	ldr	r3, [pc, #532]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee4:	091b      	lsrs	r3, r3, #4
 8003ee6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003eea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003eec:	4b82      	ldr	r3, [pc, #520]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003ef6:	4b80      	ldr	r3, [pc, #512]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003efa:	08db      	lsrs	r3, r3, #3
 8003efc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	fb02 f303 	mul.w	r3, r2, r3
 8003f06:	ee07 3a90 	vmov	s15, r3
 8003f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f0e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 80e1 	beq.w	80040dc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	f000 8083 	beq.w	8004028 <HAL_RCC_GetSysClockFreq+0x204>
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	f200 80a1 	bhi.w	800406c <HAL_RCC_GetSysClockFreq+0x248>
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_RCC_GetSysClockFreq+0x114>
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d056      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003f36:	e099      	b.n	800406c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f38:	4b6f      	ldr	r3, [pc, #444]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0320 	and.w	r3, r3, #32
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d02d      	beq.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f44:	4b6c      	ldr	r3, [pc, #432]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	08db      	lsrs	r3, r3, #3
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	4a6b      	ldr	r2, [pc, #428]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
 8003f54:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	ee07 3a90 	vmov	s15, r3
 8003f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	ee07 3a90 	vmov	s15, r3
 8003f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f6e:	4b62      	ldr	r3, [pc, #392]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f76:	ee07 3a90 	vmov	s15, r3
 8003f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f82:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f9a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003f9e:	e087      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	ee07 3a90 	vmov	s15, r3
 8003fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003faa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800410c <HAL_RCC_GetSysClockFreq+0x2e8>
 8003fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fb2:	4b51      	ldr	r3, [pc, #324]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fba:	ee07 3a90 	vmov	s15, r3
 8003fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fc6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003fe2:	e065      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	ee07 3a90 	vmov	s15, r3
 8003fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004110 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ff6:	4b40      	ldr	r3, [pc, #256]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ffe:	ee07 3a90 	vmov	s15, r3
 8004002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004006:	ed97 6a02 	vldr	s12, [r7, #8]
 800400a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004108 <HAL_RCC_GetSysClockFreq+0x2e4>
 800400e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800401a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800401e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004022:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004026:	e043      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	ee07 3a90 	vmov	s15, r3
 800402e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004032:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004114 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800403a:	4b2f      	ldr	r3, [pc, #188]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004042:	ee07 3a90 	vmov	s15, r3
 8004046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800404a:	ed97 6a02 	vldr	s12, [r7, #8]
 800404e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800405a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800405e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004066:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800406a:	e021      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	ee07 3a90 	vmov	s15, r3
 8004072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004076:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004110 <HAL_RCC_GetSysClockFreq+0x2ec>
 800407a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800407e:	4b1e      	ldr	r3, [pc, #120]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004086:	ee07 3a90 	vmov	s15, r3
 800408a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800408e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004092:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800409a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800409e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80040ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80040b0:	4b11      	ldr	r3, [pc, #68]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b4:	0a5b      	lsrs	r3, r3, #9
 80040b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040ba:	3301      	adds	r3, #1
 80040bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	ee07 3a90 	vmov	s15, r3
 80040c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80040cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040d4:	ee17 3a90 	vmov	r3, s15
 80040d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80040da:	e005      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	61bb      	str	r3, [r7, #24]
      break;
 80040e0:	e002      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80040e2:	4b07      	ldr	r3, [pc, #28]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80040e4:	61bb      	str	r3, [r7, #24]
      break;
 80040e6:	bf00      	nop
  }

  return sysclockfreq;
 80040e8:	69bb      	ldr	r3, [r7, #24]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3724      	adds	r7, #36	@ 0x24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	58024400 	.word	0x58024400
 80040fc:	03d09000 	.word	0x03d09000
 8004100:	003d0900 	.word	0x003d0900
 8004104:	017d7840 	.word	0x017d7840
 8004108:	46000000 	.word	0x46000000
 800410c:	4c742400 	.word	0x4c742400
 8004110:	4a742400 	.word	0x4a742400
 8004114:	4bbebc20 	.word	0x4bbebc20

08004118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800411e:	f7ff fe81 	bl	8003e24 <HAL_RCC_GetSysClockFreq>
 8004122:	4602      	mov	r2, r0
 8004124:	4b10      	ldr	r3, [pc, #64]	@ (8004168 <HAL_RCC_GetHCLKFreq+0x50>)
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	0a1b      	lsrs	r3, r3, #8
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	490f      	ldr	r1, [pc, #60]	@ (800416c <HAL_RCC_GetHCLKFreq+0x54>)
 8004130:	5ccb      	ldrb	r3, [r1, r3]
 8004132:	f003 031f 	and.w	r3, r3, #31
 8004136:	fa22 f303 	lsr.w	r3, r2, r3
 800413a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800413c:	4b0a      	ldr	r3, [pc, #40]	@ (8004168 <HAL_RCC_GetHCLKFreq+0x50>)
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	4a09      	ldr	r2, [pc, #36]	@ (800416c <HAL_RCC_GetHCLKFreq+0x54>)
 8004146:	5cd3      	ldrb	r3, [r2, r3]
 8004148:	f003 031f 	and.w	r3, r3, #31
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	fa22 f303 	lsr.w	r3, r2, r3
 8004152:	4a07      	ldr	r2, [pc, #28]	@ (8004170 <HAL_RCC_GetHCLKFreq+0x58>)
 8004154:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004156:	4a07      	ldr	r2, [pc, #28]	@ (8004174 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800415c:	4b04      	ldr	r3, [pc, #16]	@ (8004170 <HAL_RCC_GetHCLKFreq+0x58>)
 800415e:	681b      	ldr	r3, [r3, #0]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	58024400 	.word	0x58024400
 800416c:	0801b928 	.word	0x0801b928
 8004170:	24000004 	.word	0x24000004
 8004174:	24000000 	.word	0x24000000

08004178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800417c:	f7ff ffcc 	bl	8004118 <HAL_RCC_GetHCLKFreq>
 8004180:	4602      	mov	r2, r0
 8004182:	4b06      	ldr	r3, [pc, #24]	@ (800419c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	091b      	lsrs	r3, r3, #4
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	4904      	ldr	r1, [pc, #16]	@ (80041a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800418e:	5ccb      	ldrb	r3, [r1, r3]
 8004190:	f003 031f 	and.w	r3, r3, #31
 8004194:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004198:	4618      	mov	r0, r3
 800419a:	bd80      	pop	{r7, pc}
 800419c:	58024400 	.word	0x58024400
 80041a0:	0801b928 	.word	0x0801b928

080041a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	223f      	movs	r2, #63	@ 0x3f
 80041b2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80041b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004220 <HAL_RCC_GetClockConfig+0x7c>)
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	f003 0207 	and.w	r2, r3, #7
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80041c0:	4b17      	ldr	r3, [pc, #92]	@ (8004220 <HAL_RCC_GetClockConfig+0x7c>)
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80041cc:	4b14      	ldr	r3, [pc, #80]	@ (8004220 <HAL_RCC_GetClockConfig+0x7c>)
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	f003 020f 	and.w	r2, r3, #15
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80041d8:	4b11      	ldr	r3, [pc, #68]	@ (8004220 <HAL_RCC_GetClockConfig+0x7c>)
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80041e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004220 <HAL_RCC_GetClockConfig+0x7c>)
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80041f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004220 <HAL_RCC_GetClockConfig+0x7c>)
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80041fc:	4b08      	ldr	r3, [pc, #32]	@ (8004220 <HAL_RCC_GetClockConfig+0x7c>)
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004208:	4b06      	ldr	r3, [pc, #24]	@ (8004224 <HAL_RCC_GetClockConfig+0x80>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 020f 	and.w	r2, r3, #15
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	601a      	str	r2, [r3, #0]
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	58024400 	.word	0x58024400
 8004224:	52002000 	.word	0x52002000

08004228 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e049      	b.n	80042ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f841 	bl	80042d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3304      	adds	r3, #4
 8004264:	4619      	mov	r1, r3
 8004266:	4610      	mov	r0, r2
 8004268:	f000 f9e8 	bl	800463c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
	...

080042ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d001      	beq.n	8004304 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e054      	b.n	80043ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a26      	ldr	r2, [pc, #152]	@ (80043bc <HAL_TIM_Base_Start_IT+0xd0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d022      	beq.n	800436c <HAL_TIM_Base_Start_IT+0x80>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800432e:	d01d      	beq.n	800436c <HAL_TIM_Base_Start_IT+0x80>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a22      	ldr	r2, [pc, #136]	@ (80043c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d018      	beq.n	800436c <HAL_TIM_Base_Start_IT+0x80>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a21      	ldr	r2, [pc, #132]	@ (80043c4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d013      	beq.n	800436c <HAL_TIM_Base_Start_IT+0x80>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a1f      	ldr	r2, [pc, #124]	@ (80043c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d00e      	beq.n	800436c <HAL_TIM_Base_Start_IT+0x80>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a1e      	ldr	r2, [pc, #120]	@ (80043cc <HAL_TIM_Base_Start_IT+0xe0>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d009      	beq.n	800436c <HAL_TIM_Base_Start_IT+0x80>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a1c      	ldr	r2, [pc, #112]	@ (80043d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d004      	beq.n	800436c <HAL_TIM_Base_Start_IT+0x80>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a1b      	ldr	r2, [pc, #108]	@ (80043d4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d115      	bne.n	8004398 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	4b19      	ldr	r3, [pc, #100]	@ (80043d8 <HAL_TIM_Base_Start_IT+0xec>)
 8004374:	4013      	ands	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2b06      	cmp	r3, #6
 800437c:	d015      	beq.n	80043aa <HAL_TIM_Base_Start_IT+0xbe>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004384:	d011      	beq.n	80043aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f042 0201 	orr.w	r2, r2, #1
 8004394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004396:	e008      	b.n	80043aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0201 	orr.w	r2, r2, #1
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	e000      	b.n	80043ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40010000 	.word	0x40010000
 80043c0:	40000400 	.word	0x40000400
 80043c4:	40000800 	.word	0x40000800
 80043c8:	40000c00 	.word	0x40000c00
 80043cc:	40010400 	.word	0x40010400
 80043d0:	40001800 	.word	0x40001800
 80043d4:	40014000 	.word	0x40014000
 80043d8:	00010007 	.word	0x00010007

080043dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d020      	beq.n	8004440 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d01b      	beq.n	8004440 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0202 	mvn.w	r2, #2
 8004410:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f8e9 	bl	80045fe <HAL_TIM_IC_CaptureCallback>
 800442c:	e005      	b.n	800443a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f8db 	bl	80045ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f8ec 	bl	8004612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b00      	cmp	r3, #0
 8004448:	d020      	beq.n	800448c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d01b      	beq.n	800448c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f06f 0204 	mvn.w	r2, #4
 800445c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2202      	movs	r2, #2
 8004462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f8c3 	bl	80045fe <HAL_TIM_IC_CaptureCallback>
 8004478:	e005      	b.n	8004486 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f8b5 	bl	80045ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f8c6 	bl	8004612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f003 0308 	and.w	r3, r3, #8
 8004492:	2b00      	cmp	r3, #0
 8004494:	d020      	beq.n	80044d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b00      	cmp	r3, #0
 800449e:	d01b      	beq.n	80044d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f06f 0208 	mvn.w	r2, #8
 80044a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2204      	movs	r2, #4
 80044ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f89d 	bl	80045fe <HAL_TIM_IC_CaptureCallback>
 80044c4:	e005      	b.n	80044d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f88f 	bl	80045ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f8a0 	bl	8004612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d020      	beq.n	8004524 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f003 0310 	and.w	r3, r3, #16
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01b      	beq.n	8004524 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0210 	mvn.w	r2, #16
 80044f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2208      	movs	r2, #8
 80044fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f877 	bl	80045fe <HAL_TIM_IC_CaptureCallback>
 8004510:	e005      	b.n	800451e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f869 	bl	80045ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f87a 	bl	8004612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00c      	beq.n	8004548 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	d007      	beq.n	8004548 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0201 	mvn.w	r2, #1
 8004540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7fc f97e 	bl	8000844 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800454e:	2b00      	cmp	r3, #0
 8004550:	d104      	bne.n	800455c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00c      	beq.n	8004576 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004562:	2b00      	cmp	r3, #0
 8004564:	d007      	beq.n	8004576 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800456e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f90d 	bl	8004790 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00c      	beq.n	800459a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004586:	2b00      	cmp	r3, #0
 8004588:	d007      	beq.n	800459a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f905 	bl	80047a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00c      	beq.n	80045be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d007      	beq.n	80045be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f834 	bl	8004626 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00c      	beq.n	80045e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d007      	beq.n	80045e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f06f 0220 	mvn.w	r2, #32
 80045da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f8cd 	bl	800477c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045e2:	bf00      	nop
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
	...

0800463c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a43      	ldr	r2, [pc, #268]	@ (800475c <TIM_Base_SetConfig+0x120>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d013      	beq.n	800467c <TIM_Base_SetConfig+0x40>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800465a:	d00f      	beq.n	800467c <TIM_Base_SetConfig+0x40>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a40      	ldr	r2, [pc, #256]	@ (8004760 <TIM_Base_SetConfig+0x124>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d00b      	beq.n	800467c <TIM_Base_SetConfig+0x40>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a3f      	ldr	r2, [pc, #252]	@ (8004764 <TIM_Base_SetConfig+0x128>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d007      	beq.n	800467c <TIM_Base_SetConfig+0x40>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a3e      	ldr	r2, [pc, #248]	@ (8004768 <TIM_Base_SetConfig+0x12c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d003      	beq.n	800467c <TIM_Base_SetConfig+0x40>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a3d      	ldr	r2, [pc, #244]	@ (800476c <TIM_Base_SetConfig+0x130>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d108      	bne.n	800468e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a32      	ldr	r2, [pc, #200]	@ (800475c <TIM_Base_SetConfig+0x120>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d01f      	beq.n	80046d6 <TIM_Base_SetConfig+0x9a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800469c:	d01b      	beq.n	80046d6 <TIM_Base_SetConfig+0x9a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a2f      	ldr	r2, [pc, #188]	@ (8004760 <TIM_Base_SetConfig+0x124>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d017      	beq.n	80046d6 <TIM_Base_SetConfig+0x9a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a2e      	ldr	r2, [pc, #184]	@ (8004764 <TIM_Base_SetConfig+0x128>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d013      	beq.n	80046d6 <TIM_Base_SetConfig+0x9a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004768 <TIM_Base_SetConfig+0x12c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00f      	beq.n	80046d6 <TIM_Base_SetConfig+0x9a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a2c      	ldr	r2, [pc, #176]	@ (800476c <TIM_Base_SetConfig+0x130>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00b      	beq.n	80046d6 <TIM_Base_SetConfig+0x9a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a2b      	ldr	r2, [pc, #172]	@ (8004770 <TIM_Base_SetConfig+0x134>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d007      	beq.n	80046d6 <TIM_Base_SetConfig+0x9a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a2a      	ldr	r2, [pc, #168]	@ (8004774 <TIM_Base_SetConfig+0x138>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d003      	beq.n	80046d6 <TIM_Base_SetConfig+0x9a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a29      	ldr	r2, [pc, #164]	@ (8004778 <TIM_Base_SetConfig+0x13c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d108      	bne.n	80046e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a14      	ldr	r2, [pc, #80]	@ (800475c <TIM_Base_SetConfig+0x120>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00f      	beq.n	800472e <TIM_Base_SetConfig+0xf2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a16      	ldr	r2, [pc, #88]	@ (800476c <TIM_Base_SetConfig+0x130>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00b      	beq.n	800472e <TIM_Base_SetConfig+0xf2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a15      	ldr	r2, [pc, #84]	@ (8004770 <TIM_Base_SetConfig+0x134>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d007      	beq.n	800472e <TIM_Base_SetConfig+0xf2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a14      	ldr	r2, [pc, #80]	@ (8004774 <TIM_Base_SetConfig+0x138>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d003      	beq.n	800472e <TIM_Base_SetConfig+0xf2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a13      	ldr	r2, [pc, #76]	@ (8004778 <TIM_Base_SetConfig+0x13c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d103      	bne.n	8004736 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	691a      	ldr	r2, [r3, #16]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f043 0204 	orr.w	r2, r3, #4
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	601a      	str	r2, [r3, #0]
}
 800474e:	bf00      	nop
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40010000 	.word	0x40010000
 8004760:	40000400 	.word	0x40000400
 8004764:	40000800 	.word	0x40000800
 8004768:	40000c00 	.word	0x40000c00
 800476c:	40010400 	.word	0x40010400
 8004770:	40014000 	.word	0x40014000
 8004774:	40014400 	.word	0x40014400
 8004778:	40014800 	.word	0x40014800

0800477c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80047be:	4b92      	ldr	r3, [pc, #584]	@ (8004a08 <MX_LWIP_Init+0x250>)
 80047c0:	22c0      	movs	r2, #192	@ 0xc0
 80047c2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80047c4:	4b90      	ldr	r3, [pc, #576]	@ (8004a08 <MX_LWIP_Init+0x250>)
 80047c6:	22a8      	movs	r2, #168	@ 0xa8
 80047c8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 100;
 80047ca:	4b8f      	ldr	r3, [pc, #572]	@ (8004a08 <MX_LWIP_Init+0x250>)
 80047cc:	2264      	movs	r2, #100	@ 0x64
 80047ce:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 80047d0:	4b8d      	ldr	r3, [pc, #564]	@ (8004a08 <MX_LWIP_Init+0x250>)
 80047d2:	226f      	movs	r2, #111	@ 0x6f
 80047d4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80047d6:	4b8d      	ldr	r3, [pc, #564]	@ (8004a0c <MX_LWIP_Init+0x254>)
 80047d8:	22ff      	movs	r2, #255	@ 0xff
 80047da:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80047dc:	4b8b      	ldr	r3, [pc, #556]	@ (8004a0c <MX_LWIP_Init+0x254>)
 80047de:	22ff      	movs	r2, #255	@ 0xff
 80047e0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80047e2:	4b8a      	ldr	r3, [pc, #552]	@ (8004a0c <MX_LWIP_Init+0x254>)
 80047e4:	22ff      	movs	r2, #255	@ 0xff
 80047e6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80047e8:	4b88      	ldr	r3, [pc, #544]	@ (8004a0c <MX_LWIP_Init+0x254>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80047ee:	4b88      	ldr	r3, [pc, #544]	@ (8004a10 <MX_LWIP_Init+0x258>)
 80047f0:	22c0      	movs	r2, #192	@ 0xc0
 80047f2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80047f4:	4b86      	ldr	r3, [pc, #536]	@ (8004a10 <MX_LWIP_Init+0x258>)
 80047f6:	22a8      	movs	r2, #168	@ 0xa8
 80047f8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 100;
 80047fa:	4b85      	ldr	r3, [pc, #532]	@ (8004a10 <MX_LWIP_Init+0x258>)
 80047fc:	2264      	movs	r2, #100	@ 0x64
 80047fe:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004800:	4b83      	ldr	r3, [pc, #524]	@ (8004a10 <MX_LWIP_Init+0x258>)
 8004802:	2201      	movs	r2, #1
 8004804:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004806:	2100      	movs	r1, #0
 8004808:	2000      	movs	r0, #0
 800480a:	f011 fb67 	bl	8015edc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800480e:	4b7e      	ldr	r3, [pc, #504]	@ (8004a08 <MX_LWIP_Init+0x250>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	061a      	lsls	r2, r3, #24
 8004814:	4b7c      	ldr	r3, [pc, #496]	@ (8004a08 <MX_LWIP_Init+0x250>)
 8004816:	785b      	ldrb	r3, [r3, #1]
 8004818:	041b      	lsls	r3, r3, #16
 800481a:	431a      	orrs	r2, r3
 800481c:	4b7a      	ldr	r3, [pc, #488]	@ (8004a08 <MX_LWIP_Init+0x250>)
 800481e:	789b      	ldrb	r3, [r3, #2]
 8004820:	021b      	lsls	r3, r3, #8
 8004822:	4313      	orrs	r3, r2
 8004824:	4a78      	ldr	r2, [pc, #480]	@ (8004a08 <MX_LWIP_Init+0x250>)
 8004826:	78d2      	ldrb	r2, [r2, #3]
 8004828:	4313      	orrs	r3, r2
 800482a:	061a      	lsls	r2, r3, #24
 800482c:	4b76      	ldr	r3, [pc, #472]	@ (8004a08 <MX_LWIP_Init+0x250>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	0619      	lsls	r1, r3, #24
 8004832:	4b75      	ldr	r3, [pc, #468]	@ (8004a08 <MX_LWIP_Init+0x250>)
 8004834:	785b      	ldrb	r3, [r3, #1]
 8004836:	041b      	lsls	r3, r3, #16
 8004838:	4319      	orrs	r1, r3
 800483a:	4b73      	ldr	r3, [pc, #460]	@ (8004a08 <MX_LWIP_Init+0x250>)
 800483c:	789b      	ldrb	r3, [r3, #2]
 800483e:	021b      	lsls	r3, r3, #8
 8004840:	430b      	orrs	r3, r1
 8004842:	4971      	ldr	r1, [pc, #452]	@ (8004a08 <MX_LWIP_Init+0x250>)
 8004844:	78c9      	ldrb	r1, [r1, #3]
 8004846:	430b      	orrs	r3, r1
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800484e:	431a      	orrs	r2, r3
 8004850:	4b6d      	ldr	r3, [pc, #436]	@ (8004a08 <MX_LWIP_Init+0x250>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	0619      	lsls	r1, r3, #24
 8004856:	4b6c      	ldr	r3, [pc, #432]	@ (8004a08 <MX_LWIP_Init+0x250>)
 8004858:	785b      	ldrb	r3, [r3, #1]
 800485a:	041b      	lsls	r3, r3, #16
 800485c:	4319      	orrs	r1, r3
 800485e:	4b6a      	ldr	r3, [pc, #424]	@ (8004a08 <MX_LWIP_Init+0x250>)
 8004860:	789b      	ldrb	r3, [r3, #2]
 8004862:	021b      	lsls	r3, r3, #8
 8004864:	430b      	orrs	r3, r1
 8004866:	4968      	ldr	r1, [pc, #416]	@ (8004a08 <MX_LWIP_Init+0x250>)
 8004868:	78c9      	ldrb	r1, [r1, #3]
 800486a:	430b      	orrs	r3, r1
 800486c:	0a1b      	lsrs	r3, r3, #8
 800486e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004872:	431a      	orrs	r2, r3
 8004874:	4b64      	ldr	r3, [pc, #400]	@ (8004a08 <MX_LWIP_Init+0x250>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	0619      	lsls	r1, r3, #24
 800487a:	4b63      	ldr	r3, [pc, #396]	@ (8004a08 <MX_LWIP_Init+0x250>)
 800487c:	785b      	ldrb	r3, [r3, #1]
 800487e:	041b      	lsls	r3, r3, #16
 8004880:	4319      	orrs	r1, r3
 8004882:	4b61      	ldr	r3, [pc, #388]	@ (8004a08 <MX_LWIP_Init+0x250>)
 8004884:	789b      	ldrb	r3, [r3, #2]
 8004886:	021b      	lsls	r3, r3, #8
 8004888:	430b      	orrs	r3, r1
 800488a:	495f      	ldr	r1, [pc, #380]	@ (8004a08 <MX_LWIP_Init+0x250>)
 800488c:	78c9      	ldrb	r1, [r1, #3]
 800488e:	430b      	orrs	r3, r1
 8004890:	0e1b      	lsrs	r3, r3, #24
 8004892:	4313      	orrs	r3, r2
 8004894:	4a5f      	ldr	r2, [pc, #380]	@ (8004a14 <MX_LWIP_Init+0x25c>)
 8004896:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004898:	4b5c      	ldr	r3, [pc, #368]	@ (8004a0c <MX_LWIP_Init+0x254>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	061a      	lsls	r2, r3, #24
 800489e:	4b5b      	ldr	r3, [pc, #364]	@ (8004a0c <MX_LWIP_Init+0x254>)
 80048a0:	785b      	ldrb	r3, [r3, #1]
 80048a2:	041b      	lsls	r3, r3, #16
 80048a4:	431a      	orrs	r2, r3
 80048a6:	4b59      	ldr	r3, [pc, #356]	@ (8004a0c <MX_LWIP_Init+0x254>)
 80048a8:	789b      	ldrb	r3, [r3, #2]
 80048aa:	021b      	lsls	r3, r3, #8
 80048ac:	4313      	orrs	r3, r2
 80048ae:	4a57      	ldr	r2, [pc, #348]	@ (8004a0c <MX_LWIP_Init+0x254>)
 80048b0:	78d2      	ldrb	r2, [r2, #3]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	061a      	lsls	r2, r3, #24
 80048b6:	4b55      	ldr	r3, [pc, #340]	@ (8004a0c <MX_LWIP_Init+0x254>)
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	0619      	lsls	r1, r3, #24
 80048bc:	4b53      	ldr	r3, [pc, #332]	@ (8004a0c <MX_LWIP_Init+0x254>)
 80048be:	785b      	ldrb	r3, [r3, #1]
 80048c0:	041b      	lsls	r3, r3, #16
 80048c2:	4319      	orrs	r1, r3
 80048c4:	4b51      	ldr	r3, [pc, #324]	@ (8004a0c <MX_LWIP_Init+0x254>)
 80048c6:	789b      	ldrb	r3, [r3, #2]
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	430b      	orrs	r3, r1
 80048cc:	494f      	ldr	r1, [pc, #316]	@ (8004a0c <MX_LWIP_Init+0x254>)
 80048ce:	78c9      	ldrb	r1, [r1, #3]
 80048d0:	430b      	orrs	r3, r1
 80048d2:	021b      	lsls	r3, r3, #8
 80048d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80048d8:	431a      	orrs	r2, r3
 80048da:	4b4c      	ldr	r3, [pc, #304]	@ (8004a0c <MX_LWIP_Init+0x254>)
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	0619      	lsls	r1, r3, #24
 80048e0:	4b4a      	ldr	r3, [pc, #296]	@ (8004a0c <MX_LWIP_Init+0x254>)
 80048e2:	785b      	ldrb	r3, [r3, #1]
 80048e4:	041b      	lsls	r3, r3, #16
 80048e6:	4319      	orrs	r1, r3
 80048e8:	4b48      	ldr	r3, [pc, #288]	@ (8004a0c <MX_LWIP_Init+0x254>)
 80048ea:	789b      	ldrb	r3, [r3, #2]
 80048ec:	021b      	lsls	r3, r3, #8
 80048ee:	430b      	orrs	r3, r1
 80048f0:	4946      	ldr	r1, [pc, #280]	@ (8004a0c <MX_LWIP_Init+0x254>)
 80048f2:	78c9      	ldrb	r1, [r1, #3]
 80048f4:	430b      	orrs	r3, r1
 80048f6:	0a1b      	lsrs	r3, r3, #8
 80048f8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80048fc:	431a      	orrs	r2, r3
 80048fe:	4b43      	ldr	r3, [pc, #268]	@ (8004a0c <MX_LWIP_Init+0x254>)
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	0619      	lsls	r1, r3, #24
 8004904:	4b41      	ldr	r3, [pc, #260]	@ (8004a0c <MX_LWIP_Init+0x254>)
 8004906:	785b      	ldrb	r3, [r3, #1]
 8004908:	041b      	lsls	r3, r3, #16
 800490a:	4319      	orrs	r1, r3
 800490c:	4b3f      	ldr	r3, [pc, #252]	@ (8004a0c <MX_LWIP_Init+0x254>)
 800490e:	789b      	ldrb	r3, [r3, #2]
 8004910:	021b      	lsls	r3, r3, #8
 8004912:	430b      	orrs	r3, r1
 8004914:	493d      	ldr	r1, [pc, #244]	@ (8004a0c <MX_LWIP_Init+0x254>)
 8004916:	78c9      	ldrb	r1, [r1, #3]
 8004918:	430b      	orrs	r3, r1
 800491a:	0e1b      	lsrs	r3, r3, #24
 800491c:	4313      	orrs	r3, r2
 800491e:	4a3e      	ldr	r2, [pc, #248]	@ (8004a18 <MX_LWIP_Init+0x260>)
 8004920:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004922:	4b3b      	ldr	r3, [pc, #236]	@ (8004a10 <MX_LWIP_Init+0x258>)
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	061a      	lsls	r2, r3, #24
 8004928:	4b39      	ldr	r3, [pc, #228]	@ (8004a10 <MX_LWIP_Init+0x258>)
 800492a:	785b      	ldrb	r3, [r3, #1]
 800492c:	041b      	lsls	r3, r3, #16
 800492e:	431a      	orrs	r2, r3
 8004930:	4b37      	ldr	r3, [pc, #220]	@ (8004a10 <MX_LWIP_Init+0x258>)
 8004932:	789b      	ldrb	r3, [r3, #2]
 8004934:	021b      	lsls	r3, r3, #8
 8004936:	4313      	orrs	r3, r2
 8004938:	4a35      	ldr	r2, [pc, #212]	@ (8004a10 <MX_LWIP_Init+0x258>)
 800493a:	78d2      	ldrb	r2, [r2, #3]
 800493c:	4313      	orrs	r3, r2
 800493e:	061a      	lsls	r2, r3, #24
 8004940:	4b33      	ldr	r3, [pc, #204]	@ (8004a10 <MX_LWIP_Init+0x258>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	0619      	lsls	r1, r3, #24
 8004946:	4b32      	ldr	r3, [pc, #200]	@ (8004a10 <MX_LWIP_Init+0x258>)
 8004948:	785b      	ldrb	r3, [r3, #1]
 800494a:	041b      	lsls	r3, r3, #16
 800494c:	4319      	orrs	r1, r3
 800494e:	4b30      	ldr	r3, [pc, #192]	@ (8004a10 <MX_LWIP_Init+0x258>)
 8004950:	789b      	ldrb	r3, [r3, #2]
 8004952:	021b      	lsls	r3, r3, #8
 8004954:	430b      	orrs	r3, r1
 8004956:	492e      	ldr	r1, [pc, #184]	@ (8004a10 <MX_LWIP_Init+0x258>)
 8004958:	78c9      	ldrb	r1, [r1, #3]
 800495a:	430b      	orrs	r3, r1
 800495c:	021b      	lsls	r3, r3, #8
 800495e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004962:	431a      	orrs	r2, r3
 8004964:	4b2a      	ldr	r3, [pc, #168]	@ (8004a10 <MX_LWIP_Init+0x258>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	0619      	lsls	r1, r3, #24
 800496a:	4b29      	ldr	r3, [pc, #164]	@ (8004a10 <MX_LWIP_Init+0x258>)
 800496c:	785b      	ldrb	r3, [r3, #1]
 800496e:	041b      	lsls	r3, r3, #16
 8004970:	4319      	orrs	r1, r3
 8004972:	4b27      	ldr	r3, [pc, #156]	@ (8004a10 <MX_LWIP_Init+0x258>)
 8004974:	789b      	ldrb	r3, [r3, #2]
 8004976:	021b      	lsls	r3, r3, #8
 8004978:	430b      	orrs	r3, r1
 800497a:	4925      	ldr	r1, [pc, #148]	@ (8004a10 <MX_LWIP_Init+0x258>)
 800497c:	78c9      	ldrb	r1, [r1, #3]
 800497e:	430b      	orrs	r3, r1
 8004980:	0a1b      	lsrs	r3, r3, #8
 8004982:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004986:	431a      	orrs	r2, r3
 8004988:	4b21      	ldr	r3, [pc, #132]	@ (8004a10 <MX_LWIP_Init+0x258>)
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	0619      	lsls	r1, r3, #24
 800498e:	4b20      	ldr	r3, [pc, #128]	@ (8004a10 <MX_LWIP_Init+0x258>)
 8004990:	785b      	ldrb	r3, [r3, #1]
 8004992:	041b      	lsls	r3, r3, #16
 8004994:	4319      	orrs	r1, r3
 8004996:	4b1e      	ldr	r3, [pc, #120]	@ (8004a10 <MX_LWIP_Init+0x258>)
 8004998:	789b      	ldrb	r3, [r3, #2]
 800499a:	021b      	lsls	r3, r3, #8
 800499c:	430b      	orrs	r3, r1
 800499e:	491c      	ldr	r1, [pc, #112]	@ (8004a10 <MX_LWIP_Init+0x258>)
 80049a0:	78c9      	ldrb	r1, [r1, #3]
 80049a2:	430b      	orrs	r3, r1
 80049a4:	0e1b      	lsrs	r3, r3, #24
 80049a6:	4313      	orrs	r3, r2
 80049a8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a1c <MX_LWIP_Init+0x264>)
 80049aa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80049ac:	4b1c      	ldr	r3, [pc, #112]	@ (8004a20 <MX_LWIP_Init+0x268>)
 80049ae:	9302      	str	r3, [sp, #8]
 80049b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004a24 <MX_LWIP_Init+0x26c>)
 80049b2:	9301      	str	r3, [sp, #4]
 80049b4:	2300      	movs	r3, #0
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	4b18      	ldr	r3, [pc, #96]	@ (8004a1c <MX_LWIP_Init+0x264>)
 80049ba:	4a17      	ldr	r2, [pc, #92]	@ (8004a18 <MX_LWIP_Init+0x260>)
 80049bc:	4915      	ldr	r1, [pc, #84]	@ (8004a14 <MX_LWIP_Init+0x25c>)
 80049be:	481a      	ldr	r0, [pc, #104]	@ (8004a28 <MX_LWIP_Init+0x270>)
 80049c0:	f009 fd0e 	bl	800e3e0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80049c4:	4818      	ldr	r0, [pc, #96]	@ (8004a28 <MX_LWIP_Init+0x270>)
 80049c6:	f009 febd 	bl	800e744 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80049ca:	4817      	ldr	r0, [pc, #92]	@ (8004a28 <MX_LWIP_Init+0x270>)
 80049cc:	f009 feca 	bl	800e764 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80049d0:	4916      	ldr	r1, [pc, #88]	@ (8004a2c <MX_LWIP_Init+0x274>)
 80049d2:	4815      	ldr	r0, [pc, #84]	@ (8004a28 <MX_LWIP_Init+0x270>)
 80049d4:	f009 ffc8 	bl	800e968 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80049d8:	2224      	movs	r2, #36	@ 0x24
 80049da:	2100      	movs	r1, #0
 80049dc:	4814      	ldr	r0, [pc, #80]	@ (8004a30 <MX_LWIP_Init+0x278>)
 80049de:	f012 fb5e 	bl	801709e <memset>
  attributes.name = "EthLink";
 80049e2:	4b13      	ldr	r3, [pc, #76]	@ (8004a30 <MX_LWIP_Init+0x278>)
 80049e4:	4a13      	ldr	r2, [pc, #76]	@ (8004a34 <MX_LWIP_Init+0x27c>)
 80049e6:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80049e8:	4b11      	ldr	r3, [pc, #68]	@ (8004a30 <MX_LWIP_Init+0x278>)
 80049ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049ee:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80049f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004a30 <MX_LWIP_Init+0x278>)
 80049f2:	2210      	movs	r2, #16
 80049f4:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80049f6:	4a0e      	ldr	r2, [pc, #56]	@ (8004a30 <MX_LWIP_Init+0x278>)
 80049f8:	490b      	ldr	r1, [pc, #44]	@ (8004a28 <MX_LWIP_Init+0x270>)
 80049fa:	480f      	ldr	r0, [pc, #60]	@ (8004a38 <MX_LWIP_Init+0x280>)
 80049fc:	f000 fde1 	bl	80055c2 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004a00:	bf00      	nop
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	24000280 	.word	0x24000280
 8004a0c:	24000284 	.word	0x24000284
 8004a10:	24000288 	.word	0x24000288
 8004a14:	24000274 	.word	0x24000274
 8004a18:	24000278 	.word	0x24000278
 8004a1c:	2400027c 	.word	0x2400027c
 8004a20:	08015ded 	.word	0x08015ded
 8004a24:	08004f25 	.word	0x08004f25
 8004a28:	24000240 	.word	0x24000240
 8004a2c:	08004a3d 	.word	0x08004a3d
 8004a30:	2400028c 	.word	0x2400028c
 8004a34:	0801821c 	.word	0x0801821c
 8004a38:	08005219 	.word	0x08005219

08004a3c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004a58:	4b04      	ldr	r3, [pc, #16]	@ (8004a6c <HAL_ETH_RxCpltCallback+0x1c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f001 f847 	bl	8005af0 <osSemaphoreRelease>
}
 8004a62:	bf00      	nop
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	240002b8 	.word	0x240002b8

08004a70 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004a78:	4b04      	ldr	r3, [pc, #16]	@ (8004a8c <HAL_ETH_TxCpltCallback+0x1c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f001 f837 	bl	8005af0 <osSemaphoreRelease>
}
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	240002bc 	.word	0x240002bc

08004a90 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7fd fc1a 	bl	80022d2 <HAL_ETH_GetDMAError>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa4:	2b80      	cmp	r3, #128	@ 0x80
 8004aa6:	d104      	bne.n	8004ab2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004aa8:	4b04      	ldr	r3, [pc, #16]	@ (8004abc <HAL_ETH_ErrorCallback+0x2c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f001 f81f 	bl	8005af0 <osSemaphoreRelease>
  }
}
 8004ab2:	bf00      	nop
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	240002b8 	.word	0x240002b8

08004ac0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b0aa      	sub	sp, #168	@ 0xa8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8004ada:	f107 0310 	add.w	r3, r7, #16
 8004ade:	2264      	movs	r2, #100	@ 0x64
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f012 fadb 	bl	801709e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004ae8:	4b89      	ldr	r3, [pc, #548]	@ (8004d10 <low_level_init+0x250>)
 8004aea:	4a8a      	ldr	r2, [pc, #552]	@ (8004d14 <low_level_init+0x254>)
 8004aec:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004aee:	2300      	movs	r3, #0
 8004af0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004af2:	2380      	movs	r3, #128	@ 0x80
 8004af4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004af6:	23e1      	movs	r3, #225	@ 0xe1
 8004af8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004afa:	2300      	movs	r3, #0
 8004afc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004afe:	2300      	movs	r3, #0
 8004b00:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004b02:	2300      	movs	r3, #0
 8004b04:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004b06:	4a82      	ldr	r2, [pc, #520]	@ (8004d10 <low_level_init+0x250>)
 8004b08:	f107 0308 	add.w	r3, r7, #8
 8004b0c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004b0e:	4b80      	ldr	r3, [pc, #512]	@ (8004d10 <low_level_init+0x250>)
 8004b10:	2201      	movs	r2, #1
 8004b12:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004b14:	4b7e      	ldr	r3, [pc, #504]	@ (8004d10 <low_level_init+0x250>)
 8004b16:	4a80      	ldr	r2, [pc, #512]	@ (8004d18 <low_level_init+0x258>)
 8004b18:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004b1a:	4b7d      	ldr	r3, [pc, #500]	@ (8004d10 <low_level_init+0x250>)
 8004b1c:	4a7f      	ldr	r2, [pc, #508]	@ (8004d1c <low_level_init+0x25c>)
 8004b1e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8004b20:	4b7b      	ldr	r3, [pc, #492]	@ (8004d10 <low_level_init+0x250>)
 8004b22:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8004b26:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004b28:	4879      	ldr	r0, [pc, #484]	@ (8004d10 <low_level_init+0x250>)
 8004b2a:	f7fc fbe3 	bl	80012f4 <HAL_ETH_Init>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004b34:	2238      	movs	r2, #56	@ 0x38
 8004b36:	2100      	movs	r1, #0
 8004b38:	4879      	ldr	r0, [pc, #484]	@ (8004d20 <low_level_init+0x260>)
 8004b3a:	f012 fab0 	bl	801709e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004b3e:	4b78      	ldr	r3, [pc, #480]	@ (8004d20 <low_level_init+0x260>)
 8004b40:	2221      	movs	r2, #33	@ 0x21
 8004b42:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004b44:	4b76      	ldr	r3, [pc, #472]	@ (8004d20 <low_level_init+0x260>)
 8004b46:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004b4a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004b4c:	4b74      	ldr	r3, [pc, #464]	@ (8004d20 <low_level_init+0x260>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004b52:	4874      	ldr	r0, [pc, #464]	@ (8004d24 <low_level_init+0x264>)
 8004b54:	f009 fae0 	bl	800e118 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET
  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2206      	movs	r2, #6
 8004b5c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004b60:	4b6b      	ldr	r3, [pc, #428]	@ (8004d10 <low_level_init+0x250>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	781a      	ldrb	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004b6c:	4b68      	ldr	r3, [pc, #416]	@ (8004d10 <low_level_init+0x250>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	785a      	ldrb	r2, [r3, #1]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004b78:	4b65      	ldr	r3, [pc, #404]	@ (8004d10 <low_level_init+0x250>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	789a      	ldrb	r2, [r3, #2]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004b84:	4b62      	ldr	r3, [pc, #392]	@ (8004d10 <low_level_init+0x250>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	78da      	ldrb	r2, [r3, #3]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004b90:	4b5f      	ldr	r3, [pc, #380]	@ (8004d10 <low_level_init+0x250>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	791a      	ldrb	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004b9c:	4b5c      	ldr	r3, [pc, #368]	@ (8004d10 <low_level_init+0x250>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	795a      	ldrb	r2, [r3, #5]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004bae:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004bb6:	f043 030a 	orr.w	r3, r3, #10
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	2001      	movs	r0, #1
 8004bc8:	f000 feb7 	bl	800593a <osSemaphoreNew>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	4a56      	ldr	r2, [pc, #344]	@ (8004d28 <low_level_init+0x268>)
 8004bd0:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	2001      	movs	r0, #1
 8004bd8:	f000 feaf 	bl	800593a <osSemaphoreNew>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	4a53      	ldr	r2, [pc, #332]	@ (8004d2c <low_level_init+0x26c>)
 8004be0:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004be2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004be6:	2224      	movs	r2, #36	@ 0x24
 8004be8:	2100      	movs	r1, #0
 8004bea:	4618      	mov	r0, r3
 8004bec:	f012 fa57 	bl	801709e <memset>
  attributes.name = "EthIf";
 8004bf0:	4b4f      	ldr	r3, [pc, #316]	@ (8004d30 <low_level_init+0x270>)
 8004bf2:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004bf4:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8004bf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8004bfc:	2330      	movs	r3, #48	@ 0x30
 8004bfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8004c02:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004c06:	461a      	mov	r2, r3
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	484a      	ldr	r0, [pc, #296]	@ (8004d34 <low_level_init+0x274>)
 8004c0c:	f000 fcd9 	bl	80055c2 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004c10:	4949      	ldr	r1, [pc, #292]	@ (8004d38 <low_level_init+0x278>)
 8004c12:	484a      	ldr	r0, [pc, #296]	@ (8004d3c <low_level_init+0x27c>)
 8004c14:	f7fc f881 	bl	8000d1a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8004c18:	4848      	ldr	r0, [pc, #288]	@ (8004d3c <low_level_init+0x27c>)
 8004c1a:	f7fc f8b0 	bl	8000d7e <LAN8742_Init>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d006      	beq.n	8004c32 <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f009 fe6f 	bl	800e908 <netif_set_link_down>
    netif_set_down(netif);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f009 fe06 	bl	800e83c <netif_set_down>
 8004c30:	e06b      	b.n	8004d0a <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8004c32:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d165      	bne.n	8004d06 <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004c3a:	4840      	ldr	r0, [pc, #256]	@ (8004d3c <low_level_init+0x27c>)
 8004c3c:	f7fc f8ec 	bl	8000e18 <LAN8742_GetLinkState>
 8004c40:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004c44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	dc06      	bgt.n	8004c5a <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f009 fe5b 	bl	800e908 <netif_set_link_down>
      netif_set_down(netif);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f009 fdf2 	bl	800e83c <netif_set_down>
 8004c58:	e057      	b.n	8004d0a <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8004c5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c5e:	3b02      	subs	r3, #2
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d82b      	bhi.n	8004cbc <low_level_init+0x1fc>
 8004c64:	a201      	add	r2, pc, #4	@ (adr r2, 8004c6c <low_level_init+0x1ac>)
 8004c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6a:	bf00      	nop
 8004c6c:	08004c7d 	.word	0x08004c7d
 8004c70:	08004c8f 	.word	0x08004c8f
 8004c74:	08004c9f 	.word	0x08004c9f
 8004c78:	08004caf 	.word	0x08004caf
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8004c7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8004c84:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004c8c:	e01f      	b.n	8004cce <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8004c94:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004c9c:	e017      	b.n	8004cce <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8004c9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004cac:	e00f      	b.n	8004cce <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004cba:	e008      	b.n	8004cce <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8004cbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004cc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8004cc4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004cc8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004ccc:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004cce:	f107 0310 	add.w	r3, r7, #16
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	480e      	ldr	r0, [pc, #56]	@ (8004d10 <low_level_init+0x250>)
 8004cd6:	f7fd f8b1 	bl	8001e3c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004cda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004cde:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8004ce0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004ce6:	f107 0310 	add.w	r3, r7, #16
 8004cea:	4619      	mov	r1, r3
 8004cec:	4808      	ldr	r0, [pc, #32]	@ (8004d10 <low_level_init+0x250>)
 8004cee:	f7fd fa79 	bl	80021e4 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8004cf2:	4807      	ldr	r0, [pc, #28]	@ (8004d10 <low_level_init+0x250>)
 8004cf4:	f7fc fbfc 	bl	80014f0 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f009 fd33 	bl	800e764 <netif_set_up>
    netif_set_link_up(netif);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f009 fdce 	bl	800e8a0 <netif_set_link_up>
 8004d04:	e001      	b.n	8004d0a <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 8004d06:	f7fb fdaf 	bl	8000868 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004d0a:	37a8      	adds	r7, #168	@ 0xa8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	240002c0 	.word	0x240002c0
 8004d14:	40028000 	.word	0x40028000
 8004d18:	30000080 	.word	0x30000080
 8004d1c:	30000000 	.word	0x30000000
 8004d20:	24000370 	.word	0x24000370
 8004d24:	0801b95c 	.word	0x0801b95c
 8004d28:	240002b8 	.word	0x240002b8
 8004d2c:	240002bc 	.word	0x240002bc
 8004d30:	08018224 	.word	0x08018224
 8004d34:	08004ed1 	.word	0x08004ed1
 8004d38:	24000010 	.word	0x24000010
 8004d3c:	240003a8 	.word	0x240003a8

08004d40 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b092      	sub	sp, #72	@ 0x48
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004d58:	f107 030c 	add.w	r3, r7, #12
 8004d5c:	2230      	movs	r2, #48	@ 0x30
 8004d5e:	2100      	movs	r1, #0
 8004d60:	4618      	mov	r0, r3
 8004d62:	f012 f99c 	bl	801709e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004d66:	f107 030c 	add.w	r3, r7, #12
 8004d6a:	2230      	movs	r2, #48	@ 0x30
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f012 f995 	bl	801709e <memset>

  for(q = p; q != NULL; q = q->next)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d78:	e045      	b.n	8004e06 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004d7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d902      	bls.n	8004d86 <low_level_output+0x46>
      return ERR_IF;
 8004d80:	f06f 030b 	mvn.w	r3, #11
 8004d84:	e07f      	b.n	8004e86 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8004d86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d88:	6859      	ldr	r1, [r3, #4]
 8004d8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	4413      	add	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	3348      	adds	r3, #72	@ 0x48
 8004d96:	443b      	add	r3, r7
 8004d98:	3b3c      	subs	r3, #60	@ 0x3c
 8004d9a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004d9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d9e:	895b      	ldrh	r3, [r3, #10]
 8004da0:	4619      	mov	r1, r3
 8004da2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004da4:	4613      	mov	r3, r2
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	3348      	adds	r3, #72	@ 0x48
 8004dae:	443b      	add	r3, r7
 8004db0:	3b38      	subs	r3, #56	@ 0x38
 8004db2:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d011      	beq.n	8004dde <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004dba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dbc:	1e5a      	subs	r2, r3, #1
 8004dbe:	f107 000c 	add.w	r0, r7, #12
 8004dc2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	440b      	add	r3, r1
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	18c1      	adds	r1, r0, r3
 8004dce:	4613      	mov	r3, r2
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	4413      	add	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	3348      	adds	r3, #72	@ 0x48
 8004dd8:	443b      	add	r3, r7
 8004dda:	3b34      	subs	r3, #52	@ 0x34
 8004ddc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004dde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d109      	bne.n	8004dfa <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004de6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004de8:	4613      	mov	r3, r2
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	4413      	add	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	3348      	adds	r3, #72	@ 0x48
 8004df2:	443b      	add	r3, r7
 8004df4:	3b34      	subs	r3, #52	@ 0x34
 8004df6:	2200      	movs	r2, #0
 8004df8:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004dfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8004e00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1b6      	bne.n	8004d7a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	891b      	ldrh	r3, [r3, #8]
 8004e10:	461a      	mov	r2, r3
 8004e12:	4b1f      	ldr	r3, [pc, #124]	@ (8004e90 <low_level_output+0x150>)
 8004e14:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004e16:	4a1e      	ldr	r2, [pc, #120]	@ (8004e90 <low_level_output+0x150>)
 8004e18:	f107 030c 	add.w	r3, r7, #12
 8004e1c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8004e90 <low_level_output+0x150>)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8004e24:	6838      	ldr	r0, [r7, #0]
 8004e26:	f00a f9f3 	bl	800f210 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8004e2a:	4919      	ldr	r1, [pc, #100]	@ (8004e90 <low_level_output+0x150>)
 8004e2c:	4819      	ldr	r0, [pc, #100]	@ (8004e94 <low_level_output+0x154>)
 8004e2e:	f7fc fc4b 	bl	80016c8 <HAL_ETH_Transmit_IT>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d103      	bne.n	8004e40 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004e3e:	e01b      	b.n	8004e78 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8004e40:	4814      	ldr	r0, [pc, #80]	@ (8004e94 <low_level_output+0x154>)
 8004e42:	f7fd fa39 	bl	80022b8 <HAL_ETH_GetError>
 8004e46:	4603      	mov	r3, r0
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00d      	beq.n	8004e6c <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8004e50:	4b11      	ldr	r3, [pc, #68]	@ (8004e98 <low_level_output+0x158>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 fdf7 	bl	8005a4c <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8004e5e:	480d      	ldr	r0, [pc, #52]	@ (8004e94 <low_level_output+0x154>)
 8004e60:	f7fc fdb9 	bl	80019d6 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8004e64:	23fe      	movs	r3, #254	@ 0xfe
 8004e66:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004e6a:	e005      	b.n	8004e78 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8004e6c:	6838      	ldr	r0, [r7, #0]
 8004e6e:	f00a f929 	bl	800f0c4 <pbuf_free>
        errval =  ERR_IF;
 8004e72:	23f4      	movs	r3, #244	@ 0xf4
 8004e74:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8004e78:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8004e7c:	f113 0f02 	cmn.w	r3, #2
 8004e80:	d0d3      	beq.n	8004e2a <low_level_output+0xea>

  return errval;
 8004e82:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3748      	adds	r7, #72	@ 0x48
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	24000370 	.word	0x24000370
 8004e94:	240002c0 	.word	0x240002c0
 8004e98:	240002bc 	.word	0x240002bc

08004e9c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004ea8:	4b07      	ldr	r3, [pc, #28]	@ (8004ec8 <low_level_input+0x2c>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d105      	bne.n	8004ebc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004eb0:	f107 030c 	add.w	r3, r7, #12
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4805      	ldr	r0, [pc, #20]	@ (8004ecc <low_level_input+0x30>)
 8004eb8:	f7fc fc57 	bl	800176a <HAL_ETH_ReadData>
  }

  return p;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	240002b4 	.word	0x240002b4
 8004ecc:	240002c0 	.word	0x240002c0

08004ed0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8004f20 <ethernetif_input+0x50>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f000 fdaf 	bl	8005a4c <osSemaphoreAcquire>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1f5      	bne.n	8004ee0 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004ef4:	68b8      	ldr	r0, [r7, #8]
 8004ef6:	f7ff ffd1 	bl	8004e9c <low_level_input>
 8004efa:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	68b9      	ldr	r1, [r7, #8]
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	4798      	blx	r3
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f00a f8d6 	bl	800f0c4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1ea      	bne.n	8004ef4 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004f1e:	e7df      	b.n	8004ee0 <ethernetif_input+0x10>
 8004f20:	240002b8 	.word	0x240002b8

08004f24 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <ethernetif_init+0x1c>
 8004f32:	4b0e      	ldr	r3, [pc, #56]	@ (8004f6c <ethernetif_init+0x48>)
 8004f34:	f240 2215 	movw	r2, #533	@ 0x215
 8004f38:	490d      	ldr	r1, [pc, #52]	@ (8004f70 <ethernetif_init+0x4c>)
 8004f3a:	480e      	ldr	r0, [pc, #56]	@ (8004f74 <ethernetif_init+0x50>)
 8004f3c:	f012 f80e 	bl	8016f5c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2273      	movs	r2, #115	@ 0x73
 8004f44:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2274      	movs	r2, #116	@ 0x74
 8004f4c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a09      	ldr	r2, [pc, #36]	@ (8004f78 <ethernetif_init+0x54>)
 8004f54:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a08      	ldr	r2, [pc, #32]	@ (8004f7c <ethernetif_init+0x58>)
 8004f5a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7ff fdaf 	bl	8004ac0 <low_level_init>

  return ERR_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	0801822c 	.word	0x0801822c
 8004f70:	08018248 	.word	0x08018248
 8004f74:	08018258 	.word	0x08018258
 8004f78:	0800ba51 	.word	0x0800ba51
 8004f7c:	08004d41 	.word	0x08004d41

08004f80 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004f8c:	68f9      	ldr	r1, [r7, #12]
 8004f8e:	4809      	ldr	r0, [pc, #36]	@ (8004fb4 <pbuf_free_custom+0x34>)
 8004f90:	f009 f9b2 	bl	800e2f8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004f94:	4b08      	ldr	r3, [pc, #32]	@ (8004fb8 <pbuf_free_custom+0x38>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d107      	bne.n	8004fac <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004f9c:	4b06      	ldr	r3, [pc, #24]	@ (8004fb8 <pbuf_free_custom+0x38>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004fa2:	4b06      	ldr	r3, [pc, #24]	@ (8004fbc <pbuf_free_custom+0x3c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fda2 	bl	8005af0 <osSemaphoreRelease>
  }
}
 8004fac:	bf00      	nop
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	0801b95c 	.word	0x0801b95c
 8004fb8:	240002b4 	.word	0x240002b4
 8004fbc:	240002b8 	.word	0x240002b8

08004fc0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004fc4:	f7fc f800 	bl	8000fc8 <HAL_GetTick>
 8004fc8:	4603      	mov	r3, r0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	bd80      	pop	{r7, pc}
	...

08004fd0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08e      	sub	sp, #56	@ 0x38
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	605a      	str	r2, [r3, #4]
 8004fe2:	609a      	str	r2, [r3, #8]
 8004fe4:	60da      	str	r2, [r3, #12]
 8004fe6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a5d      	ldr	r2, [pc, #372]	@ (8005164 <HAL_ETH_MspInit+0x194>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	f040 80b3 	bne.w	800515a <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004ff4:	4b5c      	ldr	r3, [pc, #368]	@ (8005168 <HAL_ETH_MspInit+0x198>)
 8004ff6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004ffa:	4a5b      	ldr	r2, [pc, #364]	@ (8005168 <HAL_ETH_MspInit+0x198>)
 8004ffc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005000:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005004:	4b58      	ldr	r3, [pc, #352]	@ (8005168 <HAL_ETH_MspInit+0x198>)
 8005006:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800500a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800500e:	623b      	str	r3, [r7, #32]
 8005010:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8005012:	4b55      	ldr	r3, [pc, #340]	@ (8005168 <HAL_ETH_MspInit+0x198>)
 8005014:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005018:	4a53      	ldr	r2, [pc, #332]	@ (8005168 <HAL_ETH_MspInit+0x198>)
 800501a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800501e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005022:	4b51      	ldr	r3, [pc, #324]	@ (8005168 <HAL_ETH_MspInit+0x198>)
 8005024:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005028:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800502c:	61fb      	str	r3, [r7, #28]
 800502e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8005030:	4b4d      	ldr	r3, [pc, #308]	@ (8005168 <HAL_ETH_MspInit+0x198>)
 8005032:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005036:	4a4c      	ldr	r2, [pc, #304]	@ (8005168 <HAL_ETH_MspInit+0x198>)
 8005038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800503c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005040:	4b49      	ldr	r3, [pc, #292]	@ (8005168 <HAL_ETH_MspInit+0x198>)
 8005042:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800504a:	61bb      	str	r3, [r7, #24]
 800504c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800504e:	4b46      	ldr	r3, [pc, #280]	@ (8005168 <HAL_ETH_MspInit+0x198>)
 8005050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005054:	4a44      	ldr	r2, [pc, #272]	@ (8005168 <HAL_ETH_MspInit+0x198>)
 8005056:	f043 0304 	orr.w	r3, r3, #4
 800505a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800505e:	4b42      	ldr	r3, [pc, #264]	@ (8005168 <HAL_ETH_MspInit+0x198>)
 8005060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800506c:	4b3e      	ldr	r3, [pc, #248]	@ (8005168 <HAL_ETH_MspInit+0x198>)
 800506e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005072:	4a3d      	ldr	r2, [pc, #244]	@ (8005168 <HAL_ETH_MspInit+0x198>)
 8005074:	f043 0301 	orr.w	r3, r3, #1
 8005078:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800507c:	4b3a      	ldr	r3, [pc, #232]	@ (8005168 <HAL_ETH_MspInit+0x198>)
 800507e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	613b      	str	r3, [r7, #16]
 8005088:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800508a:	4b37      	ldr	r3, [pc, #220]	@ (8005168 <HAL_ETH_MspInit+0x198>)
 800508c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005090:	4a35      	ldr	r2, [pc, #212]	@ (8005168 <HAL_ETH_MspInit+0x198>)
 8005092:	f043 0302 	orr.w	r3, r3, #2
 8005096:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800509a:	4b33      	ldr	r3, [pc, #204]	@ (8005168 <HAL_ETH_MspInit+0x198>)
 800509c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80050a8:	4b2f      	ldr	r3, [pc, #188]	@ (8005168 <HAL_ETH_MspInit+0x198>)
 80050aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050ae:	4a2e      	ldr	r2, [pc, #184]	@ (8005168 <HAL_ETH_MspInit+0x198>)
 80050b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80050b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005168 <HAL_ETH_MspInit+0x198>)
 80050ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c2:	60bb      	str	r3, [r7, #8]
 80050c4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80050c6:	2332      	movs	r3, #50	@ 0x32
 80050c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ca:	2302      	movs	r3, #2
 80050cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050d2:	2303      	movs	r3, #3
 80050d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80050d6:	230b      	movs	r3, #11
 80050d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050de:	4619      	mov	r1, r3
 80050e0:	4822      	ldr	r0, [pc, #136]	@ (800516c <HAL_ETH_MspInit+0x19c>)
 80050e2:	f7fd fe85 	bl	8002df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80050e6:	2386      	movs	r3, #134	@ 0x86
 80050e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ea:	2302      	movs	r3, #2
 80050ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050f2:	2303      	movs	r3, #3
 80050f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80050f6:	230b      	movs	r3, #11
 80050f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050fe:	4619      	mov	r1, r3
 8005100:	481b      	ldr	r0, [pc, #108]	@ (8005170 <HAL_ETH_MspInit+0x1a0>)
 8005102:	f7fd fe75 	bl	8002df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005106:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800510a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800510c:	2302      	movs	r3, #2
 800510e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005110:	2300      	movs	r3, #0
 8005112:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005114:	2303      	movs	r3, #3
 8005116:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005118:	230b      	movs	r3, #11
 800511a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800511c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005120:	4619      	mov	r1, r3
 8005122:	4814      	ldr	r0, [pc, #80]	@ (8005174 <HAL_ETH_MspInit+0x1a4>)
 8005124:	f7fd fe64 	bl	8002df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8005128:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800512c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800512e:	2302      	movs	r3, #2
 8005130:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005132:	2300      	movs	r3, #0
 8005134:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005136:	2303      	movs	r3, #3
 8005138:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800513a:	230b      	movs	r3, #11
 800513c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800513e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005142:	4619      	mov	r1, r3
 8005144:	480c      	ldr	r0, [pc, #48]	@ (8005178 <HAL_ETH_MspInit+0x1a8>)
 8005146:	f7fd fe53 	bl	8002df0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800514a:	2200      	movs	r2, #0
 800514c:	2105      	movs	r1, #5
 800514e:	203d      	movs	r0, #61	@ 0x3d
 8005150:	f7fc f81e 	bl	8001190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005154:	203d      	movs	r0, #61	@ 0x3d
 8005156:	f7fc f835 	bl	80011c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800515a:	bf00      	nop
 800515c:	3738      	adds	r7, #56	@ 0x38
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	40028000 	.word	0x40028000
 8005168:	58024400 	.word	0x58024400
 800516c:	58020800 	.word	0x58020800
 8005170:	58020000 	.word	0x58020000
 8005174:	58020400 	.word	0x58020400
 8005178:	58021800 	.word	0x58021800

0800517c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005180:	4802      	ldr	r0, [pc, #8]	@ (800518c <ETH_PHY_IO_Init+0x10>)
 8005182:	f7fd f849 	bl	8002218 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	bd80      	pop	{r7, pc}
 800518c:	240002c0 	.word	0x240002c0

08005190 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  return 0;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	68f9      	ldr	r1, [r7, #12]
 80051b2:	4807      	ldr	r0, [pc, #28]	@ (80051d0 <ETH_PHY_IO_ReadReg+0x30>)
 80051b4:	f7fc fd9a 	bl	8001cec <HAL_ETH_ReadPHYRegister>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80051be:	f04f 33ff 	mov.w	r3, #4294967295
 80051c2:	e000      	b.n	80051c6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	240002c0 	.word	0x240002c0

080051d4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	68f9      	ldr	r1, [r7, #12]
 80051e6:	4807      	ldr	r0, [pc, #28]	@ (8005204 <ETH_PHY_IO_WriteReg+0x30>)
 80051e8:	f7fc fdd4 	bl	8001d94 <HAL_ETH_WritePHYRegister>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80051f2:	f04f 33ff 	mov.w	r3, #4294967295
 80051f6:	e000      	b.n	80051fa <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	240002c0 	.word	0x240002c0

08005208 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800520c:	f7fb fedc 	bl	8000fc8 <HAL_GetTick>
 8005210:	4603      	mov	r3, r0
}
 8005212:	4618      	mov	r0, r3
 8005214:	bd80      	pop	{r7, pc}
	...

08005218 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b0a0      	sub	sp, #128	@ 0x80
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005220:	f107 0308 	add.w	r3, r7, #8
 8005224:	2264      	movs	r2, #100	@ 0x64
 8005226:	2100      	movs	r1, #0
 8005228:	4618      	mov	r0, r3
 800522a:	f011 ff38 	bl	801709e <memset>
  int32_t PHYLinkState = 0;
 800522e:	2300      	movs	r3, #0
 8005230:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005236:	2300      	movs	r3, #0
 8005238:	67bb      	str	r3, [r7, #120]	@ 0x78
 800523a:	2300      	movs	r3, #0
 800523c:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005242:	483a      	ldr	r0, [pc, #232]	@ (800532c <ethernet_link_thread+0x114>)
 8005244:	f7fb fde8 	bl	8000e18 <LAN8742_GetLinkState>
 8005248:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800524a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800524c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005250:	089b      	lsrs	r3, r3, #2
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00c      	beq.n	8005276 <ethernet_link_thread+0x5e>
 800525c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800525e:	2b01      	cmp	r3, #1
 8005260:	dc09      	bgt.n	8005276 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8005262:	4833      	ldr	r0, [pc, #204]	@ (8005330 <ethernet_link_thread+0x118>)
 8005264:	f7fc f9b8 	bl	80015d8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005268:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800526a:	f009 fae7 	bl	800e83c <netif_set_down>
    netif_set_link_down(netif);
 800526e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005270:	f009 fb4a 	bl	800e908 <netif_set_link_down>
 8005274:	e055      	b.n	8005322 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005276:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005278:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b00      	cmp	r3, #0
 8005282:	d14e      	bne.n	8005322 <ethernet_link_thread+0x10a>
 8005284:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005286:	2b01      	cmp	r3, #1
 8005288:	dd4b      	ble.n	8005322 <ethernet_link_thread+0x10a>
  {

    switch (PHYLinkState)
 800528a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800528c:	3b02      	subs	r3, #2
 800528e:	2b03      	cmp	r3, #3
 8005290:	d82a      	bhi.n	80052e8 <ethernet_link_thread+0xd0>
 8005292:	a201      	add	r2, pc, #4	@ (adr r2, 8005298 <ethernet_link_thread+0x80>)
 8005294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005298:	080052a9 	.word	0x080052a9
 800529c:	080052bb 	.word	0x080052bb
 80052a0:	080052cb 	.word	0x080052cb
 80052a4:	080052db 	.word	0x080052db
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80052a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80052ac:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80052ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80052b2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80052b4:	2301      	movs	r3, #1
 80052b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80052b8:	e017      	b.n	80052ea <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80052ba:	2300      	movs	r3, #0
 80052bc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80052be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80052c2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80052c4:	2301      	movs	r3, #1
 80052c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80052c8:	e00f      	b.n	80052ea <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80052ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80052ce:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80052d0:	2300      	movs	r3, #0
 80052d2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80052d4:	2301      	movs	r3, #1
 80052d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80052d8:	e007      	b.n	80052ea <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80052da:	2300      	movs	r3, #0
 80052dc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80052de:	2300      	movs	r3, #0
 80052e0:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80052e2:	2301      	movs	r3, #1
 80052e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80052e6:	e000      	b.n	80052ea <ethernet_link_thread+0xd2>
    default:
      break;
 80052e8:	bf00      	nop
    }

    if(linkchanged)
 80052ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d018      	beq.n	8005322 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80052f0:	f107 0308 	add.w	r3, r7, #8
 80052f4:	4619      	mov	r1, r3
 80052f6:	480e      	ldr	r0, [pc, #56]	@ (8005330 <ethernet_link_thread+0x118>)
 80052f8:	f7fc fda0 	bl	8001e3c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80052fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052fe:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005300:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005302:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005304:	f107 0308 	add.w	r3, r7, #8
 8005308:	4619      	mov	r1, r3
 800530a:	4809      	ldr	r0, [pc, #36]	@ (8005330 <ethernet_link_thread+0x118>)
 800530c:	f7fc ff6a 	bl	80021e4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8005310:	4807      	ldr	r0, [pc, #28]	@ (8005330 <ethernet_link_thread+0x118>)
 8005312:	f7fc f8ed 	bl	80014f0 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8005316:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005318:	f009 fa24 	bl	800e764 <netif_set_up>
      netif_set_link_up(netif);
 800531c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800531e:	f009 fabf 	bl	800e8a0 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8005322:	2064      	movs	r0, #100	@ 0x64
 8005324:	f000 f9e0 	bl	80056e8 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005328:	e78b      	b.n	8005242 <ethernet_link_thread+0x2a>
 800532a:	bf00      	nop
 800532c:	240003a8 	.word	0x240003a8
 8005330:	240002c0 	.word	0x240002c0

08005334 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af02      	add	r7, sp, #8
 800533a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800533c:	4812      	ldr	r0, [pc, #72]	@ (8005388 <HAL_ETH_RxAllocateCallback+0x54>)
 800533e:	f008 ff67 	bl	800e210 <memp_malloc_pool>
 8005342:	60f8      	str	r0, [r7, #12]
  if (p)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d014      	beq.n	8005374 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f103 0220 	add.w	r2, r3, #32
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4a0d      	ldr	r2, [pc, #52]	@ (800538c <HAL_ETH_RxAllocateCallback+0x58>)
 8005358:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8005362:	9201      	str	r2, [sp, #4]
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2241      	movs	r2, #65	@ 0x41
 800536a:	2100      	movs	r1, #0
 800536c:	2000      	movs	r0, #0
 800536e:	f009 fcef 	bl	800ed50 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005372:	e005      	b.n	8005380 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005374:	4b06      	ldr	r3, [pc, #24]	@ (8005390 <HAL_ETH_RxAllocateCallback+0x5c>)
 8005376:	2201      	movs	r2, #1
 8005378:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]
}
 8005380:	bf00      	nop
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	0801b95c 	.word	0x0801b95c
 800538c:	08004f81 	.word	0x08004f81
 8005390:	240002b4 	.word	0x240002b4

08005394 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005394:	b480      	push	{r7}
 8005396:	b08d      	sub	sp, #52	@ 0x34
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 80053aa:	2300      	movs	r3, #0
 80053ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3b20      	subs	r3, #32
 80053b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 80053b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b6:	2200      	movs	r2, #0
 80053b8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80053ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053bc:	2200      	movs	r2, #0
 80053be:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80053c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c2:	887a      	ldrh	r2, [r7, #2]
 80053c4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80053c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d103      	bne.n	80053d6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80053ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	e003      	b.n	80053de <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80053d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053dc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053e2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80053e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053ea:	e009      	b.n	8005400 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80053ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ee:	891a      	ldrh	r2, [r3, #8]
 80053f0:	887b      	ldrh	r3, [r7, #2]
 80053f2:	4413      	add	r3, r2
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80053fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1f2      	bne.n	80053ec <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8005406:	887b      	ldrh	r3, [r7, #2]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	623a      	str	r2, [r7, #32]
 800540c:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	2b00      	cmp	r3, #0
 8005412:	dd1d      	ble.n	8005450 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	f003 021f 	and.w	r2, r3, #31
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	4413      	add	r3, r2
 800541e:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005424:	f3bf 8f4f 	dsb	sy
}
 8005428:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800542a:	4a0d      	ldr	r2, [pc, #52]	@ (8005460 <HAL_ETH_RxLinkCallback+0xcc>)
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	3320      	adds	r3, #32
 8005436:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	3b20      	subs	r3, #32
 800543c:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	2b00      	cmp	r3, #0
 8005442:	dcf2      	bgt.n	800542a <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8005444:	f3bf 8f4f 	dsb	sy
}
 8005448:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800544a:	f3bf 8f6f 	isb	sy
}
 800544e:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8005450:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005452:	bf00      	nop
 8005454:	3734      	adds	r7, #52	@ 0x34
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	e000ed00 	.word	0xe000ed00

08005464 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f009 fe29 	bl	800f0c4 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005472:	bf00      	nop
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
	...

0800547c <__NVIC_SetPriority>:
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	4603      	mov	r3, r0
 8005484:	6039      	str	r1, [r7, #0]
 8005486:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005488:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800548c:	2b00      	cmp	r3, #0
 800548e:	db0a      	blt.n	80054a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	b2da      	uxtb	r2, r3
 8005494:	490c      	ldr	r1, [pc, #48]	@ (80054c8 <__NVIC_SetPriority+0x4c>)
 8005496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800549a:	0112      	lsls	r2, r2, #4
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	440b      	add	r3, r1
 80054a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80054a4:	e00a      	b.n	80054bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	4908      	ldr	r1, [pc, #32]	@ (80054cc <__NVIC_SetPriority+0x50>)
 80054ac:	88fb      	ldrh	r3, [r7, #6]
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	3b04      	subs	r3, #4
 80054b4:	0112      	lsls	r2, r2, #4
 80054b6:	b2d2      	uxtb	r2, r2
 80054b8:	440b      	add	r3, r1
 80054ba:	761a      	strb	r2, [r3, #24]
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	e000e100 	.word	0xe000e100
 80054cc:	e000ed00 	.word	0xe000ed00

080054d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80054d4:	4b05      	ldr	r3, [pc, #20]	@ (80054ec <SysTick_Handler+0x1c>)
 80054d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80054d8:	f003 f9ba 	bl	8008850 <xTaskGetSchedulerState>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d001      	beq.n	80054e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80054e2:	f001 f979 	bl	80067d8 <xPortSysTickHandler>
  }
}
 80054e6:	bf00      	nop
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	e000e010 	.word	0xe000e010

080054f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80054f4:	2100      	movs	r1, #0
 80054f6:	f06f 0004 	mvn.w	r0, #4
 80054fa:	f7ff ffbf 	bl	800547c <__NVIC_SetPriority>
#endif
}
 80054fe:	bf00      	nop
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800550a:	f3ef 8305 	mrs	r3, IPSR
 800550e:	603b      	str	r3, [r7, #0]
  return(result);
 8005510:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005516:	f06f 0305 	mvn.w	r3, #5
 800551a:	607b      	str	r3, [r7, #4]
 800551c:	e00c      	b.n	8005538 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800551e:	4b0a      	ldr	r3, [pc, #40]	@ (8005548 <osKernelInitialize+0x44>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d105      	bne.n	8005532 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005526:	4b08      	ldr	r3, [pc, #32]	@ (8005548 <osKernelInitialize+0x44>)
 8005528:	2201      	movs	r2, #1
 800552a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800552c:	2300      	movs	r3, #0
 800552e:	607b      	str	r3, [r7, #4]
 8005530:	e002      	b.n	8005538 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005532:	f04f 33ff 	mov.w	r3, #4294967295
 8005536:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005538:	687b      	ldr	r3, [r7, #4]
}
 800553a:	4618      	mov	r0, r3
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	240003c8 	.word	0x240003c8

0800554c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005552:	f3ef 8305 	mrs	r3, IPSR
 8005556:	603b      	str	r3, [r7, #0]
  return(result);
 8005558:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <osKernelStart+0x1a>
    stat = osErrorISR;
 800555e:	f06f 0305 	mvn.w	r3, #5
 8005562:	607b      	str	r3, [r7, #4]
 8005564:	e010      	b.n	8005588 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005566:	4b0b      	ldr	r3, [pc, #44]	@ (8005594 <osKernelStart+0x48>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d109      	bne.n	8005582 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800556e:	f7ff ffbf 	bl	80054f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005572:	4b08      	ldr	r3, [pc, #32]	@ (8005594 <osKernelStart+0x48>)
 8005574:	2202      	movs	r2, #2
 8005576:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005578:	f002 fcd6 	bl	8007f28 <vTaskStartScheduler>
      stat = osOK;
 800557c:	2300      	movs	r3, #0
 800557e:	607b      	str	r3, [r7, #4]
 8005580:	e002      	b.n	8005588 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005582:	f04f 33ff 	mov.w	r3, #4294967295
 8005586:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005588:	687b      	ldr	r3, [r7, #4]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	240003c8 	.word	0x240003c8

08005598 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800559e:	f3ef 8305 	mrs	r3, IPSR
 80055a2:	603b      	str	r3, [r7, #0]
  return(result);
 80055a4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80055aa:	f002 fde9 	bl	8008180 <xTaskGetTickCountFromISR>
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	e002      	b.n	80055b8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80055b2:	f002 fdd5 	bl	8008160 <xTaskGetTickCount>
 80055b6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80055b8:	687b      	ldr	r3, [r7, #4]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b08e      	sub	sp, #56	@ 0x38
 80055c6:	af04      	add	r7, sp, #16
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80055ce:	2300      	movs	r3, #0
 80055d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055d2:	f3ef 8305 	mrs	r3, IPSR
 80055d6:	617b      	str	r3, [r7, #20]
  return(result);
 80055d8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d17f      	bne.n	80056de <osThreadNew+0x11c>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d07c      	beq.n	80056de <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 80055e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80055e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80055ea:	2318      	movs	r3, #24
 80055ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80055ee:	2300      	movs	r3, #0
 80055f0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80055f2:	f04f 33ff 	mov.w	r3, #4294967295
 80055f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d045      	beq.n	800568a <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <osThreadNew+0x4a>
        name = attr->name;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d008      	beq.n	8005632 <osThreadNew+0x70>
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	2b38      	cmp	r3, #56	@ 0x38
 8005624:	d805      	bhi.n	8005632 <osThreadNew+0x70>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <osThreadNew+0x74>
        return (NULL);
 8005632:	2300      	movs	r3, #0
 8005634:	e054      	b.n	80056e0 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	089b      	lsrs	r3, r3, #2
 8005644:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00e      	beq.n	800566c <osThreadNew+0xaa>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	2ba7      	cmp	r3, #167	@ 0xa7
 8005654:	d90a      	bls.n	800566c <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800565a:	2b00      	cmp	r3, #0
 800565c:	d006      	beq.n	800566c <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d002      	beq.n	800566c <osThreadNew+0xaa>
        mem = 1;
 8005666:	2301      	movs	r3, #1
 8005668:	61bb      	str	r3, [r7, #24]
 800566a:	e010      	b.n	800568e <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10c      	bne.n	800568e <osThreadNew+0xcc>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d108      	bne.n	800568e <osThreadNew+0xcc>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d104      	bne.n	800568e <osThreadNew+0xcc>
          mem = 0;
 8005684:	2300      	movs	r3, #0
 8005686:	61bb      	str	r3, [r7, #24]
 8005688:	e001      	b.n	800568e <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800568a:	2300      	movs	r3, #0
 800568c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d110      	bne.n	80056b6 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800569c:	9202      	str	r2, [sp, #8]
 800569e:	9301      	str	r3, [sp, #4]
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	6a3a      	ldr	r2, [r7, #32]
 80056a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f002 fa48 	bl	8007b40 <xTaskCreateStatic>
 80056b0:	4603      	mov	r3, r0
 80056b2:	613b      	str	r3, [r7, #16]
 80056b4:	e013      	b.n	80056de <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d110      	bne.n	80056de <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	b29a      	uxth	r2, r3
 80056c0:	f107 0310 	add.w	r3, r7, #16
 80056c4:	9301      	str	r3, [sp, #4]
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f002 fa96 	bl	8007c00 <xTaskCreate>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d001      	beq.n	80056de <osThreadNew+0x11c>
            hTask = NULL;
 80056da:	2300      	movs	r3, #0
 80056dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80056de:	693b      	ldr	r3, [r7, #16]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3728      	adds	r7, #40	@ 0x28
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056f0:	f3ef 8305 	mrs	r3, IPSR
 80056f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80056f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <osDelay+0x1c>
    stat = osErrorISR;
 80056fc:	f06f 0305 	mvn.w	r3, #5
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	e007      	b.n	8005714 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005704:	2300      	movs	r3, #0
 8005706:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <osDelay+0x2c>
      vTaskDelay(ticks);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f002 fbd4 	bl	8007ebc <vTaskDelay>
    }
  }

  return (stat);
 8005714:	68fb      	ldr	r3, [r7, #12]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800571e:	b580      	push	{r7, lr}
 8005720:	b088      	sub	sp, #32
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005726:	2300      	movs	r3, #0
 8005728:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800572a:	f3ef 8305 	mrs	r3, IPSR
 800572e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005730:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005732:	2b00      	cmp	r3, #0
 8005734:	d174      	bne.n	8005820 <osMutexNew+0x102>
    if (attr != NULL) {
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <osMutexNew+0x26>
      type = attr->attr_bits;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	61bb      	str	r3, [r7, #24]
 8005742:	e001      	b.n	8005748 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <osMutexNew+0x3a>
      rmtx = 1U;
 8005752:	2301      	movs	r3, #1
 8005754:	617b      	str	r3, [r7, #20]
 8005756:	e001      	b.n	800575c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	f003 0308 	and.w	r3, r3, #8
 8005762:	2b00      	cmp	r3, #0
 8005764:	d15c      	bne.n	8005820 <osMutexNew+0x102>
      mem = -1;
 8005766:	f04f 33ff 	mov.w	r3, #4294967295
 800576a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d015      	beq.n	800579e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d006      	beq.n	8005788 <osMutexNew+0x6a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	2b4f      	cmp	r3, #79	@ 0x4f
 8005780:	d902      	bls.n	8005788 <osMutexNew+0x6a>
          mem = 1;
 8005782:	2301      	movs	r3, #1
 8005784:	613b      	str	r3, [r7, #16]
 8005786:	e00c      	b.n	80057a2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d108      	bne.n	80057a2 <osMutexNew+0x84>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d104      	bne.n	80057a2 <osMutexNew+0x84>
            mem = 0;
 8005798:	2300      	movs	r3, #0
 800579a:	613b      	str	r3, [r7, #16]
 800579c:	e001      	b.n	80057a2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800579e:	2300      	movs	r3, #0
 80057a0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d112      	bne.n	80057ce <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d007      	beq.n	80057be <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	4619      	mov	r1, r3
 80057b4:	2004      	movs	r0, #4
 80057b6:	f001 fa18 	bl	8006bea <xQueueCreateMutexStatic>
 80057ba:	61f8      	str	r0, [r7, #28]
 80057bc:	e016      	b.n	80057ec <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	4619      	mov	r1, r3
 80057c4:	2001      	movs	r0, #1
 80057c6:	f001 fa10 	bl	8006bea <xQueueCreateMutexStatic>
 80057ca:	61f8      	str	r0, [r7, #28]
 80057cc:	e00e      	b.n	80057ec <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10b      	bne.n	80057ec <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d004      	beq.n	80057e4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80057da:	2004      	movs	r0, #4
 80057dc:	f001 f9ed 	bl	8006bba <xQueueCreateMutex>
 80057e0:	61f8      	str	r0, [r7, #28]
 80057e2:	e003      	b.n	80057ec <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80057e4:	2001      	movs	r0, #1
 80057e6:	f001 f9e8 	bl	8006bba <xQueueCreateMutex>
 80057ea:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00c      	beq.n	800580c <osMutexNew+0xee>
        if (attr != NULL) {
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <osMutexNew+0xe2>
          name = attr->name;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	60fb      	str	r3, [r7, #12]
 80057fe:	e001      	b.n	8005804 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005800:	2300      	movs	r3, #0
 8005802:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005804:	68f9      	ldr	r1, [r7, #12]
 8005806:	69f8      	ldr	r0, [r7, #28]
 8005808:	f002 f912 	bl	8007a30 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d006      	beq.n	8005820 <osMutexNew+0x102>
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	f043 0301 	orr.w	r3, r3, #1
 800581e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005820:	69fb      	ldr	r3, [r7, #28]
}
 8005822:	4618      	mov	r0, r3
 8005824:	3720      	adds	r7, #32
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800582a:	b580      	push	{r7, lr}
 800582c:	b086      	sub	sp, #24
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f023 0301 	bic.w	r3, r3, #1
 800583a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005844:	2300      	movs	r3, #0
 8005846:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005848:	f3ef 8305 	mrs	r3, IPSR
 800584c:	60bb      	str	r3, [r7, #8]
  return(result);
 800584e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005854:	f06f 0305 	mvn.w	r3, #5
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	e02c      	b.n	80058b6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d103      	bne.n	800586a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005862:	f06f 0303 	mvn.w	r3, #3
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	e025      	b.n	80058b6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d011      	beq.n	8005894 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005870:	6839      	ldr	r1, [r7, #0]
 8005872:	6938      	ldr	r0, [r7, #16]
 8005874:	f001 fa09 	bl	8006c8a <xQueueTakeMutexRecursive>
 8005878:	4603      	mov	r3, r0
 800587a:	2b01      	cmp	r3, #1
 800587c:	d01b      	beq.n	80058b6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005884:	f06f 0301 	mvn.w	r3, #1
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	e014      	b.n	80058b6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800588c:	f06f 0302 	mvn.w	r3, #2
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	e010      	b.n	80058b6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005894:	6839      	ldr	r1, [r7, #0]
 8005896:	6938      	ldr	r0, [r7, #16]
 8005898:	f001 fdae 	bl	80073f8 <xQueueSemaphoreTake>
 800589c:	4603      	mov	r3, r0
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d009      	beq.n	80058b6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80058a8:	f06f 0301 	mvn.w	r3, #1
 80058ac:	617b      	str	r3, [r7, #20]
 80058ae:	e002      	b.n	80058b6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80058b0:	f06f 0302 	mvn.w	r3, #2
 80058b4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80058b6:	697b      	ldr	r3, [r7, #20]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3718      	adds	r7, #24
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f023 0301 	bic.w	r3, r3, #1
 80058ce:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80058d8:	2300      	movs	r3, #0
 80058da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058dc:	f3ef 8305 	mrs	r3, IPSR
 80058e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80058e2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <osMutexRelease+0x30>
    stat = osErrorISR;
 80058e8:	f06f 0305 	mvn.w	r3, #5
 80058ec:	617b      	str	r3, [r7, #20]
 80058ee:	e01f      	b.n	8005930 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d103      	bne.n	80058fe <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80058f6:	f06f 0303 	mvn.w	r3, #3
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	e018      	b.n	8005930 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d009      	beq.n	8005918 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005904:	6938      	ldr	r0, [r7, #16]
 8005906:	f001 f98b 	bl	8006c20 <xQueueGiveMutexRecursive>
 800590a:	4603      	mov	r3, r0
 800590c:	2b01      	cmp	r3, #1
 800590e:	d00f      	beq.n	8005930 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005910:	f06f 0302 	mvn.w	r3, #2
 8005914:	617b      	str	r3, [r7, #20]
 8005916:	e00b      	b.n	8005930 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005918:	2300      	movs	r3, #0
 800591a:	2200      	movs	r2, #0
 800591c:	2100      	movs	r1, #0
 800591e:	6938      	ldr	r0, [r7, #16]
 8005920:	f001 fa58 	bl	8006dd4 <xQueueGenericSend>
 8005924:	4603      	mov	r3, r0
 8005926:	2b01      	cmp	r3, #1
 8005928:	d002      	beq.n	8005930 <osMutexRelease+0x70>
        stat = osErrorResource;
 800592a:	f06f 0302 	mvn.w	r3, #2
 800592e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005930:	697b      	ldr	r3, [r7, #20]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800593a:	b580      	push	{r7, lr}
 800593c:	b08a      	sub	sp, #40	@ 0x28
 800593e:	af02      	add	r7, sp, #8
 8005940:	60f8      	str	r0, [r7, #12]
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005946:	2300      	movs	r3, #0
 8005948:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800594a:	f3ef 8305 	mrs	r3, IPSR
 800594e:	613b      	str	r3, [r7, #16]
  return(result);
 8005950:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005952:	2b00      	cmp	r3, #0
 8005954:	d175      	bne.n	8005a42 <osSemaphoreNew+0x108>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d072      	beq.n	8005a42 <osSemaphoreNew+0x108>
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	429a      	cmp	r2, r3
 8005962:	d86e      	bhi.n	8005a42 <osSemaphoreNew+0x108>
    mem = -1;
 8005964:	f04f 33ff 	mov.w	r3, #4294967295
 8005968:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d015      	beq.n	800599c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d006      	beq.n	8005986 <osSemaphoreNew+0x4c>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	2b4f      	cmp	r3, #79	@ 0x4f
 800597e:	d902      	bls.n	8005986 <osSemaphoreNew+0x4c>
        mem = 1;
 8005980:	2301      	movs	r3, #1
 8005982:	61bb      	str	r3, [r7, #24]
 8005984:	e00c      	b.n	80059a0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d108      	bne.n	80059a0 <osSemaphoreNew+0x66>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d104      	bne.n	80059a0 <osSemaphoreNew+0x66>
          mem = 0;
 8005996:	2300      	movs	r3, #0
 8005998:	61bb      	str	r3, [r7, #24]
 800599a:	e001      	b.n	80059a0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800599c:	2300      	movs	r3, #0
 800599e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a6:	d04c      	beq.n	8005a42 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d128      	bne.n	8005a00 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d10a      	bne.n	80059ca <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	2203      	movs	r2, #3
 80059ba:	9200      	str	r2, [sp, #0]
 80059bc:	2200      	movs	r2, #0
 80059be:	2100      	movs	r1, #0
 80059c0:	2001      	movs	r0, #1
 80059c2:	f001 f805 	bl	80069d0 <xQueueGenericCreateStatic>
 80059c6:	61f8      	str	r0, [r7, #28]
 80059c8:	e005      	b.n	80059d6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80059ca:	2203      	movs	r2, #3
 80059cc:	2100      	movs	r1, #0
 80059ce:	2001      	movs	r0, #1
 80059d0:	f001 f87b 	bl	8006aca <xQueueGenericCreate>
 80059d4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d022      	beq.n	8005a22 <osSemaphoreNew+0xe8>
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d01f      	beq.n	8005a22 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80059e2:	2300      	movs	r3, #0
 80059e4:	2200      	movs	r2, #0
 80059e6:	2100      	movs	r1, #0
 80059e8:	69f8      	ldr	r0, [r7, #28]
 80059ea:	f001 f9f3 	bl	8006dd4 <xQueueGenericSend>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d016      	beq.n	8005a22 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80059f4:	69f8      	ldr	r0, [r7, #28]
 80059f6:	f001 fecf 	bl	8007798 <vQueueDelete>
            hSemaphore = NULL;
 80059fa:	2300      	movs	r3, #0
 80059fc:	61fb      	str	r3, [r7, #28]
 80059fe:	e010      	b.n	8005a22 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d108      	bne.n	8005a18 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	68b9      	ldr	r1, [r7, #8]
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f001 f972 	bl	8006cf8 <xQueueCreateCountingSemaphoreStatic>
 8005a14:	61f8      	str	r0, [r7, #28]
 8005a16:	e004      	b.n	8005a22 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005a18:	68b9      	ldr	r1, [r7, #8]
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f001 f9a5 	bl	8006d6a <xQueueCreateCountingSemaphore>
 8005a20:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00c      	beq.n	8005a42 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	617b      	str	r3, [r7, #20]
 8005a34:	e001      	b.n	8005a3a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005a36:	2300      	movs	r3, #0
 8005a38:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005a3a:	6979      	ldr	r1, [r7, #20]
 8005a3c:	69f8      	ldr	r0, [r7, #28]
 8005a3e:	f001 fff7 	bl	8007a30 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005a42:	69fb      	ldr	r3, [r7, #28]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3720      	adds	r7, #32
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d103      	bne.n	8005a6c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005a64:	f06f 0303 	mvn.w	r3, #3
 8005a68:	617b      	str	r3, [r7, #20]
 8005a6a:	e039      	b.n	8005ae0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a6c:	f3ef 8305 	mrs	r3, IPSR
 8005a70:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a72:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d022      	beq.n	8005abe <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005a7e:	f06f 0303 	mvn.w	r3, #3
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	e02c      	b.n	8005ae0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005a86:	2300      	movs	r3, #0
 8005a88:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005a8a:	f107 0308 	add.w	r3, r7, #8
 8005a8e:	461a      	mov	r2, r3
 8005a90:	2100      	movs	r1, #0
 8005a92:	6938      	ldr	r0, [r7, #16]
 8005a94:	f001 fdc0 	bl	8007618 <xQueueReceiveFromISR>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d003      	beq.n	8005aa6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005a9e:	f06f 0302 	mvn.w	r3, #2
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	e01c      	b.n	8005ae0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d019      	beq.n	8005ae0 <osSemaphoreAcquire+0x94>
 8005aac:	4b0f      	ldr	r3, [pc, #60]	@ (8005aec <osSemaphoreAcquire+0xa0>)
 8005aae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	e010      	b.n	8005ae0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005abe:	6839      	ldr	r1, [r7, #0]
 8005ac0:	6938      	ldr	r0, [r7, #16]
 8005ac2:	f001 fc99 	bl	80073f8 <xQueueSemaphoreTake>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d009      	beq.n	8005ae0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005ad2:	f06f 0301 	mvn.w	r3, #1
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	e002      	b.n	8005ae0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005ada:	f06f 0302 	mvn.w	r3, #2
 8005ade:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005ae0:	697b      	ldr	r3, [r7, #20]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	e000ed04 	.word	0xe000ed04

08005af0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d103      	bne.n	8005b0e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005b06:	f06f 0303 	mvn.w	r3, #3
 8005b0a:	617b      	str	r3, [r7, #20]
 8005b0c:	e02c      	b.n	8005b68 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b0e:	f3ef 8305 	mrs	r3, IPSR
 8005b12:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b14:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d01a      	beq.n	8005b50 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005b1e:	f107 0308 	add.w	r3, r7, #8
 8005b22:	4619      	mov	r1, r3
 8005b24:	6938      	ldr	r0, [r7, #16]
 8005b26:	f001 faf5 	bl	8007114 <xQueueGiveFromISR>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d003      	beq.n	8005b38 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005b30:	f06f 0302 	mvn.w	r3, #2
 8005b34:	617b      	str	r3, [r7, #20]
 8005b36:	e017      	b.n	8005b68 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d014      	beq.n	8005b68 <osSemaphoreRelease+0x78>
 8005b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b74 <osSemaphoreRelease+0x84>)
 8005b40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	e00b      	b.n	8005b68 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005b50:	2300      	movs	r3, #0
 8005b52:	2200      	movs	r2, #0
 8005b54:	2100      	movs	r1, #0
 8005b56:	6938      	ldr	r0, [r7, #16]
 8005b58:	f001 f93c 	bl	8006dd4 <xQueueGenericSend>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d002      	beq.n	8005b68 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005b62:	f06f 0302 	mvn.w	r3, #2
 8005b66:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005b68:	697b      	ldr	r3, [r7, #20]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	e000ed04 	.word	0xe000ed04

08005b78 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b84:	f3ef 8305 	mrs	r3, IPSR
 8005b88:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8005b90:	f06f 0305 	mvn.w	r3, #5
 8005b94:	617b      	str	r3, [r7, #20]
 8005b96:	e00e      	b.n	8005bb6 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d103      	bne.n	8005ba6 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8005b9e:	f06f 0303 	mvn.w	r3, #3
 8005ba2:	617b      	str	r3, [r7, #20]
 8005ba4:	e007      	b.n	8005bb6 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8005ba6:	6938      	ldr	r0, [r7, #16]
 8005ba8:	f001 ff6c 	bl	8007a84 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005bac:	2300      	movs	r3, #0
 8005bae:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8005bb0:	6938      	ldr	r0, [r7, #16]
 8005bb2:	f001 fdf1 	bl	8007798 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005bb6:	697b      	ldr	r3, [r7, #20]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3718      	adds	r7, #24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08a      	sub	sp, #40	@ 0x28
 8005bc4:	af02      	add	r7, sp, #8
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bd0:	f3ef 8305 	mrs	r3, IPSR
 8005bd4:	613b      	str	r3, [r7, #16]
  return(result);
 8005bd6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d15f      	bne.n	8005c9c <osMessageQueueNew+0xdc>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d05c      	beq.n	8005c9c <osMessageQueueNew+0xdc>
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d059      	beq.n	8005c9c <osMessageQueueNew+0xdc>
    mem = -1;
 8005be8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d029      	beq.n	8005c48 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d012      	beq.n	8005c22 <osMessageQueueNew+0x62>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	2b4f      	cmp	r3, #79	@ 0x4f
 8005c02:	d90e      	bls.n	8005c22 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00a      	beq.n	8005c22 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	695a      	ldr	r2, [r3, #20]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	fb01 f303 	mul.w	r3, r1, r3
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d302      	bcc.n	8005c22 <osMessageQueueNew+0x62>
        mem = 1;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	61bb      	str	r3, [r7, #24]
 8005c20:	e014      	b.n	8005c4c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d110      	bne.n	8005c4c <osMessageQueueNew+0x8c>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10c      	bne.n	8005c4c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d108      	bne.n	8005c4c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d104      	bne.n	8005c4c <osMessageQueueNew+0x8c>
          mem = 0;
 8005c42:	2300      	movs	r3, #0
 8005c44:	61bb      	str	r3, [r7, #24]
 8005c46:	e001      	b.n	8005c4c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d10b      	bne.n	8005c6a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691a      	ldr	r2, [r3, #16]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	9100      	str	r1, [sp, #0]
 8005c5e:	68b9      	ldr	r1, [r7, #8]
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 feb5 	bl	80069d0 <xQueueGenericCreateStatic>
 8005c66:	61f8      	str	r0, [r7, #28]
 8005c68:	e008      	b.n	8005c7c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d105      	bne.n	8005c7c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005c70:	2200      	movs	r2, #0
 8005c72:	68b9      	ldr	r1, [r7, #8]
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 ff28 	bl	8006aca <xQueueGenericCreate>
 8005c7a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00c      	beq.n	8005c9c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d003      	beq.n	8005c90 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	617b      	str	r3, [r7, #20]
 8005c8e:	e001      	b.n	8005c94 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005c90:	2300      	movs	r3, #0
 8005c92:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005c94:	6979      	ldr	r1, [r7, #20]
 8005c96:	69f8      	ldr	r0, [r7, #28]
 8005c98:	f001 feca 	bl	8007a30 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005c9c:	69fb      	ldr	r3, [r7, #28]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3720      	adds	r7, #32
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	603b      	str	r3, [r7, #0]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cc0:	f3ef 8305 	mrs	r3, IPSR
 8005cc4:	617b      	str	r3, [r7, #20]
  return(result);
 8005cc6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d028      	beq.n	8005d1e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d005      	beq.n	8005cde <osMessageQueuePut+0x36>
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d002      	beq.n	8005cde <osMessageQueuePut+0x36>
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005cde:	f06f 0303 	mvn.w	r3, #3
 8005ce2:	61fb      	str	r3, [r7, #28]
 8005ce4:	e038      	b.n	8005d58 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005cea:	f107 0210 	add.w	r2, r7, #16
 8005cee:	2300      	movs	r3, #0
 8005cf0:	68b9      	ldr	r1, [r7, #8]
 8005cf2:	69b8      	ldr	r0, [r7, #24]
 8005cf4:	f001 f970 	bl	8006fd8 <xQueueGenericSendFromISR>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d003      	beq.n	8005d06 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005cfe:	f06f 0302 	mvn.w	r3, #2
 8005d02:	61fb      	str	r3, [r7, #28]
 8005d04:	e028      	b.n	8005d58 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d025      	beq.n	8005d58 <osMessageQueuePut+0xb0>
 8005d0c:	4b15      	ldr	r3, [pc, #84]	@ (8005d64 <osMessageQueuePut+0xbc>)
 8005d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	e01c      	b.n	8005d58 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d002      	beq.n	8005d2a <osMessageQueuePut+0x82>
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d103      	bne.n	8005d32 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005d2a:	f06f 0303 	mvn.w	r3, #3
 8005d2e:	61fb      	str	r3, [r7, #28]
 8005d30:	e012      	b.n	8005d58 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005d32:	2300      	movs	r3, #0
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	68b9      	ldr	r1, [r7, #8]
 8005d38:	69b8      	ldr	r0, [r7, #24]
 8005d3a:	f001 f84b 	bl	8006dd4 <xQueueGenericSend>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d009      	beq.n	8005d58 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005d4a:	f06f 0301 	mvn.w	r3, #1
 8005d4e:	61fb      	str	r3, [r7, #28]
 8005d50:	e002      	b.n	8005d58 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005d52:	f06f 0302 	mvn.w	r3, #2
 8005d56:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005d58:	69fb      	ldr	r3, [r7, #28]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3720      	adds	r7, #32
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	e000ed04 	.word	0xe000ed04

08005d68 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b088      	sub	sp, #32
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
 8005d74:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d7e:	f3ef 8305 	mrs	r3, IPSR
 8005d82:	617b      	str	r3, [r7, #20]
  return(result);
 8005d84:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d028      	beq.n	8005ddc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d005      	beq.n	8005d9c <osMessageQueueGet+0x34>
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <osMessageQueueGet+0x34>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005d9c:	f06f 0303 	mvn.w	r3, #3
 8005da0:	61fb      	str	r3, [r7, #28]
 8005da2:	e037      	b.n	8005e14 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005da4:	2300      	movs	r3, #0
 8005da6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005da8:	f107 0310 	add.w	r3, r7, #16
 8005dac:	461a      	mov	r2, r3
 8005dae:	68b9      	ldr	r1, [r7, #8]
 8005db0:	69b8      	ldr	r0, [r7, #24]
 8005db2:	f001 fc31 	bl	8007618 <xQueueReceiveFromISR>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d003      	beq.n	8005dc4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005dbc:	f06f 0302 	mvn.w	r3, #2
 8005dc0:	61fb      	str	r3, [r7, #28]
 8005dc2:	e027      	b.n	8005e14 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d024      	beq.n	8005e14 <osMessageQueueGet+0xac>
 8005dca:	4b15      	ldr	r3, [pc, #84]	@ (8005e20 <osMessageQueueGet+0xb8>)
 8005dcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	e01b      	b.n	8005e14 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <osMessageQueueGet+0x80>
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d103      	bne.n	8005df0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005de8:	f06f 0303 	mvn.w	r3, #3
 8005dec:	61fb      	str	r3, [r7, #28]
 8005dee:	e011      	b.n	8005e14 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	68b9      	ldr	r1, [r7, #8]
 8005df4:	69b8      	ldr	r0, [r7, #24]
 8005df6:	f001 fa1d 	bl	8007234 <xQueueReceive>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d009      	beq.n	8005e14 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005e06:	f06f 0301 	mvn.w	r3, #1
 8005e0a:	61fb      	str	r3, [r7, #28]
 8005e0c:	e002      	b.n	8005e14 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005e0e:	f06f 0302 	mvn.w	r3, #2
 8005e12:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005e14:	69fb      	ldr	r3, [r7, #28]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3720      	adds	r7, #32
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	e000ed04 	.word	0xe000ed04

08005e24 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d102      	bne.n	8005e3c <osMessageQueueGetCount+0x18>
    count = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	617b      	str	r3, [r7, #20]
 8005e3a:	e00e      	b.n	8005e5a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e3c:	f3ef 8305 	mrs	r3, IPSR
 8005e40:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e42:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d004      	beq.n	8005e52 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8005e48:	6938      	ldr	r0, [r7, #16]
 8005e4a:	f001 fc86 	bl	800775a <uxQueueMessagesWaitingFromISR>
 8005e4e:	6178      	str	r0, [r7, #20]
 8005e50:	e003      	b.n	8005e5a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005e52:	6938      	ldr	r0, [r7, #16]
 8005e54:	f001 fc62 	bl	800771c <uxQueueMessagesWaiting>
 8005e58:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8005e5a:	697b      	ldr	r3, [r7, #20]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3718      	adds	r7, #24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e70:	f3ef 8305 	mrs	r3, IPSR
 8005e74:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e76:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 8005e7c:	f06f 0305 	mvn.w	r3, #5
 8005e80:	617b      	str	r3, [r7, #20]
 8005e82:	e00e      	b.n	8005ea2 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d103      	bne.n	8005e92 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 8005e8a:	f06f 0303 	mvn.w	r3, #3
 8005e8e:	617b      	str	r3, [r7, #20]
 8005e90:	e007      	b.n	8005ea2 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8005e92:	6938      	ldr	r0, [r7, #16]
 8005e94:	f001 fdf6 	bl	8007a84 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8005e9c:	6938      	ldr	r0, [r7, #16]
 8005e9e:	f001 fc7b 	bl	8007798 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005ea2:	697b      	ldr	r3, [r7, #20]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4a07      	ldr	r2, [pc, #28]	@ (8005ed8 <vApplicationGetIdleTaskMemory+0x2c>)
 8005ebc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	4a06      	ldr	r2, [pc, #24]	@ (8005edc <vApplicationGetIdleTaskMemory+0x30>)
 8005ec2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eca:	601a      	str	r2, [r3, #0]
}
 8005ecc:	bf00      	nop
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	240003cc 	.word	0x240003cc
 8005edc:	24000474 	.word	0x24000474

08005ee0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4a07      	ldr	r2, [pc, #28]	@ (8005f0c <vApplicationGetTimerTaskMemory+0x2c>)
 8005ef0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	4a06      	ldr	r2, [pc, #24]	@ (8005f10 <vApplicationGetTimerTaskMemory+0x30>)
 8005ef6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005efe:	601a      	str	r2, [r3, #0]
}
 8005f00:	bf00      	nop
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	24000c74 	.word	0x24000c74
 8005f10:	24000d1c 	.word	0x24000d1c

08005f14 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08a      	sub	sp, #40	@ 0x28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f20:	f002 f872 	bl	8008008 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f24:	4b5c      	ldr	r3, [pc, #368]	@ (8006098 <pvPortMalloc+0x184>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f2c:	f000 f924 	bl	8006178 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f30:	4b5a      	ldr	r3, [pc, #360]	@ (800609c <pvPortMalloc+0x188>)
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4013      	ands	r3, r2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f040 8095 	bne.w	8006068 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d01e      	beq.n	8005f82 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005f44:	2208      	movs	r2, #8
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4413      	add	r3, r2
 8005f4a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f003 0307 	and.w	r3, r3, #7
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d015      	beq.n	8005f82 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f023 0307 	bic.w	r3, r3, #7
 8005f5c:	3308      	adds	r3, #8
 8005f5e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f003 0307 	and.w	r3, r3, #7
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00b      	beq.n	8005f82 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6e:	f383 8811 	msr	BASEPRI, r3
 8005f72:	f3bf 8f6f 	isb	sy
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f7c:	bf00      	nop
 8005f7e:	bf00      	nop
 8005f80:	e7fd      	b.n	8005f7e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d06f      	beq.n	8006068 <pvPortMalloc+0x154>
 8005f88:	4b45      	ldr	r3, [pc, #276]	@ (80060a0 <pvPortMalloc+0x18c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d86a      	bhi.n	8006068 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f92:	4b44      	ldr	r3, [pc, #272]	@ (80060a4 <pvPortMalloc+0x190>)
 8005f94:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f96:	4b43      	ldr	r3, [pc, #268]	@ (80060a4 <pvPortMalloc+0x190>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f9c:	e004      	b.n	8005fa8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d903      	bls.n	8005fba <pvPortMalloc+0xa6>
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1f1      	bne.n	8005f9e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005fba:	4b37      	ldr	r3, [pc, #220]	@ (8006098 <pvPortMalloc+0x184>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d051      	beq.n	8006068 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2208      	movs	r2, #8
 8005fca:	4413      	add	r3, r2
 8005fcc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	1ad2      	subs	r2, r2, r3
 8005fde:	2308      	movs	r3, #8
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d920      	bls.n	8006028 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4413      	add	r3, r2
 8005fec:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	f003 0307 	and.w	r3, r3, #7
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00b      	beq.n	8006010 <pvPortMalloc+0xfc>
	__asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	613b      	str	r3, [r7, #16]
}
 800600a:	bf00      	nop
 800600c:	bf00      	nop
 800600e:	e7fd      	b.n	800600c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	1ad2      	subs	r2, r2, r3
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800601c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006022:	69b8      	ldr	r0, [r7, #24]
 8006024:	f000 f90a 	bl	800623c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006028:	4b1d      	ldr	r3, [pc, #116]	@ (80060a0 <pvPortMalloc+0x18c>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	4a1b      	ldr	r2, [pc, #108]	@ (80060a0 <pvPortMalloc+0x18c>)
 8006034:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006036:	4b1a      	ldr	r3, [pc, #104]	@ (80060a0 <pvPortMalloc+0x18c>)
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	4b1b      	ldr	r3, [pc, #108]	@ (80060a8 <pvPortMalloc+0x194>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	429a      	cmp	r2, r3
 8006040:	d203      	bcs.n	800604a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006042:	4b17      	ldr	r3, [pc, #92]	@ (80060a0 <pvPortMalloc+0x18c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a18      	ldr	r2, [pc, #96]	@ (80060a8 <pvPortMalloc+0x194>)
 8006048:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800604a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	4b13      	ldr	r3, [pc, #76]	@ (800609c <pvPortMalloc+0x188>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	431a      	orrs	r2, r3
 8006054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006056:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605a:	2200      	movs	r2, #0
 800605c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800605e:	4b13      	ldr	r3, [pc, #76]	@ (80060ac <pvPortMalloc+0x198>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3301      	adds	r3, #1
 8006064:	4a11      	ldr	r2, [pc, #68]	@ (80060ac <pvPortMalloc+0x198>)
 8006066:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006068:	f001 ffdc 	bl	8008024 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00b      	beq.n	800608e <pvPortMalloc+0x17a>
	__asm volatile
 8006076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	60fb      	str	r3, [r7, #12]
}
 8006088:	bf00      	nop
 800608a:	bf00      	nop
 800608c:	e7fd      	b.n	800608a <pvPortMalloc+0x176>
	return pvReturn;
 800608e:	69fb      	ldr	r3, [r7, #28]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3728      	adds	r7, #40	@ 0x28
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	24009524 	.word	0x24009524
 800609c:	24009538 	.word	0x24009538
 80060a0:	24009528 	.word	0x24009528
 80060a4:	2400951c 	.word	0x2400951c
 80060a8:	2400952c 	.word	0x2400952c
 80060ac:	24009530 	.word	0x24009530

080060b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d04f      	beq.n	8006162 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80060c2:	2308      	movs	r3, #8
 80060c4:	425b      	negs	r3, r3
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	4413      	add	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	4b25      	ldr	r3, [pc, #148]	@ (800616c <vPortFree+0xbc>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4013      	ands	r3, r2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10b      	bne.n	80060f6 <vPortFree+0x46>
	__asm volatile
 80060de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	60fb      	str	r3, [r7, #12]
}
 80060f0:	bf00      	nop
 80060f2:	bf00      	nop
 80060f4:	e7fd      	b.n	80060f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00b      	beq.n	8006116 <vPortFree+0x66>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	60bb      	str	r3, [r7, #8]
}
 8006110:	bf00      	nop
 8006112:	bf00      	nop
 8006114:	e7fd      	b.n	8006112 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	4b14      	ldr	r3, [pc, #80]	@ (800616c <vPortFree+0xbc>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4013      	ands	r3, r2
 8006120:	2b00      	cmp	r3, #0
 8006122:	d01e      	beq.n	8006162 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d11a      	bne.n	8006162 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	4b0e      	ldr	r3, [pc, #56]	@ (800616c <vPortFree+0xbc>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	43db      	mvns	r3, r3
 8006136:	401a      	ands	r2, r3
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800613c:	f001 ff64 	bl	8008008 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	4b0a      	ldr	r3, [pc, #40]	@ (8006170 <vPortFree+0xc0>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4413      	add	r3, r2
 800614a:	4a09      	ldr	r2, [pc, #36]	@ (8006170 <vPortFree+0xc0>)
 800614c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800614e:	6938      	ldr	r0, [r7, #16]
 8006150:	f000 f874 	bl	800623c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006154:	4b07      	ldr	r3, [pc, #28]	@ (8006174 <vPortFree+0xc4>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3301      	adds	r3, #1
 800615a:	4a06      	ldr	r2, [pc, #24]	@ (8006174 <vPortFree+0xc4>)
 800615c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800615e:	f001 ff61 	bl	8008024 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006162:	bf00      	nop
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	24009538 	.word	0x24009538
 8006170:	24009528 	.word	0x24009528
 8006174:	24009534 	.word	0x24009534

08006178 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800617e:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8006182:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006184:	4b27      	ldr	r3, [pc, #156]	@ (8006224 <prvHeapInit+0xac>)
 8006186:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f003 0307 	and.w	r3, r3, #7
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00c      	beq.n	80061ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3307      	adds	r3, #7
 8006196:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f023 0307 	bic.w	r3, r3, #7
 800619e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	4a1f      	ldr	r2, [pc, #124]	@ (8006224 <prvHeapInit+0xac>)
 80061a8:	4413      	add	r3, r2
 80061aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006228 <prvHeapInit+0xb0>)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80061b6:	4b1c      	ldr	r3, [pc, #112]	@ (8006228 <prvHeapInit+0xb0>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	4413      	add	r3, r2
 80061c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80061c4:	2208      	movs	r2, #8
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	1a9b      	subs	r3, r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 0307 	bic.w	r3, r3, #7
 80061d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4a15      	ldr	r2, [pc, #84]	@ (800622c <prvHeapInit+0xb4>)
 80061d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80061da:	4b14      	ldr	r3, [pc, #80]	@ (800622c <prvHeapInit+0xb4>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2200      	movs	r2, #0
 80061e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80061e2:	4b12      	ldr	r3, [pc, #72]	@ (800622c <prvHeapInit+0xb4>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2200      	movs	r2, #0
 80061e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	1ad2      	subs	r2, r2, r3
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80061f8:	4b0c      	ldr	r3, [pc, #48]	@ (800622c <prvHeapInit+0xb4>)
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	4a0a      	ldr	r2, [pc, #40]	@ (8006230 <prvHeapInit+0xb8>)
 8006206:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	4a09      	ldr	r2, [pc, #36]	@ (8006234 <prvHeapInit+0xbc>)
 800620e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006210:	4b09      	ldr	r3, [pc, #36]	@ (8006238 <prvHeapInit+0xc0>)
 8006212:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006216:	601a      	str	r2, [r3, #0]
}
 8006218:	bf00      	nop
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	24001d1c 	.word	0x24001d1c
 8006228:	2400951c 	.word	0x2400951c
 800622c:	24009524 	.word	0x24009524
 8006230:	2400952c 	.word	0x2400952c
 8006234:	24009528 	.word	0x24009528
 8006238:	24009538 	.word	0x24009538

0800623c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006244:	4b28      	ldr	r3, [pc, #160]	@ (80062e8 <prvInsertBlockIntoFreeList+0xac>)
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	e002      	b.n	8006250 <prvInsertBlockIntoFreeList+0x14>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	60fb      	str	r3, [r7, #12]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	429a      	cmp	r2, r3
 8006258:	d8f7      	bhi.n	800624a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	4413      	add	r3, r2
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	429a      	cmp	r2, r3
 800626a:	d108      	bne.n	800627e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	441a      	add	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	441a      	add	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	429a      	cmp	r2, r3
 8006290:	d118      	bne.n	80062c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	4b15      	ldr	r3, [pc, #84]	@ (80062ec <prvInsertBlockIntoFreeList+0xb0>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	429a      	cmp	r2, r3
 800629c:	d00d      	beq.n	80062ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	441a      	add	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	e008      	b.n	80062cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80062ba:	4b0c      	ldr	r3, [pc, #48]	@ (80062ec <prvInsertBlockIntoFreeList+0xb0>)
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	601a      	str	r2, [r3, #0]
 80062c2:	e003      	b.n	80062cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d002      	beq.n	80062da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062da:	bf00      	nop
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	2400951c 	.word	0x2400951c
 80062ec:	24009524 	.word	0x24009524

080062f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f103 0208 	add.w	r2, r3, #8
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f04f 32ff 	mov.w	r2, #4294967295
 8006308:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f103 0208 	add.w	r2, r3, #8
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f103 0208 	add.w	r2, r3, #8
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800633e:	bf00      	nop
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800634a:	b480      	push	{r7}
 800634c:	b085      	sub	sp, #20
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
 8006352:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	1c5a      	adds	r2, r3, #1
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	601a      	str	r2, [r3, #0]
}
 8006386:	bf00      	nop
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006392:	b480      	push	{r7}
 8006394:	b085      	sub	sp, #20
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a8:	d103      	bne.n	80063b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	e00c      	b.n	80063cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	3308      	adds	r3, #8
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	e002      	b.n	80063c0 <vListInsert+0x2e>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	60fb      	str	r3, [r7, #12]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d2f6      	bcs.n	80063ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	1c5a      	adds	r2, r3, #1
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	601a      	str	r2, [r3, #0]
}
 80063f8:	bf00      	nop
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	6892      	ldr	r2, [r2, #8]
 800641a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	6852      	ldr	r2, [r2, #4]
 8006424:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	429a      	cmp	r2, r3
 800642e:	d103      	bne.n	8006438 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	1e5a      	subs	r2, r3, #1
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	3b04      	subs	r3, #4
 8006468:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006470:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	3b04      	subs	r3, #4
 8006476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	f023 0201 	bic.w	r2, r3, #1
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3b04      	subs	r3, #4
 8006486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006488:	4a0c      	ldr	r2, [pc, #48]	@ (80064bc <pxPortInitialiseStack+0x64>)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	3b14      	subs	r3, #20
 8006492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3b04      	subs	r3, #4
 800649e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f06f 0202 	mvn.w	r2, #2
 80064a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	3b20      	subs	r3, #32
 80064ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80064ae:	68fb      	ldr	r3, [r7, #12]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	080064c1 	.word	0x080064c1

080064c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80064c6:	2300      	movs	r3, #0
 80064c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064ca:	4b13      	ldr	r3, [pc, #76]	@ (8006518 <prvTaskExitError+0x58>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d2:	d00b      	beq.n	80064ec <prvTaskExitError+0x2c>
	__asm volatile
 80064d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	60fb      	str	r3, [r7, #12]
}
 80064e6:	bf00      	nop
 80064e8:	bf00      	nop
 80064ea:	e7fd      	b.n	80064e8 <prvTaskExitError+0x28>
	__asm volatile
 80064ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f0:	f383 8811 	msr	BASEPRI, r3
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	60bb      	str	r3, [r7, #8]
}
 80064fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006500:	bf00      	nop
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d0fc      	beq.n	8006502 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006508:	bf00      	nop
 800650a:	bf00      	nop
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	24000024 	.word	0x24000024
 800651c:	00000000 	.word	0x00000000

08006520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006520:	4b07      	ldr	r3, [pc, #28]	@ (8006540 <pxCurrentTCBConst2>)
 8006522:	6819      	ldr	r1, [r3, #0]
 8006524:	6808      	ldr	r0, [r1, #0]
 8006526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652a:	f380 8809 	msr	PSP, r0
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f04f 0000 	mov.w	r0, #0
 8006536:	f380 8811 	msr	BASEPRI, r0
 800653a:	4770      	bx	lr
 800653c:	f3af 8000 	nop.w

08006540 <pxCurrentTCBConst2>:
 8006540:	24009584 	.word	0x24009584
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006544:	bf00      	nop
 8006546:	bf00      	nop

08006548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006548:	4808      	ldr	r0, [pc, #32]	@ (800656c <prvPortStartFirstTask+0x24>)
 800654a:	6800      	ldr	r0, [r0, #0]
 800654c:	6800      	ldr	r0, [r0, #0]
 800654e:	f380 8808 	msr	MSP, r0
 8006552:	f04f 0000 	mov.w	r0, #0
 8006556:	f380 8814 	msr	CONTROL, r0
 800655a:	b662      	cpsie	i
 800655c:	b661      	cpsie	f
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	df00      	svc	0
 8006568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800656a:	bf00      	nop
 800656c:	e000ed08 	.word	0xe000ed08

08006570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006576:	4b47      	ldr	r3, [pc, #284]	@ (8006694 <xPortStartScheduler+0x124>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a47      	ldr	r2, [pc, #284]	@ (8006698 <xPortStartScheduler+0x128>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d10b      	bne.n	8006598 <xPortStartScheduler+0x28>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	60fb      	str	r3, [r7, #12]
}
 8006592:	bf00      	nop
 8006594:	bf00      	nop
 8006596:	e7fd      	b.n	8006594 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006598:	4b3e      	ldr	r3, [pc, #248]	@ (8006694 <xPortStartScheduler+0x124>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a3f      	ldr	r2, [pc, #252]	@ (800669c <xPortStartScheduler+0x12c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d10b      	bne.n	80065ba <xPortStartScheduler+0x4a>
	__asm volatile
 80065a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	613b      	str	r3, [r7, #16]
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop
 80065b8:	e7fd      	b.n	80065b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065ba:	4b39      	ldr	r3, [pc, #228]	@ (80066a0 <xPortStartScheduler+0x130>)
 80065bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	22ff      	movs	r2, #255	@ 0xff
 80065ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065d4:	78fb      	ldrb	r3, [r7, #3]
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	4b31      	ldr	r3, [pc, #196]	@ (80066a4 <xPortStartScheduler+0x134>)
 80065e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065e2:	4b31      	ldr	r3, [pc, #196]	@ (80066a8 <xPortStartScheduler+0x138>)
 80065e4:	2207      	movs	r2, #7
 80065e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065e8:	e009      	b.n	80065fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80065ea:	4b2f      	ldr	r3, [pc, #188]	@ (80066a8 <xPortStartScheduler+0x138>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3b01      	subs	r3, #1
 80065f0:	4a2d      	ldr	r2, [pc, #180]	@ (80066a8 <xPortStartScheduler+0x138>)
 80065f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065fe:	78fb      	ldrb	r3, [r7, #3]
 8006600:	b2db      	uxtb	r3, r3
 8006602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006606:	2b80      	cmp	r3, #128	@ 0x80
 8006608:	d0ef      	beq.n	80065ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800660a:	4b27      	ldr	r3, [pc, #156]	@ (80066a8 <xPortStartScheduler+0x138>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f1c3 0307 	rsb	r3, r3, #7
 8006612:	2b04      	cmp	r3, #4
 8006614:	d00b      	beq.n	800662e <xPortStartScheduler+0xbe>
	__asm volatile
 8006616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	60bb      	str	r3, [r7, #8]
}
 8006628:	bf00      	nop
 800662a:	bf00      	nop
 800662c:	e7fd      	b.n	800662a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800662e:	4b1e      	ldr	r3, [pc, #120]	@ (80066a8 <xPortStartScheduler+0x138>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	021b      	lsls	r3, r3, #8
 8006634:	4a1c      	ldr	r2, [pc, #112]	@ (80066a8 <xPortStartScheduler+0x138>)
 8006636:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006638:	4b1b      	ldr	r3, [pc, #108]	@ (80066a8 <xPortStartScheduler+0x138>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006640:	4a19      	ldr	r2, [pc, #100]	@ (80066a8 <xPortStartScheduler+0x138>)
 8006642:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	b2da      	uxtb	r2, r3
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800664c:	4b17      	ldr	r3, [pc, #92]	@ (80066ac <xPortStartScheduler+0x13c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a16      	ldr	r2, [pc, #88]	@ (80066ac <xPortStartScheduler+0x13c>)
 8006652:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006656:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006658:	4b14      	ldr	r3, [pc, #80]	@ (80066ac <xPortStartScheduler+0x13c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a13      	ldr	r2, [pc, #76]	@ (80066ac <xPortStartScheduler+0x13c>)
 800665e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006662:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006664:	f000 f8da 	bl	800681c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006668:	4b11      	ldr	r3, [pc, #68]	@ (80066b0 <xPortStartScheduler+0x140>)
 800666a:	2200      	movs	r2, #0
 800666c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800666e:	f000 f8f9 	bl	8006864 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006672:	4b10      	ldr	r3, [pc, #64]	@ (80066b4 <xPortStartScheduler+0x144>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a0f      	ldr	r2, [pc, #60]	@ (80066b4 <xPortStartScheduler+0x144>)
 8006678:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800667c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800667e:	f7ff ff63 	bl	8006548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006682:	f001 fe49 	bl	8008318 <vTaskSwitchContext>
	prvTaskExitError();
 8006686:	f7ff ff1b 	bl	80064c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3718      	adds	r7, #24
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	e000ed00 	.word	0xe000ed00
 8006698:	410fc271 	.word	0x410fc271
 800669c:	410fc270 	.word	0x410fc270
 80066a0:	e000e400 	.word	0xe000e400
 80066a4:	2400953c 	.word	0x2400953c
 80066a8:	24009540 	.word	0x24009540
 80066ac:	e000ed20 	.word	0xe000ed20
 80066b0:	24000024 	.word	0x24000024
 80066b4:	e000ef34 	.word	0xe000ef34

080066b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
	__asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	607b      	str	r3, [r7, #4]
}
 80066d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066d2:	4b10      	ldr	r3, [pc, #64]	@ (8006714 <vPortEnterCritical+0x5c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3301      	adds	r3, #1
 80066d8:	4a0e      	ldr	r2, [pc, #56]	@ (8006714 <vPortEnterCritical+0x5c>)
 80066da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066dc:	4b0d      	ldr	r3, [pc, #52]	@ (8006714 <vPortEnterCritical+0x5c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d110      	bne.n	8006706 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006718 <vPortEnterCritical+0x60>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00b      	beq.n	8006706 <vPortEnterCritical+0x4e>
	__asm volatile
 80066ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	603b      	str	r3, [r7, #0]
}
 8006700:	bf00      	nop
 8006702:	bf00      	nop
 8006704:	e7fd      	b.n	8006702 <vPortEnterCritical+0x4a>
	}
}
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	24000024 	.word	0x24000024
 8006718:	e000ed04 	.word	0xe000ed04

0800671c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006722:	4b12      	ldr	r3, [pc, #72]	@ (800676c <vPortExitCritical+0x50>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10b      	bne.n	8006742 <vPortExitCritical+0x26>
	__asm volatile
 800672a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	607b      	str	r3, [r7, #4]
}
 800673c:	bf00      	nop
 800673e:	bf00      	nop
 8006740:	e7fd      	b.n	800673e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006742:	4b0a      	ldr	r3, [pc, #40]	@ (800676c <vPortExitCritical+0x50>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	3b01      	subs	r3, #1
 8006748:	4a08      	ldr	r2, [pc, #32]	@ (800676c <vPortExitCritical+0x50>)
 800674a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800674c:	4b07      	ldr	r3, [pc, #28]	@ (800676c <vPortExitCritical+0x50>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d105      	bne.n	8006760 <vPortExitCritical+0x44>
 8006754:	2300      	movs	r3, #0
 8006756:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800675e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	24000024 	.word	0x24000024

08006770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006770:	f3ef 8009 	mrs	r0, PSP
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	4b15      	ldr	r3, [pc, #84]	@ (80067d0 <pxCurrentTCBConst>)
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	f01e 0f10 	tst.w	lr, #16
 8006780:	bf08      	it	eq
 8006782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800678a:	6010      	str	r0, [r2, #0]
 800678c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006790:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006794:	f380 8811 	msr	BASEPRI, r0
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f001 fdba 	bl	8008318 <vTaskSwitchContext>
 80067a4:	f04f 0000 	mov.w	r0, #0
 80067a8:	f380 8811 	msr	BASEPRI, r0
 80067ac:	bc09      	pop	{r0, r3}
 80067ae:	6819      	ldr	r1, [r3, #0]
 80067b0:	6808      	ldr	r0, [r1, #0]
 80067b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b6:	f01e 0f10 	tst.w	lr, #16
 80067ba:	bf08      	it	eq
 80067bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80067c0:	f380 8809 	msr	PSP, r0
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	f3af 8000 	nop.w

080067d0 <pxCurrentTCBConst>:
 80067d0:	24009584 	.word	0x24009584
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop

080067d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	607b      	str	r3, [r7, #4]
}
 80067f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067f2:	f001 fcd7 	bl	80081a4 <xTaskIncrementTick>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067fc:	4b06      	ldr	r3, [pc, #24]	@ (8006818 <xPortSysTickHandler+0x40>)
 80067fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	2300      	movs	r3, #0
 8006806:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	f383 8811 	msr	BASEPRI, r3
}
 800680e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006810:	bf00      	nop
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	e000ed04 	.word	0xe000ed04

0800681c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800681c:	b480      	push	{r7}
 800681e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006820:	4b0b      	ldr	r3, [pc, #44]	@ (8006850 <vPortSetupTimerInterrupt+0x34>)
 8006822:	2200      	movs	r2, #0
 8006824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006826:	4b0b      	ldr	r3, [pc, #44]	@ (8006854 <vPortSetupTimerInterrupt+0x38>)
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800682c:	4b0a      	ldr	r3, [pc, #40]	@ (8006858 <vPortSetupTimerInterrupt+0x3c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a0a      	ldr	r2, [pc, #40]	@ (800685c <vPortSetupTimerInterrupt+0x40>)
 8006832:	fba2 2303 	umull	r2, r3, r2, r3
 8006836:	099b      	lsrs	r3, r3, #6
 8006838:	4a09      	ldr	r2, [pc, #36]	@ (8006860 <vPortSetupTimerInterrupt+0x44>)
 800683a:	3b01      	subs	r3, #1
 800683c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800683e:	4b04      	ldr	r3, [pc, #16]	@ (8006850 <vPortSetupTimerInterrupt+0x34>)
 8006840:	2207      	movs	r2, #7
 8006842:	601a      	str	r2, [r3, #0]
}
 8006844:	bf00      	nop
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	e000e010 	.word	0xe000e010
 8006854:	e000e018 	.word	0xe000e018
 8006858:	24000000 	.word	0x24000000
 800685c:	10624dd3 	.word	0x10624dd3
 8006860:	e000e014 	.word	0xe000e014

08006864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006864:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006874 <vPortEnableVFP+0x10>
 8006868:	6801      	ldr	r1, [r0, #0]
 800686a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800686e:	6001      	str	r1, [r0, #0]
 8006870:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006872:	bf00      	nop
 8006874:	e000ed88 	.word	0xe000ed88

08006878 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800687e:	f3ef 8305 	mrs	r3, IPSR
 8006882:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2b0f      	cmp	r3, #15
 8006888:	d915      	bls.n	80068b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800688a:	4a18      	ldr	r2, [pc, #96]	@ (80068ec <vPortValidateInterruptPriority+0x74>)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4413      	add	r3, r2
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006894:	4b16      	ldr	r3, [pc, #88]	@ (80068f0 <vPortValidateInterruptPriority+0x78>)
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	7afa      	ldrb	r2, [r7, #11]
 800689a:	429a      	cmp	r2, r3
 800689c:	d20b      	bcs.n	80068b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	607b      	str	r3, [r7, #4]
}
 80068b0:	bf00      	nop
 80068b2:	bf00      	nop
 80068b4:	e7fd      	b.n	80068b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80068b6:	4b0f      	ldr	r3, [pc, #60]	@ (80068f4 <vPortValidateInterruptPriority+0x7c>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80068be:	4b0e      	ldr	r3, [pc, #56]	@ (80068f8 <vPortValidateInterruptPriority+0x80>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d90b      	bls.n	80068de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80068c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ca:	f383 8811 	msr	BASEPRI, r3
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	f3bf 8f4f 	dsb	sy
 80068d6:	603b      	str	r3, [r7, #0]
}
 80068d8:	bf00      	nop
 80068da:	bf00      	nop
 80068dc:	e7fd      	b.n	80068da <vPortValidateInterruptPriority+0x62>
	}
 80068de:	bf00      	nop
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	e000e3f0 	.word	0xe000e3f0
 80068f0:	2400953c 	.word	0x2400953c
 80068f4:	e000ed0c 	.word	0xe000ed0c
 80068f8:	24009540 	.word	0x24009540

080068fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10b      	bne.n	8006928 <xQueueGenericReset+0x2c>
	__asm volatile
 8006910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	60bb      	str	r3, [r7, #8]
}
 8006922:	bf00      	nop
 8006924:	bf00      	nop
 8006926:	e7fd      	b.n	8006924 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006928:	f7ff fec6 	bl	80066b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006934:	68f9      	ldr	r1, [r7, #12]
 8006936:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006938:	fb01 f303 	mul.w	r3, r1, r3
 800693c:	441a      	add	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006958:	3b01      	subs	r3, #1
 800695a:	68f9      	ldr	r1, [r7, #12]
 800695c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800695e:	fb01 f303 	mul.w	r3, r1, r3
 8006962:	441a      	add	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	22ff      	movs	r2, #255	@ 0xff
 800696c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	22ff      	movs	r2, #255	@ 0xff
 8006974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d114      	bne.n	80069a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d01a      	beq.n	80069bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3310      	adds	r3, #16
 800698a:	4618      	mov	r0, r3
 800698c:	f001 fd8a 	bl	80084a4 <xTaskRemoveFromEventList>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d012      	beq.n	80069bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006996:	4b0d      	ldr	r3, [pc, #52]	@ (80069cc <xQueueGenericReset+0xd0>)
 8006998:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800699c:	601a      	str	r2, [r3, #0]
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	e009      	b.n	80069bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	3310      	adds	r3, #16
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff fc9f 	bl	80062f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3324      	adds	r3, #36	@ 0x24
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7ff fc9a 	bl	80062f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80069bc:	f7ff feae 	bl	800671c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069c0:	2301      	movs	r3, #1
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	e000ed04 	.word	0xe000ed04

080069d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b08e      	sub	sp, #56	@ 0x38
 80069d4:	af02      	add	r7, sp, #8
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
 80069dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10b      	bne.n	80069fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80069f6:	bf00      	nop
 80069f8:	bf00      	nop
 80069fa:	e7fd      	b.n	80069f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10b      	bne.n	8006a1a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a14:	bf00      	nop
 8006a16:	bf00      	nop
 8006a18:	e7fd      	b.n	8006a16 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d002      	beq.n	8006a26 <xQueueGenericCreateStatic+0x56>
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <xQueueGenericCreateStatic+0x5a>
 8006a26:	2301      	movs	r3, #1
 8006a28:	e000      	b.n	8006a2c <xQueueGenericCreateStatic+0x5c>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10b      	bne.n	8006a48 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	623b      	str	r3, [r7, #32]
}
 8006a42:	bf00      	nop
 8006a44:	bf00      	nop
 8006a46:	e7fd      	b.n	8006a44 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d102      	bne.n	8006a54 <xQueueGenericCreateStatic+0x84>
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <xQueueGenericCreateStatic+0x88>
 8006a54:	2301      	movs	r3, #1
 8006a56:	e000      	b.n	8006a5a <xQueueGenericCreateStatic+0x8a>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10b      	bne.n	8006a76 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	61fb      	str	r3, [r7, #28]
}
 8006a70:	bf00      	nop
 8006a72:	bf00      	nop
 8006a74:	e7fd      	b.n	8006a72 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a76:	2350      	movs	r3, #80	@ 0x50
 8006a78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	2b50      	cmp	r3, #80	@ 0x50
 8006a7e:	d00b      	beq.n	8006a98 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	61bb      	str	r3, [r7, #24]
}
 8006a92:	bf00      	nop
 8006a94:	bf00      	nop
 8006a96:	e7fd      	b.n	8006a94 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a98:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00d      	beq.n	8006ac0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006aac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	68b9      	ldr	r1, [r7, #8]
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 f840 	bl	8006b40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3730      	adds	r7, #48	@ 0x30
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b08a      	sub	sp, #40	@ 0x28
 8006ace:	af02      	add	r7, sp, #8
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10b      	bne.n	8006af6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	613b      	str	r3, [r7, #16]
}
 8006af0:	bf00      	nop
 8006af2:	bf00      	nop
 8006af4:	e7fd      	b.n	8006af2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	fb02 f303 	mul.w	r3, r2, r3
 8006afe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	3350      	adds	r3, #80	@ 0x50
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7ff fa05 	bl	8005f14 <pvPortMalloc>
 8006b0a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d011      	beq.n	8006b36 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	3350      	adds	r3, #80	@ 0x50
 8006b1a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b24:	79fa      	ldrb	r2, [r7, #7]
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	68b9      	ldr	r1, [r7, #8]
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 f805 	bl	8006b40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b36:	69bb      	ldr	r3, [r7, #24]
	}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3720      	adds	r7, #32
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
 8006b4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d103      	bne.n	8006b5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	69ba      	ldr	r2, [r7, #24]
 8006b58:	601a      	str	r2, [r3, #0]
 8006b5a:	e002      	b.n	8006b62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b6e:	2101      	movs	r1, #1
 8006b70:	69b8      	ldr	r0, [r7, #24]
 8006b72:	f7ff fec3 	bl	80068fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	78fa      	ldrb	r2, [r7, #3]
 8006b7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b7e:	bf00      	nop
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00e      	beq.n	8006bb2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	2200      	movs	r2, #0
 8006baa:	2100      	movs	r1, #0
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f911 	bl	8006dd4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006bb2:	bf00      	nop
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b086      	sub	sp, #24
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	617b      	str	r3, [r7, #20]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006bcc:	79fb      	ldrb	r3, [r7, #7]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	6939      	ldr	r1, [r7, #16]
 8006bd2:	6978      	ldr	r0, [r7, #20]
 8006bd4:	f7ff ff79 	bl	8006aca <xQueueGenericCreate>
 8006bd8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f7ff ffd3 	bl	8006b86 <prvInitialiseMutex>

		return xNewQueue;
 8006be0:	68fb      	ldr	r3, [r7, #12]
	}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3718      	adds	r7, #24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b088      	sub	sp, #32
 8006bee:	af02      	add	r7, sp, #8
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	6039      	str	r1, [r7, #0]
 8006bf4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	617b      	str	r3, [r7, #20]
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	2200      	movs	r2, #0
 8006c06:	6939      	ldr	r1, [r7, #16]
 8006c08:	6978      	ldr	r0, [r7, #20]
 8006c0a:	f7ff fee1 	bl	80069d0 <xQueueGenericCreateStatic>
 8006c0e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f7ff ffb8 	bl	8006b86 <prvInitialiseMutex>

		return xNewQueue;
 8006c16:	68fb      	ldr	r3, [r7, #12]
	}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3718      	adds	r7, #24
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006c20:	b590      	push	{r4, r7, lr}
 8006c22:	b087      	sub	sp, #28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10b      	bne.n	8006c4a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8006c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	60fb      	str	r3, [r7, #12]
}
 8006c44:	bf00      	nop
 8006c46:	bf00      	nop
 8006c48:	e7fd      	b.n	8006c46 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	689c      	ldr	r4, [r3, #8]
 8006c4e:	f001 fdef 	bl	8008830 <xTaskGetCurrentTaskHandle>
 8006c52:	4603      	mov	r3, r0
 8006c54:	429c      	cmp	r4, r3
 8006c56:	d111      	bne.n	8006c7c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	1e5a      	subs	r2, r3, #1
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d105      	bne.n	8006c76 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	2100      	movs	r1, #0
 8006c70:	6938      	ldr	r0, [r7, #16]
 8006c72:	f000 f8af 	bl	8006dd4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006c76:	2301      	movs	r3, #1
 8006c78:	617b      	str	r3, [r7, #20]
 8006c7a:	e001      	b.n	8006c80 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006c80:	697b      	ldr	r3, [r7, #20]
	}
 8006c82:	4618      	mov	r0, r3
 8006c84:	371c      	adds	r7, #28
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd90      	pop	{r4, r7, pc}

08006c8a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006c8a:	b590      	push	{r4, r7, lr}
 8006c8c:	b087      	sub	sp, #28
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10b      	bne.n	8006cb6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	60fb      	str	r3, [r7, #12]
}
 8006cb0:	bf00      	nop
 8006cb2:	bf00      	nop
 8006cb4:	e7fd      	b.n	8006cb2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	689c      	ldr	r4, [r3, #8]
 8006cba:	f001 fdb9 	bl	8008830 <xTaskGetCurrentTaskHandle>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	429c      	cmp	r4, r3
 8006cc2:	d107      	bne.n	8006cd4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	1c5a      	adds	r2, r3, #1
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	617b      	str	r3, [r7, #20]
 8006cd2:	e00c      	b.n	8006cee <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006cd4:	6839      	ldr	r1, [r7, #0]
 8006cd6:	6938      	ldr	r0, [r7, #16]
 8006cd8:	f000 fb8e 	bl	80073f8 <xQueueSemaphoreTake>
 8006cdc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d004      	beq.n	8006cee <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	1c5a      	adds	r2, r3, #1
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006cee:	697b      	ldr	r3, [r7, #20]
	}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	371c      	adds	r7, #28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd90      	pop	{r4, r7, pc}

08006cf8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b08a      	sub	sp, #40	@ 0x28
 8006cfc:	af02      	add	r7, sp, #8
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10b      	bne.n	8006d22 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8006d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d0e:	f383 8811 	msr	BASEPRI, r3
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	61bb      	str	r3, [r7, #24]
}
 8006d1c:	bf00      	nop
 8006d1e:	bf00      	nop
 8006d20:	e7fd      	b.n	8006d1e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d90b      	bls.n	8006d42 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8006d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d2e:	f383 8811 	msr	BASEPRI, r3
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	617b      	str	r3, [r7, #20]
}
 8006d3c:	bf00      	nop
 8006d3e:	bf00      	nop
 8006d40:	e7fd      	b.n	8006d3e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006d42:	2302      	movs	r3, #2
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f7ff fe3f 	bl	80069d0 <xQueueGenericCreateStatic>
 8006d52:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d002      	beq.n	8006d60 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006d60:	69fb      	ldr	r3, [r7, #28]
	}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3720      	adds	r7, #32
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b086      	sub	sp, #24
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10b      	bne.n	8006d92 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	613b      	str	r3, [r7, #16]
}
 8006d8c:	bf00      	nop
 8006d8e:	bf00      	nop
 8006d90:	e7fd      	b.n	8006d8e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d90b      	bls.n	8006db2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	60fb      	str	r3, [r7, #12]
}
 8006dac:	bf00      	nop
 8006dae:	bf00      	nop
 8006db0:	e7fd      	b.n	8006dae <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006db2:	2202      	movs	r2, #2
 8006db4:	2100      	movs	r1, #0
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7ff fe87 	bl	8006aca <xQueueGenericCreate>
 8006dbc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d002      	beq.n	8006dca <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006dca:	697b      	ldr	r3, [r7, #20]
	}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b08e      	sub	sp, #56	@ 0x38
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
 8006de0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006de2:	2300      	movs	r3, #0
 8006de4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10b      	bne.n	8006e08 <xQueueGenericSend+0x34>
	__asm volatile
 8006df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006e02:	bf00      	nop
 8006e04:	bf00      	nop
 8006e06:	e7fd      	b.n	8006e04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d103      	bne.n	8006e16 <xQueueGenericSend+0x42>
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <xQueueGenericSend+0x46>
 8006e16:	2301      	movs	r3, #1
 8006e18:	e000      	b.n	8006e1c <xQueueGenericSend+0x48>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10b      	bne.n	8006e38 <xQueueGenericSend+0x64>
	__asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006e32:	bf00      	nop
 8006e34:	bf00      	nop
 8006e36:	e7fd      	b.n	8006e34 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d103      	bne.n	8006e46 <xQueueGenericSend+0x72>
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d101      	bne.n	8006e4a <xQueueGenericSend+0x76>
 8006e46:	2301      	movs	r3, #1
 8006e48:	e000      	b.n	8006e4c <xQueueGenericSend+0x78>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10b      	bne.n	8006e68 <xQueueGenericSend+0x94>
	__asm volatile
 8006e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e54:	f383 8811 	msr	BASEPRI, r3
 8006e58:	f3bf 8f6f 	isb	sy
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	623b      	str	r3, [r7, #32]
}
 8006e62:	bf00      	nop
 8006e64:	bf00      	nop
 8006e66:	e7fd      	b.n	8006e64 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e68:	f001 fcf2 	bl	8008850 <xTaskGetSchedulerState>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d102      	bne.n	8006e78 <xQueueGenericSend+0xa4>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <xQueueGenericSend+0xa8>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e000      	b.n	8006e7e <xQueueGenericSend+0xaa>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10b      	bne.n	8006e9a <xQueueGenericSend+0xc6>
	__asm volatile
 8006e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	61fb      	str	r3, [r7, #28]
}
 8006e94:	bf00      	nop
 8006e96:	bf00      	nop
 8006e98:	e7fd      	b.n	8006e96 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e9a:	f7ff fc0d 	bl	80066b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d302      	bcc.n	8006eb0 <xQueueGenericSend+0xdc>
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d129      	bne.n	8006f04 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	68b9      	ldr	r1, [r7, #8]
 8006eb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006eb6:	f000 fcab 	bl	8007810 <prvCopyDataToQueue>
 8006eba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d010      	beq.n	8006ee6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec6:	3324      	adds	r3, #36	@ 0x24
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f001 faeb 	bl	80084a4 <xTaskRemoveFromEventList>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d013      	beq.n	8006efc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ed4:	4b3f      	ldr	r3, [pc, #252]	@ (8006fd4 <xQueueGenericSend+0x200>)
 8006ed6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	f3bf 8f6f 	isb	sy
 8006ee4:	e00a      	b.n	8006efc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d007      	beq.n	8006efc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006eec:	4b39      	ldr	r3, [pc, #228]	@ (8006fd4 <xQueueGenericSend+0x200>)
 8006eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ef2:	601a      	str	r2, [r3, #0]
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006efc:	f7ff fc0e 	bl	800671c <vPortExitCritical>
				return pdPASS;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e063      	b.n	8006fcc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d103      	bne.n	8006f12 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f0a:	f7ff fc07 	bl	800671c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	e05c      	b.n	8006fcc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d106      	bne.n	8006f26 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f18:	f107 0314 	add.w	r3, r7, #20
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f001 fb25 	bl	800856c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f22:	2301      	movs	r3, #1
 8006f24:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f26:	f7ff fbf9 	bl	800671c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f2a:	f001 f86d 	bl	8008008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f2e:	f7ff fbc3 	bl	80066b8 <vPortEnterCritical>
 8006f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f38:	b25b      	sxtb	r3, r3
 8006f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3e:	d103      	bne.n	8006f48 <xQueueGenericSend+0x174>
 8006f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f4e:	b25b      	sxtb	r3, r3
 8006f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f54:	d103      	bne.n	8006f5e <xQueueGenericSend+0x18a>
 8006f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f5e:	f7ff fbdd 	bl	800671c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f62:	1d3a      	adds	r2, r7, #4
 8006f64:	f107 0314 	add.w	r3, r7, #20
 8006f68:	4611      	mov	r1, r2
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f001 fb14 	bl	8008598 <xTaskCheckForTimeOut>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d124      	bne.n	8006fc0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006f76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f78:	f000 fd42 	bl	8007a00 <prvIsQueueFull>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d018      	beq.n	8006fb4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f84:	3310      	adds	r3, #16
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	4611      	mov	r1, r2
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f001 fa38 	bl	8008400 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f92:	f000 fccd 	bl	8007930 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006f96:	f001 f845 	bl	8008024 <xTaskResumeAll>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f47f af7c 	bne.w	8006e9a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8006fd4 <xQueueGenericSend+0x200>)
 8006fa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	e772      	b.n	8006e9a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006fb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006fb6:	f000 fcbb 	bl	8007930 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fba:	f001 f833 	bl	8008024 <xTaskResumeAll>
 8006fbe:	e76c      	b.n	8006e9a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006fc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006fc2:	f000 fcb5 	bl	8007930 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fc6:	f001 f82d 	bl	8008024 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006fca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3738      	adds	r7, #56	@ 0x38
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	e000ed04 	.word	0xe000ed04

08006fd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b090      	sub	sp, #64	@ 0x40
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
 8006fe4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10b      	bne.n	8007008 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007002:	bf00      	nop
 8007004:	bf00      	nop
 8007006:	e7fd      	b.n	8007004 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d103      	bne.n	8007016 <xQueueGenericSendFromISR+0x3e>
 800700e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <xQueueGenericSendFromISR+0x42>
 8007016:	2301      	movs	r3, #1
 8007018:	e000      	b.n	800701c <xQueueGenericSendFromISR+0x44>
 800701a:	2300      	movs	r3, #0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10b      	bne.n	8007038 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007024:	f383 8811 	msr	BASEPRI, r3
 8007028:	f3bf 8f6f 	isb	sy
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007032:	bf00      	nop
 8007034:	bf00      	nop
 8007036:	e7fd      	b.n	8007034 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	2b02      	cmp	r3, #2
 800703c:	d103      	bne.n	8007046 <xQueueGenericSendFromISR+0x6e>
 800703e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007042:	2b01      	cmp	r3, #1
 8007044:	d101      	bne.n	800704a <xQueueGenericSendFromISR+0x72>
 8007046:	2301      	movs	r3, #1
 8007048:	e000      	b.n	800704c <xQueueGenericSendFromISR+0x74>
 800704a:	2300      	movs	r3, #0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10b      	bne.n	8007068 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	623b      	str	r3, [r7, #32]
}
 8007062:	bf00      	nop
 8007064:	bf00      	nop
 8007066:	e7fd      	b.n	8007064 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007068:	f7ff fc06 	bl	8006878 <vPortValidateInterruptPriority>
	__asm volatile
 800706c:	f3ef 8211 	mrs	r2, BASEPRI
 8007070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	61fa      	str	r2, [r7, #28]
 8007082:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007084:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007086:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800708a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800708c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800708e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007090:	429a      	cmp	r2, r3
 8007092:	d302      	bcc.n	800709a <xQueueGenericSendFromISR+0xc2>
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	2b02      	cmp	r3, #2
 8007098:	d12f      	bne.n	80070fa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800709a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	68b9      	ldr	r1, [r7, #8]
 80070ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80070b0:	f000 fbae 	bl	8007810 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80070b4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80070b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070bc:	d112      	bne.n	80070e4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d016      	beq.n	80070f4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c8:	3324      	adds	r3, #36	@ 0x24
 80070ca:	4618      	mov	r0, r3
 80070cc:	f001 f9ea 	bl	80084a4 <xTaskRemoveFromEventList>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00e      	beq.n	80070f4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00b      	beq.n	80070f4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	e007      	b.n	80070f4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80070e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80070e8:	3301      	adds	r3, #1
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	b25a      	sxtb	r2, r3
 80070ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80070f4:	2301      	movs	r3, #1
 80070f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80070f8:	e001      	b.n	80070fe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80070fa:	2300      	movs	r3, #0
 80070fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007100:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f383 8811 	msr	BASEPRI, r3
}
 8007108:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800710a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800710c:	4618      	mov	r0, r3
 800710e:	3740      	adds	r7, #64	@ 0x40
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b08e      	sub	sp, #56	@ 0x38
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10b      	bne.n	8007140 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	623b      	str	r3, [r7, #32]
}
 800713a:	bf00      	nop
 800713c:	bf00      	nop
 800713e:	e7fd      	b.n	800713c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00b      	beq.n	8007160 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8007148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800714c:	f383 8811 	msr	BASEPRI, r3
 8007150:	f3bf 8f6f 	isb	sy
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	61fb      	str	r3, [r7, #28]
}
 800715a:	bf00      	nop
 800715c:	bf00      	nop
 800715e:	e7fd      	b.n	800715c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d103      	bne.n	8007170 <xQueueGiveFromISR+0x5c>
 8007168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <xQueueGiveFromISR+0x60>
 8007170:	2301      	movs	r3, #1
 8007172:	e000      	b.n	8007176 <xQueueGiveFromISR+0x62>
 8007174:	2300      	movs	r3, #0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10b      	bne.n	8007192 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800717a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800717e:	f383 8811 	msr	BASEPRI, r3
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	61bb      	str	r3, [r7, #24]
}
 800718c:	bf00      	nop
 800718e:	bf00      	nop
 8007190:	e7fd      	b.n	800718e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007192:	f7ff fb71 	bl	8006878 <vPortValidateInterruptPriority>
	__asm volatile
 8007196:	f3ef 8211 	mrs	r2, BASEPRI
 800719a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	617a      	str	r2, [r7, #20]
 80071ac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80071ae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80071b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071be:	429a      	cmp	r2, r3
 80071c0:	d22b      	bcs.n	800721a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80071c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80071d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80071d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071dc:	d112      	bne.n	8007204 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d016      	beq.n	8007214 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e8:	3324      	adds	r3, #36	@ 0x24
 80071ea:	4618      	mov	r0, r3
 80071ec:	f001 f95a 	bl	80084a4 <xTaskRemoveFromEventList>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00e      	beq.n	8007214 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00b      	beq.n	8007214 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	2201      	movs	r2, #1
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	e007      	b.n	8007214 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007204:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007208:	3301      	adds	r3, #1
 800720a:	b2db      	uxtb	r3, r3
 800720c:	b25a      	sxtb	r2, r3
 800720e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007210:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007214:	2301      	movs	r3, #1
 8007216:	637b      	str	r3, [r7, #52]	@ 0x34
 8007218:	e001      	b.n	800721e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800721a:	2300      	movs	r3, #0
 800721c:	637b      	str	r3, [r7, #52]	@ 0x34
 800721e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007220:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f383 8811 	msr	BASEPRI, r3
}
 8007228:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800722a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800722c:	4618      	mov	r0, r3
 800722e:	3738      	adds	r7, #56	@ 0x38
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b08c      	sub	sp, #48	@ 0x30
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007240:	2300      	movs	r3, #0
 8007242:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10b      	bne.n	8007266 <xQueueReceive+0x32>
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	623b      	str	r3, [r7, #32]
}
 8007260:	bf00      	nop
 8007262:	bf00      	nop
 8007264:	e7fd      	b.n	8007262 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d103      	bne.n	8007274 <xQueueReceive+0x40>
 800726c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800726e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <xQueueReceive+0x44>
 8007274:	2301      	movs	r3, #1
 8007276:	e000      	b.n	800727a <xQueueReceive+0x46>
 8007278:	2300      	movs	r3, #0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10b      	bne.n	8007296 <xQueueReceive+0x62>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	61fb      	str	r3, [r7, #28]
}
 8007290:	bf00      	nop
 8007292:	bf00      	nop
 8007294:	e7fd      	b.n	8007292 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007296:	f001 fadb 	bl	8008850 <xTaskGetSchedulerState>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d102      	bne.n	80072a6 <xQueueReceive+0x72>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <xQueueReceive+0x76>
 80072a6:	2301      	movs	r3, #1
 80072a8:	e000      	b.n	80072ac <xQueueReceive+0x78>
 80072aa:	2300      	movs	r3, #0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10b      	bne.n	80072c8 <xQueueReceive+0x94>
	__asm volatile
 80072b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b4:	f383 8811 	msr	BASEPRI, r3
 80072b8:	f3bf 8f6f 	isb	sy
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	61bb      	str	r3, [r7, #24]
}
 80072c2:	bf00      	nop
 80072c4:	bf00      	nop
 80072c6:	e7fd      	b.n	80072c4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072c8:	f7ff f9f6 	bl	80066b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d01f      	beq.n	8007318 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80072d8:	68b9      	ldr	r1, [r7, #8]
 80072da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072dc:	f000 fb02 	bl	80078e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80072e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e2:	1e5a      	subs	r2, r3, #1
 80072e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00f      	beq.n	8007310 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f2:	3310      	adds	r3, #16
 80072f4:	4618      	mov	r0, r3
 80072f6:	f001 f8d5 	bl	80084a4 <xTaskRemoveFromEventList>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d007      	beq.n	8007310 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007300:	4b3c      	ldr	r3, [pc, #240]	@ (80073f4 <xQueueReceive+0x1c0>)
 8007302:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007310:	f7ff fa04 	bl	800671c <vPortExitCritical>
				return pdPASS;
 8007314:	2301      	movs	r3, #1
 8007316:	e069      	b.n	80073ec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d103      	bne.n	8007326 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800731e:	f7ff f9fd 	bl	800671c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007322:	2300      	movs	r3, #0
 8007324:	e062      	b.n	80073ec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007328:	2b00      	cmp	r3, #0
 800732a:	d106      	bne.n	800733a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800732c:	f107 0310 	add.w	r3, r7, #16
 8007330:	4618      	mov	r0, r3
 8007332:	f001 f91b 	bl	800856c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007336:	2301      	movs	r3, #1
 8007338:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800733a:	f7ff f9ef 	bl	800671c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800733e:	f000 fe63 	bl	8008008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007342:	f7ff f9b9 	bl	80066b8 <vPortEnterCritical>
 8007346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007348:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800734c:	b25b      	sxtb	r3, r3
 800734e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007352:	d103      	bne.n	800735c <xQueueReceive+0x128>
 8007354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800735c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800735e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007362:	b25b      	sxtb	r3, r3
 8007364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007368:	d103      	bne.n	8007372 <xQueueReceive+0x13e>
 800736a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007372:	f7ff f9d3 	bl	800671c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007376:	1d3a      	adds	r2, r7, #4
 8007378:	f107 0310 	add.w	r3, r7, #16
 800737c:	4611      	mov	r1, r2
 800737e:	4618      	mov	r0, r3
 8007380:	f001 f90a 	bl	8008598 <xTaskCheckForTimeOut>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d123      	bne.n	80073d2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800738a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800738c:	f000 fb22 	bl	80079d4 <prvIsQueueEmpty>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d017      	beq.n	80073c6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007398:	3324      	adds	r3, #36	@ 0x24
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	4611      	mov	r1, r2
 800739e:	4618      	mov	r0, r3
 80073a0:	f001 f82e 	bl	8008400 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80073a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073a6:	f000 fac3 	bl	8007930 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80073aa:	f000 fe3b 	bl	8008024 <xTaskResumeAll>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d189      	bne.n	80072c8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80073b4:	4b0f      	ldr	r3, [pc, #60]	@ (80073f4 <xQueueReceive+0x1c0>)
 80073b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073ba:	601a      	str	r2, [r3, #0]
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	e780      	b.n	80072c8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80073c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073c8:	f000 fab2 	bl	8007930 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073cc:	f000 fe2a 	bl	8008024 <xTaskResumeAll>
 80073d0:	e77a      	b.n	80072c8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80073d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073d4:	f000 faac 	bl	8007930 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073d8:	f000 fe24 	bl	8008024 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073de:	f000 faf9 	bl	80079d4 <prvIsQueueEmpty>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f43f af6f 	beq.w	80072c8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80073ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3730      	adds	r7, #48	@ 0x30
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	e000ed04 	.word	0xe000ed04

080073f8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b08e      	sub	sp, #56	@ 0x38
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007402:	2300      	movs	r3, #0
 8007404:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800740a:	2300      	movs	r3, #0
 800740c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800740e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10b      	bne.n	800742c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	623b      	str	r3, [r7, #32]
}
 8007426:	bf00      	nop
 8007428:	bf00      	nop
 800742a:	e7fd      	b.n	8007428 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800742c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800742e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00b      	beq.n	800744c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007438:	f383 8811 	msr	BASEPRI, r3
 800743c:	f3bf 8f6f 	isb	sy
 8007440:	f3bf 8f4f 	dsb	sy
 8007444:	61fb      	str	r3, [r7, #28]
}
 8007446:	bf00      	nop
 8007448:	bf00      	nop
 800744a:	e7fd      	b.n	8007448 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800744c:	f001 fa00 	bl	8008850 <xTaskGetSchedulerState>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d102      	bne.n	800745c <xQueueSemaphoreTake+0x64>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d101      	bne.n	8007460 <xQueueSemaphoreTake+0x68>
 800745c:	2301      	movs	r3, #1
 800745e:	e000      	b.n	8007462 <xQueueSemaphoreTake+0x6a>
 8007460:	2300      	movs	r3, #0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10b      	bne.n	800747e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	61bb      	str	r3, [r7, #24]
}
 8007478:	bf00      	nop
 800747a:	bf00      	nop
 800747c:	e7fd      	b.n	800747a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800747e:	f7ff f91b 	bl	80066b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007486:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748a:	2b00      	cmp	r3, #0
 800748c:	d024      	beq.n	80074d8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800748e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007490:	1e5a      	subs	r2, r3, #1
 8007492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007494:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d104      	bne.n	80074a8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800749e:	f001 fb51 	bl	8008b44 <pvTaskIncrementMutexHeldCount>
 80074a2:	4602      	mov	r2, r0
 80074a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00f      	beq.n	80074d0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b2:	3310      	adds	r3, #16
 80074b4:	4618      	mov	r0, r3
 80074b6:	f000 fff5 	bl	80084a4 <xTaskRemoveFromEventList>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d007      	beq.n	80074d0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80074c0:	4b54      	ldr	r3, [pc, #336]	@ (8007614 <xQueueSemaphoreTake+0x21c>)
 80074c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074c6:	601a      	str	r2, [r3, #0]
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80074d0:	f7ff f924 	bl	800671c <vPortExitCritical>
				return pdPASS;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e098      	b.n	800760a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d112      	bne.n	8007504 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80074de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00b      	beq.n	80074fc <xQueueSemaphoreTake+0x104>
	__asm volatile
 80074e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e8:	f383 8811 	msr	BASEPRI, r3
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	617b      	str	r3, [r7, #20]
}
 80074f6:	bf00      	nop
 80074f8:	bf00      	nop
 80074fa:	e7fd      	b.n	80074f8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80074fc:	f7ff f90e 	bl	800671c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007500:	2300      	movs	r3, #0
 8007502:	e082      	b.n	800760a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007506:	2b00      	cmp	r3, #0
 8007508:	d106      	bne.n	8007518 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800750a:	f107 030c 	add.w	r3, r7, #12
 800750e:	4618      	mov	r0, r3
 8007510:	f001 f82c 	bl	800856c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007514:	2301      	movs	r3, #1
 8007516:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007518:	f7ff f900 	bl	800671c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800751c:	f000 fd74 	bl	8008008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007520:	f7ff f8ca 	bl	80066b8 <vPortEnterCritical>
 8007524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007526:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800752a:	b25b      	sxtb	r3, r3
 800752c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007530:	d103      	bne.n	800753a <xQueueSemaphoreTake+0x142>
 8007532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800753a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800753c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007540:	b25b      	sxtb	r3, r3
 8007542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007546:	d103      	bne.n	8007550 <xQueueSemaphoreTake+0x158>
 8007548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800754a:	2200      	movs	r2, #0
 800754c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007550:	f7ff f8e4 	bl	800671c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007554:	463a      	mov	r2, r7
 8007556:	f107 030c 	add.w	r3, r7, #12
 800755a:	4611      	mov	r1, r2
 800755c:	4618      	mov	r0, r3
 800755e:	f001 f81b 	bl	8008598 <xTaskCheckForTimeOut>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d132      	bne.n	80075ce <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007568:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800756a:	f000 fa33 	bl	80079d4 <prvIsQueueEmpty>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d026      	beq.n	80075c2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d109      	bne.n	8007590 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800757c:	f7ff f89c 	bl	80066b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	4618      	mov	r0, r3
 8007586:	f001 f981 	bl	800888c <xTaskPriorityInherit>
 800758a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800758c:	f7ff f8c6 	bl	800671c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007592:	3324      	adds	r3, #36	@ 0x24
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	4611      	mov	r1, r2
 8007598:	4618      	mov	r0, r3
 800759a:	f000 ff31 	bl	8008400 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800759e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80075a0:	f000 f9c6 	bl	8007930 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075a4:	f000 fd3e 	bl	8008024 <xTaskResumeAll>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f47f af67 	bne.w	800747e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80075b0:	4b18      	ldr	r3, [pc, #96]	@ (8007614 <xQueueSemaphoreTake+0x21c>)
 80075b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075b6:	601a      	str	r2, [r3, #0]
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	e75d      	b.n	800747e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80075c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80075c4:	f000 f9b4 	bl	8007930 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075c8:	f000 fd2c 	bl	8008024 <xTaskResumeAll>
 80075cc:	e757      	b.n	800747e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80075ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80075d0:	f000 f9ae 	bl	8007930 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075d4:	f000 fd26 	bl	8008024 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80075da:	f000 f9fb 	bl	80079d4 <prvIsQueueEmpty>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f43f af4c 	beq.w	800747e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80075e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00d      	beq.n	8007608 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80075ec:	f7ff f864 	bl	80066b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80075f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80075f2:	f000 f8f5 	bl	80077e0 <prvGetDisinheritPriorityAfterTimeout>
 80075f6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80075f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80075fe:	4618      	mov	r0, r3
 8007600:	f001 fa1c 	bl	8008a3c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007604:	f7ff f88a 	bl	800671c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007608:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800760a:	4618      	mov	r0, r3
 800760c:	3738      	adds	r7, #56	@ 0x38
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	e000ed04 	.word	0xe000ed04

08007618 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b08e      	sub	sp, #56	@ 0x38
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10b      	bne.n	8007646 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800762e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	623b      	str	r3, [r7, #32]
}
 8007640:	bf00      	nop
 8007642:	bf00      	nop
 8007644:	e7fd      	b.n	8007642 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d103      	bne.n	8007654 <xQueueReceiveFromISR+0x3c>
 800764c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <xQueueReceiveFromISR+0x40>
 8007654:	2301      	movs	r3, #1
 8007656:	e000      	b.n	800765a <xQueueReceiveFromISR+0x42>
 8007658:	2300      	movs	r3, #0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10b      	bne.n	8007676 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800765e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	61fb      	str	r3, [r7, #28]
}
 8007670:	bf00      	nop
 8007672:	bf00      	nop
 8007674:	e7fd      	b.n	8007672 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007676:	f7ff f8ff 	bl	8006878 <vPortValidateInterruptPriority>
	__asm volatile
 800767a:	f3ef 8211 	mrs	r2, BASEPRI
 800767e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	61ba      	str	r2, [r7, #24]
 8007690:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007692:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007694:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800769a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800769c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d02f      	beq.n	8007702 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80076a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80076ac:	68b9      	ldr	r1, [r7, #8]
 80076ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076b0:	f000 f918 	bl	80078e4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b6:	1e5a      	subs	r2, r3, #1
 80076b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ba:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80076bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80076c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c4:	d112      	bne.n	80076ec <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d016      	beq.n	80076fc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d0:	3310      	adds	r3, #16
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 fee6 	bl	80084a4 <xTaskRemoveFromEventList>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00e      	beq.n	80076fc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00b      	beq.n	80076fc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	e007      	b.n	80076fc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80076ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80076f0:	3301      	adds	r3, #1
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	b25a      	sxtb	r2, r3
 80076f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80076fc:	2301      	movs	r3, #1
 80076fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007700:	e001      	b.n	8007706 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007702:	2300      	movs	r3, #0
 8007704:	637b      	str	r3, [r7, #52]	@ 0x34
 8007706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007708:	613b      	str	r3, [r7, #16]
	__asm volatile
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	f383 8811 	msr	BASEPRI, r3
}
 8007710:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007714:	4618      	mov	r0, r3
 8007716:	3738      	adds	r7, #56	@ 0x38
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10b      	bne.n	8007742 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800772a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	60bb      	str	r3, [r7, #8]
}
 800773c:	bf00      	nop
 800773e:	bf00      	nop
 8007740:	e7fd      	b.n	800773e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8007742:	f7fe ffb9 	bl	80066b8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800774a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800774c:	f7fe ffe6 	bl	800671c <vPortExitCritical>

	return uxReturn;
 8007750:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800775a:	b480      	push	{r7}
 800775c:	b087      	sub	sp, #28
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10b      	bne.n	8007784 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800776c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	60fb      	str	r3, [r7, #12]
}
 800777e:	bf00      	nop
 8007780:	bf00      	nop
 8007782:	e7fd      	b.n	8007780 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007788:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800778a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800778c:	4618      	mov	r0, r3
 800778e:	371c      	adds	r7, #28
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d10b      	bne.n	80077c2 <vQueueDelete+0x2a>
	__asm volatile
 80077aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	60bb      	str	r3, [r7, #8]
}
 80077bc:	bf00      	nop
 80077be:	bf00      	nop
 80077c0:	e7fd      	b.n	80077be <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f000 f95e 	bl	8007a84 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d102      	bne.n	80077d8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f7fe fc6c 	bl	80060b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80077d8:	bf00      	nop
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d006      	beq.n	80077fe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	e001      	b.n	8007802 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80077fe:	2300      	movs	r3, #0
 8007800:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007802:	68fb      	ldr	r3, [r7, #12]
	}
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b086      	sub	sp, #24
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800781c:	2300      	movs	r3, #0
 800781e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007824:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10d      	bne.n	800784a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d14d      	bne.n	80078d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	4618      	mov	r0, r3
 800783c:	f001 f88e 	bl	800895c <xTaskPriorityDisinherit>
 8007840:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	609a      	str	r2, [r3, #8]
 8007848:	e043      	b.n	80078d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d119      	bne.n	8007884 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6858      	ldr	r0, [r3, #4]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007858:	461a      	mov	r2, r3
 800785a:	68b9      	ldr	r1, [r7, #8]
 800785c:	f00f fcfb 	bl	8017256 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	685a      	ldr	r2, [r3, #4]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007868:	441a      	add	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	685a      	ldr	r2, [r3, #4]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	429a      	cmp	r2, r3
 8007878:	d32b      	bcc.n	80078d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	605a      	str	r2, [r3, #4]
 8007882:	e026      	b.n	80078d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	68d8      	ldr	r0, [r3, #12]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800788c:	461a      	mov	r2, r3
 800788e:	68b9      	ldr	r1, [r7, #8]
 8007890:	f00f fce1 	bl	8017256 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	68da      	ldr	r2, [r3, #12]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800789c:	425b      	negs	r3, r3
 800789e:	441a      	add	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	68da      	ldr	r2, [r3, #12]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d207      	bcs.n	80078c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	689a      	ldr	r2, [r3, #8]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b8:	425b      	negs	r3, r3
 80078ba:	441a      	add	r2, r3
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d105      	bne.n	80078d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d002      	beq.n	80078d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	3b01      	subs	r3, #1
 80078d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	1c5a      	adds	r2, r3, #1
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80078da:	697b      	ldr	r3, [r7, #20]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3718      	adds	r7, #24
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d018      	beq.n	8007928 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68da      	ldr	r2, [r3, #12]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078fe:	441a      	add	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	68da      	ldr	r2, [r3, #12]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	429a      	cmp	r2, r3
 800790e:	d303      	bcc.n	8007918 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	68d9      	ldr	r1, [r3, #12]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007920:	461a      	mov	r2, r3
 8007922:	6838      	ldr	r0, [r7, #0]
 8007924:	f00f fc97 	bl	8017256 <memcpy>
	}
}
 8007928:	bf00      	nop
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007938:	f7fe febe 	bl	80066b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007942:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007944:	e011      	b.n	800796a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800794a:	2b00      	cmp	r3, #0
 800794c:	d012      	beq.n	8007974 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	3324      	adds	r3, #36	@ 0x24
 8007952:	4618      	mov	r0, r3
 8007954:	f000 fda6 	bl	80084a4 <xTaskRemoveFromEventList>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800795e:	f000 fe7f 	bl	8008660 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007962:	7bfb      	ldrb	r3, [r7, #15]
 8007964:	3b01      	subs	r3, #1
 8007966:	b2db      	uxtb	r3, r3
 8007968:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800796a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800796e:	2b00      	cmp	r3, #0
 8007970:	dce9      	bgt.n	8007946 <prvUnlockQueue+0x16>
 8007972:	e000      	b.n	8007976 <prvUnlockQueue+0x46>
					break;
 8007974:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	22ff      	movs	r2, #255	@ 0xff
 800797a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800797e:	f7fe fecd 	bl	800671c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007982:	f7fe fe99 	bl	80066b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800798c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800798e:	e011      	b.n	80079b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d012      	beq.n	80079be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	3310      	adds	r3, #16
 800799c:	4618      	mov	r0, r3
 800799e:	f000 fd81 	bl	80084a4 <xTaskRemoveFromEventList>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80079a8:	f000 fe5a 	bl	8008660 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	3b01      	subs	r3, #1
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	dce9      	bgt.n	8007990 <prvUnlockQueue+0x60>
 80079bc:	e000      	b.n	80079c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80079be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	22ff      	movs	r2, #255	@ 0xff
 80079c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80079c8:	f7fe fea8 	bl	800671c <vPortExitCritical>
}
 80079cc:	bf00      	nop
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079dc:	f7fe fe6c 	bl	80066b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d102      	bne.n	80079ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80079e8:	2301      	movs	r3, #1
 80079ea:	60fb      	str	r3, [r7, #12]
 80079ec:	e001      	b.n	80079f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80079ee:	2300      	movs	r3, #0
 80079f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079f2:	f7fe fe93 	bl	800671c <vPortExitCritical>

	return xReturn;
 80079f6:	68fb      	ldr	r3, [r7, #12]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a08:	f7fe fe56 	bl	80066b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d102      	bne.n	8007a1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	e001      	b.n	8007a22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a22:	f7fe fe7b 	bl	800671c <vPortExitCritical>

	return xReturn;
 8007a26:	68fb      	ldr	r3, [r7, #12]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	60fb      	str	r3, [r7, #12]
 8007a3e:	e014      	b.n	8007a6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a40:	4a0f      	ldr	r2, [pc, #60]	@ (8007a80 <vQueueAddToRegistry+0x50>)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10b      	bne.n	8007a64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a4c:	490c      	ldr	r1, [pc, #48]	@ (8007a80 <vQueueAddToRegistry+0x50>)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	683a      	ldr	r2, [r7, #0]
 8007a52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007a56:	4a0a      	ldr	r2, [pc, #40]	@ (8007a80 <vQueueAddToRegistry+0x50>)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	4413      	add	r3, r2
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007a62:	e006      	b.n	8007a72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3301      	adds	r3, #1
 8007a68:	60fb      	str	r3, [r7, #12]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2b07      	cmp	r3, #7
 8007a6e:	d9e7      	bls.n	8007a40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a70:	bf00      	nop
 8007a72:	bf00      	nop
 8007a74:	3714      	adds	r7, #20
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	24009544 	.word	0x24009544

08007a84 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	60fb      	str	r3, [r7, #12]
 8007a90:	e016      	b.n	8007ac0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007a92:	4a10      	ldr	r2, [pc, #64]	@ (8007ad4 <vQueueUnregisterQueue+0x50>)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	4413      	add	r3, r2
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d10b      	bne.n	8007aba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007aa2:	4a0c      	ldr	r2, [pc, #48]	@ (8007ad4 <vQueueUnregisterQueue+0x50>)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007aac:	4a09      	ldr	r2, [pc, #36]	@ (8007ad4 <vQueueUnregisterQueue+0x50>)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	00db      	lsls	r3, r3, #3
 8007ab2:	4413      	add	r3, r2
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	605a      	str	r2, [r3, #4]
				break;
 8007ab8:	e006      	b.n	8007ac8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	3301      	adds	r3, #1
 8007abe:	60fb      	str	r3, [r7, #12]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2b07      	cmp	r3, #7
 8007ac4:	d9e5      	bls.n	8007a92 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007ac6:	bf00      	nop
 8007ac8:	bf00      	nop
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	24009544 	.word	0x24009544

08007ad8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007ae8:	f7fe fde6 	bl	80066b8 <vPortEnterCritical>
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007af2:	b25b      	sxtb	r3, r3
 8007af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af8:	d103      	bne.n	8007b02 <vQueueWaitForMessageRestricted+0x2a>
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b08:	b25b      	sxtb	r3, r3
 8007b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b0e:	d103      	bne.n	8007b18 <vQueueWaitForMessageRestricted+0x40>
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b18:	f7fe fe00 	bl	800671c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d106      	bne.n	8007b32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	3324      	adds	r3, #36	@ 0x24
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	68b9      	ldr	r1, [r7, #8]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 fc8d 	bl	800844c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007b32:	6978      	ldr	r0, [r7, #20]
 8007b34:	f7ff fefc 	bl	8007930 <prvUnlockQueue>
	}
 8007b38:	bf00      	nop
 8007b3a:	3718      	adds	r7, #24
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b08e      	sub	sp, #56	@ 0x38
 8007b44:	af04      	add	r7, sp, #16
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	607a      	str	r2, [r7, #4]
 8007b4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10b      	bne.n	8007b6c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	623b      	str	r3, [r7, #32]
}
 8007b66:	bf00      	nop
 8007b68:	bf00      	nop
 8007b6a:	e7fd      	b.n	8007b68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10b      	bne.n	8007b8a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	61fb      	str	r3, [r7, #28]
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop
 8007b88:	e7fd      	b.n	8007b86 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b8a:	23a8      	movs	r3, #168	@ 0xa8
 8007b8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	2ba8      	cmp	r3, #168	@ 0xa8
 8007b92:	d00b      	beq.n	8007bac <xTaskCreateStatic+0x6c>
	__asm volatile
 8007b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	61bb      	str	r3, [r7, #24]
}
 8007ba6:	bf00      	nop
 8007ba8:	bf00      	nop
 8007baa:	e7fd      	b.n	8007ba8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007bac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d01e      	beq.n	8007bf2 <xTaskCreateStatic+0xb2>
 8007bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d01b      	beq.n	8007bf2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bbc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007bc2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007bcc:	2300      	movs	r3, #0
 8007bce:	9303      	str	r3, [sp, #12]
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd2:	9302      	str	r3, [sp, #8]
 8007bd4:	f107 0314 	add.w	r3, r7, #20
 8007bd8:	9301      	str	r3, [sp, #4]
 8007bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	68b9      	ldr	r1, [r7, #8]
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 f851 	bl	8007c8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007bec:	f000 f8f6 	bl	8007ddc <prvAddNewTaskToReadyList>
 8007bf0:	e001      	b.n	8007bf6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007bf6:	697b      	ldr	r3, [r7, #20]
	}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3728      	adds	r7, #40	@ 0x28
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b08c      	sub	sp, #48	@ 0x30
 8007c04:	af04      	add	r7, sp, #16
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	603b      	str	r3, [r7, #0]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c10:	88fb      	ldrh	r3, [r7, #6]
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fe f97d 	bl	8005f14 <pvPortMalloc>
 8007c1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00e      	beq.n	8007c40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c22:	20a8      	movs	r0, #168	@ 0xa8
 8007c24:	f7fe f976 	bl	8005f14 <pvPortMalloc>
 8007c28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d003      	beq.n	8007c38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	631a      	str	r2, [r3, #48]	@ 0x30
 8007c36:	e005      	b.n	8007c44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c38:	6978      	ldr	r0, [r7, #20]
 8007c3a:	f7fe fa39 	bl	80060b0 <vPortFree>
 8007c3e:	e001      	b.n	8007c44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c40:	2300      	movs	r3, #0
 8007c42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d017      	beq.n	8007c7a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c52:	88fa      	ldrh	r2, [r7, #6]
 8007c54:	2300      	movs	r3, #0
 8007c56:	9303      	str	r3, [sp, #12]
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	9302      	str	r3, [sp, #8]
 8007c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c5e:	9301      	str	r3, [sp, #4]
 8007c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	68b9      	ldr	r1, [r7, #8]
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f000 f80f 	bl	8007c8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c6e:	69f8      	ldr	r0, [r7, #28]
 8007c70:	f000 f8b4 	bl	8007ddc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c74:	2301      	movs	r3, #1
 8007c76:	61bb      	str	r3, [r7, #24]
 8007c78:	e002      	b.n	8007c80 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c7e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c80:	69bb      	ldr	r3, [r7, #24]
	}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3720      	adds	r7, #32
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
	...

08007c8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b088      	sub	sp, #32
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
 8007c98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c9c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	21a5      	movs	r1, #165	@ 0xa5
 8007ca6:	f00f f9fa 	bl	801709e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cae:	6879      	ldr	r1, [r7, #4]
 8007cb0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007cb4:	440b      	add	r3, r1
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	f023 0307 	bic.w	r3, r3, #7
 8007cc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00b      	beq.n	8007ce6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	617b      	str	r3, [r7, #20]
}
 8007ce0:	bf00      	nop
 8007ce2:	bf00      	nop
 8007ce4:	e7fd      	b.n	8007ce2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d01f      	beq.n	8007d2c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cec:	2300      	movs	r3, #0
 8007cee:	61fb      	str	r3, [r7, #28]
 8007cf0:	e012      	b.n	8007d18 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	7819      	ldrb	r1, [r3, #0]
 8007cfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	4413      	add	r3, r2
 8007d00:	3334      	adds	r3, #52	@ 0x34
 8007d02:	460a      	mov	r2, r1
 8007d04:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d006      	beq.n	8007d20 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	3301      	adds	r3, #1
 8007d16:	61fb      	str	r3, [r7, #28]
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	2b0f      	cmp	r3, #15
 8007d1c:	d9e9      	bls.n	8007cf2 <prvInitialiseNewTask+0x66>
 8007d1e:	e000      	b.n	8007d22 <prvInitialiseNewTask+0x96>
			{
				break;
 8007d20:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d2a:	e003      	b.n	8007d34 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d36:	2b37      	cmp	r3, #55	@ 0x37
 8007d38:	d901      	bls.n	8007d3e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d3a:	2337      	movs	r3, #55	@ 0x37
 8007d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d42:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d48:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d52:	3304      	adds	r3, #4
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7fe faeb 	bl	8006330 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d5c:	3318      	adds	r3, #24
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7fe fae6 	bl	8006330 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d68:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d72:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d78:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8c:	3354      	adds	r3, #84	@ 0x54
 8007d8e:	224c      	movs	r2, #76	@ 0x4c
 8007d90:	2100      	movs	r1, #0
 8007d92:	4618      	mov	r0, r3
 8007d94:	f00f f983 	bl	801709e <memset>
 8007d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9a:	4a0d      	ldr	r2, [pc, #52]	@ (8007dd0 <prvInitialiseNewTask+0x144>)
 8007d9c:	659a      	str	r2, [r3, #88]	@ 0x58
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da0:	4a0c      	ldr	r2, [pc, #48]	@ (8007dd4 <prvInitialiseNewTask+0x148>)
 8007da2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da6:	4a0c      	ldr	r2, [pc, #48]	@ (8007dd8 <prvInitialiseNewTask+0x14c>)
 8007da8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007daa:	683a      	ldr	r2, [r7, #0]
 8007dac:	68f9      	ldr	r1, [r7, #12]
 8007dae:	69b8      	ldr	r0, [r7, #24]
 8007db0:	f7fe fb52 	bl	8006458 <pxPortInitialiseStack>
 8007db4:	4602      	mov	r2, r0
 8007db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d002      	beq.n	8007dc6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dc6:	bf00      	nop
 8007dc8:	3720      	adds	r7, #32
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	2400ce24 	.word	0x2400ce24
 8007dd4:	2400ce8c 	.word	0x2400ce8c
 8007dd8:	2400cef4 	.word	0x2400cef4

08007ddc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007de4:	f7fe fc68 	bl	80066b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007de8:	4b2d      	ldr	r3, [pc, #180]	@ (8007ea0 <prvAddNewTaskToReadyList+0xc4>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	3301      	adds	r3, #1
 8007dee:	4a2c      	ldr	r2, [pc, #176]	@ (8007ea0 <prvAddNewTaskToReadyList+0xc4>)
 8007df0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007df2:	4b2c      	ldr	r3, [pc, #176]	@ (8007ea4 <prvAddNewTaskToReadyList+0xc8>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d109      	bne.n	8007e0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007dfa:	4a2a      	ldr	r2, [pc, #168]	@ (8007ea4 <prvAddNewTaskToReadyList+0xc8>)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e00:	4b27      	ldr	r3, [pc, #156]	@ (8007ea0 <prvAddNewTaskToReadyList+0xc4>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d110      	bne.n	8007e2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e08:	f000 fc4e 	bl	80086a8 <prvInitialiseTaskLists>
 8007e0c:	e00d      	b.n	8007e2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e0e:	4b26      	ldr	r3, [pc, #152]	@ (8007ea8 <prvAddNewTaskToReadyList+0xcc>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d109      	bne.n	8007e2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e16:	4b23      	ldr	r3, [pc, #140]	@ (8007ea4 <prvAddNewTaskToReadyList+0xc8>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d802      	bhi.n	8007e2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e24:	4a1f      	ldr	r2, [pc, #124]	@ (8007ea4 <prvAddNewTaskToReadyList+0xc8>)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e2a:	4b20      	ldr	r3, [pc, #128]	@ (8007eac <prvAddNewTaskToReadyList+0xd0>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	4a1e      	ldr	r2, [pc, #120]	@ (8007eac <prvAddNewTaskToReadyList+0xd0>)
 8007e32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007e34:	4b1d      	ldr	r3, [pc, #116]	@ (8007eac <prvAddNewTaskToReadyList+0xd0>)
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e40:	4b1b      	ldr	r3, [pc, #108]	@ (8007eb0 <prvAddNewTaskToReadyList+0xd4>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d903      	bls.n	8007e50 <prvAddNewTaskToReadyList+0x74>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e4c:	4a18      	ldr	r2, [pc, #96]	@ (8007eb0 <prvAddNewTaskToReadyList+0xd4>)
 8007e4e:	6013      	str	r3, [r2, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e54:	4613      	mov	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4a15      	ldr	r2, [pc, #84]	@ (8007eb4 <prvAddNewTaskToReadyList+0xd8>)
 8007e5e:	441a      	add	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	3304      	adds	r3, #4
 8007e64:	4619      	mov	r1, r3
 8007e66:	4610      	mov	r0, r2
 8007e68:	f7fe fa6f 	bl	800634a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e6c:	f7fe fc56 	bl	800671c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e70:	4b0d      	ldr	r3, [pc, #52]	@ (8007ea8 <prvAddNewTaskToReadyList+0xcc>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00e      	beq.n	8007e96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e78:	4b0a      	ldr	r3, [pc, #40]	@ (8007ea4 <prvAddNewTaskToReadyList+0xc8>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d207      	bcs.n	8007e96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e86:	4b0c      	ldr	r3, [pc, #48]	@ (8007eb8 <prvAddNewTaskToReadyList+0xdc>)
 8007e88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e8c:	601a      	str	r2, [r3, #0]
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e96:	bf00      	nop
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	24009a58 	.word	0x24009a58
 8007ea4:	24009584 	.word	0x24009584
 8007ea8:	24009a64 	.word	0x24009a64
 8007eac:	24009a74 	.word	0x24009a74
 8007eb0:	24009a60 	.word	0x24009a60
 8007eb4:	24009588 	.word	0x24009588
 8007eb8:	e000ed04 	.word	0xe000ed04

08007ebc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d018      	beq.n	8007f00 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ece:	4b14      	ldr	r3, [pc, #80]	@ (8007f20 <vTaskDelay+0x64>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00b      	beq.n	8007eee <vTaskDelay+0x32>
	__asm volatile
 8007ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eda:	f383 8811 	msr	BASEPRI, r3
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	60bb      	str	r3, [r7, #8]
}
 8007ee8:	bf00      	nop
 8007eea:	bf00      	nop
 8007eec:	e7fd      	b.n	8007eea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007eee:	f000 f88b 	bl	8008008 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fe39 	bl	8008b6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007efa:	f000 f893 	bl	8008024 <xTaskResumeAll>
 8007efe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d107      	bne.n	8007f16 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007f06:	4b07      	ldr	r3, [pc, #28]	@ (8007f24 <vTaskDelay+0x68>)
 8007f08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f0c:	601a      	str	r2, [r3, #0]
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f16:	bf00      	nop
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	24009a80 	.word	0x24009a80
 8007f24:	e000ed04 	.word	0xe000ed04

08007f28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b08a      	sub	sp, #40	@ 0x28
 8007f2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f32:	2300      	movs	r3, #0
 8007f34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f36:	463a      	mov	r2, r7
 8007f38:	1d39      	adds	r1, r7, #4
 8007f3a:	f107 0308 	add.w	r3, r7, #8
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fd ffb4 	bl	8005eac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	9202      	str	r2, [sp, #8]
 8007f4c:	9301      	str	r3, [sp, #4]
 8007f4e:	2300      	movs	r3, #0
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	2300      	movs	r3, #0
 8007f54:	460a      	mov	r2, r1
 8007f56:	4924      	ldr	r1, [pc, #144]	@ (8007fe8 <vTaskStartScheduler+0xc0>)
 8007f58:	4824      	ldr	r0, [pc, #144]	@ (8007fec <vTaskStartScheduler+0xc4>)
 8007f5a:	f7ff fdf1 	bl	8007b40 <xTaskCreateStatic>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	4a23      	ldr	r2, [pc, #140]	@ (8007ff0 <vTaskStartScheduler+0xc8>)
 8007f62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f64:	4b22      	ldr	r3, [pc, #136]	@ (8007ff0 <vTaskStartScheduler+0xc8>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d002      	beq.n	8007f72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	617b      	str	r3, [r7, #20]
 8007f70:	e001      	b.n	8007f76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f72:	2300      	movs	r3, #0
 8007f74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d102      	bne.n	8007f82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007f7c:	f000 fe4a 	bl	8008c14 <xTimerCreateTimerTask>
 8007f80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d11b      	bne.n	8007fc0 <vTaskStartScheduler+0x98>
	__asm volatile
 8007f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8c:	f383 8811 	msr	BASEPRI, r3
 8007f90:	f3bf 8f6f 	isb	sy
 8007f94:	f3bf 8f4f 	dsb	sy
 8007f98:	613b      	str	r3, [r7, #16]
}
 8007f9a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f9c:	4b15      	ldr	r3, [pc, #84]	@ (8007ff4 <vTaskStartScheduler+0xcc>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3354      	adds	r3, #84	@ 0x54
 8007fa2:	4a15      	ldr	r2, [pc, #84]	@ (8007ff8 <vTaskStartScheduler+0xd0>)
 8007fa4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007fa6:	4b15      	ldr	r3, [pc, #84]	@ (8007ffc <vTaskStartScheduler+0xd4>)
 8007fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007fae:	4b14      	ldr	r3, [pc, #80]	@ (8008000 <vTaskStartScheduler+0xd8>)
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007fb4:	4b13      	ldr	r3, [pc, #76]	@ (8008004 <vTaskStartScheduler+0xdc>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007fba:	f7fe fad9 	bl	8006570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007fbe:	e00f      	b.n	8007fe0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc6:	d10b      	bne.n	8007fe0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fcc:	f383 8811 	msr	BASEPRI, r3
 8007fd0:	f3bf 8f6f 	isb	sy
 8007fd4:	f3bf 8f4f 	dsb	sy
 8007fd8:	60fb      	str	r3, [r7, #12]
}
 8007fda:	bf00      	nop
 8007fdc:	bf00      	nop
 8007fde:	e7fd      	b.n	8007fdc <vTaskStartScheduler+0xb4>
}
 8007fe0:	bf00      	nop
 8007fe2:	3718      	adds	r7, #24
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	08018280 	.word	0x08018280
 8007fec:	08008679 	.word	0x08008679
 8007ff0:	24009a7c 	.word	0x24009a7c
 8007ff4:	24009584 	.word	0x24009584
 8007ff8:	24000040 	.word	0x24000040
 8007ffc:	24009a78 	.word	0x24009a78
 8008000:	24009a64 	.word	0x24009a64
 8008004:	24009a5c 	.word	0x24009a5c

08008008 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008008:	b480      	push	{r7}
 800800a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800800c:	4b04      	ldr	r3, [pc, #16]	@ (8008020 <vTaskSuspendAll+0x18>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3301      	adds	r3, #1
 8008012:	4a03      	ldr	r2, [pc, #12]	@ (8008020 <vTaskSuspendAll+0x18>)
 8008014:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008016:	bf00      	nop
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr
 8008020:	24009a80 	.word	0x24009a80

08008024 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800802a:	2300      	movs	r3, #0
 800802c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800802e:	2300      	movs	r3, #0
 8008030:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008032:	4b42      	ldr	r3, [pc, #264]	@ (800813c <xTaskResumeAll+0x118>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10b      	bne.n	8008052 <xTaskResumeAll+0x2e>
	__asm volatile
 800803a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800803e:	f383 8811 	msr	BASEPRI, r3
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	f3bf 8f4f 	dsb	sy
 800804a:	603b      	str	r3, [r7, #0]
}
 800804c:	bf00      	nop
 800804e:	bf00      	nop
 8008050:	e7fd      	b.n	800804e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008052:	f7fe fb31 	bl	80066b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008056:	4b39      	ldr	r3, [pc, #228]	@ (800813c <xTaskResumeAll+0x118>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	3b01      	subs	r3, #1
 800805c:	4a37      	ldr	r2, [pc, #220]	@ (800813c <xTaskResumeAll+0x118>)
 800805e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008060:	4b36      	ldr	r3, [pc, #216]	@ (800813c <xTaskResumeAll+0x118>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d162      	bne.n	800812e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008068:	4b35      	ldr	r3, [pc, #212]	@ (8008140 <xTaskResumeAll+0x11c>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d05e      	beq.n	800812e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008070:	e02f      	b.n	80080d2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008072:	4b34      	ldr	r3, [pc, #208]	@ (8008144 <xTaskResumeAll+0x120>)
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	3318      	adds	r3, #24
 800807e:	4618      	mov	r0, r3
 8008080:	f7fe f9c0 	bl	8006404 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	3304      	adds	r3, #4
 8008088:	4618      	mov	r0, r3
 800808a:	f7fe f9bb 	bl	8006404 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008092:	4b2d      	ldr	r3, [pc, #180]	@ (8008148 <xTaskResumeAll+0x124>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	429a      	cmp	r2, r3
 8008098:	d903      	bls.n	80080a2 <xTaskResumeAll+0x7e>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800809e:	4a2a      	ldr	r2, [pc, #168]	@ (8008148 <xTaskResumeAll+0x124>)
 80080a0:	6013      	str	r3, [r2, #0]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080a6:	4613      	mov	r3, r2
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4413      	add	r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4a27      	ldr	r2, [pc, #156]	@ (800814c <xTaskResumeAll+0x128>)
 80080b0:	441a      	add	r2, r3
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	3304      	adds	r3, #4
 80080b6:	4619      	mov	r1, r3
 80080b8:	4610      	mov	r0, r2
 80080ba:	f7fe f946 	bl	800634a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080c2:	4b23      	ldr	r3, [pc, #140]	@ (8008150 <xTaskResumeAll+0x12c>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d302      	bcc.n	80080d2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80080cc:	4b21      	ldr	r3, [pc, #132]	@ (8008154 <xTaskResumeAll+0x130>)
 80080ce:	2201      	movs	r2, #1
 80080d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080d2:	4b1c      	ldr	r3, [pc, #112]	@ (8008144 <xTaskResumeAll+0x120>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1cb      	bne.n	8008072 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d001      	beq.n	80080e4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80080e0:	f000 fb86 	bl	80087f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80080e4:	4b1c      	ldr	r3, [pc, #112]	@ (8008158 <xTaskResumeAll+0x134>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d010      	beq.n	8008112 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80080f0:	f000 f858 	bl	80081a4 <xTaskIncrementTick>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d002      	beq.n	8008100 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80080fa:	4b16      	ldr	r3, [pc, #88]	@ (8008154 <xTaskResumeAll+0x130>)
 80080fc:	2201      	movs	r2, #1
 80080fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	3b01      	subs	r3, #1
 8008104:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1f1      	bne.n	80080f0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800810c:	4b12      	ldr	r3, [pc, #72]	@ (8008158 <xTaskResumeAll+0x134>)
 800810e:	2200      	movs	r2, #0
 8008110:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008112:	4b10      	ldr	r3, [pc, #64]	@ (8008154 <xTaskResumeAll+0x130>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d009      	beq.n	800812e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800811a:	2301      	movs	r3, #1
 800811c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800811e:	4b0f      	ldr	r3, [pc, #60]	@ (800815c <xTaskResumeAll+0x138>)
 8008120:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008124:	601a      	str	r2, [r3, #0]
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800812e:	f7fe faf5 	bl	800671c <vPortExitCritical>

	return xAlreadyYielded;
 8008132:	68bb      	ldr	r3, [r7, #8]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	24009a80 	.word	0x24009a80
 8008140:	24009a58 	.word	0x24009a58
 8008144:	24009a18 	.word	0x24009a18
 8008148:	24009a60 	.word	0x24009a60
 800814c:	24009588 	.word	0x24009588
 8008150:	24009584 	.word	0x24009584
 8008154:	24009a6c 	.word	0x24009a6c
 8008158:	24009a68 	.word	0x24009a68
 800815c:	e000ed04 	.word	0xe000ed04

08008160 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008166:	4b05      	ldr	r3, [pc, #20]	@ (800817c <xTaskGetTickCount+0x1c>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800816c:	687b      	ldr	r3, [r7, #4]
}
 800816e:	4618      	mov	r0, r3
 8008170:	370c      	adds	r7, #12
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	24009a5c 	.word	0x24009a5c

08008180 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008186:	f7fe fb77 	bl	8006878 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800818a:	2300      	movs	r3, #0
 800818c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800818e:	4b04      	ldr	r3, [pc, #16]	@ (80081a0 <xTaskGetTickCountFromISR+0x20>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008194:	683b      	ldr	r3, [r7, #0]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	24009a5c 	.word	0x24009a5c

080081a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80081aa:	2300      	movs	r3, #0
 80081ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081ae:	4b4f      	ldr	r3, [pc, #316]	@ (80082ec <xTaskIncrementTick+0x148>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f040 8090 	bne.w	80082d8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80081b8:	4b4d      	ldr	r3, [pc, #308]	@ (80082f0 <xTaskIncrementTick+0x14c>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3301      	adds	r3, #1
 80081be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80081c0:	4a4b      	ldr	r2, [pc, #300]	@ (80082f0 <xTaskIncrementTick+0x14c>)
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d121      	bne.n	8008210 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80081cc:	4b49      	ldr	r3, [pc, #292]	@ (80082f4 <xTaskIncrementTick+0x150>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00b      	beq.n	80081ee <xTaskIncrementTick+0x4a>
	__asm volatile
 80081d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081da:	f383 8811 	msr	BASEPRI, r3
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f3bf 8f4f 	dsb	sy
 80081e6:	603b      	str	r3, [r7, #0]
}
 80081e8:	bf00      	nop
 80081ea:	bf00      	nop
 80081ec:	e7fd      	b.n	80081ea <xTaskIncrementTick+0x46>
 80081ee:	4b41      	ldr	r3, [pc, #260]	@ (80082f4 <xTaskIncrementTick+0x150>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	60fb      	str	r3, [r7, #12]
 80081f4:	4b40      	ldr	r3, [pc, #256]	@ (80082f8 <xTaskIncrementTick+0x154>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a3e      	ldr	r2, [pc, #248]	@ (80082f4 <xTaskIncrementTick+0x150>)
 80081fa:	6013      	str	r3, [r2, #0]
 80081fc:	4a3e      	ldr	r2, [pc, #248]	@ (80082f8 <xTaskIncrementTick+0x154>)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6013      	str	r3, [r2, #0]
 8008202:	4b3e      	ldr	r3, [pc, #248]	@ (80082fc <xTaskIncrementTick+0x158>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	3301      	adds	r3, #1
 8008208:	4a3c      	ldr	r2, [pc, #240]	@ (80082fc <xTaskIncrementTick+0x158>)
 800820a:	6013      	str	r3, [r2, #0]
 800820c:	f000 faf0 	bl	80087f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008210:	4b3b      	ldr	r3, [pc, #236]	@ (8008300 <xTaskIncrementTick+0x15c>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	429a      	cmp	r2, r3
 8008218:	d349      	bcc.n	80082ae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800821a:	4b36      	ldr	r3, [pc, #216]	@ (80082f4 <xTaskIncrementTick+0x150>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d104      	bne.n	800822e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008224:	4b36      	ldr	r3, [pc, #216]	@ (8008300 <xTaskIncrementTick+0x15c>)
 8008226:	f04f 32ff 	mov.w	r2, #4294967295
 800822a:	601a      	str	r2, [r3, #0]
					break;
 800822c:	e03f      	b.n	80082ae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800822e:	4b31      	ldr	r3, [pc, #196]	@ (80082f4 <xTaskIncrementTick+0x150>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	429a      	cmp	r2, r3
 8008244:	d203      	bcs.n	800824e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008246:	4a2e      	ldr	r2, [pc, #184]	@ (8008300 <xTaskIncrementTick+0x15c>)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800824c:	e02f      	b.n	80082ae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	3304      	adds	r3, #4
 8008252:	4618      	mov	r0, r3
 8008254:	f7fe f8d6 	bl	8006404 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800825c:	2b00      	cmp	r3, #0
 800825e:	d004      	beq.n	800826a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	3318      	adds	r3, #24
 8008264:	4618      	mov	r0, r3
 8008266:	f7fe f8cd 	bl	8006404 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800826e:	4b25      	ldr	r3, [pc, #148]	@ (8008304 <xTaskIncrementTick+0x160>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	429a      	cmp	r2, r3
 8008274:	d903      	bls.n	800827e <xTaskIncrementTick+0xda>
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800827a:	4a22      	ldr	r2, [pc, #136]	@ (8008304 <xTaskIncrementTick+0x160>)
 800827c:	6013      	str	r3, [r2, #0]
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008282:	4613      	mov	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4413      	add	r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4a1f      	ldr	r2, [pc, #124]	@ (8008308 <xTaskIncrementTick+0x164>)
 800828c:	441a      	add	r2, r3
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	3304      	adds	r3, #4
 8008292:	4619      	mov	r1, r3
 8008294:	4610      	mov	r0, r2
 8008296:	f7fe f858 	bl	800634a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800829e:	4b1b      	ldr	r3, [pc, #108]	@ (800830c <xTaskIncrementTick+0x168>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d3b8      	bcc.n	800821a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80082a8:	2301      	movs	r3, #1
 80082aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082ac:	e7b5      	b.n	800821a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082ae:	4b17      	ldr	r3, [pc, #92]	@ (800830c <xTaskIncrementTick+0x168>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082b4:	4914      	ldr	r1, [pc, #80]	@ (8008308 <xTaskIncrementTick+0x164>)
 80082b6:	4613      	mov	r3, r2
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	4413      	add	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	440b      	add	r3, r1
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d901      	bls.n	80082ca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80082c6:	2301      	movs	r3, #1
 80082c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80082ca:	4b11      	ldr	r3, [pc, #68]	@ (8008310 <xTaskIncrementTick+0x16c>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d007      	beq.n	80082e2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80082d2:	2301      	movs	r3, #1
 80082d4:	617b      	str	r3, [r7, #20]
 80082d6:	e004      	b.n	80082e2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80082d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008314 <xTaskIncrementTick+0x170>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	3301      	adds	r3, #1
 80082de:	4a0d      	ldr	r2, [pc, #52]	@ (8008314 <xTaskIncrementTick+0x170>)
 80082e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80082e2:	697b      	ldr	r3, [r7, #20]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3718      	adds	r7, #24
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	24009a80 	.word	0x24009a80
 80082f0:	24009a5c 	.word	0x24009a5c
 80082f4:	24009a10 	.word	0x24009a10
 80082f8:	24009a14 	.word	0x24009a14
 80082fc:	24009a70 	.word	0x24009a70
 8008300:	24009a78 	.word	0x24009a78
 8008304:	24009a60 	.word	0x24009a60
 8008308:	24009588 	.word	0x24009588
 800830c:	24009584 	.word	0x24009584
 8008310:	24009a6c 	.word	0x24009a6c
 8008314:	24009a68 	.word	0x24009a68

08008318 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800831e:	4b32      	ldr	r3, [pc, #200]	@ (80083e8 <vTaskSwitchContext+0xd0>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d003      	beq.n	800832e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008326:	4b31      	ldr	r3, [pc, #196]	@ (80083ec <vTaskSwitchContext+0xd4>)
 8008328:	2201      	movs	r2, #1
 800832a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800832c:	e058      	b.n	80083e0 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 800832e:	4b2f      	ldr	r3, [pc, #188]	@ (80083ec <vTaskSwitchContext+0xd4>)
 8008330:	2200      	movs	r2, #0
 8008332:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008334:	4b2e      	ldr	r3, [pc, #184]	@ (80083f0 <vTaskSwitchContext+0xd8>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	4b2d      	ldr	r3, [pc, #180]	@ (80083f0 <vTaskSwitchContext+0xd8>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008340:	429a      	cmp	r2, r3
 8008342:	d808      	bhi.n	8008356 <vTaskSwitchContext+0x3e>
 8008344:	4b2a      	ldr	r3, [pc, #168]	@ (80083f0 <vTaskSwitchContext+0xd8>)
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	4b29      	ldr	r3, [pc, #164]	@ (80083f0 <vTaskSwitchContext+0xd8>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	3334      	adds	r3, #52	@ 0x34
 800834e:	4619      	mov	r1, r3
 8008350:	4610      	mov	r0, r2
 8008352:	f7f8 f8db 	bl	800050c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008356:	4b27      	ldr	r3, [pc, #156]	@ (80083f4 <vTaskSwitchContext+0xdc>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	60fb      	str	r3, [r7, #12]
 800835c:	e011      	b.n	8008382 <vTaskSwitchContext+0x6a>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10b      	bne.n	800837c <vTaskSwitchContext+0x64>
	__asm volatile
 8008364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008368:	f383 8811 	msr	BASEPRI, r3
 800836c:	f3bf 8f6f 	isb	sy
 8008370:	f3bf 8f4f 	dsb	sy
 8008374:	607b      	str	r3, [r7, #4]
}
 8008376:	bf00      	nop
 8008378:	bf00      	nop
 800837a:	e7fd      	b.n	8008378 <vTaskSwitchContext+0x60>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	3b01      	subs	r3, #1
 8008380:	60fb      	str	r3, [r7, #12]
 8008382:	491d      	ldr	r1, [pc, #116]	@ (80083f8 <vTaskSwitchContext+0xe0>)
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	4613      	mov	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4413      	add	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	440b      	add	r3, r1
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d0e3      	beq.n	800835e <vTaskSwitchContext+0x46>
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	4613      	mov	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	4a15      	ldr	r2, [pc, #84]	@ (80083f8 <vTaskSwitchContext+0xe0>)
 80083a2:	4413      	add	r3, r2
 80083a4:	60bb      	str	r3, [r7, #8]
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	685a      	ldr	r2, [r3, #4]
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	605a      	str	r2, [r3, #4]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	685a      	ldr	r2, [r3, #4]
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	3308      	adds	r3, #8
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d104      	bne.n	80083c6 <vTaskSwitchContext+0xae>
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	685a      	ldr	r2, [r3, #4]
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	605a      	str	r2, [r3, #4]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	4a08      	ldr	r2, [pc, #32]	@ (80083f0 <vTaskSwitchContext+0xd8>)
 80083ce:	6013      	str	r3, [r2, #0]
 80083d0:	4a08      	ldr	r2, [pc, #32]	@ (80083f4 <vTaskSwitchContext+0xdc>)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80083d6:	4b06      	ldr	r3, [pc, #24]	@ (80083f0 <vTaskSwitchContext+0xd8>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	3354      	adds	r3, #84	@ 0x54
 80083dc:	4a07      	ldr	r2, [pc, #28]	@ (80083fc <vTaskSwitchContext+0xe4>)
 80083de:	6013      	str	r3, [r2, #0]
}
 80083e0:	bf00      	nop
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	24009a80 	.word	0x24009a80
 80083ec:	24009a6c 	.word	0x24009a6c
 80083f0:	24009584 	.word	0x24009584
 80083f4:	24009a60 	.word	0x24009a60
 80083f8:	24009588 	.word	0x24009588
 80083fc:	24000040 	.word	0x24000040

08008400 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10b      	bne.n	8008428 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008414:	f383 8811 	msr	BASEPRI, r3
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	60fb      	str	r3, [r7, #12]
}
 8008422:	bf00      	nop
 8008424:	bf00      	nop
 8008426:	e7fd      	b.n	8008424 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008428:	4b07      	ldr	r3, [pc, #28]	@ (8008448 <vTaskPlaceOnEventList+0x48>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	3318      	adds	r3, #24
 800842e:	4619      	mov	r1, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f7fd ffae 	bl	8006392 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008436:	2101      	movs	r1, #1
 8008438:	6838      	ldr	r0, [r7, #0]
 800843a:	f000 fb97 	bl	8008b6c <prvAddCurrentTaskToDelayedList>
}
 800843e:	bf00      	nop
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	24009584 	.word	0x24009584

0800844c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10b      	bne.n	8008476 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800845e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008462:	f383 8811 	msr	BASEPRI, r3
 8008466:	f3bf 8f6f 	isb	sy
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	617b      	str	r3, [r7, #20]
}
 8008470:	bf00      	nop
 8008472:	bf00      	nop
 8008474:	e7fd      	b.n	8008472 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008476:	4b0a      	ldr	r3, [pc, #40]	@ (80084a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	3318      	adds	r3, #24
 800847c:	4619      	mov	r1, r3
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f7fd ff63 	bl	800634a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d002      	beq.n	8008490 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800848a:	f04f 33ff 	mov.w	r3, #4294967295
 800848e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008490:	6879      	ldr	r1, [r7, #4]
 8008492:	68b8      	ldr	r0, [r7, #8]
 8008494:	f000 fb6a 	bl	8008b6c <prvAddCurrentTaskToDelayedList>
	}
 8008498:	bf00      	nop
 800849a:	3718      	adds	r7, #24
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	24009584 	.word	0x24009584

080084a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d10b      	bne.n	80084d2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80084ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	60fb      	str	r3, [r7, #12]
}
 80084cc:	bf00      	nop
 80084ce:	bf00      	nop
 80084d0:	e7fd      	b.n	80084ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	3318      	adds	r3, #24
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fd ff94 	bl	8006404 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084dc:	4b1d      	ldr	r3, [pc, #116]	@ (8008554 <xTaskRemoveFromEventList+0xb0>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d11d      	bne.n	8008520 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	3304      	adds	r3, #4
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fd ff8b 	bl	8006404 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084f2:	4b19      	ldr	r3, [pc, #100]	@ (8008558 <xTaskRemoveFromEventList+0xb4>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d903      	bls.n	8008502 <xTaskRemoveFromEventList+0x5e>
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084fe:	4a16      	ldr	r2, [pc, #88]	@ (8008558 <xTaskRemoveFromEventList+0xb4>)
 8008500:	6013      	str	r3, [r2, #0]
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008506:	4613      	mov	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	4413      	add	r3, r2
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	4a13      	ldr	r2, [pc, #76]	@ (800855c <xTaskRemoveFromEventList+0xb8>)
 8008510:	441a      	add	r2, r3
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	3304      	adds	r3, #4
 8008516:	4619      	mov	r1, r3
 8008518:	4610      	mov	r0, r2
 800851a:	f7fd ff16 	bl	800634a <vListInsertEnd>
 800851e:	e005      	b.n	800852c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	3318      	adds	r3, #24
 8008524:	4619      	mov	r1, r3
 8008526:	480e      	ldr	r0, [pc, #56]	@ (8008560 <xTaskRemoveFromEventList+0xbc>)
 8008528:	f7fd ff0f 	bl	800634a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008530:	4b0c      	ldr	r3, [pc, #48]	@ (8008564 <xTaskRemoveFromEventList+0xc0>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008536:	429a      	cmp	r2, r3
 8008538:	d905      	bls.n	8008546 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800853a:	2301      	movs	r3, #1
 800853c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800853e:	4b0a      	ldr	r3, [pc, #40]	@ (8008568 <xTaskRemoveFromEventList+0xc4>)
 8008540:	2201      	movs	r2, #1
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	e001      	b.n	800854a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008546:	2300      	movs	r3, #0
 8008548:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800854a:	697b      	ldr	r3, [r7, #20]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3718      	adds	r7, #24
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	24009a80 	.word	0x24009a80
 8008558:	24009a60 	.word	0x24009a60
 800855c:	24009588 	.word	0x24009588
 8008560:	24009a18 	.word	0x24009a18
 8008564:	24009584 	.word	0x24009584
 8008568:	24009a6c 	.word	0x24009a6c

0800856c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008574:	4b06      	ldr	r3, [pc, #24]	@ (8008590 <vTaskInternalSetTimeOutState+0x24>)
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800857c:	4b05      	ldr	r3, [pc, #20]	@ (8008594 <vTaskInternalSetTimeOutState+0x28>)
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	605a      	str	r2, [r3, #4]
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr
 8008590:	24009a70 	.word	0x24009a70
 8008594:	24009a5c 	.word	0x24009a5c

08008598 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b088      	sub	sp, #32
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10b      	bne.n	80085c0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80085a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ac:	f383 8811 	msr	BASEPRI, r3
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	613b      	str	r3, [r7, #16]
}
 80085ba:	bf00      	nop
 80085bc:	bf00      	nop
 80085be:	e7fd      	b.n	80085bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10b      	bne.n	80085de <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80085c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	60fb      	str	r3, [r7, #12]
}
 80085d8:	bf00      	nop
 80085da:	bf00      	nop
 80085dc:	e7fd      	b.n	80085da <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80085de:	f7fe f86b 	bl	80066b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80085e2:	4b1d      	ldr	r3, [pc, #116]	@ (8008658 <xTaskCheckForTimeOut+0xc0>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	69ba      	ldr	r2, [r7, #24]
 80085ee:	1ad3      	subs	r3, r2, r3
 80085f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085fa:	d102      	bne.n	8008602 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80085fc:	2300      	movs	r3, #0
 80085fe:	61fb      	str	r3, [r7, #28]
 8008600:	e023      	b.n	800864a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	4b15      	ldr	r3, [pc, #84]	@ (800865c <xTaskCheckForTimeOut+0xc4>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	429a      	cmp	r2, r3
 800860c:	d007      	beq.n	800861e <xTaskCheckForTimeOut+0x86>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	69ba      	ldr	r2, [r7, #24]
 8008614:	429a      	cmp	r2, r3
 8008616:	d302      	bcc.n	800861e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008618:	2301      	movs	r3, #1
 800861a:	61fb      	str	r3, [r7, #28]
 800861c:	e015      	b.n	800864a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	697a      	ldr	r2, [r7, #20]
 8008624:	429a      	cmp	r2, r3
 8008626:	d20b      	bcs.n	8008640 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	1ad2      	subs	r2, r2, r3
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f7ff ff99 	bl	800856c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800863a:	2300      	movs	r3, #0
 800863c:	61fb      	str	r3, [r7, #28]
 800863e:	e004      	b.n	800864a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	2200      	movs	r2, #0
 8008644:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008646:	2301      	movs	r3, #1
 8008648:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800864a:	f7fe f867 	bl	800671c <vPortExitCritical>

	return xReturn;
 800864e:	69fb      	ldr	r3, [r7, #28]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3720      	adds	r7, #32
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	24009a5c 	.word	0x24009a5c
 800865c:	24009a70 	.word	0x24009a70

08008660 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008660:	b480      	push	{r7}
 8008662:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008664:	4b03      	ldr	r3, [pc, #12]	@ (8008674 <vTaskMissedYield+0x14>)
 8008666:	2201      	movs	r2, #1
 8008668:	601a      	str	r2, [r3, #0]
}
 800866a:	bf00      	nop
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr
 8008674:	24009a6c 	.word	0x24009a6c

08008678 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008680:	f000 f852 	bl	8008728 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008684:	4b06      	ldr	r3, [pc, #24]	@ (80086a0 <prvIdleTask+0x28>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d9f9      	bls.n	8008680 <prvIdleTask+0x8>
			{
				taskYIELD();
 800868c:	4b05      	ldr	r3, [pc, #20]	@ (80086a4 <prvIdleTask+0x2c>)
 800868e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800869c:	e7f0      	b.n	8008680 <prvIdleTask+0x8>
 800869e:	bf00      	nop
 80086a0:	24009588 	.word	0x24009588
 80086a4:	e000ed04 	.word	0xe000ed04

080086a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086ae:	2300      	movs	r3, #0
 80086b0:	607b      	str	r3, [r7, #4]
 80086b2:	e00c      	b.n	80086ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	4613      	mov	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4a12      	ldr	r2, [pc, #72]	@ (8008708 <prvInitialiseTaskLists+0x60>)
 80086c0:	4413      	add	r3, r2
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fd fe14 	bl	80062f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	3301      	adds	r3, #1
 80086cc:	607b      	str	r3, [r7, #4]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2b37      	cmp	r3, #55	@ 0x37
 80086d2:	d9ef      	bls.n	80086b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80086d4:	480d      	ldr	r0, [pc, #52]	@ (800870c <prvInitialiseTaskLists+0x64>)
 80086d6:	f7fd fe0b 	bl	80062f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80086da:	480d      	ldr	r0, [pc, #52]	@ (8008710 <prvInitialiseTaskLists+0x68>)
 80086dc:	f7fd fe08 	bl	80062f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80086e0:	480c      	ldr	r0, [pc, #48]	@ (8008714 <prvInitialiseTaskLists+0x6c>)
 80086e2:	f7fd fe05 	bl	80062f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80086e6:	480c      	ldr	r0, [pc, #48]	@ (8008718 <prvInitialiseTaskLists+0x70>)
 80086e8:	f7fd fe02 	bl	80062f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80086ec:	480b      	ldr	r0, [pc, #44]	@ (800871c <prvInitialiseTaskLists+0x74>)
 80086ee:	f7fd fdff 	bl	80062f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80086f2:	4b0b      	ldr	r3, [pc, #44]	@ (8008720 <prvInitialiseTaskLists+0x78>)
 80086f4:	4a05      	ldr	r2, [pc, #20]	@ (800870c <prvInitialiseTaskLists+0x64>)
 80086f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80086f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008724 <prvInitialiseTaskLists+0x7c>)
 80086fa:	4a05      	ldr	r2, [pc, #20]	@ (8008710 <prvInitialiseTaskLists+0x68>)
 80086fc:	601a      	str	r2, [r3, #0]
}
 80086fe:	bf00      	nop
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	24009588 	.word	0x24009588
 800870c:	240099e8 	.word	0x240099e8
 8008710:	240099fc 	.word	0x240099fc
 8008714:	24009a18 	.word	0x24009a18
 8008718:	24009a2c 	.word	0x24009a2c
 800871c:	24009a44 	.word	0x24009a44
 8008720:	24009a10 	.word	0x24009a10
 8008724:	24009a14 	.word	0x24009a14

08008728 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800872e:	e019      	b.n	8008764 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008730:	f7fd ffc2 	bl	80066b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008734:	4b10      	ldr	r3, [pc, #64]	@ (8008778 <prvCheckTasksWaitingTermination+0x50>)
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	3304      	adds	r3, #4
 8008740:	4618      	mov	r0, r3
 8008742:	f7fd fe5f 	bl	8006404 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008746:	4b0d      	ldr	r3, [pc, #52]	@ (800877c <prvCheckTasksWaitingTermination+0x54>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	3b01      	subs	r3, #1
 800874c:	4a0b      	ldr	r2, [pc, #44]	@ (800877c <prvCheckTasksWaitingTermination+0x54>)
 800874e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008750:	4b0b      	ldr	r3, [pc, #44]	@ (8008780 <prvCheckTasksWaitingTermination+0x58>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	3b01      	subs	r3, #1
 8008756:	4a0a      	ldr	r2, [pc, #40]	@ (8008780 <prvCheckTasksWaitingTermination+0x58>)
 8008758:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800875a:	f7fd ffdf 	bl	800671c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f810 	bl	8008784 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008764:	4b06      	ldr	r3, [pc, #24]	@ (8008780 <prvCheckTasksWaitingTermination+0x58>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1e1      	bne.n	8008730 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800876c:	bf00      	nop
 800876e:	bf00      	nop
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	24009a2c 	.word	0x24009a2c
 800877c:	24009a58 	.word	0x24009a58
 8008780:	24009a40 	.word	0x24009a40

08008784 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	3354      	adds	r3, #84	@ 0x54
 8008790:	4618      	mov	r0, r3
 8008792:	f00e fc9d 	bl	80170d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800879c:	2b00      	cmp	r3, #0
 800879e:	d108      	bne.n	80087b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fd fc83 	bl	80060b0 <vPortFree>
				vPortFree( pxTCB );
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7fd fc80 	bl	80060b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80087b0:	e019      	b.n	80087e6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d103      	bne.n	80087c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f7fd fc77 	bl	80060b0 <vPortFree>
	}
 80087c2:	e010      	b.n	80087e6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d00b      	beq.n	80087e6 <prvDeleteTCB+0x62>
	__asm volatile
 80087ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d2:	f383 8811 	msr	BASEPRI, r3
 80087d6:	f3bf 8f6f 	isb	sy
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	60fb      	str	r3, [r7, #12]
}
 80087e0:	bf00      	nop
 80087e2:	bf00      	nop
 80087e4:	e7fd      	b.n	80087e2 <prvDeleteTCB+0x5e>
	}
 80087e6:	bf00      	nop
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
	...

080087f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008828 <prvResetNextTaskUnblockTime+0x38>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d104      	bne.n	800880a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008800:	4b0a      	ldr	r3, [pc, #40]	@ (800882c <prvResetNextTaskUnblockTime+0x3c>)
 8008802:	f04f 32ff 	mov.w	r2, #4294967295
 8008806:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008808:	e008      	b.n	800881c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800880a:	4b07      	ldr	r3, [pc, #28]	@ (8008828 <prvResetNextTaskUnblockTime+0x38>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	4a04      	ldr	r2, [pc, #16]	@ (800882c <prvResetNextTaskUnblockTime+0x3c>)
 800881a:	6013      	str	r3, [r2, #0]
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	24009a10 	.word	0x24009a10
 800882c:	24009a78 	.word	0x24009a78

08008830 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008836:	4b05      	ldr	r3, [pc, #20]	@ (800884c <xTaskGetCurrentTaskHandle+0x1c>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800883c:	687b      	ldr	r3, [r7, #4]
	}
 800883e:	4618      	mov	r0, r3
 8008840:	370c      	adds	r7, #12
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	24009584 	.word	0x24009584

08008850 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008856:	4b0b      	ldr	r3, [pc, #44]	@ (8008884 <xTaskGetSchedulerState+0x34>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d102      	bne.n	8008864 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800885e:	2301      	movs	r3, #1
 8008860:	607b      	str	r3, [r7, #4]
 8008862:	e008      	b.n	8008876 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008864:	4b08      	ldr	r3, [pc, #32]	@ (8008888 <xTaskGetSchedulerState+0x38>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d102      	bne.n	8008872 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800886c:	2302      	movs	r3, #2
 800886e:	607b      	str	r3, [r7, #4]
 8008870:	e001      	b.n	8008876 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008872:	2300      	movs	r3, #0
 8008874:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008876:	687b      	ldr	r3, [r7, #4]
	}
 8008878:	4618      	mov	r0, r3
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr
 8008884:	24009a64 	.word	0x24009a64
 8008888:	24009a80 	.word	0x24009a80

0800888c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008898:	2300      	movs	r3, #0
 800889a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d051      	beq.n	8008946 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088a6:	4b2a      	ldr	r3, [pc, #168]	@ (8008950 <xTaskPriorityInherit+0xc4>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d241      	bcs.n	8008934 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	db06      	blt.n	80088c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088b8:	4b25      	ldr	r3, [pc, #148]	@ (8008950 <xTaskPriorityInherit+0xc4>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088be:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	6959      	ldr	r1, [r3, #20]
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ce:	4613      	mov	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4a1f      	ldr	r2, [pc, #124]	@ (8008954 <xTaskPriorityInherit+0xc8>)
 80088d8:	4413      	add	r3, r2
 80088da:	4299      	cmp	r1, r3
 80088dc:	d122      	bne.n	8008924 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	3304      	adds	r3, #4
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fd fd8e 	bl	8006404 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80088e8:	4b19      	ldr	r3, [pc, #100]	@ (8008950 <xTaskPriorityInherit+0xc4>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088f6:	4b18      	ldr	r3, [pc, #96]	@ (8008958 <xTaskPriorityInherit+0xcc>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d903      	bls.n	8008906 <xTaskPriorityInherit+0x7a>
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008902:	4a15      	ldr	r2, [pc, #84]	@ (8008958 <xTaskPriorityInherit+0xcc>)
 8008904:	6013      	str	r3, [r2, #0]
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800890a:	4613      	mov	r3, r2
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	4413      	add	r3, r2
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	4a10      	ldr	r2, [pc, #64]	@ (8008954 <xTaskPriorityInherit+0xc8>)
 8008914:	441a      	add	r2, r3
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	3304      	adds	r3, #4
 800891a:	4619      	mov	r1, r3
 800891c:	4610      	mov	r0, r2
 800891e:	f7fd fd14 	bl	800634a <vListInsertEnd>
 8008922:	e004      	b.n	800892e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008924:	4b0a      	ldr	r3, [pc, #40]	@ (8008950 <xTaskPriorityInherit+0xc4>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800892e:	2301      	movs	r3, #1
 8008930:	60fb      	str	r3, [r7, #12]
 8008932:	e008      	b.n	8008946 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008938:	4b05      	ldr	r3, [pc, #20]	@ (8008950 <xTaskPriorityInherit+0xc4>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800893e:	429a      	cmp	r2, r3
 8008940:	d201      	bcs.n	8008946 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008942:	2301      	movs	r3, #1
 8008944:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008946:	68fb      	ldr	r3, [r7, #12]
	}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	24009584 	.word	0x24009584
 8008954:	24009588 	.word	0x24009588
 8008958:	24009a60 	.word	0x24009a60

0800895c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008968:	2300      	movs	r3, #0
 800896a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d058      	beq.n	8008a24 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008972:	4b2f      	ldr	r3, [pc, #188]	@ (8008a30 <xTaskPriorityDisinherit+0xd4>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	429a      	cmp	r2, r3
 800897a:	d00b      	beq.n	8008994 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800897c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008980:	f383 8811 	msr	BASEPRI, r3
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	60fb      	str	r3, [r7, #12]
}
 800898e:	bf00      	nop
 8008990:	bf00      	nop
 8008992:	e7fd      	b.n	8008990 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008998:	2b00      	cmp	r3, #0
 800899a:	d10b      	bne.n	80089b4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800899c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a0:	f383 8811 	msr	BASEPRI, r3
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	60bb      	str	r3, [r7, #8]
}
 80089ae:	bf00      	nop
 80089b0:	bf00      	nop
 80089b2:	e7fd      	b.n	80089b0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089b8:	1e5a      	subs	r2, r3, #1
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d02c      	beq.n	8008a24 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d128      	bne.n	8008a24 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	3304      	adds	r3, #4
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fd fd14 	bl	8006404 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089f4:	4b0f      	ldr	r3, [pc, #60]	@ (8008a34 <xTaskPriorityDisinherit+0xd8>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d903      	bls.n	8008a04 <xTaskPriorityDisinherit+0xa8>
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a00:	4a0c      	ldr	r2, [pc, #48]	@ (8008a34 <xTaskPriorityDisinherit+0xd8>)
 8008a02:	6013      	str	r3, [r2, #0]
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a08:	4613      	mov	r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4413      	add	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4a09      	ldr	r2, [pc, #36]	@ (8008a38 <xTaskPriorityDisinherit+0xdc>)
 8008a12:	441a      	add	r2, r3
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	3304      	adds	r3, #4
 8008a18:	4619      	mov	r1, r3
 8008a1a:	4610      	mov	r0, r2
 8008a1c:	f7fd fc95 	bl	800634a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a20:	2301      	movs	r3, #1
 8008a22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a24:	697b      	ldr	r3, [r7, #20]
	}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3718      	adds	r7, #24
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	24009584 	.word	0x24009584
 8008a34:	24009a60 	.word	0x24009a60
 8008a38:	24009588 	.word	0x24009588

08008a3c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b088      	sub	sp, #32
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d06c      	beq.n	8008b2e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10b      	bne.n	8008a74 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a60:	f383 8811 	msr	BASEPRI, r3
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	60fb      	str	r3, [r7, #12]
}
 8008a6e:	bf00      	nop
 8008a70:	bf00      	nop
 8008a72:	e7fd      	b.n	8008a70 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a78:	683a      	ldr	r2, [r7, #0]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d902      	bls.n	8008a84 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	61fb      	str	r3, [r7, #28]
 8008a82:	e002      	b.n	8008a8a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a88:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a8e:	69fa      	ldr	r2, [r7, #28]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d04c      	beq.n	8008b2e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d147      	bne.n	8008b2e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008a9e:	4b26      	ldr	r3, [pc, #152]	@ (8008b38 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	69ba      	ldr	r2, [r7, #24]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d10b      	bne.n	8008ac0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	60bb      	str	r3, [r7, #8]
}
 8008aba:	bf00      	nop
 8008abc:	bf00      	nop
 8008abe:	e7fd      	b.n	8008abc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	69fa      	ldr	r2, [r7, #28]
 8008aca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	db04      	blt.n	8008ade <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	6959      	ldr	r1, [r3, #20]
 8008ae2:	693a      	ldr	r2, [r7, #16]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4413      	add	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	4a13      	ldr	r2, [pc, #76]	@ (8008b3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008aee:	4413      	add	r3, r2
 8008af0:	4299      	cmp	r1, r3
 8008af2:	d11c      	bne.n	8008b2e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	3304      	adds	r3, #4
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7fd fc83 	bl	8006404 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b02:	4b0f      	ldr	r3, [pc, #60]	@ (8008b40 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d903      	bls.n	8008b12 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8008b40 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008b10:	6013      	str	r3, [r2, #0]
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b16:	4613      	mov	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4413      	add	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	4a07      	ldr	r2, [pc, #28]	@ (8008b3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008b20:	441a      	add	r2, r3
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	3304      	adds	r3, #4
 8008b26:	4619      	mov	r1, r3
 8008b28:	4610      	mov	r0, r2
 8008b2a:	f7fd fc0e 	bl	800634a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b2e:	bf00      	nop
 8008b30:	3720      	adds	r7, #32
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	24009584 	.word	0x24009584
 8008b3c:	24009588 	.word	0x24009588
 8008b40:	24009a60 	.word	0x24009a60

08008b44 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008b44:	b480      	push	{r7}
 8008b46:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008b48:	4b07      	ldr	r3, [pc, #28]	@ (8008b68 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d004      	beq.n	8008b5a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008b50:	4b05      	ldr	r3, [pc, #20]	@ (8008b68 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b56:	3201      	adds	r2, #1
 8008b58:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008b5a:	4b03      	ldr	r3, [pc, #12]	@ (8008b68 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
	}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr
 8008b68:	24009584 	.word	0x24009584

08008b6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b76:	4b21      	ldr	r3, [pc, #132]	@ (8008bfc <prvAddCurrentTaskToDelayedList+0x90>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b7c:	4b20      	ldr	r3, [pc, #128]	@ (8008c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	3304      	adds	r3, #4
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fd fc3e 	bl	8006404 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b8e:	d10a      	bne.n	8008ba6 <prvAddCurrentTaskToDelayedList+0x3a>
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d007      	beq.n	8008ba6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b96:	4b1a      	ldr	r3, [pc, #104]	@ (8008c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	4819      	ldr	r0, [pc, #100]	@ (8008c04 <prvAddCurrentTaskToDelayedList+0x98>)
 8008ba0:	f7fd fbd3 	bl	800634a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ba4:	e026      	b.n	8008bf4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4413      	add	r3, r2
 8008bac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008bae:	4b14      	ldr	r3, [pc, #80]	@ (8008c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d209      	bcs.n	8008bd2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bbe:	4b12      	ldr	r3, [pc, #72]	@ (8008c08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8008c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3304      	adds	r3, #4
 8008bc8:	4619      	mov	r1, r3
 8008bca:	4610      	mov	r0, r2
 8008bcc:	f7fd fbe1 	bl	8006392 <vListInsert>
}
 8008bd0:	e010      	b.n	8008bf4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8008c0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8008c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	3304      	adds	r3, #4
 8008bdc:	4619      	mov	r1, r3
 8008bde:	4610      	mov	r0, r2
 8008be0:	f7fd fbd7 	bl	8006392 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008be4:	4b0a      	ldr	r3, [pc, #40]	@ (8008c10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d202      	bcs.n	8008bf4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008bee:	4a08      	ldr	r2, [pc, #32]	@ (8008c10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	6013      	str	r3, [r2, #0]
}
 8008bf4:	bf00      	nop
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	24009a5c 	.word	0x24009a5c
 8008c00:	24009584 	.word	0x24009584
 8008c04:	24009a44 	.word	0x24009a44
 8008c08:	24009a14 	.word	0x24009a14
 8008c0c:	24009a10 	.word	0x24009a10
 8008c10:	24009a78 	.word	0x24009a78

08008c14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b08a      	sub	sp, #40	@ 0x28
 8008c18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008c1e:	f000 fb13 	bl	8009248 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008c22:	4b1d      	ldr	r3, [pc, #116]	@ (8008c98 <xTimerCreateTimerTask+0x84>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d021      	beq.n	8008c6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c32:	1d3a      	adds	r2, r7, #4
 8008c34:	f107 0108 	add.w	r1, r7, #8
 8008c38:	f107 030c 	add.w	r3, r7, #12
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7fd f94f 	bl	8005ee0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c42:	6879      	ldr	r1, [r7, #4]
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	9202      	str	r2, [sp, #8]
 8008c4a:	9301      	str	r3, [sp, #4]
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	9300      	str	r3, [sp, #0]
 8008c50:	2300      	movs	r3, #0
 8008c52:	460a      	mov	r2, r1
 8008c54:	4911      	ldr	r1, [pc, #68]	@ (8008c9c <xTimerCreateTimerTask+0x88>)
 8008c56:	4812      	ldr	r0, [pc, #72]	@ (8008ca0 <xTimerCreateTimerTask+0x8c>)
 8008c58:	f7fe ff72 	bl	8007b40 <xTaskCreateStatic>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	4a11      	ldr	r2, [pc, #68]	@ (8008ca4 <xTimerCreateTimerTask+0x90>)
 8008c60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c62:	4b10      	ldr	r3, [pc, #64]	@ (8008ca4 <xTimerCreateTimerTask+0x90>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d001      	beq.n	8008c6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10b      	bne.n	8008c8c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	613b      	str	r3, [r7, #16]
}
 8008c86:	bf00      	nop
 8008c88:	bf00      	nop
 8008c8a:	e7fd      	b.n	8008c88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008c8c:	697b      	ldr	r3, [r7, #20]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3718      	adds	r7, #24
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	24009ab4 	.word	0x24009ab4
 8008c9c:	08018288 	.word	0x08018288
 8008ca0:	08008de1 	.word	0x08008de1
 8008ca4:	24009ab8 	.word	0x24009ab8

08008ca8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b08a      	sub	sp, #40	@ 0x28
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
 8008cb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10b      	bne.n	8008cd8 <xTimerGenericCommand+0x30>
	__asm volatile
 8008cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	623b      	str	r3, [r7, #32]
}
 8008cd2:	bf00      	nop
 8008cd4:	bf00      	nop
 8008cd6:	e7fd      	b.n	8008cd4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008cd8:	4b19      	ldr	r3, [pc, #100]	@ (8008d40 <xTimerGenericCommand+0x98>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d02a      	beq.n	8008d36 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	2b05      	cmp	r3, #5
 8008cf0:	dc18      	bgt.n	8008d24 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008cf2:	f7ff fdad 	bl	8008850 <xTaskGetSchedulerState>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d109      	bne.n	8008d10 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008cfc:	4b10      	ldr	r3, [pc, #64]	@ (8008d40 <xTimerGenericCommand+0x98>)
 8008cfe:	6818      	ldr	r0, [r3, #0]
 8008d00:	f107 0110 	add.w	r1, r7, #16
 8008d04:	2300      	movs	r3, #0
 8008d06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d08:	f7fe f864 	bl	8006dd4 <xQueueGenericSend>
 8008d0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8008d0e:	e012      	b.n	8008d36 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008d10:	4b0b      	ldr	r3, [pc, #44]	@ (8008d40 <xTimerGenericCommand+0x98>)
 8008d12:	6818      	ldr	r0, [r3, #0]
 8008d14:	f107 0110 	add.w	r1, r7, #16
 8008d18:	2300      	movs	r3, #0
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f7fe f85a 	bl	8006dd4 <xQueueGenericSend>
 8008d20:	6278      	str	r0, [r7, #36]	@ 0x24
 8008d22:	e008      	b.n	8008d36 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008d24:	4b06      	ldr	r3, [pc, #24]	@ (8008d40 <xTimerGenericCommand+0x98>)
 8008d26:	6818      	ldr	r0, [r3, #0]
 8008d28:	f107 0110 	add.w	r1, r7, #16
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	f7fe f952 	bl	8006fd8 <xQueueGenericSendFromISR>
 8008d34:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3728      	adds	r7, #40	@ 0x28
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	24009ab4 	.word	0x24009ab4

08008d44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b088      	sub	sp, #32
 8008d48:	af02      	add	r7, sp, #8
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d4e:	4b23      	ldr	r3, [pc, #140]	@ (8008ddc <prvProcessExpiredTimer+0x98>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	3304      	adds	r3, #4
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7fd fb51 	bl	8006404 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d68:	f003 0304 	and.w	r3, r3, #4
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d023      	beq.n	8008db8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	699a      	ldr	r2, [r3, #24]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	18d1      	adds	r1, r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	683a      	ldr	r2, [r7, #0]
 8008d7c:	6978      	ldr	r0, [r7, #20]
 8008d7e:	f000 f8d5 	bl	8008f2c <prvInsertTimerInActiveList>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d020      	beq.n	8008dca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d88:	2300      	movs	r3, #0
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	2100      	movs	r1, #0
 8008d92:	6978      	ldr	r0, [r7, #20]
 8008d94:	f7ff ff88 	bl	8008ca8 <xTimerGenericCommand>
 8008d98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d114      	bne.n	8008dca <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	60fb      	str	r3, [r7, #12]
}
 8008db2:	bf00      	nop
 8008db4:	bf00      	nop
 8008db6:	e7fd      	b.n	8008db4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008dbe:	f023 0301 	bic.w	r3, r3, #1
 8008dc2:	b2da      	uxtb	r2, r3
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	6978      	ldr	r0, [r7, #20]
 8008dd0:	4798      	blx	r3
}
 8008dd2:	bf00      	nop
 8008dd4:	3718      	adds	r7, #24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	24009aac 	.word	0x24009aac

08008de0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008de8:	f107 0308 	add.w	r3, r7, #8
 8008dec:	4618      	mov	r0, r3
 8008dee:	f000 f859 	bl	8008ea4 <prvGetNextExpireTime>
 8008df2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	4619      	mov	r1, r3
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f000 f805 	bl	8008e08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008dfe:	f000 f8d7 	bl	8008fb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e02:	bf00      	nop
 8008e04:	e7f0      	b.n	8008de8 <prvTimerTask+0x8>
	...

08008e08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008e12:	f7ff f8f9 	bl	8008008 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e16:	f107 0308 	add.w	r3, r7, #8
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 f866 	bl	8008eec <prvSampleTimeNow>
 8008e20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d130      	bne.n	8008e8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d10a      	bne.n	8008e44 <prvProcessTimerOrBlockTask+0x3c>
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d806      	bhi.n	8008e44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008e36:	f7ff f8f5 	bl	8008024 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e3a:	68f9      	ldr	r1, [r7, #12]
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7ff ff81 	bl	8008d44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008e42:	e024      	b.n	8008e8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d008      	beq.n	8008e5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e4a:	4b13      	ldr	r3, [pc, #76]	@ (8008e98 <prvProcessTimerOrBlockTask+0x90>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d101      	bne.n	8008e58 <prvProcessTimerOrBlockTask+0x50>
 8008e54:	2301      	movs	r3, #1
 8008e56:	e000      	b.n	8008e5a <prvProcessTimerOrBlockTask+0x52>
 8008e58:	2300      	movs	r3, #0
 8008e5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8008e9c <prvProcessTimerOrBlockTask+0x94>)
 8008e5e:	6818      	ldr	r0, [r3, #0]
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	683a      	ldr	r2, [r7, #0]
 8008e68:	4619      	mov	r1, r3
 8008e6a:	f7fe fe35 	bl	8007ad8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e6e:	f7ff f8d9 	bl	8008024 <xTaskResumeAll>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d10a      	bne.n	8008e8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e78:	4b09      	ldr	r3, [pc, #36]	@ (8008ea0 <prvProcessTimerOrBlockTask+0x98>)
 8008e7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e7e:	601a      	str	r2, [r3, #0]
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	f3bf 8f6f 	isb	sy
}
 8008e88:	e001      	b.n	8008e8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e8a:	f7ff f8cb 	bl	8008024 <xTaskResumeAll>
}
 8008e8e:	bf00      	nop
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	24009ab0 	.word	0x24009ab0
 8008e9c:	24009ab4 	.word	0x24009ab4
 8008ea0:	e000ed04 	.word	0xe000ed04

08008ea4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008eac:	4b0e      	ldr	r3, [pc, #56]	@ (8008ee8 <prvGetNextExpireTime+0x44>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d101      	bne.n	8008eba <prvGetNextExpireTime+0x16>
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	e000      	b.n	8008ebc <prvGetNextExpireTime+0x18>
 8008eba:	2200      	movs	r2, #0
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d105      	bne.n	8008ed4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ec8:	4b07      	ldr	r3, [pc, #28]	@ (8008ee8 <prvGetNextExpireTime+0x44>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	60fb      	str	r3, [r7, #12]
 8008ed2:	e001      	b.n	8008ed8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	24009aac 	.word	0x24009aac

08008eec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008ef4:	f7ff f934 	bl	8008160 <xTaskGetTickCount>
 8008ef8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008efa:	4b0b      	ldr	r3, [pc, #44]	@ (8008f28 <prvSampleTimeNow+0x3c>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d205      	bcs.n	8008f10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008f04:	f000 f93a 	bl	800917c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	601a      	str	r2, [r3, #0]
 8008f0e:	e002      	b.n	8008f16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008f16:	4a04      	ldr	r2, [pc, #16]	@ (8008f28 <prvSampleTimeNow+0x3c>)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	24009abc 	.word	0x24009abc

08008f2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
 8008f38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f4a:	68ba      	ldr	r2, [r7, #8]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d812      	bhi.n	8008f78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	1ad2      	subs	r2, r2, r3
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	699b      	ldr	r3, [r3, #24]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d302      	bcc.n	8008f66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f60:	2301      	movs	r3, #1
 8008f62:	617b      	str	r3, [r7, #20]
 8008f64:	e01b      	b.n	8008f9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f66:	4b10      	ldr	r3, [pc, #64]	@ (8008fa8 <prvInsertTimerInActiveList+0x7c>)
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	3304      	adds	r3, #4
 8008f6e:	4619      	mov	r1, r3
 8008f70:	4610      	mov	r0, r2
 8008f72:	f7fd fa0e 	bl	8006392 <vListInsert>
 8008f76:	e012      	b.n	8008f9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d206      	bcs.n	8008f8e <prvInsertTimerInActiveList+0x62>
 8008f80:	68ba      	ldr	r2, [r7, #8]
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d302      	bcc.n	8008f8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	617b      	str	r3, [r7, #20]
 8008f8c:	e007      	b.n	8008f9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f8e:	4b07      	ldr	r3, [pc, #28]	@ (8008fac <prvInsertTimerInActiveList+0x80>)
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	3304      	adds	r3, #4
 8008f96:	4619      	mov	r1, r3
 8008f98:	4610      	mov	r0, r2
 8008f9a:	f7fd f9fa 	bl	8006392 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008f9e:	697b      	ldr	r3, [r7, #20]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3718      	adds	r7, #24
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	24009ab0 	.word	0x24009ab0
 8008fac:	24009aac 	.word	0x24009aac

08008fb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b08e      	sub	sp, #56	@ 0x38
 8008fb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008fb6:	e0ce      	b.n	8009156 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	da19      	bge.n	8008ff2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008fbe:	1d3b      	adds	r3, r7, #4
 8008fc0:	3304      	adds	r3, #4
 8008fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10b      	bne.n	8008fe2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fce:	f383 8811 	msr	BASEPRI, r3
 8008fd2:	f3bf 8f6f 	isb	sy
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	61fb      	str	r3, [r7, #28]
}
 8008fdc:	bf00      	nop
 8008fde:	bf00      	nop
 8008fe0:	e7fd      	b.n	8008fde <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fe8:	6850      	ldr	r0, [r2, #4]
 8008fea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fec:	6892      	ldr	r2, [r2, #8]
 8008fee:	4611      	mov	r1, r2
 8008ff0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f2c0 80ae 	blt.w	8009156 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009000:	695b      	ldr	r3, [r3, #20]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d004      	beq.n	8009010 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009008:	3304      	adds	r3, #4
 800900a:	4618      	mov	r0, r3
 800900c:	f7fd f9fa 	bl	8006404 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009010:	463b      	mov	r3, r7
 8009012:	4618      	mov	r0, r3
 8009014:	f7ff ff6a 	bl	8008eec <prvSampleTimeNow>
 8009018:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2b09      	cmp	r3, #9
 800901e:	f200 8097 	bhi.w	8009150 <prvProcessReceivedCommands+0x1a0>
 8009022:	a201      	add	r2, pc, #4	@ (adr r2, 8009028 <prvProcessReceivedCommands+0x78>)
 8009024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009028:	08009051 	.word	0x08009051
 800902c:	08009051 	.word	0x08009051
 8009030:	08009051 	.word	0x08009051
 8009034:	080090c7 	.word	0x080090c7
 8009038:	080090db 	.word	0x080090db
 800903c:	08009127 	.word	0x08009127
 8009040:	08009051 	.word	0x08009051
 8009044:	08009051 	.word	0x08009051
 8009048:	080090c7 	.word	0x080090c7
 800904c:	080090db 	.word	0x080090db
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009052:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009056:	f043 0301 	orr.w	r3, r3, #1
 800905a:	b2da      	uxtb	r2, r3
 800905c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800905e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	18d1      	adds	r1, r2, r3
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800906e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009070:	f7ff ff5c 	bl	8008f2c <prvInsertTimerInActiveList>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d06c      	beq.n	8009154 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800907a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009080:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009084:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009088:	f003 0304 	and.w	r3, r3, #4
 800908c:	2b00      	cmp	r3, #0
 800908e:	d061      	beq.n	8009154 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009090:	68ba      	ldr	r2, [r7, #8]
 8009092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	441a      	add	r2, r3
 8009098:	2300      	movs	r3, #0
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	2300      	movs	r3, #0
 800909e:	2100      	movs	r1, #0
 80090a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090a2:	f7ff fe01 	bl	8008ca8 <xTimerGenericCommand>
 80090a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80090a8:	6a3b      	ldr	r3, [r7, #32]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d152      	bne.n	8009154 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80090ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b2:	f383 8811 	msr	BASEPRI, r3
 80090b6:	f3bf 8f6f 	isb	sy
 80090ba:	f3bf 8f4f 	dsb	sy
 80090be:	61bb      	str	r3, [r7, #24]
}
 80090c0:	bf00      	nop
 80090c2:	bf00      	nop
 80090c4:	e7fd      	b.n	80090c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090cc:	f023 0301 	bic.w	r3, r3, #1
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80090d8:	e03d      	b.n	8009156 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80090da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090e0:	f043 0301 	orr.w	r3, r3, #1
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80090f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d10b      	bne.n	8009112 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80090fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090fe:	f383 8811 	msr	BASEPRI, r3
 8009102:	f3bf 8f6f 	isb	sy
 8009106:	f3bf 8f4f 	dsb	sy
 800910a:	617b      	str	r3, [r7, #20]
}
 800910c:	bf00      	nop
 800910e:	bf00      	nop
 8009110:	e7fd      	b.n	800910e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009114:	699a      	ldr	r2, [r3, #24]
 8009116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009118:	18d1      	adds	r1, r2, r3
 800911a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800911c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800911e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009120:	f7ff ff04 	bl	8008f2c <prvInsertTimerInActiveList>
					break;
 8009124:	e017      	b.n	8009156 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009128:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800912c:	f003 0302 	and.w	r3, r3, #2
 8009130:	2b00      	cmp	r3, #0
 8009132:	d103      	bne.n	800913c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009134:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009136:	f7fc ffbb 	bl	80060b0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800913a:	e00c      	b.n	8009156 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800913c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009142:	f023 0301 	bic.w	r3, r3, #1
 8009146:	b2da      	uxtb	r2, r3
 8009148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800914a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800914e:	e002      	b.n	8009156 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009150:	bf00      	nop
 8009152:	e000      	b.n	8009156 <prvProcessReceivedCommands+0x1a6>
					break;
 8009154:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009156:	4b08      	ldr	r3, [pc, #32]	@ (8009178 <prvProcessReceivedCommands+0x1c8>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	1d39      	adds	r1, r7, #4
 800915c:	2200      	movs	r2, #0
 800915e:	4618      	mov	r0, r3
 8009160:	f7fe f868 	bl	8007234 <xQueueReceive>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	f47f af26 	bne.w	8008fb8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800916c:	bf00      	nop
 800916e:	bf00      	nop
 8009170:	3730      	adds	r7, #48	@ 0x30
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	24009ab4 	.word	0x24009ab4

0800917c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b088      	sub	sp, #32
 8009180:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009182:	e049      	b.n	8009218 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009184:	4b2e      	ldr	r3, [pc, #184]	@ (8009240 <prvSwitchTimerLists+0xc4>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800918e:	4b2c      	ldr	r3, [pc, #176]	@ (8009240 <prvSwitchTimerLists+0xc4>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	3304      	adds	r3, #4
 800919c:	4618      	mov	r0, r3
 800919e:	f7fd f931 	bl	8006404 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6a1b      	ldr	r3, [r3, #32]
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091b0:	f003 0304 	and.w	r3, r3, #4
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d02f      	beq.n	8009218 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	693a      	ldr	r2, [r7, #16]
 80091be:	4413      	add	r3, r2
 80091c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d90e      	bls.n	80091e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091d6:	4b1a      	ldr	r3, [pc, #104]	@ (8009240 <prvSwitchTimerLists+0xc4>)
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	3304      	adds	r3, #4
 80091de:	4619      	mov	r1, r3
 80091e0:	4610      	mov	r0, r2
 80091e2:	f7fd f8d6 	bl	8006392 <vListInsert>
 80091e6:	e017      	b.n	8009218 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091e8:	2300      	movs	r3, #0
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	2300      	movs	r3, #0
 80091ee:	693a      	ldr	r2, [r7, #16]
 80091f0:	2100      	movs	r1, #0
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f7ff fd58 	bl	8008ca8 <xTimerGenericCommand>
 80091f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d10b      	bne.n	8009218 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	603b      	str	r3, [r7, #0]
}
 8009212:	bf00      	nop
 8009214:	bf00      	nop
 8009216:	e7fd      	b.n	8009214 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009218:	4b09      	ldr	r3, [pc, #36]	@ (8009240 <prvSwitchTimerLists+0xc4>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1b0      	bne.n	8009184 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009222:	4b07      	ldr	r3, [pc, #28]	@ (8009240 <prvSwitchTimerLists+0xc4>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009228:	4b06      	ldr	r3, [pc, #24]	@ (8009244 <prvSwitchTimerLists+0xc8>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a04      	ldr	r2, [pc, #16]	@ (8009240 <prvSwitchTimerLists+0xc4>)
 800922e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009230:	4a04      	ldr	r2, [pc, #16]	@ (8009244 <prvSwitchTimerLists+0xc8>)
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	6013      	str	r3, [r2, #0]
}
 8009236:	bf00      	nop
 8009238:	3718      	adds	r7, #24
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	24009aac 	.word	0x24009aac
 8009244:	24009ab0 	.word	0x24009ab0

08009248 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800924e:	f7fd fa33 	bl	80066b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009252:	4b15      	ldr	r3, [pc, #84]	@ (80092a8 <prvCheckForValidListAndQueue+0x60>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d120      	bne.n	800929c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800925a:	4814      	ldr	r0, [pc, #80]	@ (80092ac <prvCheckForValidListAndQueue+0x64>)
 800925c:	f7fd f848 	bl	80062f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009260:	4813      	ldr	r0, [pc, #76]	@ (80092b0 <prvCheckForValidListAndQueue+0x68>)
 8009262:	f7fd f845 	bl	80062f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009266:	4b13      	ldr	r3, [pc, #76]	@ (80092b4 <prvCheckForValidListAndQueue+0x6c>)
 8009268:	4a10      	ldr	r2, [pc, #64]	@ (80092ac <prvCheckForValidListAndQueue+0x64>)
 800926a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800926c:	4b12      	ldr	r3, [pc, #72]	@ (80092b8 <prvCheckForValidListAndQueue+0x70>)
 800926e:	4a10      	ldr	r2, [pc, #64]	@ (80092b0 <prvCheckForValidListAndQueue+0x68>)
 8009270:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009272:	2300      	movs	r3, #0
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	4b11      	ldr	r3, [pc, #68]	@ (80092bc <prvCheckForValidListAndQueue+0x74>)
 8009278:	4a11      	ldr	r2, [pc, #68]	@ (80092c0 <prvCheckForValidListAndQueue+0x78>)
 800927a:	2110      	movs	r1, #16
 800927c:	200a      	movs	r0, #10
 800927e:	f7fd fba7 	bl	80069d0 <xQueueGenericCreateStatic>
 8009282:	4603      	mov	r3, r0
 8009284:	4a08      	ldr	r2, [pc, #32]	@ (80092a8 <prvCheckForValidListAndQueue+0x60>)
 8009286:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009288:	4b07      	ldr	r3, [pc, #28]	@ (80092a8 <prvCheckForValidListAndQueue+0x60>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d005      	beq.n	800929c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009290:	4b05      	ldr	r3, [pc, #20]	@ (80092a8 <prvCheckForValidListAndQueue+0x60>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	490b      	ldr	r1, [pc, #44]	@ (80092c4 <prvCheckForValidListAndQueue+0x7c>)
 8009296:	4618      	mov	r0, r3
 8009298:	f7fe fbca 	bl	8007a30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800929c:	f7fd fa3e 	bl	800671c <vPortExitCritical>
}
 80092a0:	bf00      	nop
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	24009ab4 	.word	0x24009ab4
 80092ac:	24009a84 	.word	0x24009a84
 80092b0:	24009a98 	.word	0x24009a98
 80092b4:	24009aac 	.word	0x24009aac
 80092b8:	24009ab0 	.word	0x24009ab0
 80092bc:	24009b60 	.word	0x24009b60
 80092c0:	24009ac0 	.word	0x24009ac0
 80092c4:	08018290 	.word	0x08018290

080092c8 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	330c      	adds	r3, #12
 80092d8:	461a      	mov	r2, r3
 80092da:	6839      	ldr	r1, [r7, #0]
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f00c fde7 	bl	8015eb0 <tcpip_send_msg_wait_sem>
 80092e2:	4603      	mov	r3, r0
 80092e4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80092e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d103      	bne.n	80092f6 <netconn_apimsg+0x2e>
    return apimsg->err;
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80092f4:	e001      	b.n	80092fa <netconn_apimsg+0x32>
  }
  return err;
 80092f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
	...

08009304 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b08c      	sub	sp, #48	@ 0x30
 8009308:	af00      	add	r7, sp, #0
 800930a:	4603      	mov	r3, r0
 800930c:	603a      	str	r2, [r7, #0]
 800930e:	71fb      	strb	r3, [r7, #7]
 8009310:	460b      	mov	r3, r1
 8009312:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009314:	79fb      	ldrb	r3, [r7, #7]
 8009316:	6839      	ldr	r1, [r7, #0]
 8009318:	4618      	mov	r0, r3
 800931a:	f000 ff37 	bl	800a18c <netconn_alloc>
 800931e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8009320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009322:	2b00      	cmp	r3, #0
 8009324:	d054      	beq.n	80093d0 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8009326:	79bb      	ldrb	r3, [r7, #6]
 8009328:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800932a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800932c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800932e:	f107 0308 	add.w	r3, r7, #8
 8009332:	4619      	mov	r1, r3
 8009334:	4829      	ldr	r0, [pc, #164]	@ (80093dc <netconn_new_with_proto_and_callback+0xd8>)
 8009336:	f7ff ffc7 	bl	80092c8 <netconn_apimsg>
 800933a:	4603      	mov	r3, r0
 800933c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8009340:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8009344:	2b00      	cmp	r3, #0
 8009346:	d043      	beq.n	80093d0 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8009348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d005      	beq.n	800935c <netconn_new_with_proto_and_callback+0x58>
 8009350:	4b23      	ldr	r3, [pc, #140]	@ (80093e0 <netconn_new_with_proto_and_callback+0xdc>)
 8009352:	22a3      	movs	r2, #163	@ 0xa3
 8009354:	4923      	ldr	r1, [pc, #140]	@ (80093e4 <netconn_new_with_proto_and_callback+0xe0>)
 8009356:	4824      	ldr	r0, [pc, #144]	@ (80093e8 <netconn_new_with_proto_and_callback+0xe4>)
 8009358:	f00d fe00 	bl	8016f5c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800935c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800935e:	3310      	adds	r3, #16
 8009360:	4618      	mov	r0, r3
 8009362:	f006 fa79 	bl	800f858 <sys_mbox_valid>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d105      	bne.n	8009378 <netconn_new_with_proto_and_callback+0x74>
 800936c:	4b1c      	ldr	r3, [pc, #112]	@ (80093e0 <netconn_new_with_proto_and_callback+0xdc>)
 800936e:	22a4      	movs	r2, #164	@ 0xa4
 8009370:	491e      	ldr	r1, [pc, #120]	@ (80093ec <netconn_new_with_proto_and_callback+0xe8>)
 8009372:	481d      	ldr	r0, [pc, #116]	@ (80093e8 <netconn_new_with_proto_and_callback+0xe4>)
 8009374:	f00d fdf2 	bl	8016f5c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8009378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800937a:	3314      	adds	r3, #20
 800937c:	4618      	mov	r0, r3
 800937e:	f006 fa6b 	bl	800f858 <sys_mbox_valid>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d005      	beq.n	8009394 <netconn_new_with_proto_and_callback+0x90>
 8009388:	4b15      	ldr	r3, [pc, #84]	@ (80093e0 <netconn_new_with_proto_and_callback+0xdc>)
 800938a:	22a6      	movs	r2, #166	@ 0xa6
 800938c:	4918      	ldr	r1, [pc, #96]	@ (80093f0 <netconn_new_with_proto_and_callback+0xec>)
 800938e:	4816      	ldr	r0, [pc, #88]	@ (80093e8 <netconn_new_with_proto_and_callback+0xe4>)
 8009390:	f00d fde4 	bl	8016f5c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009396:	330c      	adds	r3, #12
 8009398:	4618      	mov	r0, r3
 800939a:	f006 faeb 	bl	800f974 <sys_sem_valid>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d105      	bne.n	80093b0 <netconn_new_with_proto_and_callback+0xac>
 80093a4:	4b0e      	ldr	r3, [pc, #56]	@ (80093e0 <netconn_new_with_proto_and_callback+0xdc>)
 80093a6:	22a9      	movs	r2, #169	@ 0xa9
 80093a8:	4912      	ldr	r1, [pc, #72]	@ (80093f4 <netconn_new_with_proto_and_callback+0xf0>)
 80093aa:	480f      	ldr	r0, [pc, #60]	@ (80093e8 <netconn_new_with_proto_and_callback+0xe4>)
 80093ac:	f00d fdd6 	bl	8016f5c <iprintf>
      sys_sem_free(&conn->op_completed);
 80093b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b2:	330c      	adds	r3, #12
 80093b4:	4618      	mov	r0, r3
 80093b6:	f006 fad0 	bl	800f95a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80093ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093bc:	3310      	adds	r3, #16
 80093be:	4618      	mov	r0, r3
 80093c0:	f006 f9d6 	bl	800f770 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80093c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093c6:	2007      	movs	r0, #7
 80093c8:	f004 ffba 	bl	800e340 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80093cc:	2300      	movs	r3, #0
 80093ce:	e000      	b.n	80093d2 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80093d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3730      	adds	r7, #48	@ 0x30
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	0800a161 	.word	0x0800a161
 80093e0:	08018298 	.word	0x08018298
 80093e4:	080182fc 	.word	0x080182fc
 80093e8:	08018320 	.word	0x08018320
 80093ec:	08018348 	.word	0x08018348
 80093f0:	08018360 	.word	0x08018360
 80093f4:	08018384 	.word	0x08018384

080093f8 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b08c      	sub	sp, #48	@ 0x30
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d101      	bne.n	800940a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	e014      	b.n	8009434 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800940e:	2329      	movs	r3, #41	@ 0x29
 8009410:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009412:	f107 030c 	add.w	r3, r7, #12
 8009416:	4619      	mov	r1, r3
 8009418:	4808      	ldr	r0, [pc, #32]	@ (800943c <netconn_prepare_delete+0x44>)
 800941a:	f7ff ff55 	bl	80092c8 <netconn_apimsg>
 800941e:	4603      	mov	r3, r0
 8009420:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009424:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009428:	2b00      	cmp	r3, #0
 800942a:	d002      	beq.n	8009432 <netconn_prepare_delete+0x3a>
    return err;
 800942c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009430:	e000      	b.n	8009434 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3730      	adds	r7, #48	@ 0x30
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	0800a6cd 	.word	0x0800a6cd

08009440 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d101      	bne.n	8009452 <netconn_delete+0x12>
    return ERR_OK;
 800944e:	2300      	movs	r3, #0
 8009450:	e00d      	b.n	800946e <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7ff ffd0 	bl	80093f8 <netconn_prepare_delete>
 8009458:	4603      	mov	r3, r0
 800945a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800945c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d102      	bne.n	800946a <netconn_delete+0x2a>
    netconn_free(conn);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 feff 	bl	800a268 <netconn_free>
  }
  return err;
 800946a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
	...

08009478 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b08e      	sub	sp, #56	@ 0x38
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	4613      	mov	r3, r2
 8009484:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d109      	bne.n	80094a0 <netconn_bind+0x28>
 800948c:	4b11      	ldr	r3, [pc, #68]	@ (80094d4 <netconn_bind+0x5c>)
 800948e:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8009492:	4911      	ldr	r1, [pc, #68]	@ (80094d8 <netconn_bind+0x60>)
 8009494:	4811      	ldr	r0, [pc, #68]	@ (80094dc <netconn_bind+0x64>)
 8009496:	f00d fd61 	bl	8016f5c <iprintf>
 800949a:	f06f 030f 	mvn.w	r3, #15
 800949e:	e015      	b.n	80094cc <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d101      	bne.n	80094aa <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80094a6:	4b0e      	ldr	r3, [pc, #56]	@ (80094e0 <netconn_bind+0x68>)
 80094a8:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80094b2:	88fb      	ldrh	r3, [r7, #6]
 80094b4:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80094b6:	f107 0314 	add.w	r3, r7, #20
 80094ba:	4619      	mov	r1, r3
 80094bc:	4809      	ldr	r0, [pc, #36]	@ (80094e4 <netconn_bind+0x6c>)
 80094be:	f7ff ff03 	bl	80092c8 <netconn_apimsg>
 80094c2:	4603      	mov	r3, r0
 80094c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80094c8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3738      	adds	r7, #56	@ 0x38
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	08018298 	.word	0x08018298
 80094d8:	08018400 	.word	0x08018400
 80094dc:	08018320 	.word	0x08018320
 80094e0:	0801b97c 	.word	0x0801b97c
 80094e4:	0800a895 	.word	0x0800a895

080094e8 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b08e      	sub	sp, #56	@ 0x38
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	60b9      	str	r1, [r7, #8]
 80094f2:	4613      	mov	r3, r2
 80094f4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d109      	bne.n	8009510 <netconn_connect+0x28>
 80094fc:	4b11      	ldr	r3, [pc, #68]	@ (8009544 <netconn_connect+0x5c>)
 80094fe:	f44f 72bf 	mov.w	r2, #382	@ 0x17e
 8009502:	4911      	ldr	r1, [pc, #68]	@ (8009548 <netconn_connect+0x60>)
 8009504:	4811      	ldr	r0, [pc, #68]	@ (800954c <netconn_connect+0x64>)
 8009506:	f00d fd29 	bl	8016f5c <iprintf>
 800950a:	f06f 030f 	mvn.w	r3, #15
 800950e:	e015      	b.n	800953c <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d101      	bne.n	800951a <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8009516:	4b0e      	ldr	r3, [pc, #56]	@ (8009550 <netconn_connect+0x68>)
 8009518:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009522:	88fb      	ldrh	r3, [r7, #6]
 8009524:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8009526:	f107 0314 	add.w	r3, r7, #20
 800952a:	4619      	mov	r1, r3
 800952c:	4809      	ldr	r0, [pc, #36]	@ (8009554 <netconn_connect+0x6c>)
 800952e:	f7ff fecb 	bl	80092c8 <netconn_apimsg>
 8009532:	4603      	mov	r3, r0
 8009534:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8009538:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800953c:	4618      	mov	r0, r3
 800953e:	3738      	adds	r7, #56	@ 0x38
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	08018298 	.word	0x08018298
 8009548:	0801843c 	.word	0x0801843c
 800954c:	08018320 	.word	0x08018320
 8009550:	0801b97c 	.word	0x0801b97c
 8009554:	0800aa29 	.word	0x0800aa29

08009558 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b088      	sub	sp, #32
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	4613      	mov	r3, r2
 8009564:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8009566:	2300      	movs	r3, #0
 8009568:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d109      	bne.n	8009584 <netconn_recv_data+0x2c>
 8009570:	4b58      	ldr	r3, [pc, #352]	@ (80096d4 <netconn_recv_data+0x17c>)
 8009572:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8009576:	4958      	ldr	r1, [pc, #352]	@ (80096d8 <netconn_recv_data+0x180>)
 8009578:	4858      	ldr	r0, [pc, #352]	@ (80096dc <netconn_recv_data+0x184>)
 800957a:	f00d fcef 	bl	8016f5c <iprintf>
 800957e:	f06f 030f 	mvn.w	r3, #15
 8009582:	e0a2      	b.n	80096ca <netconn_recv_data+0x172>
  *new_buf = NULL;
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2200      	movs	r2, #0
 8009588:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d109      	bne.n	80095a4 <netconn_recv_data+0x4c>
 8009590:	4b50      	ldr	r3, [pc, #320]	@ (80096d4 <netconn_recv_data+0x17c>)
 8009592:	f240 224a 	movw	r2, #586	@ 0x24a
 8009596:	4952      	ldr	r1, [pc, #328]	@ (80096e0 <netconn_recv_data+0x188>)
 8009598:	4850      	ldr	r0, [pc, #320]	@ (80096dc <netconn_recv_data+0x184>)
 800959a:	f00d fcdf 	bl	8016f5c <iprintf>
 800959e:	f06f 030f 	mvn.w	r3, #15
 80095a2:	e092      	b.n	80096ca <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	3310      	adds	r3, #16
 80095a8:	4618      	mov	r0, r3
 80095aa:	f006 f955 	bl	800f858 <sys_mbox_valid>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10e      	bne.n	80095d2 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f000 fa23 	bl	8009a00 <netconn_err>
 80095ba:	4603      	mov	r3, r0
 80095bc:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80095be:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d002      	beq.n	80095cc <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80095c6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80095ca:	e07e      	b.n	80096ca <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 80095cc:	f06f 030a 	mvn.w	r3, #10
 80095d0:	e07b      	b.n	80096ca <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	7f1b      	ldrb	r3, [r3, #28]
 80095d6:	f003 0302 	and.w	r3, r3, #2
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10f      	bne.n	80095fe <netconn_recv_data+0xa6>
 80095de:	79fb      	ldrb	r3, [r7, #7]
 80095e0:	f003 0304 	and.w	r3, r3, #4
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d10a      	bne.n	80095fe <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	7f1b      	ldrb	r3, [r3, #28]
 80095ec:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d104      	bne.n	80095fe <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d023      	beq.n	8009646 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	3310      	adds	r3, #16
 8009602:	f107 0218 	add.w	r2, r7, #24
 8009606:	4611      	mov	r1, r2
 8009608:	4618      	mov	r0, r3
 800960a:	f006 f90e 	bl	800f82a <sys_arch_mbox_tryfetch>
 800960e:	4603      	mov	r3, r0
 8009610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009614:	d11f      	bne.n	8009656 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f000 f9f2 	bl	8009a00 <netconn_err>
 800961c:	4603      	mov	r3, r0
 800961e:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8009620:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d002      	beq.n	800962e <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8009628:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800962c:	e04d      	b.n	80096ca <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	7f1b      	ldrb	r3, [r3, #28]
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b00      	cmp	r3, #0
 8009638:	d002      	beq.n	8009640 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800963a:	f06f 030a 	mvn.w	r3, #10
 800963e:	e044      	b.n	80096ca <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8009640:	f06f 0306 	mvn.w	r3, #6
 8009644:	e041      	b.n	80096ca <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	3310      	adds	r3, #16
 800964a:	f107 0118 	add.w	r1, r7, #24
 800964e:	2200      	movs	r2, #0
 8009650:	4618      	mov	r0, r3
 8009652:	f006 f8b9 	bl	800f7c8 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800965e:	2b10      	cmp	r3, #16
 8009660:	d117      	bne.n	8009692 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	f107 0217 	add.w	r2, r7, #23
 8009668:	4611      	mov	r1, r2
 800966a:	4618      	mov	r0, r3
 800966c:	f000 fa1a 	bl	8009aa4 <lwip_netconn_is_err_msg>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d009      	beq.n	800968a <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8009676:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800967a:	f113 0f0f 	cmn.w	r3, #15
 800967e:	d101      	bne.n	8009684 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8009680:	2300      	movs	r3, #0
 8009682:	e022      	b.n	80096ca <netconn_recv_data+0x172>
      }
      return err;
 8009684:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009688:	e01f      	b.n	80096ca <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	891b      	ldrh	r3, [r3, #8]
 800968e:	83fb      	strh	r3, [r7, #30]
 8009690:	e00d      	b.n	80096ae <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d106      	bne.n	80096a6 <netconn_recv_data+0x14e>
 8009698:	4b0e      	ldr	r3, [pc, #56]	@ (80096d4 <netconn_recv_data+0x17c>)
 800969a:	f240 2291 	movw	r2, #657	@ 0x291
 800969e:	4911      	ldr	r1, [pc, #68]	@ (80096e4 <netconn_recv_data+0x18c>)
 80096a0:	480e      	ldr	r0, [pc, #56]	@ (80096dc <netconn_recv_data+0x184>)
 80096a2:	f00d fc5b 	bl	8016f5c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	891b      	ldrh	r3, [r3, #8]
 80096ac:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d005      	beq.n	80096c2 <netconn_recv_data+0x16a>
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ba:	8bfa      	ldrh	r2, [r7, #30]
 80096bc:	2101      	movs	r1, #1
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80096c2:	69ba      	ldr	r2, [r7, #24]
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3720      	adds	r7, #32
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	08018298 	.word	0x08018298
 80096d8:	080184e0 	.word	0x080184e0
 80096dc:	08018320 	.word	0x08018320
 80096e0:	08018500 	.word	0x08018500
 80096e4:	0801851c 	.word	0x0801851c

080096e8 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d005      	beq.n	8009706 <netconn_tcp_recvd_msg+0x1e>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009702:	2b10      	cmp	r3, #16
 8009704:	d009      	beq.n	800971a <netconn_tcp_recvd_msg+0x32>
 8009706:	4b0c      	ldr	r3, [pc, #48]	@ (8009738 <netconn_tcp_recvd_msg+0x50>)
 8009708:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800970c:	490b      	ldr	r1, [pc, #44]	@ (800973c <netconn_tcp_recvd_msg+0x54>)
 800970e:	480c      	ldr	r0, [pc, #48]	@ (8009740 <netconn_tcp_recvd_msg+0x58>)
 8009710:	f00d fc24 	bl	8016f5c <iprintf>
 8009714:	f06f 030f 	mvn.w	r3, #15
 8009718:	e00a      	b.n	8009730 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8009726:	6879      	ldr	r1, [r7, #4]
 8009728:	4806      	ldr	r0, [pc, #24]	@ (8009744 <netconn_tcp_recvd_msg+0x5c>)
 800972a:	f7ff fdcd 	bl	80092c8 <netconn_apimsg>
 800972e:	4603      	mov	r3, r0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3710      	adds	r7, #16
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	08018298 	.word	0x08018298
 800973c:	08018528 	.word	0x08018528
 8009740:	08018320 	.word	0x08018320
 8009744:	0800ac3f 	.word	0x0800ac3f

08009748 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b090      	sub	sp, #64	@ 0x40
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	4613      	mov	r3, r2
 8009754:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	3310      	adds	r3, #16
 800975a:	4618      	mov	r0, r3
 800975c:	f006 f87c 	bl	800f858 <sys_mbox_valid>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d102      	bne.n	800976c <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8009766:	f06f 030a 	mvn.w	r3, #10
 800976a:	e06d      	b.n	8009848 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	7f1b      	ldrb	r3, [r3, #28]
 8009770:	b25b      	sxtb	r3, r3
 8009772:	2b00      	cmp	r3, #0
 8009774:	da07      	bge.n	8009786 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	7f1b      	ldrb	r3, [r3, #28]
 800977a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800977e:	b2da      	uxtb	r2, r3
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8009784:	e039      	b.n	80097fa <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009786:	79fb      	ldrb	r3, [r7, #7]
 8009788:	461a      	mov	r2, r3
 800978a:	68b9      	ldr	r1, [r7, #8]
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f7ff fee3 	bl	8009558 <netconn_recv_data>
 8009792:	4603      	mov	r3, r0
 8009794:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 8009798:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800979c:	2b00      	cmp	r3, #0
 800979e:	d002      	beq.n	80097a6 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80097a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80097a4:	e050      	b.n	8009848 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80097ac:	79fb      	ldrb	r3, [r7, #7]
 80097ae:	f003 0308 	and.w	r3, r3, #8
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10e      	bne.n	80097d4 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80097b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d002      	beq.n	80097c2 <netconn_recv_data_tcp+0x7a>
 80097bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097be:	891b      	ldrh	r3, [r3, #8]
 80097c0:	e000      	b.n	80097c4 <netconn_recv_data_tcp+0x7c>
 80097c2:	2301      	movs	r3, #1
 80097c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80097c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80097c8:	f107 0214 	add.w	r2, r7, #20
 80097cc:	4619      	mov	r1, r3
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f7ff ff8a 	bl	80096e8 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80097d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d134      	bne.n	8009844 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80097da:	79fb      	ldrb	r3, [r7, #7]
 80097dc:	f003 0310 	and.w	r3, r3, #16
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d009      	beq.n	80097f8 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	7f1b      	ldrb	r3, [r3, #28]
 80097e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80097ec:	b2da      	uxtb	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 80097f2:	f06f 0306 	mvn.w	r3, #6
 80097f6:	e027      	b.n	8009848 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 80097f8:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d005      	beq.n	800980e <netconn_recv_data_tcp+0xc6>
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009806:	2200      	movs	r2, #0
 8009808:	2101      	movs	r1, #1
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10f      	bne.n	8009836 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f000 f8f2 	bl	8009a00 <netconn_err>
 800981c:	4603      	mov	r3, r0
 800981e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 8009822:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009826:	2b00      	cmp	r3, #0
 8009828:	d002      	beq.n	8009830 <netconn_recv_data_tcp+0xe8>
          return err;
 800982a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800982e:	e00b      	b.n	8009848 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8009830:	f06f 030d 	mvn.w	r3, #13
 8009834:	e008      	b.n	8009848 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8009836:	2101      	movs	r1, #1
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f000 f8b1 	bl	80099a0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800983e:	f06f 030e 	mvn.w	r3, #14
 8009842:	e001      	b.n	8009848 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8009844:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8009848:	4618      	mov	r0, r3
 800984a:	3740      	adds	r7, #64	@ 0x40
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b086      	sub	sp, #24
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800985a:	2300      	movs	r3, #0
 800985c:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d109      	bne.n	8009878 <netconn_recv+0x28>
 8009864:	4b32      	ldr	r3, [pc, #200]	@ (8009930 <netconn_recv+0xe0>)
 8009866:	f240 3263 	movw	r2, #867	@ 0x363
 800986a:	4932      	ldr	r1, [pc, #200]	@ (8009934 <netconn_recv+0xe4>)
 800986c:	4832      	ldr	r0, [pc, #200]	@ (8009938 <netconn_recv+0xe8>)
 800986e:	f00d fb75 	bl	8016f5c <iprintf>
 8009872:	f06f 030f 	mvn.w	r3, #15
 8009876:	e056      	b.n	8009926 <netconn_recv+0xd6>
  *new_buf = NULL;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	2200      	movs	r2, #0
 800987c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d109      	bne.n	8009898 <netconn_recv+0x48>
 8009884:	4b2a      	ldr	r3, [pc, #168]	@ (8009930 <netconn_recv+0xe0>)
 8009886:	f240 3265 	movw	r2, #869	@ 0x365
 800988a:	492c      	ldr	r1, [pc, #176]	@ (800993c <netconn_recv+0xec>)
 800988c:	482a      	ldr	r0, [pc, #168]	@ (8009938 <netconn_recv+0xe8>)
 800988e:	f00d fb65 	bl	8016f5c <iprintf>
 8009892:	f06f 030f 	mvn.w	r3, #15
 8009896:	e046      	b.n	8009926 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80098a0:	2b10      	cmp	r3, #16
 80098a2:	d13a      	bne.n	800991a <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80098a4:	2300      	movs	r3, #0
 80098a6:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80098a8:	2006      	movs	r0, #6
 80098aa:	f004 fcd3 	bl	800e254 <memp_malloc>
 80098ae:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d102      	bne.n	80098bc <netconn_recv+0x6c>
      return ERR_MEM;
 80098b6:	f04f 33ff 	mov.w	r3, #4294967295
 80098ba:	e034      	b.n	8009926 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80098bc:	f107 030c 	add.w	r3, r7, #12
 80098c0:	2200      	movs	r2, #0
 80098c2:	4619      	mov	r1, r3
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f7ff ff3f 	bl	8009748 <netconn_recv_data_tcp>
 80098ca:	4603      	mov	r3, r0
 80098cc:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80098ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d006      	beq.n	80098e4 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80098d6:	6979      	ldr	r1, [r7, #20]
 80098d8:	2006      	movs	r0, #6
 80098da:	f004 fd31 	bl	800e340 <memp_free>
      return err;
 80098de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80098e2:	e020      	b.n	8009926 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d106      	bne.n	80098f8 <netconn_recv+0xa8>
 80098ea:	4b11      	ldr	r3, [pc, #68]	@ (8009930 <netconn_recv+0xe0>)
 80098ec:	f240 3279 	movw	r2, #889	@ 0x379
 80098f0:	4913      	ldr	r1, [pc, #76]	@ (8009940 <netconn_recv+0xf0>)
 80098f2:	4811      	ldr	r0, [pc, #68]	@ (8009938 <netconn_recv+0xe8>)
 80098f4:	f00d fb32 	bl	8016f5c <iprintf>

    buf->p = p;
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	2200      	movs	r2, #0
 8009908:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	2200      	movs	r2, #0
 800990e:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8009916:	2300      	movs	r3, #0
 8009918:	e005      	b.n	8009926 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800991a:	2200      	movs	r2, #0
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f7ff fe1a 	bl	8009558 <netconn_recv_data>
 8009924:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8009926:	4618      	mov	r0, r3
 8009928:	3718      	adds	r7, #24
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	08018298 	.word	0x08018298
 8009934:	080184e0 	.word	0x080184e0
 8009938:	08018320 	.word	0x08018320
 800993c:	08018500 	.word	0x08018500
 8009940:	08018578 	.word	0x08018578

08009944 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b08c      	sub	sp, #48	@ 0x30
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d109      	bne.n	8009968 <netconn_send+0x24>
 8009954:	4b0e      	ldr	r3, [pc, #56]	@ (8009990 <netconn_send+0x4c>)
 8009956:	f240 32b2 	movw	r2, #946	@ 0x3b2
 800995a:	490e      	ldr	r1, [pc, #56]	@ (8009994 <netconn_send+0x50>)
 800995c:	480e      	ldr	r0, [pc, #56]	@ (8009998 <netconn_send+0x54>)
 800995e:	f00d fafd 	bl	8016f5c <iprintf>
 8009962:	f06f 030f 	mvn.w	r3, #15
 8009966:	e00e      	b.n	8009986 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8009970:	f107 030c 	add.w	r3, r7, #12
 8009974:	4619      	mov	r1, r3
 8009976:	4809      	ldr	r0, [pc, #36]	@ (800999c <netconn_send+0x58>)
 8009978:	f7ff fca6 	bl	80092c8 <netconn_apimsg>
 800997c:	4603      	mov	r3, r0
 800997e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009982:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8009986:	4618      	mov	r0, r3
 8009988:	3730      	adds	r7, #48	@ 0x30
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	08018298 	.word	0x08018298
 8009994:	08018584 	.word	0x08018584
 8009998:	08018320 	.word	0x08018320
 800999c:	0800aba5 	.word	0x0800aba5

080099a0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b08c      	sub	sp, #48	@ 0x30
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	460b      	mov	r3, r1
 80099aa:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d109      	bne.n	80099c6 <netconn_close_shutdown+0x26>
 80099b2:	4b0f      	ldr	r3, [pc, #60]	@ (80099f0 <netconn_close_shutdown+0x50>)
 80099b4:	f240 4247 	movw	r2, #1095	@ 0x447
 80099b8:	490e      	ldr	r1, [pc, #56]	@ (80099f4 <netconn_close_shutdown+0x54>)
 80099ba:	480f      	ldr	r0, [pc, #60]	@ (80099f8 <netconn_close_shutdown+0x58>)
 80099bc:	f00d face 	bl	8016f5c <iprintf>
 80099c0:	f06f 030f 	mvn.w	r3, #15
 80099c4:	e010      	b.n	80099e8 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80099ca:	78fb      	ldrb	r3, [r7, #3]
 80099cc:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80099ce:	2329      	movs	r3, #41	@ 0x29
 80099d0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80099d2:	f107 030c 	add.w	r3, r7, #12
 80099d6:	4619      	mov	r1, r3
 80099d8:	4808      	ldr	r0, [pc, #32]	@ (80099fc <netconn_close_shutdown+0x5c>)
 80099da:	f7ff fc75 	bl	80092c8 <netconn_apimsg>
 80099de:	4603      	mov	r3, r0
 80099e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80099e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3730      	adds	r7, #48	@ 0x30
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	08018298 	.word	0x08018298
 80099f4:	08018604 	.word	0x08018604
 80099f8:	08018320 	.word	0x08018320
 80099fc:	0800b041 	.word	0x0800b041

08009a00 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d101      	bne.n	8009a12 <netconn_err+0x12>
    return ERR_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	e00d      	b.n	8009a2e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009a12:	f006 f82b 	bl	800fa6c <sys_arch_protect>
 8009a16:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	7a1b      	ldrb	r3, [r3, #8]
 8009a1c:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009a24:	68f8      	ldr	r0, [r7, #12]
 8009a26:	f006 f82f 	bl	800fa88 <sys_arch_unprotect>
  return err;
 8009a2a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
	...

08009a38 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	4603      	mov	r3, r0
 8009a40:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a46:	f113 0f0d 	cmn.w	r3, #13
 8009a4a:	d009      	beq.n	8009a60 <lwip_netconn_err_to_msg+0x28>
 8009a4c:	f113 0f0d 	cmn.w	r3, #13
 8009a50:	dc0c      	bgt.n	8009a6c <lwip_netconn_err_to_msg+0x34>
 8009a52:	f113 0f0f 	cmn.w	r3, #15
 8009a56:	d007      	beq.n	8009a68 <lwip_netconn_err_to_msg+0x30>
 8009a58:	f113 0f0e 	cmn.w	r3, #14
 8009a5c:	d002      	beq.n	8009a64 <lwip_netconn_err_to_msg+0x2c>
 8009a5e:	e005      	b.n	8009a6c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009a60:	4b0a      	ldr	r3, [pc, #40]	@ (8009a8c <lwip_netconn_err_to_msg+0x54>)
 8009a62:	e00e      	b.n	8009a82 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009a64:	4b0a      	ldr	r3, [pc, #40]	@ (8009a90 <lwip_netconn_err_to_msg+0x58>)
 8009a66:	e00c      	b.n	8009a82 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009a68:	4b0a      	ldr	r3, [pc, #40]	@ (8009a94 <lwip_netconn_err_to_msg+0x5c>)
 8009a6a:	e00a      	b.n	8009a82 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d005      	beq.n	8009a80 <lwip_netconn_err_to_msg+0x48>
 8009a74:	4b08      	ldr	r3, [pc, #32]	@ (8009a98 <lwip_netconn_err_to_msg+0x60>)
 8009a76:	227d      	movs	r2, #125	@ 0x7d
 8009a78:	4908      	ldr	r1, [pc, #32]	@ (8009a9c <lwip_netconn_err_to_msg+0x64>)
 8009a7a:	4809      	ldr	r0, [pc, #36]	@ (8009aa0 <lwip_netconn_err_to_msg+0x68>)
 8009a7c:	f00d fa6e 	bl	8016f5c <iprintf>
      return NULL;
 8009a80:	2300      	movs	r3, #0
  }
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	0801b968 	.word	0x0801b968
 8009a90:	0801b969 	.word	0x0801b969
 8009a94:	0801b96a 	.word	0x0801b96a
 8009a98:	08018620 	.word	0x08018620
 8009a9c:	08018684 	.word	0x08018684
 8009aa0:	08018694 	.word	0x08018694

08009aa4 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d105      	bne.n	8009ac0 <lwip_netconn_is_err_msg+0x1c>
 8009ab4:	4b12      	ldr	r3, [pc, #72]	@ (8009b00 <lwip_netconn_is_err_msg+0x5c>)
 8009ab6:	2285      	movs	r2, #133	@ 0x85
 8009ab8:	4912      	ldr	r1, [pc, #72]	@ (8009b04 <lwip_netconn_is_err_msg+0x60>)
 8009aba:	4813      	ldr	r0, [pc, #76]	@ (8009b08 <lwip_netconn_is_err_msg+0x64>)
 8009abc:	f00d fa4e 	bl	8016f5c <iprintf>

  if (msg == &netconn_aborted) {
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4a12      	ldr	r2, [pc, #72]	@ (8009b0c <lwip_netconn_is_err_msg+0x68>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d104      	bne.n	8009ad2 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	22f3      	movs	r2, #243	@ 0xf3
 8009acc:	701a      	strb	r2, [r3, #0]
    return 1;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e012      	b.n	8009af8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4a0e      	ldr	r2, [pc, #56]	@ (8009b10 <lwip_netconn_is_err_msg+0x6c>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d104      	bne.n	8009ae4 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	22f2      	movs	r2, #242	@ 0xf2
 8009ade:	701a      	strb	r2, [r3, #0]
    return 1;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e009      	b.n	8009af8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a0b      	ldr	r2, [pc, #44]	@ (8009b14 <lwip_netconn_is_err_msg+0x70>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d104      	bne.n	8009af6 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	22f1      	movs	r2, #241	@ 0xf1
 8009af0:	701a      	strb	r2, [r3, #0]
    return 1;
 8009af2:	2301      	movs	r3, #1
 8009af4:	e000      	b.n	8009af8 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3708      	adds	r7, #8
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	08018620 	.word	0x08018620
 8009b04:	080186bc 	.word	0x080186bc
 8009b08:	08018694 	.word	0x08018694
 8009b0c:	0801b968 	.word	0x0801b968
 8009b10:	0801b969 	.word	0x0801b969
 8009b14:	0801b96a 	.word	0x0801b96a

08009b18 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b088      	sub	sp, #32
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	60b9      	str	r1, [r7, #8]
 8009b22:	607a      	str	r2, [r7, #4]
 8009b24:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d105      	bne.n	8009b38 <recv_udp+0x20>
 8009b2c:	4b34      	ldr	r3, [pc, #208]	@ (8009c00 <recv_udp+0xe8>)
 8009b2e:	22e5      	movs	r2, #229	@ 0xe5
 8009b30:	4934      	ldr	r1, [pc, #208]	@ (8009c04 <recv_udp+0xec>)
 8009b32:	4835      	ldr	r0, [pc, #212]	@ (8009c08 <recv_udp+0xf0>)
 8009b34:	f00d fa12 	bl	8016f5c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d105      	bne.n	8009b4a <recv_udp+0x32>
 8009b3e:	4b30      	ldr	r3, [pc, #192]	@ (8009c00 <recv_udp+0xe8>)
 8009b40:	22e6      	movs	r2, #230	@ 0xe6
 8009b42:	4932      	ldr	r1, [pc, #200]	@ (8009c0c <recv_udp+0xf4>)
 8009b44:	4830      	ldr	r0, [pc, #192]	@ (8009c08 <recv_udp+0xf0>)
 8009b46:	f00d fa09 	bl	8016f5c <iprintf>
  conn = (struct netconn *)arg;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d103      	bne.n	8009b5c <recv_udp+0x44>
    pbuf_free(p);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f005 fab5 	bl	800f0c4 <pbuf_free>
    return;
 8009b5a:	e04d      	b.n	8009bf8 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d005      	beq.n	8009b72 <recv_udp+0x5a>
 8009b66:	4b26      	ldr	r3, [pc, #152]	@ (8009c00 <recv_udp+0xe8>)
 8009b68:	22ee      	movs	r2, #238	@ 0xee
 8009b6a:	4929      	ldr	r1, [pc, #164]	@ (8009c10 <recv_udp+0xf8>)
 8009b6c:	4826      	ldr	r0, [pc, #152]	@ (8009c08 <recv_udp+0xf0>)
 8009b6e:	f00d f9f5 	bl	8016f5c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	3310      	adds	r3, #16
 8009b76:	4618      	mov	r0, r3
 8009b78:	f005 fe6e 	bl	800f858 <sys_mbox_valid>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d103      	bne.n	8009b8a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f005 fa9e 	bl	800f0c4 <pbuf_free>
    return;
 8009b88:	e036      	b.n	8009bf8 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009b8a:	2006      	movs	r0, #6
 8009b8c:	f004 fb62 	bl	800e254 <memp_malloc>
 8009b90:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d103      	bne.n	8009ba0 <recv_udp+0x88>
    pbuf_free(p);
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f005 fa93 	bl	800f0c4 <pbuf_free>
    return;
 8009b9e:	e02b      	b.n	8009bf8 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d002      	beq.n	8009bb8 <recv_udp+0xa0>
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	e000      	b.n	8009bba <recv_udp+0xa2>
 8009bb8:	2300      	movs	r3, #0
 8009bba:	69ba      	ldr	r2, [r7, #24]
 8009bbc:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009bc2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	891b      	ldrh	r3, [r3, #8]
 8009bc8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	3310      	adds	r3, #16
 8009bce:	69b9      	ldr	r1, [r7, #24]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f005 fddf 	bl	800f794 <sys_mbox_trypost>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d003      	beq.n	8009be4 <recv_udp+0xcc>
    netbuf_delete(buf);
 8009bdc:	69b8      	ldr	r0, [r7, #24]
 8009bde:	f004 fbd9 	bl	800e394 <netbuf_delete>
    return;
 8009be2:	e009      	b.n	8009bf8 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d005      	beq.n	8009bf8 <recv_udp+0xe0>
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bf0:	8afa      	ldrh	r2, [r7, #22]
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	69f8      	ldr	r0, [r7, #28]
 8009bf6:	4798      	blx	r3
  }
}
 8009bf8:	3720      	adds	r7, #32
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	08018620 	.word	0x08018620
 8009c04:	080186c8 	.word	0x080186c8
 8009c08:	08018694 	.word	0x08018694
 8009c0c:	080186ec 	.word	0x080186ec
 8009c10:	0801870c 	.word	0x0801870c

08009c14 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b088      	sub	sp, #32
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	607a      	str	r2, [r7, #4]
 8009c20:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d106      	bne.n	8009c36 <recv_tcp+0x22>
 8009c28:	4b36      	ldr	r3, [pc, #216]	@ (8009d04 <recv_tcp+0xf0>)
 8009c2a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009c2e:	4936      	ldr	r1, [pc, #216]	@ (8009d08 <recv_tcp+0xf4>)
 8009c30:	4836      	ldr	r0, [pc, #216]	@ (8009d0c <recv_tcp+0xf8>)
 8009c32:	f00d f993 	bl	8016f5c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d106      	bne.n	8009c4a <recv_tcp+0x36>
 8009c3c:	4b31      	ldr	r3, [pc, #196]	@ (8009d04 <recv_tcp+0xf0>)
 8009c3e:	f240 122d 	movw	r2, #301	@ 0x12d
 8009c42:	4933      	ldr	r1, [pc, #204]	@ (8009d10 <recv_tcp+0xfc>)
 8009c44:	4831      	ldr	r0, [pc, #196]	@ (8009d0c <recv_tcp+0xf8>)
 8009c46:	f00d f989 	bl	8016f5c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009c4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d006      	beq.n	8009c60 <recv_tcp+0x4c>
 8009c52:	4b2c      	ldr	r3, [pc, #176]	@ (8009d04 <recv_tcp+0xf0>)
 8009c54:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8009c58:	492e      	ldr	r1, [pc, #184]	@ (8009d14 <recv_tcp+0x100>)
 8009c5a:	482c      	ldr	r0, [pc, #176]	@ (8009d0c <recv_tcp+0xf8>)
 8009c5c:	f00d f97e 	bl	8016f5c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d102      	bne.n	8009c70 <recv_tcp+0x5c>
    return ERR_VAL;
 8009c6a:	f06f 0305 	mvn.w	r3, #5
 8009c6e:	e045      	b.n	8009cfc <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	68ba      	ldr	r2, [r7, #8]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d006      	beq.n	8009c88 <recv_tcp+0x74>
 8009c7a:	4b22      	ldr	r3, [pc, #136]	@ (8009d04 <recv_tcp+0xf0>)
 8009c7c:	f240 1235 	movw	r2, #309	@ 0x135
 8009c80:	4925      	ldr	r1, [pc, #148]	@ (8009d18 <recv_tcp+0x104>)
 8009c82:	4822      	ldr	r0, [pc, #136]	@ (8009d0c <recv_tcp+0xf8>)
 8009c84:	f00d f96a 	bl	8016f5c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	3310      	adds	r3, #16
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f005 fde3 	bl	800f858 <sys_mbox_valid>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d10d      	bne.n	8009cb4 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d008      	beq.n	8009cb0 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	891b      	ldrh	r3, [r3, #8]
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	68b8      	ldr	r0, [r7, #8]
 8009ca6:	f006 fb53 	bl	8010350 <tcp_recved>
      pbuf_free(p);
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f005 fa0a 	bl	800f0c4 <pbuf_free>
    }
    return ERR_OK;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	e023      	b.n	8009cfc <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d005      	beq.n	8009cc6 <recv_tcp+0xb2>
    msg = p;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	891b      	ldrh	r3, [r3, #8]
 8009cc2:	83fb      	strh	r3, [r7, #30]
 8009cc4:	e003      	b.n	8009cce <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8009cc6:	4b15      	ldr	r3, [pc, #84]	@ (8009d1c <recv_tcp+0x108>)
 8009cc8:	61bb      	str	r3, [r7, #24]
    len = 0;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	3310      	adds	r3, #16
 8009cd2:	69b9      	ldr	r1, [r7, #24]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f005 fd5d 	bl	800f794 <sys_mbox_trypost>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d002      	beq.n	8009ce6 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce4:	e00a      	b.n	8009cfc <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d005      	beq.n	8009cfa <recv_tcp+0xe6>
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cf2:	8bfa      	ldrh	r2, [r7, #30]
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	6978      	ldr	r0, [r7, #20]
 8009cf8:	4798      	blx	r3
  }

  return ERR_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3720      	adds	r7, #32
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	08018620 	.word	0x08018620
 8009d08:	0801872c 	.word	0x0801872c
 8009d0c:	08018694 	.word	0x08018694
 8009d10:	08018750 	.word	0x08018750
 8009d14:	08018770 	.word	0x08018770
 8009d18:	08018788 	.word	0x08018788
 8009d1c:	0801b96a 	.word	0x0801b96a

08009d20 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d106      	bne.n	8009d42 <poll_tcp+0x22>
 8009d34:	4b29      	ldr	r3, [pc, #164]	@ (8009ddc <poll_tcp+0xbc>)
 8009d36:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8009d3a:	4929      	ldr	r1, [pc, #164]	@ (8009de0 <poll_tcp+0xc0>)
 8009d3c:	4829      	ldr	r0, [pc, #164]	@ (8009de4 <poll_tcp+0xc4>)
 8009d3e:	f00d f90d 	bl	8016f5c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	785b      	ldrb	r3, [r3, #1]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d104      	bne.n	8009d54 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009d4a:	2101      	movs	r1, #1
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f000 ffab 	bl	800aca8 <lwip_netconn_do_writemore>
 8009d52:	e016      	b.n	8009d82 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	785b      	ldrb	r3, [r3, #1]
 8009d58:	2b04      	cmp	r3, #4
 8009d5a:	d112      	bne.n	8009d82 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6a1b      	ldr	r3, [r3, #32]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00a      	beq.n	8009d7a <poll_tcp+0x5a>
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	6a1b      	ldr	r3, [r3, #32]
 8009d68:	7a5b      	ldrb	r3, [r3, #9]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d005      	beq.n	8009d7a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6a1b      	ldr	r3, [r3, #32]
 8009d72:	7a5a      	ldrb	r2, [r3, #9]
 8009d74:	3a01      	subs	r2, #1
 8009d76:	b2d2      	uxtb	r2, r2
 8009d78:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009d7a:	2101      	movs	r1, #1
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f000 fb3b 	bl	800a3f8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	7f1b      	ldrb	r3, [r3, #28]
 8009d86:	f003 0310 	and.w	r3, r3, #16
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d021      	beq.n	8009dd2 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d01d      	beq.n	8009dd2 <poll_tcp+0xb2>
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009d9e:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8009da2:	d316      	bcc.n	8009dd2 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009dac:	2b04      	cmp	r3, #4
 8009dae:	d810      	bhi.n	8009dd2 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	7f1b      	ldrb	r3, [r3, #28]
 8009db4:	f023 0310 	bic.w	r3, r3, #16
 8009db8:	b2da      	uxtb	r2, r3
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d005      	beq.n	8009dd2 <poll_tcp+0xb2>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dca:	2200      	movs	r2, #0
 8009dcc:	2102      	movs	r1, #2
 8009dce:	68f8      	ldr	r0, [r7, #12]
 8009dd0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	08018620 	.word	0x08018620
 8009de0:	080187a8 	.word	0x080187a8
 8009de4:	08018694 	.word	0x08018694

08009de8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b086      	sub	sp, #24
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	4613      	mov	r3, r2
 8009df4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d106      	bne.n	8009e0e <sent_tcp+0x26>
 8009e00:	4b20      	ldr	r3, [pc, #128]	@ (8009e84 <sent_tcp+0x9c>)
 8009e02:	f240 1293 	movw	r2, #403	@ 0x193
 8009e06:	4920      	ldr	r1, [pc, #128]	@ (8009e88 <sent_tcp+0xa0>)
 8009e08:	4820      	ldr	r0, [pc, #128]	@ (8009e8c <sent_tcp+0xa4>)
 8009e0a:	f00d f8a7 	bl	8016f5c <iprintf>

  if (conn) {
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d032      	beq.n	8009e7a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	785b      	ldrb	r3, [r3, #1]
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d104      	bne.n	8009e26 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009e1c:	2101      	movs	r1, #1
 8009e1e:	6978      	ldr	r0, [r7, #20]
 8009e20:	f000 ff42 	bl	800aca8 <lwip_netconn_do_writemore>
 8009e24:	e007      	b.n	8009e36 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	785b      	ldrb	r3, [r3, #1]
 8009e2a:	2b04      	cmp	r3, #4
 8009e2c:	d103      	bne.n	8009e36 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009e2e:	2101      	movs	r1, #1
 8009e30:	6978      	ldr	r0, [r7, #20]
 8009e32:	f000 fae1 	bl	800a3f8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d01d      	beq.n	8009e7a <sent_tcp+0x92>
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009e46:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8009e4a:	d316      	bcc.n	8009e7a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009e54:	2b04      	cmp	r3, #4
 8009e56:	d810      	bhi.n	8009e7a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	7f1b      	ldrb	r3, [r3, #28]
 8009e5c:	f023 0310 	bic.w	r3, r3, #16
 8009e60:	b2da      	uxtb	r2, r3
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d005      	beq.n	8009e7a <sent_tcp+0x92>
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e72:	88fa      	ldrh	r2, [r7, #6]
 8009e74:	2102      	movs	r1, #2
 8009e76:	6978      	ldr	r0, [r7, #20]
 8009e78:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009e7a:	2300      	movs	r3, #0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3718      	adds	r7, #24
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	08018620 	.word	0x08018620
 8009e88:	080187a8 	.word	0x080187a8
 8009e8c:	08018694 	.word	0x08018694

08009e90 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b088      	sub	sp, #32
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	460b      	mov	r3, r1
 8009e9a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d106      	bne.n	8009eb4 <err_tcp+0x24>
 8009ea6:	4b5f      	ldr	r3, [pc, #380]	@ (800a024 <err_tcp+0x194>)
 8009ea8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8009eac:	495e      	ldr	r1, [pc, #376]	@ (800a028 <err_tcp+0x198>)
 8009eae:	485f      	ldr	r0, [pc, #380]	@ (800a02c <err_tcp+0x19c>)
 8009eb0:	f00d f854 	bl	8016f5c <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009eb4:	f005 fdda 	bl	800fa6c <sys_arch_protect>
 8009eb8:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009ec0:	69fb      	ldr	r3, [r7, #28]
 8009ec2:	78fa      	ldrb	r2, [r7, #3]
 8009ec4:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8009ec6:	69fb      	ldr	r3, [r7, #28]
 8009ec8:	7f1b      	ldrb	r3, [r3, #28]
 8009eca:	f043 0301 	orr.w	r3, r3, #1
 8009ece:	b2da      	uxtb	r2, r3
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	785b      	ldrb	r3, [r3, #1]
 8009ed8:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8009eda:	69fb      	ldr	r3, [r7, #28]
 8009edc:	2200      	movs	r2, #0
 8009ede:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009ee0:	69b8      	ldr	r0, [r7, #24]
 8009ee2:	f005 fdd1 	bl	800fa88 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d005      	beq.n	8009efa <err_tcp+0x6a>
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	2104      	movs	r1, #4
 8009ef6:	69f8      	ldr	r0, [r7, #28]
 8009ef8:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d005      	beq.n	8009f0e <err_tcp+0x7e>
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f06:	2200      	movs	r2, #0
 8009f08:	2100      	movs	r1, #0
 8009f0a:	69f8      	ldr	r0, [r7, #28]
 8009f0c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009f0e:	69fb      	ldr	r3, [r7, #28]
 8009f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d005      	beq.n	8009f22 <err_tcp+0x92>
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	2102      	movs	r1, #2
 8009f1e:	69f8      	ldr	r0, [r7, #28]
 8009f20:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8009f22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7ff fd86 	bl	8009a38 <lwip_netconn_err_to_msg>
 8009f2c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009f2e:	69fb      	ldr	r3, [r7, #28]
 8009f30:	3310      	adds	r3, #16
 8009f32:	4618      	mov	r0, r3
 8009f34:	f005 fc90 	bl	800f858 <sys_mbox_valid>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d005      	beq.n	8009f4a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	3310      	adds	r3, #16
 8009f42:	6939      	ldr	r1, [r7, #16]
 8009f44:	4618      	mov	r0, r3
 8009f46:	f005 fc25 	bl	800f794 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	3314      	adds	r3, #20
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f005 fc82 	bl	800f858 <sys_mbox_valid>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d005      	beq.n	8009f66 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	3314      	adds	r3, #20
 8009f5e:	6939      	ldr	r1, [r7, #16]
 8009f60:	4618      	mov	r0, r3
 8009f62:	f005 fc17 	bl	800f794 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8009f66:	7dfb      	ldrb	r3, [r7, #23]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d005      	beq.n	8009f78 <err_tcp+0xe8>
 8009f6c:	7dfb      	ldrb	r3, [r7, #23]
 8009f6e:	2b04      	cmp	r3, #4
 8009f70:	d002      	beq.n	8009f78 <err_tcp+0xe8>
 8009f72:	7dfb      	ldrb	r3, [r7, #23]
 8009f74:	2b03      	cmp	r3, #3
 8009f76:	d143      	bne.n	800a000 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8009f78:	69fb      	ldr	r3, [r7, #28]
 8009f7a:	7f1b      	ldrb	r3, [r3, #28]
 8009f7c:	f003 0304 	and.w	r3, r3, #4
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	bf14      	ite	ne
 8009f84:	2301      	movne	r3, #1
 8009f86:	2300      	moveq	r3, #0
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	7f1b      	ldrb	r3, [r3, #28]
 8009f90:	f023 0304 	bic.w	r3, r3, #4
 8009f94:	b2da      	uxtb	r2, r3
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d13b      	bne.n	800a018 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	6a1b      	ldr	r3, [r3, #32]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d106      	bne.n	8009fb6 <err_tcp+0x126>
 8009fa8:	4b1e      	ldr	r3, [pc, #120]	@ (800a024 <err_tcp+0x194>)
 8009faa:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8009fae:	4920      	ldr	r1, [pc, #128]	@ (800a030 <err_tcp+0x1a0>)
 8009fb0:	481e      	ldr	r0, [pc, #120]	@ (800a02c <err_tcp+0x19c>)
 8009fb2:	f00c ffd3 	bl	8016f5c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8009fb6:	7dfb      	ldrb	r3, [r7, #23]
 8009fb8:	2b04      	cmp	r3, #4
 8009fba:	d104      	bne.n	8009fc6 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	6a1b      	ldr	r3, [r3, #32]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	711a      	strb	r2, [r3, #4]
 8009fc4:	e003      	b.n	8009fce <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	6a1b      	ldr	r3, [r3, #32]
 8009fca:	78fa      	ldrb	r2, [r7, #3]
 8009fcc:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	6a1b      	ldr	r3, [r3, #32]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	330c      	adds	r3, #12
 8009fd6:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8009fd8:	68b8      	ldr	r0, [r7, #8]
 8009fda:	f005 fccb 	bl	800f974 <sys_sem_valid>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d106      	bne.n	8009ff2 <err_tcp+0x162>
 8009fe4:	4b0f      	ldr	r3, [pc, #60]	@ (800a024 <err_tcp+0x194>)
 8009fe6:	f240 12ef 	movw	r2, #495	@ 0x1ef
 8009fea:	4912      	ldr	r1, [pc, #72]	@ (800a034 <err_tcp+0x1a4>)
 8009fec:	480f      	ldr	r0, [pc, #60]	@ (800a02c <err_tcp+0x19c>)
 8009fee:	f00c ffb5 	bl	8016f5c <iprintf>
      conn->current_msg = NULL;
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8009ff8:	68b8      	ldr	r0, [r7, #8]
 8009ffa:	f005 fca1 	bl	800f940 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8009ffe:	e00b      	b.n	800a018 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	6a1b      	ldr	r3, [r3, #32]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d008      	beq.n	800a01a <err_tcp+0x18a>
 800a008:	4b06      	ldr	r3, [pc, #24]	@ (800a024 <err_tcp+0x194>)
 800a00a:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800a00e:	490a      	ldr	r1, [pc, #40]	@ (800a038 <err_tcp+0x1a8>)
 800a010:	4806      	ldr	r0, [pc, #24]	@ (800a02c <err_tcp+0x19c>)
 800a012:	f00c ffa3 	bl	8016f5c <iprintf>
  }
}
 800a016:	e000      	b.n	800a01a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a018:	bf00      	nop
}
 800a01a:	bf00      	nop
 800a01c:	3720      	adds	r7, #32
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	08018620 	.word	0x08018620
 800a028:	080187a8 	.word	0x080187a8
 800a02c:	08018694 	.word	0x08018694
 800a030:	080187b8 	.word	0x080187b8
 800a034:	080187d4 	.word	0x080187d4
 800a038:	080187f0 	.word	0x080187f0

0800a03c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a04a:	6879      	ldr	r1, [r7, #4]
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f007 f95f 	bl	8011310 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a052:	490a      	ldr	r1, [pc, #40]	@ (800a07c <setup_tcp+0x40>)
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f007 f96d 	bl	8011334 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a05a:	4909      	ldr	r1, [pc, #36]	@ (800a080 <setup_tcp+0x44>)
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f007 f98b 	bl	8011378 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a062:	2202      	movs	r2, #2
 800a064:	4907      	ldr	r1, [pc, #28]	@ (800a084 <setup_tcp+0x48>)
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f007 f9e2 	bl	8011430 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a06c:	4906      	ldr	r1, [pc, #24]	@ (800a088 <setup_tcp+0x4c>)
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f007 f9a4 	bl	80113bc <tcp_err>
}
 800a074:	bf00      	nop
 800a076:	3710      	adds	r7, #16
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	08009c15 	.word	0x08009c15
 800a080:	08009de9 	.word	0x08009de9
 800a084:	08009d21 	.word	0x08009d21
 800a088:	08009e91 	.word	0x08009e91

0800a08c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a08c:	b590      	push	{r4, r7, lr}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a094:	2300      	movs	r3, #0
 800a096:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d006      	beq.n	800a0b0 <pcb_new+0x24>
 800a0a2:	4b2b      	ldr	r3, [pc, #172]	@ (800a150 <pcb_new+0xc4>)
 800a0a4:	f240 2265 	movw	r2, #613	@ 0x265
 800a0a8:	492a      	ldr	r1, [pc, #168]	@ (800a154 <pcb_new+0xc8>)
 800a0aa:	482b      	ldr	r0, [pc, #172]	@ (800a158 <pcb_new+0xcc>)
 800a0ac:	f00c ff56 	bl	8016f5c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a0ba:	2b10      	cmp	r3, #16
 800a0bc:	d022      	beq.n	800a104 <pcb_new+0x78>
 800a0be:	2b20      	cmp	r3, #32
 800a0c0:	d133      	bne.n	800a12a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681c      	ldr	r4, [r3, #0]
 800a0c6:	7bfb      	ldrb	r3, [r7, #15]
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f00c fe0a 	bl	8016ce2 <udp_new_ip_type>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d02a      	beq.n	800a132 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	2b22      	cmp	r3, #34	@ 0x22
 800a0e4:	d104      	bne.n	800a0f0 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	6858      	ldr	r0, [r3, #4]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	4917      	ldr	r1, [pc, #92]	@ (800a15c <pcb_new+0xd0>)
 800a0fe:	f00c fd77 	bl	8016bf0 <udp_recv>
      }
      break;
 800a102:	e016      	b.n	800a132 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681c      	ldr	r4, [r3, #0]
 800a108:	7bfb      	ldrb	r3, [r7, #15]
 800a10a:	4618      	mov	r0, r3
 800a10c:	f007 f8f2 	bl	80112f4 <tcp_new_ip_type>
 800a110:	4603      	mov	r3, r0
 800a112:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00b      	beq.n	800a136 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4618      	mov	r0, r3
 800a124:	f7ff ff8a 	bl	800a03c <setup_tcp>
      }
      break;
 800a128:	e005      	b.n	800a136 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	22fa      	movs	r2, #250	@ 0xfa
 800a12e:	711a      	strb	r2, [r3, #4]
      return;
 800a130:	e00a      	b.n	800a148 <pcb_new+0xbc>
      break;
 800a132:	bf00      	nop
 800a134:	e000      	b.n	800a138 <pcb_new+0xac>
      break;
 800a136:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d102      	bne.n	800a148 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	22ff      	movs	r2, #255	@ 0xff
 800a146:	711a      	strb	r2, [r3, #4]
  }
}
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd90      	pop	{r4, r7, pc}
 800a14e:	bf00      	nop
 800a150:	08018620 	.word	0x08018620
 800a154:	08018834 	.word	0x08018834
 800a158:	08018694 	.word	0x08018694
 800a15c:	08009b19 	.word	0x08009b19

0800a160 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2200      	movs	r2, #0
 800a170:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d102      	bne.n	800a182 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f7ff ff85 	bl	800a08c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a182:	bf00      	nop
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
	...

0800a18c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b086      	sub	sp, #24
 800a190:	af00      	add	r7, sp, #0
 800a192:	4603      	mov	r3, r0
 800a194:	6039      	str	r1, [r7, #0]
 800a196:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a198:	2300      	movs	r3, #0
 800a19a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a19c:	2007      	movs	r0, #7
 800a19e:	f004 f859 	bl	800e254 <memp_malloc>
 800a1a2:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d101      	bne.n	800a1ae <netconn_alloc+0x22>
    return NULL;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	e052      	b.n	800a254 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	79fa      	ldrb	r2, [r7, #7]
 800a1b8:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a1c0:	79fb      	ldrb	r3, [r7, #7]
 800a1c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a1c6:	2b10      	cmp	r3, #16
 800a1c8:	d004      	beq.n	800a1d4 <netconn_alloc+0x48>
 800a1ca:	2b20      	cmp	r3, #32
 800a1cc:	d105      	bne.n	800a1da <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a1ce:	2306      	movs	r3, #6
 800a1d0:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a1d2:	e00a      	b.n	800a1ea <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a1d4:	2306      	movs	r3, #6
 800a1d6:	617b      	str	r3, [r7, #20]
      break;
 800a1d8:	e007      	b.n	800a1ea <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a1da:	4b20      	ldr	r3, [pc, #128]	@ (800a25c <netconn_alloc+0xd0>)
 800a1dc:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800a1e0:	491f      	ldr	r1, [pc, #124]	@ (800a260 <netconn_alloc+0xd4>)
 800a1e2:	4820      	ldr	r0, [pc, #128]	@ (800a264 <netconn_alloc+0xd8>)
 800a1e4:	f00c feba 	bl	8016f5c <iprintf>
      goto free_and_return;
 800a1e8:	e02f      	b.n	800a24a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	3310      	adds	r3, #16
 800a1ee:	6979      	ldr	r1, [r7, #20]
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f005 faa3 	bl	800f73c <sys_mbox_new>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d125      	bne.n	800a248 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	330c      	adds	r3, #12
 800a200:	2100      	movs	r1, #0
 800a202:	4618      	mov	r0, r3
 800a204:	f005 fb46 	bl	800f894 <sys_sem_new>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d005      	beq.n	800a21a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	3310      	adds	r3, #16
 800a212:	4618      	mov	r0, r3
 800a214:	f005 faac 	bl	800f770 <sys_mbox_free>
    goto free_and_return;
 800a218:	e017      	b.n	800a24a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	3314      	adds	r3, #20
 800a21e:	4618      	mov	r0, r3
 800a220:	f005 fb2b 	bl	800f87a <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2200      	movs	r2, #0
 800a228:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f04f 32ff 	mov.w	r2, #4294967295
 800a230:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	683a      	ldr	r2, [r7, #0]
 800a236:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2200      	movs	r2, #0
 800a23c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	7cfa      	ldrb	r2, [r7, #19]
 800a242:	771a      	strb	r2, [r3, #28]
  return conn;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	e005      	b.n	800a254 <netconn_alloc+0xc8>
    goto free_and_return;
 800a248:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a24a:	68f9      	ldr	r1, [r7, #12]
 800a24c:	2007      	movs	r0, #7
 800a24e:	f004 f877 	bl	800e340 <memp_free>
  return NULL;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	3718      	adds	r7, #24
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	08018620 	.word	0x08018620
 800a260:	08018854 	.word	0x08018854
 800a264:	08018694 	.word	0x08018694

0800a268 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d006      	beq.n	800a286 <netconn_free+0x1e>
 800a278:	4b1b      	ldr	r3, [pc, #108]	@ (800a2e8 <netconn_free+0x80>)
 800a27a:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800a27e:	491b      	ldr	r1, [pc, #108]	@ (800a2ec <netconn_free+0x84>)
 800a280:	481b      	ldr	r0, [pc, #108]	@ (800a2f0 <netconn_free+0x88>)
 800a282:	f00c fe6b 	bl	8016f5c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	3310      	adds	r3, #16
 800a28a:	4618      	mov	r0, r3
 800a28c:	f005 fae4 	bl	800f858 <sys_mbox_valid>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d006      	beq.n	800a2a4 <netconn_free+0x3c>
 800a296:	4b14      	ldr	r3, [pc, #80]	@ (800a2e8 <netconn_free+0x80>)
 800a298:	f240 3223 	movw	r2, #803	@ 0x323
 800a29c:	4915      	ldr	r1, [pc, #84]	@ (800a2f4 <netconn_free+0x8c>)
 800a29e:	4814      	ldr	r0, [pc, #80]	@ (800a2f0 <netconn_free+0x88>)
 800a2a0:	f00c fe5c 	bl	8016f5c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	3314      	adds	r3, #20
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f005 fad5 	bl	800f858 <sys_mbox_valid>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d006      	beq.n	800a2c2 <netconn_free+0x5a>
 800a2b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a2e8 <netconn_free+0x80>)
 800a2b6:	f240 3226 	movw	r2, #806	@ 0x326
 800a2ba:	490f      	ldr	r1, [pc, #60]	@ (800a2f8 <netconn_free+0x90>)
 800a2bc:	480c      	ldr	r0, [pc, #48]	@ (800a2f0 <netconn_free+0x88>)
 800a2be:	f00c fe4d 	bl	8016f5c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	330c      	adds	r3, #12
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f005 fb47 	bl	800f95a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	330c      	adds	r3, #12
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f005 fb60 	bl	800f996 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a2d6:	6879      	ldr	r1, [r7, #4]
 800a2d8:	2007      	movs	r0, #7
 800a2da:	f004 f831 	bl	800e340 <memp_free>
}
 800a2de:	bf00      	nop
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	08018620 	.word	0x08018620
 800a2ec:	0801887c 	.word	0x0801887c
 800a2f0:	08018694 	.word	0x08018694
 800a2f4:	080188ac 	.word	0x080188ac
 800a2f8:	080188e8 	.word	0x080188e8

0800a2fc <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	3310      	adds	r3, #16
 800a308:	4618      	mov	r0, r3
 800a30a:	f005 faa5 	bl	800f858 <sys_mbox_valid>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d02f      	beq.n	800a374 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a314:	e018      	b.n	800a348 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a31e:	2b10      	cmp	r3, #16
 800a320:	d10e      	bne.n	800a340 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	f107 020f 	add.w	r2, r7, #15
 800a328:	4611      	mov	r1, r2
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7ff fbba 	bl	8009aa4 <lwip_netconn_is_err_msg>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d108      	bne.n	800a348 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	4618      	mov	r0, r3
 800a33a:	f004 fec3 	bl	800f0c4 <pbuf_free>
 800a33e:	e003      	b.n	800a348 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	4618      	mov	r0, r3
 800a344:	f004 f826 	bl	800e394 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	3310      	adds	r3, #16
 800a34c:	f107 0210 	add.w	r2, r7, #16
 800a350:	4611      	mov	r1, r2
 800a352:	4618      	mov	r0, r3
 800a354:	f005 fa69 	bl	800f82a <sys_arch_mbox_tryfetch>
 800a358:	4603      	mov	r3, r0
 800a35a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a35e:	d1da      	bne.n	800a316 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	3310      	adds	r3, #16
 800a364:	4618      	mov	r0, r3
 800a366:	f005 fa03 	bl	800f770 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	3310      	adds	r3, #16
 800a36e:	4618      	mov	r0, r3
 800a370:	f005 fa83 	bl	800f87a <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	3314      	adds	r3, #20
 800a378:	4618      	mov	r0, r3
 800a37a:	f005 fa6d 	bl	800f858 <sys_mbox_valid>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d034      	beq.n	800a3ee <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a384:	e01d      	b.n	800a3c2 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	f107 020e 	add.w	r2, r7, #14
 800a38c:	4611      	mov	r1, r2
 800a38e:	4618      	mov	r0, r3
 800a390:	f7ff fb88 	bl	8009aa4 <lwip_netconn_is_err_msg>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d113      	bne.n	800a3c2 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a39e:	6978      	ldr	r0, [r7, #20]
 800a3a0:	f7ff ffac 	bl	800a2fc <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d007      	beq.n	800a3bc <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f005 fecf 	bl	8010154 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a3bc:	6978      	ldr	r0, [r7, #20]
 800a3be:	f7ff ff53 	bl	800a268 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	3314      	adds	r3, #20
 800a3c6:	f107 0210 	add.w	r2, r7, #16
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f005 fa2c 	bl	800f82a <sys_arch_mbox_tryfetch>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d8:	d1d5      	bne.n	800a386 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	3314      	adds	r3, #20
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f005 f9c6 	bl	800f770 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	3314      	adds	r3, #20
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f005 fa46 	bl	800f87a <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a3ee:	bf00      	nop
 800a3f0:	3718      	adds	r7, #24
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
	...

0800a3f8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b086      	sub	sp, #24
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	460b      	mov	r3, r1
 800a402:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a404:	2300      	movs	r3, #0
 800a406:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d106      	bne.n	800a41c <lwip_netconn_do_close_internal+0x24>
 800a40e:	4b87      	ldr	r3, [pc, #540]	@ (800a62c <lwip_netconn_do_close_internal+0x234>)
 800a410:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800a414:	4986      	ldr	r1, [pc, #536]	@ (800a630 <lwip_netconn_do_close_internal+0x238>)
 800a416:	4887      	ldr	r0, [pc, #540]	@ (800a634 <lwip_netconn_do_close_internal+0x23c>)
 800a418:	f00c fda0 	bl	8016f5c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a424:	2b10      	cmp	r3, #16
 800a426:	d006      	beq.n	800a436 <lwip_netconn_do_close_internal+0x3e>
 800a428:	4b80      	ldr	r3, [pc, #512]	@ (800a62c <lwip_netconn_do_close_internal+0x234>)
 800a42a:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800a42e:	4982      	ldr	r1, [pc, #520]	@ (800a638 <lwip_netconn_do_close_internal+0x240>)
 800a430:	4880      	ldr	r0, [pc, #512]	@ (800a634 <lwip_netconn_do_close_internal+0x23c>)
 800a432:	f00c fd93 	bl	8016f5c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	785b      	ldrb	r3, [r3, #1]
 800a43a:	2b04      	cmp	r3, #4
 800a43c:	d006      	beq.n	800a44c <lwip_netconn_do_close_internal+0x54>
 800a43e:	4b7b      	ldr	r3, [pc, #492]	@ (800a62c <lwip_netconn_do_close_internal+0x234>)
 800a440:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800a444:	497d      	ldr	r1, [pc, #500]	@ (800a63c <lwip_netconn_do_close_internal+0x244>)
 800a446:	487b      	ldr	r0, [pc, #492]	@ (800a634 <lwip_netconn_do_close_internal+0x23c>)
 800a448:	f00c fd88 	bl	8016f5c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d106      	bne.n	800a462 <lwip_netconn_do_close_internal+0x6a>
 800a454:	4b75      	ldr	r3, [pc, #468]	@ (800a62c <lwip_netconn_do_close_internal+0x234>)
 800a456:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800a45a:	4979      	ldr	r1, [pc, #484]	@ (800a640 <lwip_netconn_do_close_internal+0x248>)
 800a45c:	4875      	ldr	r0, [pc, #468]	@ (800a634 <lwip_netconn_do_close_internal+0x23c>)
 800a45e:	f00c fd7d 	bl	8016f5c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6a1b      	ldr	r3, [r3, #32]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d106      	bne.n	800a478 <lwip_netconn_do_close_internal+0x80>
 800a46a:	4b70      	ldr	r3, [pc, #448]	@ (800a62c <lwip_netconn_do_close_internal+0x234>)
 800a46c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800a470:	4974      	ldr	r1, [pc, #464]	@ (800a644 <lwip_netconn_do_close_internal+0x24c>)
 800a472:	4870      	ldr	r0, [pc, #448]	@ (800a634 <lwip_netconn_do_close_internal+0x23c>)
 800a474:	f00c fd72 	bl	8016f5c <iprintf>

  tpcb = conn->pcb.tcp;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6a1b      	ldr	r3, [r3, #32]
 800a482:	7a1b      	ldrb	r3, [r3, #8]
 800a484:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a486:	7bfb      	ldrb	r3, [r7, #15]
 800a488:	f003 0301 	and.w	r3, r3, #1
 800a48c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a48e:	7bfb      	ldrb	r3, [r7, #15]
 800a490:	f003 0302 	and.w	r3, r3, #2
 800a494:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a496:	7bfb      	ldrb	r3, [r7, #15]
 800a498:	2b03      	cmp	r3, #3
 800a49a:	d102      	bne.n	800a4a2 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a49c:	2301      	movs	r3, #1
 800a49e:	75bb      	strb	r3, [r7, #22]
 800a4a0:	e01f      	b.n	800a4e2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a4a2:	7bbb      	ldrb	r3, [r7, #14]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00e      	beq.n	800a4c6 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a4ac:	2b05      	cmp	r3, #5
 800a4ae:	d007      	beq.n	800a4c0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a4b4:	2b06      	cmp	r3, #6
 800a4b6:	d003      	beq.n	800a4c0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a4bc:	2b08      	cmp	r3, #8
 800a4be:	d102      	bne.n	800a4c6 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	75bb      	strb	r3, [r7, #22]
 800a4c4:	e00d      	b.n	800a4e2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a4c6:	7b7b      	ldrb	r3, [r7, #13]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d008      	beq.n	800a4de <lwip_netconn_do_close_internal+0xe6>
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	8b5b      	ldrh	r3, [r3, #26]
 800a4d0:	f003 0310 	and.w	r3, r3, #16
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d002      	beq.n	800a4de <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	75bb      	strb	r3, [r7, #22]
 800a4dc:	e001      	b.n	800a4e2 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a4e2:	7dbb      	ldrb	r3, [r7, #22]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d003      	beq.n	800a4f0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	6938      	ldr	r0, [r7, #16]
 800a4ec:	f006 ff10 	bl	8011310 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	7d1b      	ldrb	r3, [r3, #20]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d104      	bne.n	800a502 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a4f8:	2100      	movs	r1, #0
 800a4fa:	6938      	ldr	r0, [r7, #16]
 800a4fc:	f006 ff80 	bl	8011400 <tcp_accept>
 800a500:	e01d      	b.n	800a53e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a502:	7bbb      	ldrb	r3, [r7, #14]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d007      	beq.n	800a518 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a508:	2100      	movs	r1, #0
 800a50a:	6938      	ldr	r0, [r7, #16]
 800a50c:	f006 ff12 	bl	8011334 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a510:	2100      	movs	r1, #0
 800a512:	6938      	ldr	r0, [r7, #16]
 800a514:	f006 ff74 	bl	8011400 <tcp_accept>
    }
    if (shut_tx) {
 800a518:	7b7b      	ldrb	r3, [r7, #13]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d003      	beq.n	800a526 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a51e:	2100      	movs	r1, #0
 800a520:	6938      	ldr	r0, [r7, #16]
 800a522:	f006 ff29 	bl	8011378 <tcp_sent>
    }
    if (shut_close) {
 800a526:	7dbb      	ldrb	r3, [r7, #22]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d008      	beq.n	800a53e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a52c:	2200      	movs	r2, #0
 800a52e:	2100      	movs	r1, #0
 800a530:	6938      	ldr	r0, [r7, #16]
 800a532:	f006 ff7d 	bl	8011430 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a536:	2100      	movs	r1, #0
 800a538:	6938      	ldr	r0, [r7, #16]
 800a53a:	f006 ff3f 	bl	80113bc <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a53e:	7dbb      	ldrb	r3, [r7, #22]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d005      	beq.n	800a550 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a544:	6938      	ldr	r0, [r7, #16]
 800a546:	f005 fcbf 	bl	800fec8 <tcp_close>
 800a54a:	4603      	mov	r3, r0
 800a54c:	75fb      	strb	r3, [r7, #23]
 800a54e:	e007      	b.n	800a560 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a550:	7bbb      	ldrb	r3, [r7, #14]
 800a552:	7b7a      	ldrb	r2, [r7, #13]
 800a554:	4619      	mov	r1, r3
 800a556:	6938      	ldr	r0, [r7, #16]
 800a558:	f005 fce2 	bl	800ff20 <tcp_shutdown>
 800a55c:	4603      	mov	r3, r0
 800a55e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a560:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d102      	bne.n	800a56e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a568:	2301      	movs	r3, #1
 800a56a:	757b      	strb	r3, [r7, #21]
 800a56c:	e016      	b.n	800a59c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a56e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a576:	d10f      	bne.n	800a598 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6a1b      	ldr	r3, [r3, #32]
 800a57c:	7a5b      	ldrb	r3, [r3, #9]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10c      	bne.n	800a59c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a582:	2301      	movs	r3, #1
 800a584:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a586:	7dbb      	ldrb	r3, [r7, #22]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d007      	beq.n	800a59c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a58c:	6938      	ldr	r0, [r7, #16]
 800a58e:	f005 fde1 	bl	8010154 <tcp_abort>
          err = ERR_OK;
 800a592:	2300      	movs	r3, #0
 800a594:	75fb      	strb	r3, [r7, #23]
 800a596:	e001      	b.n	800a59c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a598:	2301      	movs	r3, #1
 800a59a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a59c:	7d7b      	ldrb	r3, [r7, #21]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d052      	beq.n	800a648 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6a1b      	ldr	r3, [r3, #32]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	330c      	adds	r3, #12
 800a5aa:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6a1b      	ldr	r3, [r3, #32]
 800a5b0:	7dfa      	ldrb	r2, [r7, #23]
 800a5b2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a5c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d129      	bne.n	800a61c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a5c8:	7dbb      	ldrb	r3, [r7, #22]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00c      	beq.n	800a5e8 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d005      	beq.n	800a5e8 <lwip_netconn_do_close_internal+0x1f0>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	2104      	movs	r1, #4
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	4798      	blx	r3
      }
      if (shut_rx) {
 800a5e8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d009      	beq.n	800a602 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d005      	beq.n	800a602 <lwip_netconn_do_close_internal+0x20a>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	4798      	blx	r3
      }
      if (shut_tx) {
 800a602:	7b7b      	ldrb	r3, [r7, #13]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d009      	beq.n	800a61c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d005      	beq.n	800a61c <lwip_netconn_do_close_internal+0x224>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a614:	2200      	movs	r2, #0
 800a616:	2102      	movs	r1, #2
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a61c:	78fb      	ldrb	r3, [r7, #3]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d002      	beq.n	800a628 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a622:	68b8      	ldr	r0, [r7, #8]
 800a624:	f005 f98c 	bl	800f940 <sys_sem_signal>
    }
    return ERR_OK;
 800a628:	2300      	movs	r3, #0
 800a62a:	e03c      	b.n	800a6a6 <lwip_netconn_do_close_internal+0x2ae>
 800a62c:	08018620 	.word	0x08018620
 800a630:	08018924 	.word	0x08018924
 800a634:	08018694 	.word	0x08018694
 800a638:	08018934 	.word	0x08018934
 800a63c:	08018954 	.word	0x08018954
 800a640:	08018978 	.word	0x08018978
 800a644:	080187b8 	.word	0x080187b8
  }
  if (!close_finished) {
 800a648:	7d7b      	ldrb	r3, [r7, #21]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d11e      	bne.n	800a68c <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	7d1b      	ldrb	r3, [r3, #20]
 800a652:	2b01      	cmp	r3, #1
 800a654:	d106      	bne.n	800a664 <lwip_netconn_do_close_internal+0x26c>
 800a656:	4b16      	ldr	r3, [pc, #88]	@ (800a6b0 <lwip_netconn_do_close_internal+0x2b8>)
 800a658:	f240 4241 	movw	r2, #1089	@ 0x441
 800a65c:	4915      	ldr	r1, [pc, #84]	@ (800a6b4 <lwip_netconn_do_close_internal+0x2bc>)
 800a65e:	4816      	ldr	r0, [pc, #88]	@ (800a6b8 <lwip_netconn_do_close_internal+0x2c0>)
 800a660:	f00c fc7c 	bl	8016f5c <iprintf>
    if (shut_tx) {
 800a664:	7b7b      	ldrb	r3, [r7, #13]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d003      	beq.n	800a672 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800a66a:	4914      	ldr	r1, [pc, #80]	@ (800a6bc <lwip_netconn_do_close_internal+0x2c4>)
 800a66c:	6938      	ldr	r0, [r7, #16]
 800a66e:	f006 fe83 	bl	8011378 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a672:	2201      	movs	r2, #1
 800a674:	4912      	ldr	r1, [pc, #72]	@ (800a6c0 <lwip_netconn_do_close_internal+0x2c8>)
 800a676:	6938      	ldr	r0, [r7, #16]
 800a678:	f006 feda 	bl	8011430 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a67c:	4911      	ldr	r1, [pc, #68]	@ (800a6c4 <lwip_netconn_do_close_internal+0x2cc>)
 800a67e:	6938      	ldr	r0, [r7, #16]
 800a680:	f006 fe9c 	bl	80113bc <tcp_err>
    tcp_arg(tpcb, conn);
 800a684:	6879      	ldr	r1, [r7, #4]
 800a686:	6938      	ldr	r0, [r7, #16]
 800a688:	f006 fe42 	bl	8011310 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a68c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d106      	bne.n	800a6a2 <lwip_netconn_do_close_internal+0x2aa>
 800a694:	4b06      	ldr	r3, [pc, #24]	@ (800a6b0 <lwip_netconn_do_close_internal+0x2b8>)
 800a696:	f240 424d 	movw	r2, #1101	@ 0x44d
 800a69a:	490b      	ldr	r1, [pc, #44]	@ (800a6c8 <lwip_netconn_do_close_internal+0x2d0>)
 800a69c:	4806      	ldr	r0, [pc, #24]	@ (800a6b8 <lwip_netconn_do_close_internal+0x2c0>)
 800a69e:	f00c fc5d 	bl	8016f5c <iprintf>
  return err;
 800a6a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3718      	adds	r7, #24
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	08018620 	.word	0x08018620
 800a6b4:	0801898c 	.word	0x0801898c
 800a6b8:	08018694 	.word	0x08018694
 800a6bc:	08009de9 	.word	0x08009de9
 800a6c0:	08009d21 	.word	0x08009d21
 800a6c4:	08009e91 	.word	0x08009e91
 800a6c8:	080189b0 	.word	0x080189b0

0800a6cc <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	785b      	ldrb	r3, [r3, #1]
 800a6de:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a6e0:	7afb      	ldrb	r3, [r7, #11]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d00d      	beq.n	800a702 <lwip_netconn_do_delconn+0x36>
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a6f0:	2b10      	cmp	r3, #16
 800a6f2:	d006      	beq.n	800a702 <lwip_netconn_do_delconn+0x36>
 800a6f4:	4b60      	ldr	r3, [pc, #384]	@ (800a878 <lwip_netconn_do_delconn+0x1ac>)
 800a6f6:	f240 425e 	movw	r2, #1118	@ 0x45e
 800a6fa:	4960      	ldr	r1, [pc, #384]	@ (800a87c <lwip_netconn_do_delconn+0x1b0>)
 800a6fc:	4860      	ldr	r0, [pc, #384]	@ (800a880 <lwip_netconn_do_delconn+0x1b4>)
 800a6fe:	f00c fc2d 	bl	8016f5c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a702:	7afb      	ldrb	r3, [r7, #11]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d005      	beq.n	800a714 <lwip_netconn_do_delconn+0x48>
 800a708:	7afb      	ldrb	r3, [r7, #11]
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d002      	beq.n	800a714 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a70e:	7afb      	ldrb	r3, [r7, #11]
 800a710:	2b03      	cmp	r3, #3
 800a712:	d109      	bne.n	800a728 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800a714:	7afb      	ldrb	r3, [r7, #11]
 800a716:	2b03      	cmp	r3, #3
 800a718:	d10a      	bne.n	800a730 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	7f1b      	ldrb	r3, [r3, #28]
 800a720:	f003 0304 	and.w	r3, r3, #4
 800a724:	2b00      	cmp	r3, #0
 800a726:	d103      	bne.n	800a730 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	22fb      	movs	r2, #251	@ 0xfb
 800a72c:	711a      	strb	r2, [r3, #4]
 800a72e:	e097      	b.n	800a860 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a730:	7afb      	ldrb	r3, [r7, #11]
 800a732:	2b03      	cmp	r3, #3
 800a734:	d10d      	bne.n	800a752 <lwip_netconn_do_delconn+0x86>
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	7f1b      	ldrb	r3, [r3, #28]
 800a73c:	f003 0304 	and.w	r3, r3, #4
 800a740:	2b00      	cmp	r3, #0
 800a742:	d106      	bne.n	800a752 <lwip_netconn_do_delconn+0x86>
 800a744:	4b4c      	ldr	r3, [pc, #304]	@ (800a878 <lwip_netconn_do_delconn+0x1ac>)
 800a746:	f240 427a 	movw	r2, #1146	@ 0x47a
 800a74a:	494e      	ldr	r1, [pc, #312]	@ (800a884 <lwip_netconn_do_delconn+0x1b8>)
 800a74c:	484c      	ldr	r0, [pc, #304]	@ (800a880 <lwip_netconn_do_delconn+0x1b4>)
 800a74e:	f00c fc05 	bl	8016f5c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2200      	movs	r2, #0
 800a756:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7ff fdcd 	bl	800a2fc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d05f      	beq.n	800a82c <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a776:	2b10      	cmp	r3, #16
 800a778:	d00d      	beq.n	800a796 <lwip_netconn_do_delconn+0xca>
 800a77a:	2b20      	cmp	r3, #32
 800a77c:	d151      	bne.n	800a822 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	4618      	mov	r0, r3
 800a790:	f00c fa4e 	bl	8016c30 <udp_remove>
          break;
 800a794:	e046      	b.n	800a824 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	6a1b      	ldr	r3, [r3, #32]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d006      	beq.n	800a7ae <lwip_netconn_do_delconn+0xe2>
 800a7a0:	4b35      	ldr	r3, [pc, #212]	@ (800a878 <lwip_netconn_do_delconn+0x1ac>)
 800a7a2:	f240 4294 	movw	r2, #1172	@ 0x494
 800a7a6:	4938      	ldr	r1, [pc, #224]	@ (800a888 <lwip_netconn_do_delconn+0x1bc>)
 800a7a8:	4835      	ldr	r0, [pc, #212]	@ (800a880 <lwip_netconn_do_delconn+0x1b4>)
 800a7aa:	f00c fbd7 	bl	8016f5c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2204      	movs	r2, #4
 800a7b4:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2203      	movs	r2, #3
 800a7ba:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	68fa      	ldr	r2, [r7, #12]
 800a7c2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7ff fe14 	bl	800a3f8 <lwip_netconn_do_close_internal>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d04b      	beq.n	800a86e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	785b      	ldrb	r3, [r3, #1]
 800a7dc:	2b04      	cmp	r3, #4
 800a7de:	d006      	beq.n	800a7ee <lwip_netconn_do_delconn+0x122>
 800a7e0:	4b25      	ldr	r3, [pc, #148]	@ (800a878 <lwip_netconn_do_delconn+0x1ac>)
 800a7e2:	f240 429a 	movw	r2, #1178	@ 0x49a
 800a7e6:	4929      	ldr	r1, [pc, #164]	@ (800a88c <lwip_netconn_do_delconn+0x1c0>)
 800a7e8:	4825      	ldr	r0, [pc, #148]	@ (800a880 <lwip_netconn_do_delconn+0x1b4>)
 800a7ea:	f00c fbb7 	bl	8016f5c <iprintf>
            UNLOCK_TCPIP_CORE();
 800a7ee:	4828      	ldr	r0, [pc, #160]	@ (800a890 <lwip_netconn_do_delconn+0x1c4>)
 800a7f0:	f005 f90f 	bl	800fa12 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	330c      	adds	r3, #12
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f005 f86e 	bl	800f8de <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800a802:	4823      	ldr	r0, [pc, #140]	@ (800a890 <lwip_netconn_do_delconn+0x1c4>)
 800a804:	f005 f8f6 	bl	800f9f4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	785b      	ldrb	r3, [r3, #1]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d02d      	beq.n	800a86e <lwip_netconn_do_delconn+0x1a2>
 800a812:	4b19      	ldr	r3, [pc, #100]	@ (800a878 <lwip_netconn_do_delconn+0x1ac>)
 800a814:	f240 429e 	movw	r2, #1182	@ 0x49e
 800a818:	491c      	ldr	r1, [pc, #112]	@ (800a88c <lwip_netconn_do_delconn+0x1c0>)
 800a81a:	4819      	ldr	r0, [pc, #100]	@ (800a880 <lwip_netconn_do_delconn+0x1b4>)
 800a81c:	f00c fb9e 	bl	8016f5c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800a820:	e025      	b.n	800a86e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800a822:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2200      	movs	r2, #0
 800a82a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a832:	2b00      	cmp	r3, #0
 800a834:	d007      	beq.n	800a846 <lwip_netconn_do_delconn+0x17a>
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a83c:	68fa      	ldr	r2, [r7, #12]
 800a83e:	6810      	ldr	r0, [r2, #0]
 800a840:	2200      	movs	r2, #0
 800a842:	2100      	movs	r1, #0
 800a844:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d007      	beq.n	800a860 <lwip_netconn_do_delconn+0x194>
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a856:	68fa      	ldr	r2, [r7, #12]
 800a858:	6810      	ldr	r0, [r2, #0]
 800a85a:	2200      	movs	r2, #0
 800a85c:	2102      	movs	r1, #2
 800a85e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	330c      	adds	r3, #12
 800a866:	4618      	mov	r0, r3
 800a868:	f005 f884 	bl	800f974 <sys_sem_valid>
 800a86c:	e000      	b.n	800a870 <lwip_netconn_do_delconn+0x1a4>
          return;
 800a86e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800a870:	3710      	adds	r7, #16
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	08018620 	.word	0x08018620
 800a87c:	080189c0 	.word	0x080189c0
 800a880:	08018694 	.word	0x08018694
 800a884:	080189d4 	.word	0x080189d4
 800a888:	080189f4 	.word	0x080189f4
 800a88c:	08018a10 	.word	0x08018a10
 800a890:	2400ce10 	.word	0x2400ce10

0800a894 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d025      	beq.n	800a8f6 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a8b4:	2b10      	cmp	r3, #16
 800a8b6:	d00e      	beq.n	800a8d6 <lwip_netconn_do_bind+0x42>
 800a8b8:	2b20      	cmp	r3, #32
 800a8ba:	d119      	bne.n	800a8f0 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6858      	ldr	r0, [r3, #4]
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	6899      	ldr	r1, [r3, #8]
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	899b      	ldrh	r3, [r3, #12]
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	f00c f89a 	bl	8016a04 <udp_bind>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	73fb      	strb	r3, [r7, #15]
        break;
 800a8d4:	e011      	b.n	800a8fa <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	6858      	ldr	r0, [r3, #4]
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	6899      	ldr	r1, [r3, #8]
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	899b      	ldrh	r3, [r3, #12]
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	f005 fc41 	bl	801016c <tcp_bind>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	73fb      	strb	r3, [r7, #15]
        break;
 800a8ee:	e004      	b.n	800a8fa <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800a8f0:	23fa      	movs	r3, #250	@ 0xfa
 800a8f2:	73fb      	strb	r3, [r7, #15]
        break;
 800a8f4:	e001      	b.n	800a8fa <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800a8f6:	23fa      	movs	r3, #250	@ 0xfa
 800a8f8:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	7bfa      	ldrb	r2, [r7, #15]
 800a8fe:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a900:	bf00      	nop
 800a902:	3710      	adds	r7, #16
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b088      	sub	sp, #32
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	4613      	mov	r3, r2
 800a914:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800a916:	2300      	movs	r3, #0
 800a918:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d102      	bne.n	800a92a <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800a924:	f06f 0305 	mvn.w	r3, #5
 800a928:	e070      	b.n	800aa0c <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	785b      	ldrb	r3, [r3, #1]
 800a92e:	2b03      	cmp	r3, #3
 800a930:	d006      	beq.n	800a940 <lwip_netconn_do_connected+0x38>
 800a932:	4b38      	ldr	r3, [pc, #224]	@ (800aa14 <lwip_netconn_do_connected+0x10c>)
 800a934:	f240 5223 	movw	r2, #1315	@ 0x523
 800a938:	4937      	ldr	r1, [pc, #220]	@ (800aa18 <lwip_netconn_do_connected+0x110>)
 800a93a:	4838      	ldr	r0, [pc, #224]	@ (800aa1c <lwip_netconn_do_connected+0x114>)
 800a93c:	f00c fb0e 	bl	8016f5c <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	6a1b      	ldr	r3, [r3, #32]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d10c      	bne.n	800a962 <lwip_netconn_do_connected+0x5a>
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	7f1b      	ldrb	r3, [r3, #28]
 800a94c:	f003 0304 	and.w	r3, r3, #4
 800a950:	2b00      	cmp	r3, #0
 800a952:	d106      	bne.n	800a962 <lwip_netconn_do_connected+0x5a>
 800a954:	4b2f      	ldr	r3, [pc, #188]	@ (800aa14 <lwip_netconn_do_connected+0x10c>)
 800a956:	f240 5224 	movw	r2, #1316	@ 0x524
 800a95a:	4931      	ldr	r1, [pc, #196]	@ (800aa20 <lwip_netconn_do_connected+0x118>)
 800a95c:	482f      	ldr	r0, [pc, #188]	@ (800aa1c <lwip_netconn_do_connected+0x114>)
 800a95e:	f00c fafd 	bl	8016f5c <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800a962:	69bb      	ldr	r3, [r7, #24]
 800a964:	6a1b      	ldr	r3, [r3, #32]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d008      	beq.n	800a97c <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	6a1b      	ldr	r3, [r3, #32]
 800a96e:	79fa      	ldrb	r2, [r7, #7]
 800a970:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	6a1b      	ldr	r3, [r3, #32]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	330c      	adds	r3, #12
 800a97a:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a984:	2b10      	cmp	r3, #16
 800a986:	d106      	bne.n	800a996 <lwip_netconn_do_connected+0x8e>
 800a988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d102      	bne.n	800a996 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800a990:	69b8      	ldr	r0, [r7, #24]
 800a992:	f7ff fb53 	bl	800a03c <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	7f1b      	ldrb	r3, [r3, #28]
 800a99a:	f003 0304 	and.w	r3, r3, #4
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	bf0c      	ite	eq
 800a9a2:	2301      	moveq	r3, #1
 800a9a4:	2300      	movne	r3, #0
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	7f1b      	ldrb	r3, [r3, #28]
 800a9ae:	f023 0304 	bic.w	r3, r3, #4
 800a9b2:	b2da      	uxtb	r2, r3
 800a9b4:	69bb      	ldr	r3, [r7, #24]
 800a9b6:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d002      	beq.n	800a9c4 <lwip_netconn_do_connected+0xbc>
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d10c      	bne.n	800a9de <lwip_netconn_do_connected+0xd6>
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d102      	bne.n	800a9d0 <lwip_netconn_do_connected+0xc8>
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d006      	beq.n	800a9de <lwip_netconn_do_connected+0xd6>
 800a9d0:	4b10      	ldr	r3, [pc, #64]	@ (800aa14 <lwip_netconn_do_connected+0x10c>)
 800a9d2:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 800a9d6:	4913      	ldr	r1, [pc, #76]	@ (800aa24 <lwip_netconn_do_connected+0x11c>)
 800a9d8:	4810      	ldr	r0, [pc, #64]	@ (800aa1c <lwip_netconn_do_connected+0x114>)
 800a9da:	f00c fabf 	bl	8016f5c <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800a9de:	69bb      	ldr	r3, [r7, #24]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800a9e4:	69bb      	ldr	r3, [r7, #24]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a9ea:	69bb      	ldr	r3, [r7, #24]
 800a9ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d005      	beq.n	800a9fe <lwip_netconn_do_connected+0xf6>
 800a9f2:	69bb      	ldr	r3, [r7, #24]
 800a9f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	2102      	movs	r1, #2
 800a9fa:	69b8      	ldr	r0, [r7, #24]
 800a9fc:	4798      	blx	r3

  if (was_blocking) {
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d002      	beq.n	800aa0a <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800aa04:	69f8      	ldr	r0, [r7, #28]
 800aa06:	f004 ff9b 	bl	800f940 <sys_sem_signal>
  }
  return ERR_OK;
 800aa0a:	2300      	movs	r3, #0
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3720      	adds	r7, #32
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	08018620 	.word	0x08018620
 800aa18:	08018a18 	.word	0x08018a18
 800aa1c:	08018694 	.word	0x08018694
 800aa20:	08018a38 	.word	0x08018a38
 800aa24:	08018a78 	.word	0x08018a78

0800aa28 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b086      	sub	sp, #24
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d102      	bne.n	800aa44 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800aa3e:	23f1      	movs	r3, #241	@ 0xf1
 800aa40:	75fb      	strb	r3, [r7, #23]
 800aa42:	e09b      	b.n	800ab7c <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aa4e:	2b10      	cmp	r3, #16
 800aa50:	d00f      	beq.n	800aa72 <lwip_netconn_do_connect+0x4a>
 800aa52:	2b20      	cmp	r3, #32
 800aa54:	f040 8087 	bne.w	800ab66 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	6858      	ldr	r0, [r3, #4]
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	6899      	ldr	r1, [r3, #8]
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	899b      	ldrh	r3, [r3, #12]
 800aa66:	461a      	mov	r2, r3
 800aa68:	f00c f854 	bl	8016b14 <udp_connect>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	75fb      	strb	r3, [r7, #23]
        break;
 800aa70:	e084      	b.n	800ab7c <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	785b      	ldrb	r3, [r3, #1]
 800aa78:	2b03      	cmp	r3, #3
 800aa7a:	d102      	bne.n	800aa82 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800aa7c:	23f7      	movs	r3, #247	@ 0xf7
 800aa7e:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800aa80:	e07b      	b.n	800ab7a <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	785b      	ldrb	r3, [r3, #1]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d002      	beq.n	800aa92 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800aa8c:	23f6      	movs	r3, #246	@ 0xf6
 800aa8e:	75fb      	strb	r3, [r7, #23]
        break;
 800aa90:	e073      	b.n	800ab7a <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7ff fad0 	bl	800a03c <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	6858      	ldr	r0, [r3, #4]
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	6899      	ldr	r1, [r3, #8]
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	899a      	ldrh	r2, [r3, #12]
 800aaaa:	4b38      	ldr	r3, [pc, #224]	@ (800ab8c <lwip_netconn_do_connect+0x164>)
 800aaac:	f005 fce6 	bl	801047c <tcp_connect>
 800aab0:	4603      	mov	r3, r0
 800aab2:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800aab4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d15e      	bne.n	800ab7a <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	7f1b      	ldrb	r3, [r3, #28]
 800aac2:	f003 0302 	and.w	r3, r3, #2
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	bf14      	ite	ne
 800aaca:	2301      	movne	r3, #1
 800aacc:	2300      	moveq	r3, #0
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2203      	movs	r2, #3
 800aad8:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800aada:	7bfb      	ldrb	r3, [r7, #15]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d009      	beq.n	800aaf4 <lwip_netconn_do_connect+0xcc>
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	7f1a      	ldrb	r2, [r3, #28]
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f042 0204 	orr.w	r2, r2, #4
 800aaee:	b2d2      	uxtb	r2, r2
 800aaf0:	771a      	strb	r2, [r3, #28]
 800aaf2:	e008      	b.n	800ab06 <lwip_netconn_do_connect+0xde>
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	7f1a      	ldrb	r2, [r3, #28]
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f022 0204 	bic.w	r2, r2, #4
 800ab02:	b2d2      	uxtb	r2, r2
 800ab04:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800ab06:	7bfb      	ldrb	r3, [r7, #15]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d002      	beq.n	800ab12 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800ab0c:	23fb      	movs	r3, #251	@ 0xfb
 800ab0e:	75fb      	strb	r3, [r7, #23]
        break;
 800ab10:	e033      	b.n	800ab7a <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	693a      	ldr	r2, [r7, #16]
 800ab18:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	785b      	ldrb	r3, [r3, #1]
 800ab20:	2b03      	cmp	r3, #3
 800ab22:	d006      	beq.n	800ab32 <lwip_netconn_do_connect+0x10a>
 800ab24:	4b1a      	ldr	r3, [pc, #104]	@ (800ab90 <lwip_netconn_do_connect+0x168>)
 800ab26:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 800ab2a:	491a      	ldr	r1, [pc, #104]	@ (800ab94 <lwip_netconn_do_connect+0x16c>)
 800ab2c:	481a      	ldr	r0, [pc, #104]	@ (800ab98 <lwip_netconn_do_connect+0x170>)
 800ab2e:	f00c fa15 	bl	8016f5c <iprintf>
              UNLOCK_TCPIP_CORE();
 800ab32:	481a      	ldr	r0, [pc, #104]	@ (800ab9c <lwip_netconn_do_connect+0x174>)
 800ab34:	f004 ff6d 	bl	800fa12 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	330c      	adds	r3, #12
 800ab3e:	2100      	movs	r1, #0
 800ab40:	4618      	mov	r0, r3
 800ab42:	f004 fecc 	bl	800f8de <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800ab46:	4815      	ldr	r0, [pc, #84]	@ (800ab9c <lwip_netconn_do_connect+0x174>)
 800ab48:	f004 ff54 	bl	800f9f4 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	785b      	ldrb	r3, [r3, #1]
 800ab52:	2b03      	cmp	r3, #3
 800ab54:	d116      	bne.n	800ab84 <lwip_netconn_do_connect+0x15c>
 800ab56:	4b0e      	ldr	r3, [pc, #56]	@ (800ab90 <lwip_netconn_do_connect+0x168>)
 800ab58:	f240 5274 	movw	r2, #1396	@ 0x574
 800ab5c:	490d      	ldr	r1, [pc, #52]	@ (800ab94 <lwip_netconn_do_connect+0x16c>)
 800ab5e:	480e      	ldr	r0, [pc, #56]	@ (800ab98 <lwip_netconn_do_connect+0x170>)
 800ab60:	f00c f9fc 	bl	8016f5c <iprintf>
              return;
 800ab64:	e00e      	b.n	800ab84 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800ab66:	4b0a      	ldr	r3, [pc, #40]	@ (800ab90 <lwip_netconn_do_connect+0x168>)
 800ab68:	f240 527d 	movw	r2, #1405	@ 0x57d
 800ab6c:	490c      	ldr	r1, [pc, #48]	@ (800aba0 <lwip_netconn_do_connect+0x178>)
 800ab6e:	480a      	ldr	r0, [pc, #40]	@ (800ab98 <lwip_netconn_do_connect+0x170>)
 800ab70:	f00c f9f4 	bl	8016f5c <iprintf>
 800ab74:	23fa      	movs	r3, #250	@ 0xfa
 800ab76:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800ab78:	e000      	b.n	800ab7c <lwip_netconn_do_connect+0x154>
        break;
 800ab7a:	bf00      	nop
    }
  }
  msg->err = err;
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	7dfa      	ldrb	r2, [r7, #23]
 800ab80:	711a      	strb	r2, [r3, #4]
 800ab82:	e000      	b.n	800ab86 <lwip_netconn_do_connect+0x15e>
              return;
 800ab84:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800ab86:	3718      	adds	r7, #24
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	0800a909 	.word	0x0800a909
 800ab90:	08018620 	.word	0x08018620
 800ab94:	08018a10 	.word	0x08018a10
 800ab98:	08018694 	.word	0x08018694
 800ab9c:	2400ce10 	.word	0x2400ce10
 800aba0:	08018a98 	.word	0x08018a98

0800aba4 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7fe ff23 	bl	8009a00 <netconn_err>
 800abba:	4603      	mov	r3, r0
 800abbc:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800abbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d134      	bne.n	800ac30 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d02d      	beq.n	800ac2c <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800abda:	2b20      	cmp	r3, #32
 800abdc:	d123      	bne.n	800ac26 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	689b      	ldr	r3, [r3, #8]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d10c      	bne.n	800ac02 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	685a      	ldr	r2, [r3, #4]
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	689b      	ldr	r3, [r3, #8]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4619      	mov	r1, r3
 800abf6:	4610      	mov	r0, r2
 800abf8:	f00b fd1a 	bl	8016630 <udp_send>
 800abfc:	4603      	mov	r3, r0
 800abfe:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800ac00:	e016      	b.n	800ac30 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	6858      	ldr	r0, [r3, #4]
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	6819      	ldr	r1, [r3, #0]
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	f103 0208 	add.w	r2, r3, #8
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	899b      	ldrh	r3, [r3, #12]
 800ac1c:	f00b fd3c 	bl	8016698 <udp_sendto>
 800ac20:	4603      	mov	r3, r0
 800ac22:	73fb      	strb	r3, [r7, #15]
          break;
 800ac24:	e004      	b.n	800ac30 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800ac26:	23f5      	movs	r3, #245	@ 0xf5
 800ac28:	73fb      	strb	r3, [r7, #15]
          break;
 800ac2a:	e001      	b.n	800ac30 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800ac2c:	23f5      	movs	r3, #245	@ 0xf5
 800ac2e:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	7bfa      	ldrb	r2, [r7, #15]
 800ac34:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ac36:	bf00      	nop
 800ac38:	3710      	adds	r7, #16
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b086      	sub	sp, #24
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d022      	beq.n	800aca0 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ac64:	2b10      	cmp	r3, #16
 800ac66:	d11b      	bne.n	800aca0 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac74:	d202      	bcs.n	800ac7c <lwip_netconn_do_recv+0x3e>
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	e001      	b.n	800ac80 <lwip_netconn_do_recv+0x42>
 800ac7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ac80:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	89fa      	ldrh	r2, [r7, #14]
 800ac8a:	4611      	mov	r1, r2
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f005 fb5f 	bl	8010350 <tcp_recved>
        remaining -= recved;
 800ac92:	89fb      	ldrh	r3, [r7, #14]
 800ac94:	697a      	ldr	r2, [r7, #20]
 800ac96:	1ad3      	subs	r3, r2, r3
 800ac98:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d1e6      	bne.n	800ac6e <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800aca0:	bf00      	nop
 800aca2:	3718      	adds	r7, #24
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b088      	sub	sp, #32
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	460b      	mov	r3, r1
 800acb2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800acb4:	2300      	movs	r3, #0
 800acb6:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d106      	bne.n	800accc <lwip_netconn_do_writemore+0x24>
 800acbe:	4b96      	ldr	r3, [pc, #600]	@ (800af18 <lwip_netconn_do_writemore+0x270>)
 800acc0:	f240 6273 	movw	r2, #1651	@ 0x673
 800acc4:	4995      	ldr	r1, [pc, #596]	@ (800af1c <lwip_netconn_do_writemore+0x274>)
 800acc6:	4896      	ldr	r0, [pc, #600]	@ (800af20 <lwip_netconn_do_writemore+0x278>)
 800acc8:	f00c f948 	bl	8016f5c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	785b      	ldrb	r3, [r3, #1]
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d006      	beq.n	800ace2 <lwip_netconn_do_writemore+0x3a>
 800acd4:	4b90      	ldr	r3, [pc, #576]	@ (800af18 <lwip_netconn_do_writemore+0x270>)
 800acd6:	f240 6274 	movw	r2, #1652	@ 0x674
 800acda:	4992      	ldr	r1, [pc, #584]	@ (800af24 <lwip_netconn_do_writemore+0x27c>)
 800acdc:	4890      	ldr	r0, [pc, #576]	@ (800af20 <lwip_netconn_do_writemore+0x278>)
 800acde:	f00c f93d 	bl	8016f5c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a1b      	ldr	r3, [r3, #32]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d106      	bne.n	800acf8 <lwip_netconn_do_writemore+0x50>
 800acea:	4b8b      	ldr	r3, [pc, #556]	@ (800af18 <lwip_netconn_do_writemore+0x270>)
 800acec:	f240 6275 	movw	r2, #1653	@ 0x675
 800acf0:	498d      	ldr	r1, [pc, #564]	@ (800af28 <lwip_netconn_do_writemore+0x280>)
 800acf2:	488b      	ldr	r0, [pc, #556]	@ (800af20 <lwip_netconn_do_writemore+0x278>)
 800acf4:	f00c f932 	bl	8016f5c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d106      	bne.n	800ad0e <lwip_netconn_do_writemore+0x66>
 800ad00:	4b85      	ldr	r3, [pc, #532]	@ (800af18 <lwip_netconn_do_writemore+0x270>)
 800ad02:	f240 6276 	movw	r2, #1654	@ 0x676
 800ad06:	4989      	ldr	r1, [pc, #548]	@ (800af2c <lwip_netconn_do_writemore+0x284>)
 800ad08:	4885      	ldr	r0, [pc, #532]	@ (800af20 <lwip_netconn_do_writemore+0x278>)
 800ad0a:	f00c f927 	bl	8016f5c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6a1b      	ldr	r3, [r3, #32]
 800ad12:	699a      	ldr	r2, [r3, #24]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6a1b      	ldr	r3, [r3, #32]
 800ad18:	695b      	ldr	r3, [r3, #20]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d306      	bcc.n	800ad2c <lwip_netconn_do_writemore+0x84>
 800ad1e:	4b7e      	ldr	r3, [pc, #504]	@ (800af18 <lwip_netconn_do_writemore+0x270>)
 800ad20:	f240 6277 	movw	r2, #1655	@ 0x677
 800ad24:	4982      	ldr	r1, [pc, #520]	@ (800af30 <lwip_netconn_do_writemore+0x288>)
 800ad26:	487e      	ldr	r0, [pc, #504]	@ (800af20 <lwip_netconn_do_writemore+0x278>)
 800ad28:	f00c f918 	bl	8016f5c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a1b      	ldr	r3, [r3, #32]
 800ad30:	899b      	ldrh	r3, [r3, #12]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d106      	bne.n	800ad44 <lwip_netconn_do_writemore+0x9c>
 800ad36:	4b78      	ldr	r3, [pc, #480]	@ (800af18 <lwip_netconn_do_writemore+0x270>)
 800ad38:	f240 6279 	movw	r2, #1657	@ 0x679
 800ad3c:	497d      	ldr	r1, [pc, #500]	@ (800af34 <lwip_netconn_do_writemore+0x28c>)
 800ad3e:	4878      	ldr	r0, [pc, #480]	@ (800af20 <lwip_netconn_do_writemore+0x278>)
 800ad40:	f00c f90c 	bl	8016f5c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6a1b      	ldr	r3, [r3, #32]
 800ad48:	7f1b      	ldrb	r3, [r3, #28]
 800ad4a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	7f1b      	ldrb	r3, [r3, #28]
 800ad50:	f003 0302 	and.w	r3, r3, #2
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d104      	bne.n	800ad62 <lwip_netconn_do_writemore+0xba>
 800ad58:	7ebb      	ldrb	r3, [r7, #26]
 800ad5a:	f003 0304 	and.w	r3, r3, #4
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d001      	beq.n	800ad66 <lwip_netconn_do_writemore+0xbe>
 800ad62:	2301      	movs	r3, #1
 800ad64:	e000      	b.n	800ad68 <lwip_netconn_do_writemore+0xc0>
 800ad66:	2300      	movs	r3, #0
 800ad68:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6a1b      	ldr	r3, [r3, #32]
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a1b      	ldr	r3, [r3, #32]
 800ad76:	691b      	ldr	r3, [r3, #16]
 800ad78:	4413      	add	r3, r2
 800ad7a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6a1b      	ldr	r3, [r3, #32]
 800ad80:	689b      	ldr	r3, [r3, #8]
 800ad82:	685a      	ldr	r2, [r3, #4]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6a1b      	ldr	r3, [r3, #32]
 800ad88:	691b      	ldr	r3, [r3, #16]
 800ad8a:	1ad3      	subs	r3, r2, r3
 800ad8c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad94:	d307      	bcc.n	800ada6 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800ad96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ad9a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ad9c:	7ebb      	ldrb	r3, [r7, #26]
 800ad9e:	f043 0302 	orr.w	r3, r3, #2
 800ada2:	76bb      	strb	r3, [r7, #26]
 800ada4:	e001      	b.n	800adaa <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800adb2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800adb4:	89fa      	ldrh	r2, [r7, #14]
 800adb6:	8bbb      	ldrh	r3, [r7, #28]
 800adb8:	429a      	cmp	r2, r3
 800adba:	d216      	bcs.n	800adea <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800adbc:	89fb      	ldrh	r3, [r7, #14]
 800adbe:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800adc0:	7e3b      	ldrb	r3, [r7, #24]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d00d      	beq.n	800ade2 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800adc6:	8bbb      	ldrh	r3, [r7, #28]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10e      	bne.n	800adea <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a1b      	ldr	r3, [r3, #32]
 800add0:	699b      	ldr	r3, [r3, #24]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d102      	bne.n	800addc <lwip_netconn_do_writemore+0x134>
 800add6:	f06f 0306 	mvn.w	r3, #6
 800adda:	e000      	b.n	800adde <lwip_netconn_do_writemore+0x136>
 800addc:	2300      	movs	r3, #0
 800adde:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800ade0:	e07d      	b.n	800aede <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800ade2:	7ebb      	ldrb	r3, [r7, #26]
 800ade4:	f043 0302 	orr.w	r3, r3, #2
 800ade8:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6a1b      	ldr	r3, [r3, #32]
 800adee:	691a      	ldr	r2, [r3, #16]
 800adf0:	8bbb      	ldrh	r3, [r7, #28]
 800adf2:	441a      	add	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6a1b      	ldr	r3, [r3, #32]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d906      	bls.n	800ae0e <lwip_netconn_do_writemore+0x166>
 800ae00:	4b45      	ldr	r3, [pc, #276]	@ (800af18 <lwip_netconn_do_writemore+0x270>)
 800ae02:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800ae06:	494c      	ldr	r1, [pc, #304]	@ (800af38 <lwip_netconn_do_writemore+0x290>)
 800ae08:	4845      	ldr	r0, [pc, #276]	@ (800af20 <lwip_netconn_do_writemore+0x278>)
 800ae0a:	f00c f8a7 	bl	8016f5c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ae0e:	8bbb      	ldrh	r3, [r7, #28]
 800ae10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d103      	bne.n	800ae20 <lwip_netconn_do_writemore+0x178>
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae1e:	d209      	bcs.n	800ae34 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ae24:	8bba      	ldrh	r2, [r7, #28]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d10b      	bne.n	800ae42 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a1b      	ldr	r3, [r3, #32]
 800ae2e:	899b      	ldrh	r3, [r3, #12]
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d906      	bls.n	800ae42 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800ae34:	2301      	movs	r3, #1
 800ae36:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ae38:	7ebb      	ldrb	r3, [r7, #26]
 800ae3a:	f043 0302 	orr.w	r3, r3, #2
 800ae3e:	76bb      	strb	r3, [r7, #26]
 800ae40:	e001      	b.n	800ae46 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800ae42:	2300      	movs	r3, #0
 800ae44:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6858      	ldr	r0, [r3, #4]
 800ae4a:	7ebb      	ldrb	r3, [r7, #26]
 800ae4c:	8bba      	ldrh	r2, [r7, #28]
 800ae4e:	6979      	ldr	r1, [r7, #20]
 800ae50:	f009 f99a 	bl	8014188 <tcp_write>
 800ae54:	4603      	mov	r3, r0
 800ae56:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800ae58:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d12c      	bne.n	800aeba <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6a1b      	ldr	r3, [r3, #32]
 800ae64:	6999      	ldr	r1, [r3, #24]
 800ae66:	8bba      	ldrh	r2, [r7, #28]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6a1b      	ldr	r3, [r3, #32]
 800ae6c:	440a      	add	r2, r1
 800ae6e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6a1b      	ldr	r3, [r3, #32]
 800ae74:	6919      	ldr	r1, [r3, #16]
 800ae76:	8bba      	ldrh	r2, [r7, #28]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6a1b      	ldr	r3, [r3, #32]
 800ae7c:	440a      	add	r2, r1
 800ae7e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6a1b      	ldr	r3, [r3, #32]
 800ae84:	691a      	ldr	r2, [r3, #16]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6a1b      	ldr	r3, [r3, #32]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d113      	bne.n	800aeba <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6a1b      	ldr	r3, [r3, #32]
 800ae96:	899a      	ldrh	r2, [r3, #12]
 800ae98:	3a01      	subs	r2, #1
 800ae9a:	b292      	uxth	r2, r2
 800ae9c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6a1b      	ldr	r3, [r3, #32]
 800aea2:	899b      	ldrh	r3, [r3, #12]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d008      	beq.n	800aeba <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6a1b      	ldr	r3, [r3, #32]
 800aeac:	689a      	ldr	r2, [r3, #8]
 800aeae:	3208      	adds	r2, #8
 800aeb0:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a1b      	ldr	r3, [r3, #32]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800aeba:	7e7b      	ldrb	r3, [r7, #25]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d004      	beq.n	800aeca <lwip_netconn_do_writemore+0x222>
 800aec0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f43f af50 	beq.w	800ad6a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800aeca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d004      	beq.n	800aedc <lwip_netconn_do_writemore+0x234>
 800aed2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeda:	d146      	bne.n	800af6a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800aedc:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800aede:	7e3b      	ldrb	r3, [r7, #24]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d02b      	beq.n	800af3c <lwip_netconn_do_writemore+0x294>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6a1b      	ldr	r3, [r3, #32]
 800aee8:	699a      	ldr	r2, [r3, #24]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6a1b      	ldr	r3, [r3, #32]
 800aeee:	695b      	ldr	r3, [r3, #20]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d223      	bcs.n	800af3c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d005      	beq.n	800af08 <lwip_netconn_do_writemore+0x260>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af00:	2200      	movs	r2, #0
 800af02:	2103      	movs	r1, #3
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	7f1b      	ldrb	r3, [r3, #28]
 800af0c:	f043 0310 	orr.w	r3, r3, #16
 800af10:	b2da      	uxtb	r2, r3
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	771a      	strb	r2, [r3, #28]
 800af16:	e028      	b.n	800af6a <lwip_netconn_do_writemore+0x2c2>
 800af18:	08018620 	.word	0x08018620
 800af1c:	080187a8 	.word	0x080187a8
 800af20:	08018694 	.word	0x08018694
 800af24:	08018ab0 	.word	0x08018ab0
 800af28:	080187b8 	.word	0x080187b8
 800af2c:	08018ad0 	.word	0x08018ad0
 800af30:	08018ae8 	.word	0x08018ae8
 800af34:	08018b28 	.word	0x08018b28
 800af38:	08018b50 	.word	0x08018b50
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800af44:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800af48:	d305      	bcc.n	800af56 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800af52:	2b04      	cmp	r3, #4
 800af54:	d909      	bls.n	800af6a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d005      	beq.n	800af6a <lwip_netconn_do_writemore+0x2c2>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af62:	2200      	movs	r2, #0
 800af64:	2103      	movs	r1, #3
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800af6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d11d      	bne.n	800afae <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a1b      	ldr	r3, [r3, #32]
 800af76:	699a      	ldr	r2, [r3, #24]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6a1b      	ldr	r3, [r3, #32]
 800af7c:	695b      	ldr	r3, [r3, #20]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d002      	beq.n	800af88 <lwip_netconn_do_writemore+0x2e0>
 800af82:	7e3b      	ldrb	r3, [r7, #24]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d001      	beq.n	800af8c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800af88:	2301      	movs	r3, #1
 800af8a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	4618      	mov	r0, r3
 800af92:	f009 fee3 	bl	8014d5c <tcp_output>
 800af96:	4603      	mov	r3, r0
 800af98:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800af9a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800af9e:	f113 0f04 	cmn.w	r3, #4
 800afa2:	d12c      	bne.n	800affe <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800afa4:	7b3b      	ldrb	r3, [r7, #12]
 800afa6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800afa8:	2301      	movs	r3, #1
 800afaa:	76fb      	strb	r3, [r7, #27]
 800afac:	e027      	b.n	800affe <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800afae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800afb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afb6:	d120      	bne.n	800affa <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f009 fecd 	bl	8014d5c <tcp_output>
 800afc2:	4603      	mov	r3, r0
 800afc4:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800afc6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800afca:	f113 0f04 	cmn.w	r3, #4
 800afce:	d104      	bne.n	800afda <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800afd0:	7b7b      	ldrb	r3, [r7, #13]
 800afd2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800afd4:	2301      	movs	r3, #1
 800afd6:	76fb      	strb	r3, [r7, #27]
 800afd8:	e011      	b.n	800affe <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800afda:	7e3b      	ldrb	r3, [r7, #24]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d00e      	beq.n	800affe <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6a1b      	ldr	r3, [r3, #32]
 800afe4:	699b      	ldr	r3, [r3, #24]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d102      	bne.n	800aff0 <lwip_netconn_do_writemore+0x348>
 800afea:	f06f 0306 	mvn.w	r3, #6
 800afee:	e000      	b.n	800aff2 <lwip_netconn_do_writemore+0x34a>
 800aff0:	2300      	movs	r3, #0
 800aff2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800aff4:	2301      	movs	r3, #1
 800aff6:	76fb      	strb	r3, [r7, #27]
 800aff8:	e001      	b.n	800affe <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800affa:	2301      	movs	r3, #1
 800affc:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800affe:	7efb      	ldrb	r3, [r7, #27]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d015      	beq.n	800b030 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6a1b      	ldr	r3, [r3, #32]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	330c      	adds	r3, #12
 800b00c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a1b      	ldr	r3, [r3, #32]
 800b012:	7ffa      	ldrb	r2, [r7, #31]
 800b014:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2200      	movs	r2, #0
 800b01a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2200      	movs	r2, #0
 800b020:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b022:	78fb      	ldrb	r3, [r7, #3]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d006      	beq.n	800b036 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b028:	68b8      	ldr	r0, [r7, #8]
 800b02a:	f004 fc89 	bl	800f940 <sys_sem_signal>
 800b02e:	e002      	b.n	800b036 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b030:	f04f 33ff 	mov.w	r3, #4294967295
 800b034:	e000      	b.n	800b038 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800b036:	2300      	movs	r3, #0
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3720      	adds	r7, #32
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	785b      	ldrb	r3, [r3, #1]
 800b052:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d069      	beq.n	800b132 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	781b      	ldrb	r3, [r3, #0]
 800b064:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b068:	2b10      	cmp	r3, #16
 800b06a:	d162      	bne.n	800b132 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b070:	2b03      	cmp	r3, #3
 800b072:	d002      	beq.n	800b07a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b074:	7afb      	ldrb	r3, [r7, #11]
 800b076:	2b02      	cmp	r3, #2
 800b078:	d05b      	beq.n	800b132 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b07a:	7afb      	ldrb	r3, [r7, #11]
 800b07c:	2b03      	cmp	r3, #3
 800b07e:	d103      	bne.n	800b088 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	22f5      	movs	r2, #245	@ 0xf5
 800b084:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b086:	e059      	b.n	800b13c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b088:	7afb      	ldrb	r3, [r7, #11]
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d103      	bne.n	800b096 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	22fb      	movs	r2, #251	@ 0xfb
 800b092:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b094:	e052      	b.n	800b13c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	7a1b      	ldrb	r3, [r3, #8]
 800b09a:	f003 0301 	and.w	r3, r3, #1
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d004      	beq.n	800b0ac <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7ff f928 	bl	800a2fc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	6a1b      	ldr	r3, [r3, #32]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d006      	beq.n	800b0c4 <lwip_netconn_do_close+0x84>
 800b0b6:	4b23      	ldr	r3, [pc, #140]	@ (800b144 <lwip_netconn_do_close+0x104>)
 800b0b8:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800b0bc:	4922      	ldr	r1, [pc, #136]	@ (800b148 <lwip_netconn_do_close+0x108>)
 800b0be:	4823      	ldr	r0, [pc, #140]	@ (800b14c <lwip_netconn_do_close+0x10c>)
 800b0c0:	f00b ff4c 	bl	8016f5c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2204      	movs	r2, #4
 800b0ca:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2100      	movs	r1, #0
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7ff f98c 	bl	800a3f8 <lwip_netconn_do_close_internal>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d029      	beq.n	800b13a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	785b      	ldrb	r3, [r3, #1]
 800b0ec:	2b04      	cmp	r3, #4
 800b0ee:	d006      	beq.n	800b0fe <lwip_netconn_do_close+0xbe>
 800b0f0:	4b14      	ldr	r3, [pc, #80]	@ (800b144 <lwip_netconn_do_close+0x104>)
 800b0f2:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800b0f6:	4916      	ldr	r1, [pc, #88]	@ (800b150 <lwip_netconn_do_close+0x110>)
 800b0f8:	4814      	ldr	r0, [pc, #80]	@ (800b14c <lwip_netconn_do_close+0x10c>)
 800b0fa:	f00b ff2f 	bl	8016f5c <iprintf>
        UNLOCK_TCPIP_CORE();
 800b0fe:	4815      	ldr	r0, [pc, #84]	@ (800b154 <lwip_netconn_do_close+0x114>)
 800b100:	f004 fc87 	bl	800fa12 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	330c      	adds	r3, #12
 800b10a:	2100      	movs	r1, #0
 800b10c:	4618      	mov	r0, r3
 800b10e:	f004 fbe6 	bl	800f8de <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b112:	4810      	ldr	r0, [pc, #64]	@ (800b154 <lwip_netconn_do_close+0x114>)
 800b114:	f004 fc6e 	bl	800f9f4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	785b      	ldrb	r3, [r3, #1]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d00b      	beq.n	800b13a <lwip_netconn_do_close+0xfa>
 800b122:	4b08      	ldr	r3, [pc, #32]	@ (800b144 <lwip_netconn_do_close+0x104>)
 800b124:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800b128:	4909      	ldr	r1, [pc, #36]	@ (800b150 <lwip_netconn_do_close+0x110>)
 800b12a:	4808      	ldr	r0, [pc, #32]	@ (800b14c <lwip_netconn_do_close+0x10c>)
 800b12c:	f00b ff16 	bl	8016f5c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b130:	e003      	b.n	800b13a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	22f5      	movs	r2, #245	@ 0xf5
 800b136:	711a      	strb	r2, [r3, #4]
 800b138:	e000      	b.n	800b13c <lwip_netconn_do_close+0xfc>
      return;
 800b13a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	08018620 	.word	0x08018620
 800b148:	080189f4 	.word	0x080189f4
 800b14c:	08018694 	.word	0x08018694
 800b150:	08018a10 	.word	0x08018a10
 800b154:	2400ce10 	.word	0x2400ce10

0800b158 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b158:	b480      	push	{r7}
 800b15a:	b083      	sub	sp, #12
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	4603      	mov	r3, r0
 800b160:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b166:	021b      	lsls	r3, r3, #8
 800b168:	b21a      	sxth	r2, r3
 800b16a:	88fb      	ldrh	r3, [r7, #6]
 800b16c:	0a1b      	lsrs	r3, r3, #8
 800b16e:	b29b      	uxth	r3, r3
 800b170:	b21b      	sxth	r3, r3
 800b172:	4313      	orrs	r3, r2
 800b174:	b21b      	sxth	r3, r3
 800b176:	b29b      	uxth	r3, r3
}
 800b178:	4618      	mov	r0, r3
 800b17a:	370c      	adds	r7, #12
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	061a      	lsls	r2, r3, #24
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	021b      	lsls	r3, r3, #8
 800b194:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b198:	431a      	orrs	r2, r3
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	0a1b      	lsrs	r3, r3, #8
 800b19e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b1a2:	431a      	orrs	r2, r3
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	0e1b      	lsrs	r3, r3, #24
 800b1a8:	4313      	orrs	r3, r2
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	370c      	adds	r7, #12
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr
	...

0800b1b8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800b1c0:	4915      	ldr	r1, [pc, #84]	@ (800b218 <etharp_free_entry+0x60>)
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	005b      	lsls	r3, r3, #1
 800b1c8:	4413      	add	r3, r2
 800b1ca:	00db      	lsls	r3, r3, #3
 800b1cc:	440b      	add	r3, r1
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d013      	beq.n	800b1fc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800b1d4:	4910      	ldr	r1, [pc, #64]	@ (800b218 <etharp_free_entry+0x60>)
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	4613      	mov	r3, r2
 800b1da:	005b      	lsls	r3, r3, #1
 800b1dc:	4413      	add	r3, r2
 800b1de:	00db      	lsls	r3, r3, #3
 800b1e0:	440b      	add	r3, r1
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f003 ff6d 	bl	800f0c4 <pbuf_free>
    arp_table[i].q = NULL;
 800b1ea:	490b      	ldr	r1, [pc, #44]	@ (800b218 <etharp_free_entry+0x60>)
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	4613      	mov	r3, r2
 800b1f0:	005b      	lsls	r3, r3, #1
 800b1f2:	4413      	add	r3, r2
 800b1f4:	00db      	lsls	r3, r3, #3
 800b1f6:	440b      	add	r3, r1
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b1fc:	4906      	ldr	r1, [pc, #24]	@ (800b218 <etharp_free_entry+0x60>)
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	4613      	mov	r3, r2
 800b202:	005b      	lsls	r3, r3, #1
 800b204:	4413      	add	r3, r2
 800b206:	00db      	lsls	r3, r3, #3
 800b208:	440b      	add	r3, r1
 800b20a:	3314      	adds	r3, #20
 800b20c:	2200      	movs	r2, #0
 800b20e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800b210:	bf00      	nop
 800b212:	3708      	adds	r7, #8
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}
 800b218:	24009bb0 	.word	0x24009bb0

0800b21c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b222:	2300      	movs	r3, #0
 800b224:	607b      	str	r3, [r7, #4]
 800b226:	e096      	b.n	800b356 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800b228:	494f      	ldr	r1, [pc, #316]	@ (800b368 <etharp_tmr+0x14c>)
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	4613      	mov	r3, r2
 800b22e:	005b      	lsls	r3, r3, #1
 800b230:	4413      	add	r3, r2
 800b232:	00db      	lsls	r3, r3, #3
 800b234:	440b      	add	r3, r1
 800b236:	3314      	adds	r3, #20
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800b23c:	78fb      	ldrb	r3, [r7, #3]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	f000 8086 	beq.w	800b350 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800b244:	4948      	ldr	r1, [pc, #288]	@ (800b368 <etharp_tmr+0x14c>)
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	4613      	mov	r3, r2
 800b24a:	005b      	lsls	r3, r3, #1
 800b24c:	4413      	add	r3, r2
 800b24e:	00db      	lsls	r3, r3, #3
 800b250:	440b      	add	r3, r1
 800b252:	3312      	adds	r3, #18
 800b254:	881b      	ldrh	r3, [r3, #0]
 800b256:	3301      	adds	r3, #1
 800b258:	b298      	uxth	r0, r3
 800b25a:	4943      	ldr	r1, [pc, #268]	@ (800b368 <etharp_tmr+0x14c>)
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	4613      	mov	r3, r2
 800b260:	005b      	lsls	r3, r3, #1
 800b262:	4413      	add	r3, r2
 800b264:	00db      	lsls	r3, r3, #3
 800b266:	440b      	add	r3, r1
 800b268:	3312      	adds	r3, #18
 800b26a:	4602      	mov	r2, r0
 800b26c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b26e:	493e      	ldr	r1, [pc, #248]	@ (800b368 <etharp_tmr+0x14c>)
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	4613      	mov	r3, r2
 800b274:	005b      	lsls	r3, r3, #1
 800b276:	4413      	add	r3, r2
 800b278:	00db      	lsls	r3, r3, #3
 800b27a:	440b      	add	r3, r1
 800b27c:	3312      	adds	r3, #18
 800b27e:	881b      	ldrh	r3, [r3, #0]
 800b280:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800b284:	d215      	bcs.n	800b2b2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b286:	4938      	ldr	r1, [pc, #224]	@ (800b368 <etharp_tmr+0x14c>)
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	4613      	mov	r3, r2
 800b28c:	005b      	lsls	r3, r3, #1
 800b28e:	4413      	add	r3, r2
 800b290:	00db      	lsls	r3, r3, #3
 800b292:	440b      	add	r3, r1
 800b294:	3314      	adds	r3, #20
 800b296:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d10e      	bne.n	800b2ba <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800b29c:	4932      	ldr	r1, [pc, #200]	@ (800b368 <etharp_tmr+0x14c>)
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	4613      	mov	r3, r2
 800b2a2:	005b      	lsls	r3, r3, #1
 800b2a4:	4413      	add	r3, r2
 800b2a6:	00db      	lsls	r3, r3, #3
 800b2a8:	440b      	add	r3, r1
 800b2aa:	3312      	adds	r3, #18
 800b2ac:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b2ae:	2b04      	cmp	r3, #4
 800b2b0:	d903      	bls.n	800b2ba <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f7ff ff80 	bl	800b1b8 <etharp_free_entry>
 800b2b8:	e04a      	b.n	800b350 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800b2ba:	492b      	ldr	r1, [pc, #172]	@ (800b368 <etharp_tmr+0x14c>)
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	4613      	mov	r3, r2
 800b2c0:	005b      	lsls	r3, r3, #1
 800b2c2:	4413      	add	r3, r2
 800b2c4:	00db      	lsls	r3, r3, #3
 800b2c6:	440b      	add	r3, r1
 800b2c8:	3314      	adds	r3, #20
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	2b03      	cmp	r3, #3
 800b2ce:	d10a      	bne.n	800b2e6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b2d0:	4925      	ldr	r1, [pc, #148]	@ (800b368 <etharp_tmr+0x14c>)
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	4613      	mov	r3, r2
 800b2d6:	005b      	lsls	r3, r3, #1
 800b2d8:	4413      	add	r3, r2
 800b2da:	00db      	lsls	r3, r3, #3
 800b2dc:	440b      	add	r3, r1
 800b2de:	3314      	adds	r3, #20
 800b2e0:	2204      	movs	r2, #4
 800b2e2:	701a      	strb	r2, [r3, #0]
 800b2e4:	e034      	b.n	800b350 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b2e6:	4920      	ldr	r1, [pc, #128]	@ (800b368 <etharp_tmr+0x14c>)
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	005b      	lsls	r3, r3, #1
 800b2ee:	4413      	add	r3, r2
 800b2f0:	00db      	lsls	r3, r3, #3
 800b2f2:	440b      	add	r3, r1
 800b2f4:	3314      	adds	r3, #20
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	2b04      	cmp	r3, #4
 800b2fa:	d10a      	bne.n	800b312 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800b2fc:	491a      	ldr	r1, [pc, #104]	@ (800b368 <etharp_tmr+0x14c>)
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	4613      	mov	r3, r2
 800b302:	005b      	lsls	r3, r3, #1
 800b304:	4413      	add	r3, r2
 800b306:	00db      	lsls	r3, r3, #3
 800b308:	440b      	add	r3, r1
 800b30a:	3314      	adds	r3, #20
 800b30c:	2202      	movs	r2, #2
 800b30e:	701a      	strb	r2, [r3, #0]
 800b310:	e01e      	b.n	800b350 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b312:	4915      	ldr	r1, [pc, #84]	@ (800b368 <etharp_tmr+0x14c>)
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	4613      	mov	r3, r2
 800b318:	005b      	lsls	r3, r3, #1
 800b31a:	4413      	add	r3, r2
 800b31c:	00db      	lsls	r3, r3, #3
 800b31e:	440b      	add	r3, r1
 800b320:	3314      	adds	r3, #20
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	2b01      	cmp	r3, #1
 800b326:	d113      	bne.n	800b350 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800b328:	490f      	ldr	r1, [pc, #60]	@ (800b368 <etharp_tmr+0x14c>)
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	4613      	mov	r3, r2
 800b32e:	005b      	lsls	r3, r3, #1
 800b330:	4413      	add	r3, r2
 800b332:	00db      	lsls	r3, r3, #3
 800b334:	440b      	add	r3, r1
 800b336:	3308      	adds	r3, #8
 800b338:	6818      	ldr	r0, [r3, #0]
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	4613      	mov	r3, r2
 800b33e:	005b      	lsls	r3, r3, #1
 800b340:	4413      	add	r3, r2
 800b342:	00db      	lsls	r3, r3, #3
 800b344:	4a08      	ldr	r2, [pc, #32]	@ (800b368 <etharp_tmr+0x14c>)
 800b346:	4413      	add	r3, r2
 800b348:	3304      	adds	r3, #4
 800b34a:	4619      	mov	r1, r3
 800b34c:	f000 fe6e 	bl	800c02c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	3301      	adds	r3, #1
 800b354:	607b      	str	r3, [r7, #4]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2b09      	cmp	r3, #9
 800b35a:	f77f af65 	ble.w	800b228 <etharp_tmr+0xc>
      }
    }
  }
}
 800b35e:	bf00      	nop
 800b360:	bf00      	nop
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	24009bb0 	.word	0x24009bb0

0800b36c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b08a      	sub	sp, #40	@ 0x28
 800b370:	af00      	add	r7, sp, #0
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	460b      	mov	r3, r1
 800b376:	607a      	str	r2, [r7, #4]
 800b378:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800b37a:	230a      	movs	r3, #10
 800b37c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800b37e:	230a      	movs	r3, #10
 800b380:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800b382:	230a      	movs	r3, #10
 800b384:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800b386:	2300      	movs	r3, #0
 800b388:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800b38a:	230a      	movs	r3, #10
 800b38c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800b38e:	2300      	movs	r3, #0
 800b390:	83bb      	strh	r3, [r7, #28]
 800b392:	2300      	movs	r3, #0
 800b394:	837b      	strh	r3, [r7, #26]
 800b396:	2300      	movs	r3, #0
 800b398:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b39a:	2300      	movs	r3, #0
 800b39c:	843b      	strh	r3, [r7, #32]
 800b39e:	e0ae      	b.n	800b4fe <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800b3a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b3a4:	49a6      	ldr	r1, [pc, #664]	@ (800b640 <etharp_find_entry+0x2d4>)
 800b3a6:	4613      	mov	r3, r2
 800b3a8:	005b      	lsls	r3, r3, #1
 800b3aa:	4413      	add	r3, r2
 800b3ac:	00db      	lsls	r3, r3, #3
 800b3ae:	440b      	add	r3, r1
 800b3b0:	3314      	adds	r3, #20
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800b3b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800b3ba:	2b0a      	cmp	r3, #10
 800b3bc:	d105      	bne.n	800b3ca <etharp_find_entry+0x5e>
 800b3be:	7dfb      	ldrb	r3, [r7, #23]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d102      	bne.n	800b3ca <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800b3c4:	8c3b      	ldrh	r3, [r7, #32]
 800b3c6:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b3c8:	e095      	b.n	800b4f6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800b3ca:	7dfb      	ldrb	r3, [r7, #23]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	f000 8092 	beq.w	800b4f6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800b3d2:	7dfb      	ldrb	r3, [r7, #23]
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d009      	beq.n	800b3ec <etharp_find_entry+0x80>
 800b3d8:	7dfb      	ldrb	r3, [r7, #23]
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d806      	bhi.n	800b3ec <etharp_find_entry+0x80>
 800b3de:	4b99      	ldr	r3, [pc, #612]	@ (800b644 <etharp_find_entry+0x2d8>)
 800b3e0:	f240 1223 	movw	r2, #291	@ 0x123
 800b3e4:	4998      	ldr	r1, [pc, #608]	@ (800b648 <etharp_find_entry+0x2dc>)
 800b3e6:	4899      	ldr	r0, [pc, #612]	@ (800b64c <etharp_find_entry+0x2e0>)
 800b3e8:	f00b fdb8 	bl	8016f5c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d020      	beq.n	800b434 <etharp_find_entry+0xc8>
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	6819      	ldr	r1, [r3, #0]
 800b3f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b3fa:	4891      	ldr	r0, [pc, #580]	@ (800b640 <etharp_find_entry+0x2d4>)
 800b3fc:	4613      	mov	r3, r2
 800b3fe:	005b      	lsls	r3, r3, #1
 800b400:	4413      	add	r3, r2
 800b402:	00db      	lsls	r3, r3, #3
 800b404:	4403      	add	r3, r0
 800b406:	3304      	adds	r3, #4
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4299      	cmp	r1, r3
 800b40c:	d112      	bne.n	800b434 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d00c      	beq.n	800b42e <etharp_find_entry+0xc2>
 800b414:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b418:	4989      	ldr	r1, [pc, #548]	@ (800b640 <etharp_find_entry+0x2d4>)
 800b41a:	4613      	mov	r3, r2
 800b41c:	005b      	lsls	r3, r3, #1
 800b41e:	4413      	add	r3, r2
 800b420:	00db      	lsls	r3, r3, #3
 800b422:	440b      	add	r3, r1
 800b424:	3308      	adds	r3, #8
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d102      	bne.n	800b434 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800b42e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b432:	e100      	b.n	800b636 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800b434:	7dfb      	ldrb	r3, [r7, #23]
 800b436:	2b01      	cmp	r3, #1
 800b438:	d140      	bne.n	800b4bc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800b43a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b43e:	4980      	ldr	r1, [pc, #512]	@ (800b640 <etharp_find_entry+0x2d4>)
 800b440:	4613      	mov	r3, r2
 800b442:	005b      	lsls	r3, r3, #1
 800b444:	4413      	add	r3, r2
 800b446:	00db      	lsls	r3, r3, #3
 800b448:	440b      	add	r3, r1
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d01a      	beq.n	800b486 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800b450:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b454:	497a      	ldr	r1, [pc, #488]	@ (800b640 <etharp_find_entry+0x2d4>)
 800b456:	4613      	mov	r3, r2
 800b458:	005b      	lsls	r3, r3, #1
 800b45a:	4413      	add	r3, r2
 800b45c:	00db      	lsls	r3, r3, #3
 800b45e:	440b      	add	r3, r1
 800b460:	3312      	adds	r3, #18
 800b462:	881b      	ldrh	r3, [r3, #0]
 800b464:	8bba      	ldrh	r2, [r7, #28]
 800b466:	429a      	cmp	r2, r3
 800b468:	d845      	bhi.n	800b4f6 <etharp_find_entry+0x18a>
            old_queue = i;
 800b46a:	8c3b      	ldrh	r3, [r7, #32]
 800b46c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800b46e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b472:	4973      	ldr	r1, [pc, #460]	@ (800b640 <etharp_find_entry+0x2d4>)
 800b474:	4613      	mov	r3, r2
 800b476:	005b      	lsls	r3, r3, #1
 800b478:	4413      	add	r3, r2
 800b47a:	00db      	lsls	r3, r3, #3
 800b47c:	440b      	add	r3, r1
 800b47e:	3312      	adds	r3, #18
 800b480:	881b      	ldrh	r3, [r3, #0]
 800b482:	83bb      	strh	r3, [r7, #28]
 800b484:	e037      	b.n	800b4f6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800b486:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b48a:	496d      	ldr	r1, [pc, #436]	@ (800b640 <etharp_find_entry+0x2d4>)
 800b48c:	4613      	mov	r3, r2
 800b48e:	005b      	lsls	r3, r3, #1
 800b490:	4413      	add	r3, r2
 800b492:	00db      	lsls	r3, r3, #3
 800b494:	440b      	add	r3, r1
 800b496:	3312      	adds	r3, #18
 800b498:	881b      	ldrh	r3, [r3, #0]
 800b49a:	8b7a      	ldrh	r2, [r7, #26]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d82a      	bhi.n	800b4f6 <etharp_find_entry+0x18a>
            old_pending = i;
 800b4a0:	8c3b      	ldrh	r3, [r7, #32]
 800b4a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800b4a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b4a8:	4965      	ldr	r1, [pc, #404]	@ (800b640 <etharp_find_entry+0x2d4>)
 800b4aa:	4613      	mov	r3, r2
 800b4ac:	005b      	lsls	r3, r3, #1
 800b4ae:	4413      	add	r3, r2
 800b4b0:	00db      	lsls	r3, r3, #3
 800b4b2:	440b      	add	r3, r1
 800b4b4:	3312      	adds	r3, #18
 800b4b6:	881b      	ldrh	r3, [r3, #0]
 800b4b8:	837b      	strh	r3, [r7, #26]
 800b4ba:	e01c      	b.n	800b4f6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800b4bc:	7dfb      	ldrb	r3, [r7, #23]
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d919      	bls.n	800b4f6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800b4c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b4c6:	495e      	ldr	r1, [pc, #376]	@ (800b640 <etharp_find_entry+0x2d4>)
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	005b      	lsls	r3, r3, #1
 800b4cc:	4413      	add	r3, r2
 800b4ce:	00db      	lsls	r3, r3, #3
 800b4d0:	440b      	add	r3, r1
 800b4d2:	3312      	adds	r3, #18
 800b4d4:	881b      	ldrh	r3, [r3, #0]
 800b4d6:	8b3a      	ldrh	r2, [r7, #24]
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d80c      	bhi.n	800b4f6 <etharp_find_entry+0x18a>
            old_stable = i;
 800b4dc:	8c3b      	ldrh	r3, [r7, #32]
 800b4de:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800b4e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b4e4:	4956      	ldr	r1, [pc, #344]	@ (800b640 <etharp_find_entry+0x2d4>)
 800b4e6:	4613      	mov	r3, r2
 800b4e8:	005b      	lsls	r3, r3, #1
 800b4ea:	4413      	add	r3, r2
 800b4ec:	00db      	lsls	r3, r3, #3
 800b4ee:	440b      	add	r3, r1
 800b4f0:	3312      	adds	r3, #18
 800b4f2:	881b      	ldrh	r3, [r3, #0]
 800b4f4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b4f6:	8c3b      	ldrh	r3, [r7, #32]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	843b      	strh	r3, [r7, #32]
 800b4fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b502:	2b09      	cmp	r3, #9
 800b504:	f77f af4c 	ble.w	800b3a0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800b508:	7afb      	ldrb	r3, [r7, #11]
 800b50a:	f003 0302 	and.w	r3, r3, #2
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d108      	bne.n	800b524 <etharp_find_entry+0x1b8>
 800b512:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800b516:	2b0a      	cmp	r3, #10
 800b518:	d107      	bne.n	800b52a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800b51a:	7afb      	ldrb	r3, [r7, #11]
 800b51c:	f003 0301 	and.w	r3, r3, #1
 800b520:	2b00      	cmp	r3, #0
 800b522:	d102      	bne.n	800b52a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800b524:	f04f 33ff 	mov.w	r3, #4294967295
 800b528:	e085      	b.n	800b636 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800b52a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800b52e:	2b09      	cmp	r3, #9
 800b530:	dc02      	bgt.n	800b538 <etharp_find_entry+0x1cc>
    i = empty;
 800b532:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b534:	843b      	strh	r3, [r7, #32]
 800b536:	e039      	b.n	800b5ac <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800b538:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800b53c:	2b09      	cmp	r3, #9
 800b53e:	dc14      	bgt.n	800b56a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800b540:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b542:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800b544:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b548:	493d      	ldr	r1, [pc, #244]	@ (800b640 <etharp_find_entry+0x2d4>)
 800b54a:	4613      	mov	r3, r2
 800b54c:	005b      	lsls	r3, r3, #1
 800b54e:	4413      	add	r3, r2
 800b550:	00db      	lsls	r3, r3, #3
 800b552:	440b      	add	r3, r1
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d018      	beq.n	800b58c <etharp_find_entry+0x220>
 800b55a:	4b3a      	ldr	r3, [pc, #232]	@ (800b644 <etharp_find_entry+0x2d8>)
 800b55c:	f240 126d 	movw	r2, #365	@ 0x16d
 800b560:	493b      	ldr	r1, [pc, #236]	@ (800b650 <etharp_find_entry+0x2e4>)
 800b562:	483a      	ldr	r0, [pc, #232]	@ (800b64c <etharp_find_entry+0x2e0>)
 800b564:	f00b fcfa 	bl	8016f5c <iprintf>
 800b568:	e010      	b.n	800b58c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800b56a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800b56e:	2b09      	cmp	r3, #9
 800b570:	dc02      	bgt.n	800b578 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800b572:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b574:	843b      	strh	r3, [r7, #32]
 800b576:	e009      	b.n	800b58c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800b578:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b57c:	2b09      	cmp	r3, #9
 800b57e:	dc02      	bgt.n	800b586 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800b580:	8bfb      	ldrh	r3, [r7, #30]
 800b582:	843b      	strh	r3, [r7, #32]
 800b584:	e002      	b.n	800b58c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800b586:	f04f 33ff 	mov.w	r3, #4294967295
 800b58a:	e054      	b.n	800b636 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b58c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b590:	2b09      	cmp	r3, #9
 800b592:	dd06      	ble.n	800b5a2 <etharp_find_entry+0x236>
 800b594:	4b2b      	ldr	r3, [pc, #172]	@ (800b644 <etharp_find_entry+0x2d8>)
 800b596:	f240 127f 	movw	r2, #383	@ 0x17f
 800b59a:	492e      	ldr	r1, [pc, #184]	@ (800b654 <etharp_find_entry+0x2e8>)
 800b59c:	482b      	ldr	r0, [pc, #172]	@ (800b64c <etharp_find_entry+0x2e0>)
 800b59e:	f00b fcdd 	bl	8016f5c <iprintf>
    etharp_free_entry(i);
 800b5a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7ff fe06 	bl	800b1b8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b5ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b5b0:	2b09      	cmp	r3, #9
 800b5b2:	dd06      	ble.n	800b5c2 <etharp_find_entry+0x256>
 800b5b4:	4b23      	ldr	r3, [pc, #140]	@ (800b644 <etharp_find_entry+0x2d8>)
 800b5b6:	f240 1283 	movw	r2, #387	@ 0x183
 800b5ba:	4926      	ldr	r1, [pc, #152]	@ (800b654 <etharp_find_entry+0x2e8>)
 800b5bc:	4823      	ldr	r0, [pc, #140]	@ (800b64c <etharp_find_entry+0x2e0>)
 800b5be:	f00b fccd 	bl	8016f5c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800b5c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b5c6:	491e      	ldr	r1, [pc, #120]	@ (800b640 <etharp_find_entry+0x2d4>)
 800b5c8:	4613      	mov	r3, r2
 800b5ca:	005b      	lsls	r3, r3, #1
 800b5cc:	4413      	add	r3, r2
 800b5ce:	00db      	lsls	r3, r3, #3
 800b5d0:	440b      	add	r3, r1
 800b5d2:	3314      	adds	r3, #20
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d006      	beq.n	800b5e8 <etharp_find_entry+0x27c>
 800b5da:	4b1a      	ldr	r3, [pc, #104]	@ (800b644 <etharp_find_entry+0x2d8>)
 800b5dc:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800b5e0:	491d      	ldr	r1, [pc, #116]	@ (800b658 <etharp_find_entry+0x2ec>)
 800b5e2:	481a      	ldr	r0, [pc, #104]	@ (800b64c <etharp_find_entry+0x2e0>)
 800b5e4:	f00b fcba 	bl	8016f5c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d00b      	beq.n	800b606 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800b5ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	6819      	ldr	r1, [r3, #0]
 800b5f6:	4812      	ldr	r0, [pc, #72]	@ (800b640 <etharp_find_entry+0x2d4>)
 800b5f8:	4613      	mov	r3, r2
 800b5fa:	005b      	lsls	r3, r3, #1
 800b5fc:	4413      	add	r3, r2
 800b5fe:	00db      	lsls	r3, r3, #3
 800b600:	4403      	add	r3, r0
 800b602:	3304      	adds	r3, #4
 800b604:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800b606:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b60a:	490d      	ldr	r1, [pc, #52]	@ (800b640 <etharp_find_entry+0x2d4>)
 800b60c:	4613      	mov	r3, r2
 800b60e:	005b      	lsls	r3, r3, #1
 800b610:	4413      	add	r3, r2
 800b612:	00db      	lsls	r3, r3, #3
 800b614:	440b      	add	r3, r1
 800b616:	3312      	adds	r3, #18
 800b618:	2200      	movs	r2, #0
 800b61a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800b61c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b620:	4907      	ldr	r1, [pc, #28]	@ (800b640 <etharp_find_entry+0x2d4>)
 800b622:	4613      	mov	r3, r2
 800b624:	005b      	lsls	r3, r3, #1
 800b626:	4413      	add	r3, r2
 800b628:	00db      	lsls	r3, r3, #3
 800b62a:	440b      	add	r3, r1
 800b62c:	3308      	adds	r3, #8
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800b632:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800b636:	4618      	mov	r0, r3
 800b638:	3728      	adds	r7, #40	@ 0x28
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	24009bb0 	.word	0x24009bb0
 800b644:	08018ba8 	.word	0x08018ba8
 800b648:	08018c14 	.word	0x08018c14
 800b64c:	08018c54 	.word	0x08018c54
 800b650:	08018c7c 	.word	0x08018c7c
 800b654:	08018c94 	.word	0x08018c94
 800b658:	08018ca8 	.word	0x08018ca8

0800b65c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b088      	sub	sp, #32
 800b660:	af02      	add	r7, sp, #8
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	607a      	str	r2, [r7, #4]
 800b668:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b670:	2b06      	cmp	r3, #6
 800b672:	d006      	beq.n	800b682 <etharp_update_arp_entry+0x26>
 800b674:	4b48      	ldr	r3, [pc, #288]	@ (800b798 <etharp_update_arp_entry+0x13c>)
 800b676:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800b67a:	4948      	ldr	r1, [pc, #288]	@ (800b79c <etharp_update_arp_entry+0x140>)
 800b67c:	4848      	ldr	r0, [pc, #288]	@ (800b7a0 <etharp_update_arp_entry+0x144>)
 800b67e:	f00b fc6d 	bl	8016f5c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d012      	beq.n	800b6ae <etharp_update_arp_entry+0x52>
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d00e      	beq.n	800b6ae <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	68f9      	ldr	r1, [r7, #12]
 800b696:	4618      	mov	r0, r3
 800b698:	f001 face 	bl	800cc38 <ip4_addr_isbroadcast_u32>
 800b69c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d105      	bne.n	800b6ae <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b6aa:	2be0      	cmp	r3, #224	@ 0xe0
 800b6ac:	d102      	bne.n	800b6b4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b6ae:	f06f 030f 	mvn.w	r3, #15
 800b6b2:	e06c      	b.n	800b78e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800b6b4:	78fb      	ldrb	r3, [r7, #3]
 800b6b6:	68fa      	ldr	r2, [r7, #12]
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	68b8      	ldr	r0, [r7, #8]
 800b6bc:	f7ff fe56 	bl	800b36c <etharp_find_entry>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800b6c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	da02      	bge.n	800b6d2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800b6cc:	8afb      	ldrh	r3, [r7, #22]
 800b6ce:	b25b      	sxtb	r3, r3
 800b6d0:	e05d      	b.n	800b78e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800b6d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b6d6:	4933      	ldr	r1, [pc, #204]	@ (800b7a4 <etharp_update_arp_entry+0x148>)
 800b6d8:	4613      	mov	r3, r2
 800b6da:	005b      	lsls	r3, r3, #1
 800b6dc:	4413      	add	r3, r2
 800b6de:	00db      	lsls	r3, r3, #3
 800b6e0:	440b      	add	r3, r1
 800b6e2:	3314      	adds	r3, #20
 800b6e4:	2202      	movs	r2, #2
 800b6e6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800b6e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b6ec:	492d      	ldr	r1, [pc, #180]	@ (800b7a4 <etharp_update_arp_entry+0x148>)
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	005b      	lsls	r3, r3, #1
 800b6f2:	4413      	add	r3, r2
 800b6f4:	00db      	lsls	r3, r3, #3
 800b6f6:	440b      	add	r3, r1
 800b6f8:	3308      	adds	r3, #8
 800b6fa:	68fa      	ldr	r2, [r7, #12]
 800b6fc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800b6fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b702:	4613      	mov	r3, r2
 800b704:	005b      	lsls	r3, r3, #1
 800b706:	4413      	add	r3, r2
 800b708:	00db      	lsls	r3, r3, #3
 800b70a:	3308      	adds	r3, #8
 800b70c:	4a25      	ldr	r2, [pc, #148]	@ (800b7a4 <etharp_update_arp_entry+0x148>)
 800b70e:	4413      	add	r3, r2
 800b710:	3304      	adds	r3, #4
 800b712:	2206      	movs	r2, #6
 800b714:	6879      	ldr	r1, [r7, #4]
 800b716:	4618      	mov	r0, r3
 800b718:	f00b fd9d 	bl	8017256 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800b71c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b720:	4920      	ldr	r1, [pc, #128]	@ (800b7a4 <etharp_update_arp_entry+0x148>)
 800b722:	4613      	mov	r3, r2
 800b724:	005b      	lsls	r3, r3, #1
 800b726:	4413      	add	r3, r2
 800b728:	00db      	lsls	r3, r3, #3
 800b72a:	440b      	add	r3, r1
 800b72c:	3312      	adds	r3, #18
 800b72e:	2200      	movs	r2, #0
 800b730:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800b732:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b736:	491b      	ldr	r1, [pc, #108]	@ (800b7a4 <etharp_update_arp_entry+0x148>)
 800b738:	4613      	mov	r3, r2
 800b73a:	005b      	lsls	r3, r3, #1
 800b73c:	4413      	add	r3, r2
 800b73e:	00db      	lsls	r3, r3, #3
 800b740:	440b      	add	r3, r1
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d021      	beq.n	800b78c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800b748:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b74c:	4915      	ldr	r1, [pc, #84]	@ (800b7a4 <etharp_update_arp_entry+0x148>)
 800b74e:	4613      	mov	r3, r2
 800b750:	005b      	lsls	r3, r3, #1
 800b752:	4413      	add	r3, r2
 800b754:	00db      	lsls	r3, r3, #3
 800b756:	440b      	add	r3, r1
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800b75c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b760:	4910      	ldr	r1, [pc, #64]	@ (800b7a4 <etharp_update_arp_entry+0x148>)
 800b762:	4613      	mov	r3, r2
 800b764:	005b      	lsls	r3, r3, #1
 800b766:	4413      	add	r3, r2
 800b768:	00db      	lsls	r3, r3, #3
 800b76a:	440b      	add	r3, r1
 800b76c:	2200      	movs	r2, #0
 800b76e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800b776:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b77a:	9300      	str	r3, [sp, #0]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6939      	ldr	r1, [r7, #16]
 800b780:	68f8      	ldr	r0, [r7, #12]
 800b782:	f000 fcf3 	bl	800c16c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800b786:	6938      	ldr	r0, [r7, #16]
 800b788:	f003 fc9c 	bl	800f0c4 <pbuf_free>
  }
  return ERR_OK;
 800b78c:	2300      	movs	r3, #0
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3718      	adds	r7, #24
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	08018ba8 	.word	0x08018ba8
 800b79c:	08018cd4 	.word	0x08018cd4
 800b7a0:	08018c54 	.word	0x08018c54
 800b7a4:	24009bb0 	.word	0x24009bb0

0800b7a8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	60fb      	str	r3, [r7, #12]
 800b7b4:	e01e      	b.n	800b7f4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800b7b6:	4913      	ldr	r1, [pc, #76]	@ (800b804 <etharp_cleanup_netif+0x5c>)
 800b7b8:	68fa      	ldr	r2, [r7, #12]
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	005b      	lsls	r3, r3, #1
 800b7be:	4413      	add	r3, r2
 800b7c0:	00db      	lsls	r3, r3, #3
 800b7c2:	440b      	add	r3, r1
 800b7c4:	3314      	adds	r3, #20
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800b7ca:	7afb      	ldrb	r3, [r7, #11]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d00e      	beq.n	800b7ee <etharp_cleanup_netif+0x46>
 800b7d0:	490c      	ldr	r1, [pc, #48]	@ (800b804 <etharp_cleanup_netif+0x5c>)
 800b7d2:	68fa      	ldr	r2, [r7, #12]
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	005b      	lsls	r3, r3, #1
 800b7d8:	4413      	add	r3, r2
 800b7da:	00db      	lsls	r3, r3, #3
 800b7dc:	440b      	add	r3, r1
 800b7de:	3308      	adds	r3, #8
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d102      	bne.n	800b7ee <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800b7e8:	68f8      	ldr	r0, [r7, #12]
 800b7ea:	f7ff fce5 	bl	800b1b8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	60fb      	str	r3, [r7, #12]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2b09      	cmp	r3, #9
 800b7f8:	dddd      	ble.n	800b7b6 <etharp_cleanup_netif+0xe>
    }
  }
}
 800b7fa:	bf00      	nop
 800b7fc:	bf00      	nop
 800b7fe:	3710      	adds	r7, #16
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}
 800b804:	24009bb0 	.word	0x24009bb0

0800b808 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800b808:	b5b0      	push	{r4, r5, r7, lr}
 800b80a:	b08a      	sub	sp, #40	@ 0x28
 800b80c:	af04      	add	r7, sp, #16
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d107      	bne.n	800b828 <etharp_input+0x20>
 800b818:	4b3d      	ldr	r3, [pc, #244]	@ (800b910 <etharp_input+0x108>)
 800b81a:	f240 228a 	movw	r2, #650	@ 0x28a
 800b81e:	493d      	ldr	r1, [pc, #244]	@ (800b914 <etharp_input+0x10c>)
 800b820:	483d      	ldr	r0, [pc, #244]	@ (800b918 <etharp_input+0x110>)
 800b822:	f00b fb9b 	bl	8016f5c <iprintf>
 800b826:	e06f      	b.n	800b908 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	881b      	ldrh	r3, [r3, #0]
 800b832:	b29b      	uxth	r3, r3
 800b834:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b838:	d10c      	bne.n	800b854 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b83e:	2b06      	cmp	r3, #6
 800b840:	d108      	bne.n	800b854 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b846:	2b04      	cmp	r3, #4
 800b848:	d104      	bne.n	800b854 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	885b      	ldrh	r3, [r3, #2]
 800b84e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b850:	2b08      	cmp	r3, #8
 800b852:	d003      	beq.n	800b85c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f003 fc35 	bl	800f0c4 <pbuf_free>
    return;
 800b85a:	e055      	b.n	800b908 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	330e      	adds	r3, #14
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	3318      	adds	r3, #24
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	3304      	adds	r3, #4
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d102      	bne.n	800b87c <etharp_input+0x74>
    for_us = 0;
 800b876:	2300      	movs	r3, #0
 800b878:	75fb      	strb	r3, [r7, #23]
 800b87a:	e009      	b.n	800b890 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800b87c:	68ba      	ldr	r2, [r7, #8]
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	3304      	adds	r3, #4
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	429a      	cmp	r2, r3
 800b886:	bf0c      	ite	eq
 800b888:	2301      	moveq	r3, #1
 800b88a:	2300      	movne	r3, #0
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	f103 0208 	add.w	r2, r3, #8
 800b896:	7dfb      	ldrb	r3, [r7, #23]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d001      	beq.n	800b8a0 <etharp_input+0x98>
 800b89c:	2301      	movs	r3, #1
 800b89e:	e000      	b.n	800b8a2 <etharp_input+0x9a>
 800b8a0:	2302      	movs	r3, #2
 800b8a2:	f107 010c 	add.w	r1, r7, #12
 800b8a6:	6838      	ldr	r0, [r7, #0]
 800b8a8:	f7ff fed8 	bl	800b65c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	88db      	ldrh	r3, [r3, #6]
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8b6:	d003      	beq.n	800b8c0 <etharp_input+0xb8>
 800b8b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8bc:	d01e      	beq.n	800b8fc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800b8be:	e020      	b.n	800b902 <etharp_input+0xfa>
      if (for_us) {
 800b8c0:	7dfb      	ldrb	r3, [r7, #23]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d01c      	beq.n	800b900 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800b8dc:	693a      	ldr	r2, [r7, #16]
 800b8de:	3208      	adds	r2, #8
        etharp_raw(netif,
 800b8e0:	2102      	movs	r1, #2
 800b8e2:	9103      	str	r1, [sp, #12]
 800b8e4:	f107 010c 	add.w	r1, r7, #12
 800b8e8:	9102      	str	r1, [sp, #8]
 800b8ea:	9201      	str	r2, [sp, #4]
 800b8ec:	9300      	str	r3, [sp, #0]
 800b8ee:	462b      	mov	r3, r5
 800b8f0:	4622      	mov	r2, r4
 800b8f2:	4601      	mov	r1, r0
 800b8f4:	6838      	ldr	r0, [r7, #0]
 800b8f6:	f000 faeb 	bl	800bed0 <etharp_raw>
      break;
 800b8fa:	e001      	b.n	800b900 <etharp_input+0xf8>
      break;
 800b8fc:	bf00      	nop
 800b8fe:	e000      	b.n	800b902 <etharp_input+0xfa>
      break;
 800b900:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f003 fbde 	bl	800f0c4 <pbuf_free>
}
 800b908:	3718      	adds	r7, #24
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bdb0      	pop	{r4, r5, r7, pc}
 800b90e:	bf00      	nop
 800b910:	08018ba8 	.word	0x08018ba8
 800b914:	08018d2c 	.word	0x08018d2c
 800b918:	08018c54 	.word	0x08018c54

0800b91c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b086      	sub	sp, #24
 800b920:	af02      	add	r7, sp, #8
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	60b9      	str	r1, [r7, #8]
 800b926:	4613      	mov	r3, r2
 800b928:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b92a:	79fa      	ldrb	r2, [r7, #7]
 800b92c:	4944      	ldr	r1, [pc, #272]	@ (800ba40 <etharp_output_to_arp_index+0x124>)
 800b92e:	4613      	mov	r3, r2
 800b930:	005b      	lsls	r3, r3, #1
 800b932:	4413      	add	r3, r2
 800b934:	00db      	lsls	r3, r3, #3
 800b936:	440b      	add	r3, r1
 800b938:	3314      	adds	r3, #20
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d806      	bhi.n	800b94e <etharp_output_to_arp_index+0x32>
 800b940:	4b40      	ldr	r3, [pc, #256]	@ (800ba44 <etharp_output_to_arp_index+0x128>)
 800b942:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800b946:	4940      	ldr	r1, [pc, #256]	@ (800ba48 <etharp_output_to_arp_index+0x12c>)
 800b948:	4840      	ldr	r0, [pc, #256]	@ (800ba4c <etharp_output_to_arp_index+0x130>)
 800b94a:	f00b fb07 	bl	8016f5c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800b94e:	79fa      	ldrb	r2, [r7, #7]
 800b950:	493b      	ldr	r1, [pc, #236]	@ (800ba40 <etharp_output_to_arp_index+0x124>)
 800b952:	4613      	mov	r3, r2
 800b954:	005b      	lsls	r3, r3, #1
 800b956:	4413      	add	r3, r2
 800b958:	00db      	lsls	r3, r3, #3
 800b95a:	440b      	add	r3, r1
 800b95c:	3314      	adds	r3, #20
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	2b02      	cmp	r3, #2
 800b962:	d153      	bne.n	800ba0c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800b964:	79fa      	ldrb	r2, [r7, #7]
 800b966:	4936      	ldr	r1, [pc, #216]	@ (800ba40 <etharp_output_to_arp_index+0x124>)
 800b968:	4613      	mov	r3, r2
 800b96a:	005b      	lsls	r3, r3, #1
 800b96c:	4413      	add	r3, r2
 800b96e:	00db      	lsls	r3, r3, #3
 800b970:	440b      	add	r3, r1
 800b972:	3312      	adds	r3, #18
 800b974:	881b      	ldrh	r3, [r3, #0]
 800b976:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800b97a:	d919      	bls.n	800b9b0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b97c:	79fa      	ldrb	r2, [r7, #7]
 800b97e:	4613      	mov	r3, r2
 800b980:	005b      	lsls	r3, r3, #1
 800b982:	4413      	add	r3, r2
 800b984:	00db      	lsls	r3, r3, #3
 800b986:	4a2e      	ldr	r2, [pc, #184]	@ (800ba40 <etharp_output_to_arp_index+0x124>)
 800b988:	4413      	add	r3, r2
 800b98a:	3304      	adds	r3, #4
 800b98c:	4619      	mov	r1, r3
 800b98e:	68f8      	ldr	r0, [r7, #12]
 800b990:	f000 fb4c 	bl	800c02c <etharp_request>
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d138      	bne.n	800ba0c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b99a:	79fa      	ldrb	r2, [r7, #7]
 800b99c:	4928      	ldr	r1, [pc, #160]	@ (800ba40 <etharp_output_to_arp_index+0x124>)
 800b99e:	4613      	mov	r3, r2
 800b9a0:	005b      	lsls	r3, r3, #1
 800b9a2:	4413      	add	r3, r2
 800b9a4:	00db      	lsls	r3, r3, #3
 800b9a6:	440b      	add	r3, r1
 800b9a8:	3314      	adds	r3, #20
 800b9aa:	2203      	movs	r2, #3
 800b9ac:	701a      	strb	r2, [r3, #0]
 800b9ae:	e02d      	b.n	800ba0c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800b9b0:	79fa      	ldrb	r2, [r7, #7]
 800b9b2:	4923      	ldr	r1, [pc, #140]	@ (800ba40 <etharp_output_to_arp_index+0x124>)
 800b9b4:	4613      	mov	r3, r2
 800b9b6:	005b      	lsls	r3, r3, #1
 800b9b8:	4413      	add	r3, r2
 800b9ba:	00db      	lsls	r3, r3, #3
 800b9bc:	440b      	add	r3, r1
 800b9be:	3312      	adds	r3, #18
 800b9c0:	881b      	ldrh	r3, [r3, #0]
 800b9c2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800b9c6:	d321      	bcc.n	800ba0c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b9c8:	79fa      	ldrb	r2, [r7, #7]
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	005b      	lsls	r3, r3, #1
 800b9ce:	4413      	add	r3, r2
 800b9d0:	00db      	lsls	r3, r3, #3
 800b9d2:	4a1b      	ldr	r2, [pc, #108]	@ (800ba40 <etharp_output_to_arp_index+0x124>)
 800b9d4:	4413      	add	r3, r2
 800b9d6:	1d19      	adds	r1, r3, #4
 800b9d8:	79fa      	ldrb	r2, [r7, #7]
 800b9da:	4613      	mov	r3, r2
 800b9dc:	005b      	lsls	r3, r3, #1
 800b9de:	4413      	add	r3, r2
 800b9e0:	00db      	lsls	r3, r3, #3
 800b9e2:	3308      	adds	r3, #8
 800b9e4:	4a16      	ldr	r2, [pc, #88]	@ (800ba40 <etharp_output_to_arp_index+0x124>)
 800b9e6:	4413      	add	r3, r2
 800b9e8:	3304      	adds	r3, #4
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	68f8      	ldr	r0, [r7, #12]
 800b9ee:	f000 fafb 	bl	800bfe8 <etharp_request_dst>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d109      	bne.n	800ba0c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b9f8:	79fa      	ldrb	r2, [r7, #7]
 800b9fa:	4911      	ldr	r1, [pc, #68]	@ (800ba40 <etharp_output_to_arp_index+0x124>)
 800b9fc:	4613      	mov	r3, r2
 800b9fe:	005b      	lsls	r3, r3, #1
 800ba00:	4413      	add	r3, r2
 800ba02:	00db      	lsls	r3, r3, #3
 800ba04:	440b      	add	r3, r1
 800ba06:	3314      	adds	r3, #20
 800ba08:	2203      	movs	r2, #3
 800ba0a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800ba12:	79fa      	ldrb	r2, [r7, #7]
 800ba14:	4613      	mov	r3, r2
 800ba16:	005b      	lsls	r3, r3, #1
 800ba18:	4413      	add	r3, r2
 800ba1a:	00db      	lsls	r3, r3, #3
 800ba1c:	3308      	adds	r3, #8
 800ba1e:	4a08      	ldr	r2, [pc, #32]	@ (800ba40 <etharp_output_to_arp_index+0x124>)
 800ba20:	4413      	add	r3, r2
 800ba22:	3304      	adds	r3, #4
 800ba24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ba28:	9200      	str	r2, [sp, #0]
 800ba2a:	460a      	mov	r2, r1
 800ba2c:	68b9      	ldr	r1, [r7, #8]
 800ba2e:	68f8      	ldr	r0, [r7, #12]
 800ba30:	f000 fb9c 	bl	800c16c <ethernet_output>
 800ba34:	4603      	mov	r3, r0
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3710      	adds	r7, #16
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	24009bb0 	.word	0x24009bb0
 800ba44:	08018ba8 	.word	0x08018ba8
 800ba48:	08018d4c 	.word	0x08018d4c
 800ba4c:	08018c54 	.word	0x08018c54

0800ba50 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b08a      	sub	sp, #40	@ 0x28
 800ba54:	af02      	add	r7, sp, #8
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d106      	bne.n	800ba74 <etharp_output+0x24>
 800ba66:	4b73      	ldr	r3, [pc, #460]	@ (800bc34 <etharp_output+0x1e4>)
 800ba68:	f240 321e 	movw	r2, #798	@ 0x31e
 800ba6c:	4972      	ldr	r1, [pc, #456]	@ (800bc38 <etharp_output+0x1e8>)
 800ba6e:	4873      	ldr	r0, [pc, #460]	@ (800bc3c <etharp_output+0x1ec>)
 800ba70:	f00b fa74 	bl	8016f5c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d106      	bne.n	800ba88 <etharp_output+0x38>
 800ba7a:	4b6e      	ldr	r3, [pc, #440]	@ (800bc34 <etharp_output+0x1e4>)
 800ba7c:	f240 321f 	movw	r2, #799	@ 0x31f
 800ba80:	496f      	ldr	r1, [pc, #444]	@ (800bc40 <etharp_output+0x1f0>)
 800ba82:	486e      	ldr	r0, [pc, #440]	@ (800bc3c <etharp_output+0x1ec>)
 800ba84:	f00b fa6a 	bl	8016f5c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d106      	bne.n	800ba9c <etharp_output+0x4c>
 800ba8e:	4b69      	ldr	r3, [pc, #420]	@ (800bc34 <etharp_output+0x1e4>)
 800ba90:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800ba94:	496b      	ldr	r1, [pc, #428]	@ (800bc44 <etharp_output+0x1f4>)
 800ba96:	4869      	ldr	r0, [pc, #420]	@ (800bc3c <etharp_output+0x1ec>)
 800ba98:	f00b fa60 	bl	8016f5c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	68f9      	ldr	r1, [r7, #12]
 800baa2:	4618      	mov	r0, r3
 800baa4:	f001 f8c8 	bl	800cc38 <ip4_addr_isbroadcast_u32>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d002      	beq.n	800bab4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800baae:	4b66      	ldr	r3, [pc, #408]	@ (800bc48 <etharp_output+0x1f8>)
 800bab0:	61fb      	str	r3, [r7, #28]
 800bab2:	e0af      	b.n	800bc14 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800babc:	2be0      	cmp	r3, #224	@ 0xe0
 800babe:	d118      	bne.n	800baf2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800bac0:	2301      	movs	r3, #1
 800bac2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800bac4:	2300      	movs	r3, #0
 800bac6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800bac8:	235e      	movs	r3, #94	@ 0x5e
 800baca:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	3301      	adds	r3, #1
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	3302      	adds	r3, #2
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	3303      	adds	r3, #3
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800baea:	f107 0310 	add.w	r3, r7, #16
 800baee:	61fb      	str	r3, [r7, #28]
 800baf0:	e090      	b.n	800bc14 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681a      	ldr	r2, [r3, #0]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	3304      	adds	r3, #4
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	405a      	eors	r2, r3
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	3308      	adds	r3, #8
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4013      	ands	r3, r2
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d012      	beq.n	800bb30 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800bb10:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d00b      	beq.n	800bb30 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	330c      	adds	r3, #12
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d003      	beq.n	800bb2a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	330c      	adds	r3, #12
 800bb26:	61bb      	str	r3, [r7, #24]
 800bb28:	e002      	b.n	800bb30 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800bb2a:	f06f 0303 	mvn.w	r3, #3
 800bb2e:	e07d      	b.n	800bc2c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800bb30:	4b46      	ldr	r3, [pc, #280]	@ (800bc4c <etharp_output+0x1fc>)
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	4619      	mov	r1, r3
 800bb36:	4a46      	ldr	r2, [pc, #280]	@ (800bc50 <etharp_output+0x200>)
 800bb38:	460b      	mov	r3, r1
 800bb3a:	005b      	lsls	r3, r3, #1
 800bb3c:	440b      	add	r3, r1
 800bb3e:	00db      	lsls	r3, r3, #3
 800bb40:	4413      	add	r3, r2
 800bb42:	3314      	adds	r3, #20
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d925      	bls.n	800bb96 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800bb4a:	4b40      	ldr	r3, [pc, #256]	@ (800bc4c <etharp_output+0x1fc>)
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	4619      	mov	r1, r3
 800bb50:	4a3f      	ldr	r2, [pc, #252]	@ (800bc50 <etharp_output+0x200>)
 800bb52:	460b      	mov	r3, r1
 800bb54:	005b      	lsls	r3, r3, #1
 800bb56:	440b      	add	r3, r1
 800bb58:	00db      	lsls	r3, r3, #3
 800bb5a:	4413      	add	r3, r2
 800bb5c:	3308      	adds	r3, #8
 800bb5e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d117      	bne.n	800bb96 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800bb66:	69bb      	ldr	r3, [r7, #24]
 800bb68:	681a      	ldr	r2, [r3, #0]
 800bb6a:	4b38      	ldr	r3, [pc, #224]	@ (800bc4c <etharp_output+0x1fc>)
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	4618      	mov	r0, r3
 800bb70:	4937      	ldr	r1, [pc, #220]	@ (800bc50 <etharp_output+0x200>)
 800bb72:	4603      	mov	r3, r0
 800bb74:	005b      	lsls	r3, r3, #1
 800bb76:	4403      	add	r3, r0
 800bb78:	00db      	lsls	r3, r3, #3
 800bb7a:	440b      	add	r3, r1
 800bb7c:	3304      	adds	r3, #4
 800bb7e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d108      	bne.n	800bb96 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800bb84:	4b31      	ldr	r3, [pc, #196]	@ (800bc4c <etharp_output+0x1fc>)
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	461a      	mov	r2, r3
 800bb8a:	68b9      	ldr	r1, [r7, #8]
 800bb8c:	68f8      	ldr	r0, [r7, #12]
 800bb8e:	f7ff fec5 	bl	800b91c <etharp_output_to_arp_index>
 800bb92:	4603      	mov	r3, r0
 800bb94:	e04a      	b.n	800bc2c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800bb96:	2300      	movs	r3, #0
 800bb98:	75fb      	strb	r3, [r7, #23]
 800bb9a:	e031      	b.n	800bc00 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bb9c:	7dfa      	ldrb	r2, [r7, #23]
 800bb9e:	492c      	ldr	r1, [pc, #176]	@ (800bc50 <etharp_output+0x200>)
 800bba0:	4613      	mov	r3, r2
 800bba2:	005b      	lsls	r3, r3, #1
 800bba4:	4413      	add	r3, r2
 800bba6:	00db      	lsls	r3, r3, #3
 800bba8:	440b      	add	r3, r1
 800bbaa:	3314      	adds	r3, #20
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d923      	bls.n	800bbfa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800bbb2:	7dfa      	ldrb	r2, [r7, #23]
 800bbb4:	4926      	ldr	r1, [pc, #152]	@ (800bc50 <etharp_output+0x200>)
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	005b      	lsls	r3, r3, #1
 800bbba:	4413      	add	r3, r2
 800bbbc:	00db      	lsls	r3, r3, #3
 800bbbe:	440b      	add	r3, r1
 800bbc0:	3308      	adds	r3, #8
 800bbc2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bbc4:	68fa      	ldr	r2, [r7, #12]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d117      	bne.n	800bbfa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800bbca:	69bb      	ldr	r3, [r7, #24]
 800bbcc:	6819      	ldr	r1, [r3, #0]
 800bbce:	7dfa      	ldrb	r2, [r7, #23]
 800bbd0:	481f      	ldr	r0, [pc, #124]	@ (800bc50 <etharp_output+0x200>)
 800bbd2:	4613      	mov	r3, r2
 800bbd4:	005b      	lsls	r3, r3, #1
 800bbd6:	4413      	add	r3, r2
 800bbd8:	00db      	lsls	r3, r3, #3
 800bbda:	4403      	add	r3, r0
 800bbdc:	3304      	adds	r3, #4
 800bbde:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800bbe0:	4299      	cmp	r1, r3
 800bbe2:	d10a      	bne.n	800bbfa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800bbe4:	4a19      	ldr	r2, [pc, #100]	@ (800bc4c <etharp_output+0x1fc>)
 800bbe6:	7dfb      	ldrb	r3, [r7, #23]
 800bbe8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800bbea:	7dfb      	ldrb	r3, [r7, #23]
 800bbec:	461a      	mov	r2, r3
 800bbee:	68b9      	ldr	r1, [r7, #8]
 800bbf0:	68f8      	ldr	r0, [r7, #12]
 800bbf2:	f7ff fe93 	bl	800b91c <etharp_output_to_arp_index>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	e018      	b.n	800bc2c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800bbfa:	7dfb      	ldrb	r3, [r7, #23]
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	75fb      	strb	r3, [r7, #23]
 800bc00:	7dfb      	ldrb	r3, [r7, #23]
 800bc02:	2b09      	cmp	r3, #9
 800bc04:	d9ca      	bls.n	800bb9c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800bc06:	68ba      	ldr	r2, [r7, #8]
 800bc08:	69b9      	ldr	r1, [r7, #24]
 800bc0a:	68f8      	ldr	r0, [r7, #12]
 800bc0c:	f000 f822 	bl	800bc54 <etharp_query>
 800bc10:	4603      	mov	r3, r0
 800bc12:	e00b      	b.n	800bc2c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800bc1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bc1e:	9300      	str	r3, [sp, #0]
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	68b9      	ldr	r1, [r7, #8]
 800bc24:	68f8      	ldr	r0, [r7, #12]
 800bc26:	f000 faa1 	bl	800c16c <ethernet_output>
 800bc2a:	4603      	mov	r3, r0
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3720      	adds	r7, #32
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	08018ba8 	.word	0x08018ba8
 800bc38:	08018d2c 	.word	0x08018d2c
 800bc3c:	08018c54 	.word	0x08018c54
 800bc40:	08018d7c 	.word	0x08018d7c
 800bc44:	08018d1c 	.word	0x08018d1c
 800bc48:	0801b96c 	.word	0x0801b96c
 800bc4c:	24009ca0 	.word	0x24009ca0
 800bc50:	24009bb0 	.word	0x24009bb0

0800bc54 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b08c      	sub	sp, #48	@ 0x30
 800bc58:	af02      	add	r7, sp, #8
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	3326      	adds	r3, #38	@ 0x26
 800bc64:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800bc66:	23ff      	movs	r3, #255	@ 0xff
 800bc68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	68f9      	ldr	r1, [r7, #12]
 800bc76:	4618      	mov	r0, r3
 800bc78:	f000 ffde 	bl	800cc38 <ip4_addr_isbroadcast_u32>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d10c      	bne.n	800bc9c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800bc8a:	2be0      	cmp	r3, #224	@ 0xe0
 800bc8c:	d006      	beq.n	800bc9c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d003      	beq.n	800bc9c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d102      	bne.n	800bca2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800bc9c:	f06f 030f 	mvn.w	r3, #15
 800bca0:	e101      	b.n	800bea6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800bca2:	68fa      	ldr	r2, [r7, #12]
 800bca4:	2101      	movs	r1, #1
 800bca6:	68b8      	ldr	r0, [r7, #8]
 800bca8:	f7ff fb60 	bl	800b36c <etharp_find_entry>
 800bcac:	4603      	mov	r3, r0
 800bcae:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800bcb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	da02      	bge.n	800bcbe <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800bcb8:	8a7b      	ldrh	r3, [r7, #18]
 800bcba:	b25b      	sxtb	r3, r3
 800bcbc:	e0f3      	b.n	800bea6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800bcbe:	8a7b      	ldrh	r3, [r7, #18]
 800bcc0:	2b7e      	cmp	r3, #126	@ 0x7e
 800bcc2:	d906      	bls.n	800bcd2 <etharp_query+0x7e>
 800bcc4:	4b7a      	ldr	r3, [pc, #488]	@ (800beb0 <etharp_query+0x25c>)
 800bcc6:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800bcca:	497a      	ldr	r1, [pc, #488]	@ (800beb4 <etharp_query+0x260>)
 800bccc:	487a      	ldr	r0, [pc, #488]	@ (800beb8 <etharp_query+0x264>)
 800bcce:	f00b f945 	bl	8016f5c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800bcd2:	8a7b      	ldrh	r3, [r7, #18]
 800bcd4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800bcd6:	7c7a      	ldrb	r2, [r7, #17]
 800bcd8:	4978      	ldr	r1, [pc, #480]	@ (800bebc <etharp_query+0x268>)
 800bcda:	4613      	mov	r3, r2
 800bcdc:	005b      	lsls	r3, r3, #1
 800bcde:	4413      	add	r3, r2
 800bce0:	00db      	lsls	r3, r3, #3
 800bce2:	440b      	add	r3, r1
 800bce4:	3314      	adds	r3, #20
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d115      	bne.n	800bd18 <etharp_query+0xc4>
    is_new_entry = 1;
 800bcec:	2301      	movs	r3, #1
 800bcee:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800bcf0:	7c7a      	ldrb	r2, [r7, #17]
 800bcf2:	4972      	ldr	r1, [pc, #456]	@ (800bebc <etharp_query+0x268>)
 800bcf4:	4613      	mov	r3, r2
 800bcf6:	005b      	lsls	r3, r3, #1
 800bcf8:	4413      	add	r3, r2
 800bcfa:	00db      	lsls	r3, r3, #3
 800bcfc:	440b      	add	r3, r1
 800bcfe:	3314      	adds	r3, #20
 800bd00:	2201      	movs	r2, #1
 800bd02:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800bd04:	7c7a      	ldrb	r2, [r7, #17]
 800bd06:	496d      	ldr	r1, [pc, #436]	@ (800bebc <etharp_query+0x268>)
 800bd08:	4613      	mov	r3, r2
 800bd0a:	005b      	lsls	r3, r3, #1
 800bd0c:	4413      	add	r3, r2
 800bd0e:	00db      	lsls	r3, r3, #3
 800bd10:	440b      	add	r3, r1
 800bd12:	3308      	adds	r3, #8
 800bd14:	68fa      	ldr	r2, [r7, #12]
 800bd16:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800bd18:	7c7a      	ldrb	r2, [r7, #17]
 800bd1a:	4968      	ldr	r1, [pc, #416]	@ (800bebc <etharp_query+0x268>)
 800bd1c:	4613      	mov	r3, r2
 800bd1e:	005b      	lsls	r3, r3, #1
 800bd20:	4413      	add	r3, r2
 800bd22:	00db      	lsls	r3, r3, #3
 800bd24:	440b      	add	r3, r1
 800bd26:	3314      	adds	r3, #20
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	2b01      	cmp	r3, #1
 800bd2c:	d011      	beq.n	800bd52 <etharp_query+0xfe>
 800bd2e:	7c7a      	ldrb	r2, [r7, #17]
 800bd30:	4962      	ldr	r1, [pc, #392]	@ (800bebc <etharp_query+0x268>)
 800bd32:	4613      	mov	r3, r2
 800bd34:	005b      	lsls	r3, r3, #1
 800bd36:	4413      	add	r3, r2
 800bd38:	00db      	lsls	r3, r3, #3
 800bd3a:	440b      	add	r3, r1
 800bd3c:	3314      	adds	r3, #20
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	2b01      	cmp	r3, #1
 800bd42:	d806      	bhi.n	800bd52 <etharp_query+0xfe>
 800bd44:	4b5a      	ldr	r3, [pc, #360]	@ (800beb0 <etharp_query+0x25c>)
 800bd46:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800bd4a:	495d      	ldr	r1, [pc, #372]	@ (800bec0 <etharp_query+0x26c>)
 800bd4c:	485a      	ldr	r0, [pc, #360]	@ (800beb8 <etharp_query+0x264>)
 800bd4e:	f00b f905 	bl	8016f5c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800bd52:	6a3b      	ldr	r3, [r7, #32]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d102      	bne.n	800bd5e <etharp_query+0x10a>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d10c      	bne.n	800bd78 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800bd5e:	68b9      	ldr	r1, [r7, #8]
 800bd60:	68f8      	ldr	r0, [r7, #12]
 800bd62:	f000 f963 	bl	800c02c <etharp_request>
 800bd66:	4603      	mov	r3, r0
 800bd68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d102      	bne.n	800bd78 <etharp_query+0x124>
      return result;
 800bd72:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bd76:	e096      	b.n	800bea6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d106      	bne.n	800bd8c <etharp_query+0x138>
 800bd7e:	4b4c      	ldr	r3, [pc, #304]	@ (800beb0 <etharp_query+0x25c>)
 800bd80:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800bd84:	494f      	ldr	r1, [pc, #316]	@ (800bec4 <etharp_query+0x270>)
 800bd86:	484c      	ldr	r0, [pc, #304]	@ (800beb8 <etharp_query+0x264>)
 800bd88:	f00b f8e8 	bl	8016f5c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800bd8c:	7c7a      	ldrb	r2, [r7, #17]
 800bd8e:	494b      	ldr	r1, [pc, #300]	@ (800bebc <etharp_query+0x268>)
 800bd90:	4613      	mov	r3, r2
 800bd92:	005b      	lsls	r3, r3, #1
 800bd94:	4413      	add	r3, r2
 800bd96:	00db      	lsls	r3, r3, #3
 800bd98:	440b      	add	r3, r1
 800bd9a:	3314      	adds	r3, #20
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d917      	bls.n	800bdd2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800bda2:	4a49      	ldr	r2, [pc, #292]	@ (800bec8 <etharp_query+0x274>)
 800bda4:	7c7b      	ldrb	r3, [r7, #17]
 800bda6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800bda8:	7c7a      	ldrb	r2, [r7, #17]
 800bdaa:	4613      	mov	r3, r2
 800bdac:	005b      	lsls	r3, r3, #1
 800bdae:	4413      	add	r3, r2
 800bdb0:	00db      	lsls	r3, r3, #3
 800bdb2:	3308      	adds	r3, #8
 800bdb4:	4a41      	ldr	r2, [pc, #260]	@ (800bebc <etharp_query+0x268>)
 800bdb6:	4413      	add	r3, r2
 800bdb8:	3304      	adds	r3, #4
 800bdba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bdbe:	9200      	str	r2, [sp, #0]
 800bdc0:	697a      	ldr	r2, [r7, #20]
 800bdc2:	6879      	ldr	r1, [r7, #4]
 800bdc4:	68f8      	ldr	r0, [r7, #12]
 800bdc6:	f000 f9d1 	bl	800c16c <ethernet_output>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bdd0:	e067      	b.n	800bea2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bdd2:	7c7a      	ldrb	r2, [r7, #17]
 800bdd4:	4939      	ldr	r1, [pc, #228]	@ (800bebc <etharp_query+0x268>)
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	005b      	lsls	r3, r3, #1
 800bdda:	4413      	add	r3, r2
 800bddc:	00db      	lsls	r3, r3, #3
 800bdde:	440b      	add	r3, r1
 800bde0:	3314      	adds	r3, #20
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d15c      	bne.n	800bea2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800bde8:	2300      	movs	r3, #0
 800bdea:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	61fb      	str	r3, [r7, #28]
    while (p) {
 800bdf0:	e01c      	b.n	800be2c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800bdf2:	69fb      	ldr	r3, [r7, #28]
 800bdf4:	895a      	ldrh	r2, [r3, #10]
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	891b      	ldrh	r3, [r3, #8]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d10a      	bne.n	800be14 <etharp_query+0x1c0>
 800bdfe:	69fb      	ldr	r3, [r7, #28]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d006      	beq.n	800be14 <etharp_query+0x1c0>
 800be06:	4b2a      	ldr	r3, [pc, #168]	@ (800beb0 <etharp_query+0x25c>)
 800be08:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800be0c:	492f      	ldr	r1, [pc, #188]	@ (800becc <etharp_query+0x278>)
 800be0e:	482a      	ldr	r0, [pc, #168]	@ (800beb8 <etharp_query+0x264>)
 800be10:	f00b f8a4 	bl	8016f5c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	7b1b      	ldrb	r3, [r3, #12]
 800be18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d002      	beq.n	800be26 <etharp_query+0x1d2>
        copy_needed = 1;
 800be20:	2301      	movs	r3, #1
 800be22:	61bb      	str	r3, [r7, #24]
        break;
 800be24:	e005      	b.n	800be32 <etharp_query+0x1de>
      }
      p = p->next;
 800be26:	69fb      	ldr	r3, [r7, #28]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d1df      	bne.n	800bdf2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800be32:	69bb      	ldr	r3, [r7, #24]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d007      	beq.n	800be48 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800be38:	687a      	ldr	r2, [r7, #4]
 800be3a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800be3e:	200e      	movs	r0, #14
 800be40:	f003 fc4a 	bl	800f6d8 <pbuf_clone>
 800be44:	61f8      	str	r0, [r7, #28]
 800be46:	e004      	b.n	800be52 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800be4c:	69f8      	ldr	r0, [r7, #28]
 800be4e:	f003 f9df 	bl	800f210 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800be52:	69fb      	ldr	r3, [r7, #28]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d021      	beq.n	800be9c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800be58:	7c7a      	ldrb	r2, [r7, #17]
 800be5a:	4918      	ldr	r1, [pc, #96]	@ (800bebc <etharp_query+0x268>)
 800be5c:	4613      	mov	r3, r2
 800be5e:	005b      	lsls	r3, r3, #1
 800be60:	4413      	add	r3, r2
 800be62:	00db      	lsls	r3, r3, #3
 800be64:	440b      	add	r3, r1
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d00a      	beq.n	800be82 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800be6c:	7c7a      	ldrb	r2, [r7, #17]
 800be6e:	4913      	ldr	r1, [pc, #76]	@ (800bebc <etharp_query+0x268>)
 800be70:	4613      	mov	r3, r2
 800be72:	005b      	lsls	r3, r3, #1
 800be74:	4413      	add	r3, r2
 800be76:	00db      	lsls	r3, r3, #3
 800be78:	440b      	add	r3, r1
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4618      	mov	r0, r3
 800be7e:	f003 f921 	bl	800f0c4 <pbuf_free>
      }
      arp_table[i].q = p;
 800be82:	7c7a      	ldrb	r2, [r7, #17]
 800be84:	490d      	ldr	r1, [pc, #52]	@ (800bebc <etharp_query+0x268>)
 800be86:	4613      	mov	r3, r2
 800be88:	005b      	lsls	r3, r3, #1
 800be8a:	4413      	add	r3, r2
 800be8c:	00db      	lsls	r3, r3, #3
 800be8e:	440b      	add	r3, r1
 800be90:	69fa      	ldr	r2, [r7, #28]
 800be92:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800be94:	2300      	movs	r3, #0
 800be96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800be9a:	e002      	b.n	800bea2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800be9c:	23ff      	movs	r3, #255	@ 0xff
 800be9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800bea2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3728      	adds	r7, #40	@ 0x28
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	08018ba8 	.word	0x08018ba8
 800beb4:	08018d88 	.word	0x08018d88
 800beb8:	08018c54 	.word	0x08018c54
 800bebc:	24009bb0 	.word	0x24009bb0
 800bec0:	08018d98 	.word	0x08018d98
 800bec4:	08018d7c 	.word	0x08018d7c
 800bec8:	24009ca0 	.word	0x24009ca0
 800becc:	08018dc0 	.word	0x08018dc0

0800bed0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b08a      	sub	sp, #40	@ 0x28
 800bed4:	af02      	add	r7, sp, #8
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	607a      	str	r2, [r7, #4]
 800bedc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800bede:	2300      	movs	r3, #0
 800bee0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d106      	bne.n	800bef6 <etharp_raw+0x26>
 800bee8:	4b3a      	ldr	r3, [pc, #232]	@ (800bfd4 <etharp_raw+0x104>)
 800beea:	f240 4257 	movw	r2, #1111	@ 0x457
 800beee:	493a      	ldr	r1, [pc, #232]	@ (800bfd8 <etharp_raw+0x108>)
 800bef0:	483a      	ldr	r0, [pc, #232]	@ (800bfdc <etharp_raw+0x10c>)
 800bef2:	f00b f833 	bl	8016f5c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800bef6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800befa:	211c      	movs	r1, #28
 800befc:	200e      	movs	r0, #14
 800befe:	f002 fdfd 	bl	800eafc <pbuf_alloc>
 800bf02:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800bf04:	69bb      	ldr	r3, [r7, #24]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d102      	bne.n	800bf10 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800bf0a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf0e:	e05d      	b.n	800bfcc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	895b      	ldrh	r3, [r3, #10]
 800bf14:	2b1b      	cmp	r3, #27
 800bf16:	d806      	bhi.n	800bf26 <etharp_raw+0x56>
 800bf18:	4b2e      	ldr	r3, [pc, #184]	@ (800bfd4 <etharp_raw+0x104>)
 800bf1a:	f240 4262 	movw	r2, #1122	@ 0x462
 800bf1e:	4930      	ldr	r1, [pc, #192]	@ (800bfe0 <etharp_raw+0x110>)
 800bf20:	482e      	ldr	r0, [pc, #184]	@ (800bfdc <etharp_raw+0x10c>)
 800bf22:	f00b f81b 	bl	8016f5c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800bf26:	69bb      	ldr	r3, [r7, #24]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800bf2c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7ff f912 	bl	800b158 <lwip_htons>
 800bf34:	4603      	mov	r3, r0
 800bf36:	461a      	mov	r2, r3
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800bf42:	2b06      	cmp	r3, #6
 800bf44:	d006      	beq.n	800bf54 <etharp_raw+0x84>
 800bf46:	4b23      	ldr	r3, [pc, #140]	@ (800bfd4 <etharp_raw+0x104>)
 800bf48:	f240 4269 	movw	r2, #1129	@ 0x469
 800bf4c:	4925      	ldr	r1, [pc, #148]	@ (800bfe4 <etharp_raw+0x114>)
 800bf4e:	4823      	ldr	r0, [pc, #140]	@ (800bfdc <etharp_raw+0x10c>)
 800bf50:	f00b f804 	bl	8016f5c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	3308      	adds	r3, #8
 800bf58:	2206      	movs	r2, #6
 800bf5a:	6839      	ldr	r1, [r7, #0]
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f00b f97a 	bl	8017256 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	3312      	adds	r3, #18
 800bf66:	2206      	movs	r2, #6
 800bf68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f00b f973 	bl	8017256 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	330e      	adds	r3, #14
 800bf74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf76:	6812      	ldr	r2, [r2, #0]
 800bf78:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	3318      	adds	r3, #24
 800bf7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf80:	6812      	ldr	r2, [r2, #0]
 800bf82:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	2200      	movs	r2, #0
 800bf88:	701a      	strb	r2, [r3, #0]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f042 0201 	orr.w	r2, r2, #1
 800bf90:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	2200      	movs	r2, #0
 800bf96:	f042 0208 	orr.w	r2, r2, #8
 800bf9a:	709a      	strb	r2, [r3, #2]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	2206      	movs	r2, #6
 800bfa4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	2204      	movs	r2, #4
 800bfaa:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800bfac:	f640 0306 	movw	r3, #2054	@ 0x806
 800bfb0:	9300      	str	r3, [sp, #0]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	68ba      	ldr	r2, [r7, #8]
 800bfb6:	69b9      	ldr	r1, [r7, #24]
 800bfb8:	68f8      	ldr	r0, [r7, #12]
 800bfba:	f000 f8d7 	bl	800c16c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800bfbe:	69b8      	ldr	r0, [r7, #24]
 800bfc0:	f003 f880 	bl	800f0c4 <pbuf_free>
  p = NULL;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800bfc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3720      	adds	r7, #32
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	08018ba8 	.word	0x08018ba8
 800bfd8:	08018d2c 	.word	0x08018d2c
 800bfdc:	08018c54 	.word	0x08018c54
 800bfe0:	08018ddc 	.word	0x08018ddc
 800bfe4:	08018e10 	.word	0x08018e10

0800bfe8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b088      	sub	sp, #32
 800bfec:	af04      	add	r7, sp, #16
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c004:	2201      	movs	r2, #1
 800c006:	9203      	str	r2, [sp, #12]
 800c008:	68ba      	ldr	r2, [r7, #8]
 800c00a:	9202      	str	r2, [sp, #8]
 800c00c:	4a06      	ldr	r2, [pc, #24]	@ (800c028 <etharp_request_dst+0x40>)
 800c00e:	9201      	str	r2, [sp, #4]
 800c010:	9300      	str	r3, [sp, #0]
 800c012:	4603      	mov	r3, r0
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	68f8      	ldr	r0, [r7, #12]
 800c018:	f7ff ff5a 	bl	800bed0 <etharp_raw>
 800c01c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3710      	adds	r7, #16
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
 800c026:	bf00      	nop
 800c028:	0801b974 	.word	0x0801b974

0800c02c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c036:	4a05      	ldr	r2, [pc, #20]	@ (800c04c <etharp_request+0x20>)
 800c038:	6839      	ldr	r1, [r7, #0]
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f7ff ffd4 	bl	800bfe8 <etharp_request_dst>
 800c040:	4603      	mov	r3, r0
}
 800c042:	4618      	mov	r0, r3
 800c044:	3708      	adds	r7, #8
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	0801b96c 	.word	0x0801b96c

0800c050 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b086      	sub	sp, #24
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800c05a:	230e      	movs	r3, #14
 800c05c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	895b      	ldrh	r3, [r3, #10]
 800c062:	2b0e      	cmp	r3, #14
 800c064:	d96e      	bls.n	800c144 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	7bdb      	ldrb	r3, [r3, #15]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d106      	bne.n	800c07c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c074:	3301      	adds	r3, #1
 800c076:	b2da      	uxtb	r2, r3
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	7b1a      	ldrb	r2, [r3, #12]
 800c086:	7b5b      	ldrb	r3, [r3, #13]
 800c088:	021b      	lsls	r3, r3, #8
 800c08a:	4313      	orrs	r3, r2
 800c08c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	f003 0301 	and.w	r3, r3, #1
 800c096:	2b00      	cmp	r3, #0
 800c098:	d023      	beq.n	800c0e2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	2b01      	cmp	r3, #1
 800c0a0:	d10f      	bne.n	800c0c2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	785b      	ldrb	r3, [r3, #1]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d11b      	bne.n	800c0e2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800c0ae:	2b5e      	cmp	r3, #94	@ 0x5e
 800c0b0:	d117      	bne.n	800c0e2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	7b5b      	ldrb	r3, [r3, #13]
 800c0b6:	f043 0310 	orr.w	r3, r3, #16
 800c0ba:	b2da      	uxtb	r2, r3
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	735a      	strb	r2, [r3, #13]
 800c0c0:	e00f      	b.n	800c0e2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	2206      	movs	r2, #6
 800c0c6:	4928      	ldr	r1, [pc, #160]	@ (800c168 <ethernet_input+0x118>)
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f00a ffbe 	bl	801704a <memcmp>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d106      	bne.n	800c0e2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	7b5b      	ldrb	r3, [r3, #13]
 800c0d8:	f043 0308 	orr.w	r3, r3, #8
 800c0dc:	b2da      	uxtb	r2, r3
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800c0e2:	89fb      	ldrh	r3, [r7, #14]
 800c0e4:	2b08      	cmp	r3, #8
 800c0e6:	d003      	beq.n	800c0f0 <ethernet_input+0xa0>
 800c0e8:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800c0ec:	d014      	beq.n	800c118 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800c0ee:	e032      	b.n	800c156 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c0f6:	f003 0308 	and.w	r3, r3, #8
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d024      	beq.n	800c148 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800c0fe:	8afb      	ldrh	r3, [r7, #22]
 800c100:	4619      	mov	r1, r3
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f002 ff58 	bl	800efb8 <pbuf_remove_header>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d11e      	bne.n	800c14c <ethernet_input+0xfc>
        ip4_input(p, netif);
 800c10e:	6839      	ldr	r1, [r7, #0]
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f000 fb95 	bl	800c840 <ip4_input>
      break;
 800c116:	e013      	b.n	800c140 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c11e:	f003 0308 	and.w	r3, r3, #8
 800c122:	2b00      	cmp	r3, #0
 800c124:	d014      	beq.n	800c150 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800c126:	8afb      	ldrh	r3, [r7, #22]
 800c128:	4619      	mov	r1, r3
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f002 ff44 	bl	800efb8 <pbuf_remove_header>
 800c130:	4603      	mov	r3, r0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d10e      	bne.n	800c154 <ethernet_input+0x104>
        etharp_input(p, netif);
 800c136:	6839      	ldr	r1, [r7, #0]
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f7ff fb65 	bl	800b808 <etharp_input>
      break;
 800c13e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800c140:	2300      	movs	r3, #0
 800c142:	e00c      	b.n	800c15e <ethernet_input+0x10e>
    goto free_and_return;
 800c144:	bf00      	nop
 800c146:	e006      	b.n	800c156 <ethernet_input+0x106>
        goto free_and_return;
 800c148:	bf00      	nop
 800c14a:	e004      	b.n	800c156 <ethernet_input+0x106>
        goto free_and_return;
 800c14c:	bf00      	nop
 800c14e:	e002      	b.n	800c156 <ethernet_input+0x106>
        goto free_and_return;
 800c150:	bf00      	nop
 800c152:	e000      	b.n	800c156 <ethernet_input+0x106>
        goto free_and_return;
 800c154:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f002 ffb4 	bl	800f0c4 <pbuf_free>
  return ERR_OK;
 800c15c:	2300      	movs	r3, #0
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3718      	adds	r7, #24
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	0801b96c 	.word	0x0801b96c

0800c16c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b086      	sub	sp, #24
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	607a      	str	r2, [r7, #4]
 800c178:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800c17a:	8c3b      	ldrh	r3, [r7, #32]
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7fe ffeb 	bl	800b158 <lwip_htons>
 800c182:	4603      	mov	r3, r0
 800c184:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800c186:	210e      	movs	r1, #14
 800c188:	68b8      	ldr	r0, [r7, #8]
 800c18a:	f002 ff05 	bl	800ef98 <pbuf_add_header>
 800c18e:	4603      	mov	r3, r0
 800c190:	2b00      	cmp	r3, #0
 800c192:	d125      	bne.n	800c1e0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	685b      	ldr	r3, [r3, #4]
 800c198:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	8afa      	ldrh	r2, [r7, #22]
 800c19e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	2206      	movs	r2, #6
 800c1a4:	6839      	ldr	r1, [r7, #0]
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f00b f855 	bl	8017256 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	3306      	adds	r3, #6
 800c1b0:	2206      	movs	r2, #6
 800c1b2:	6879      	ldr	r1, [r7, #4]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f00b f84e 	bl	8017256 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c1c0:	2b06      	cmp	r3, #6
 800c1c2:	d006      	beq.n	800c1d2 <ethernet_output+0x66>
 800c1c4:	4b0a      	ldr	r3, [pc, #40]	@ (800c1f0 <ethernet_output+0x84>)
 800c1c6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800c1ca:	490a      	ldr	r1, [pc, #40]	@ (800c1f4 <ethernet_output+0x88>)
 800c1cc:	480a      	ldr	r0, [pc, #40]	@ (800c1f8 <ethernet_output+0x8c>)
 800c1ce:	f00a fec5 	bl	8016f5c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	699b      	ldr	r3, [r3, #24]
 800c1d6:	68b9      	ldr	r1, [r7, #8]
 800c1d8:	68f8      	ldr	r0, [r7, #12]
 800c1da:	4798      	blx	r3
 800c1dc:	4603      	mov	r3, r0
 800c1de:	e002      	b.n	800c1e6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800c1e0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800c1e2:	f06f 0301 	mvn.w	r3, #1
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3718      	adds	r7, #24
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	08018e54 	.word	0x08018e54
 800c1f4:	08018ebc 	.word	0x08018ebc
 800c1f8:	08018ef0 	.word	0x08018ef0

0800c1fc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b08e      	sub	sp, #56	@ 0x38
 800c200:	af04      	add	r7, sp, #16
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c206:	4b87      	ldr	r3, [pc, #540]	@ (800c424 <icmp_input+0x228>)
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800c20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	f003 030f 	and.w	r3, r3, #15
 800c214:	b2db      	uxtb	r3, r3
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	b2db      	uxtb	r3, r3
 800c21a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800c21c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c21e:	2b13      	cmp	r3, #19
 800c220:	f240 80e8 	bls.w	800c3f4 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	895b      	ldrh	r3, [r3, #10]
 800c228:	2b03      	cmp	r3, #3
 800c22a:	f240 80e5 	bls.w	800c3f8 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800c238:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f000 80d2 	beq.w	800c3e6 <icmp_input+0x1ea>
 800c242:	2b08      	cmp	r3, #8
 800c244:	f040 80d2 	bne.w	800c3ec <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800c248:	4b77      	ldr	r3, [pc, #476]	@ (800c428 <icmp_input+0x22c>)
 800c24a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c24c:	4b75      	ldr	r3, [pc, #468]	@ (800c424 <icmp_input+0x228>)
 800c24e:	695b      	ldr	r3, [r3, #20]
 800c250:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c254:	2be0      	cmp	r3, #224	@ 0xe0
 800c256:	f000 80d6 	beq.w	800c406 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c25a:	4b72      	ldr	r3, [pc, #456]	@ (800c424 <icmp_input+0x228>)
 800c25c:	695b      	ldr	r3, [r3, #20]
 800c25e:	4a71      	ldr	r2, [pc, #452]	@ (800c424 <icmp_input+0x228>)
 800c260:	6812      	ldr	r2, [r2, #0]
 800c262:	4611      	mov	r1, r2
 800c264:	4618      	mov	r0, r3
 800c266:	f000 fce7 	bl	800cc38 <ip4_addr_isbroadcast_u32>
 800c26a:	4603      	mov	r3, r0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	f040 80cc 	bne.w	800c40a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	891b      	ldrh	r3, [r3, #8]
 800c276:	2b07      	cmp	r3, #7
 800c278:	f240 80c0 	bls.w	800c3fc <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 f9e0 	bl	800c642 <inet_chksum_pbuf>
 800c282:	4603      	mov	r3, r0
 800c284:	2b00      	cmp	r3, #0
 800c286:	d003      	beq.n	800c290 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f002 ff1b 	bl	800f0c4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800c28e:	e0c5      	b.n	800c41c <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c290:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c292:	330e      	adds	r3, #14
 800c294:	4619      	mov	r1, r3
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f002 fe7e 	bl	800ef98 <pbuf_add_header>
 800c29c:	4603      	mov	r3, r0
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d04b      	beq.n	800c33a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	891a      	ldrh	r2, [r3, #8]
 800c2a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c2a8:	4413      	add	r3, r2
 800c2aa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	891b      	ldrh	r3, [r3, #8]
 800c2b0:	8b7a      	ldrh	r2, [r7, #26]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	f0c0 80ab 	bcc.w	800c40e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800c2b8:	8b7b      	ldrh	r3, [r7, #26]
 800c2ba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c2be:	4619      	mov	r1, r3
 800c2c0:	200e      	movs	r0, #14
 800c2c2:	f002 fc1b 	bl	800eafc <pbuf_alloc>
 800c2c6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	f000 80a1 	beq.w	800c412 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	895b      	ldrh	r3, [r3, #10]
 800c2d4:	461a      	mov	r2, r3
 800c2d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c2d8:	3308      	adds	r3, #8
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d203      	bcs.n	800c2e6 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800c2de:	6978      	ldr	r0, [r7, #20]
 800c2e0:	f002 fef0 	bl	800f0c4 <pbuf_free>
          goto icmperr;
 800c2e4:	e096      	b.n	800c414 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c2ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f00a ffb1 	bl	8017256 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800c2f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	6978      	ldr	r0, [r7, #20]
 800c2fa:	f002 fe5d 	bl	800efb8 <pbuf_remove_header>
 800c2fe:	4603      	mov	r3, r0
 800c300:	2b00      	cmp	r3, #0
 800c302:	d009      	beq.n	800c318 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c304:	4b49      	ldr	r3, [pc, #292]	@ (800c42c <icmp_input+0x230>)
 800c306:	22b6      	movs	r2, #182	@ 0xb6
 800c308:	4949      	ldr	r1, [pc, #292]	@ (800c430 <icmp_input+0x234>)
 800c30a:	484a      	ldr	r0, [pc, #296]	@ (800c434 <icmp_input+0x238>)
 800c30c:	f00a fe26 	bl	8016f5c <iprintf>
          pbuf_free(r);
 800c310:	6978      	ldr	r0, [r7, #20]
 800c312:	f002 fed7 	bl	800f0c4 <pbuf_free>
          goto icmperr;
 800c316:	e07d      	b.n	800c414 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800c318:	6879      	ldr	r1, [r7, #4]
 800c31a:	6978      	ldr	r0, [r7, #20]
 800c31c:	f003 f806 	bl	800f32c <pbuf_copy>
 800c320:	4603      	mov	r3, r0
 800c322:	2b00      	cmp	r3, #0
 800c324:	d003      	beq.n	800c32e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800c326:	6978      	ldr	r0, [r7, #20]
 800c328:	f002 fecc 	bl	800f0c4 <pbuf_free>
          goto icmperr;
 800c32c:	e072      	b.n	800c414 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f002 fec8 	bl	800f0c4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	607b      	str	r3, [r7, #4]
 800c338:	e00f      	b.n	800c35a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c33a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c33c:	330e      	adds	r3, #14
 800c33e:	4619      	mov	r1, r3
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f002 fe39 	bl	800efb8 <pbuf_remove_header>
 800c346:	4603      	mov	r3, r0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d006      	beq.n	800c35a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c34c:	4b37      	ldr	r3, [pc, #220]	@ (800c42c <icmp_input+0x230>)
 800c34e:	22c7      	movs	r2, #199	@ 0xc7
 800c350:	4939      	ldr	r1, [pc, #228]	@ (800c438 <icmp_input+0x23c>)
 800c352:	4838      	ldr	r0, [pc, #224]	@ (800c434 <icmp_input+0x238>)
 800c354:	f00a fe02 	bl	8016f5c <iprintf>
          goto icmperr;
 800c358:	e05c      	b.n	800c414 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800c360:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c362:	4619      	mov	r1, r3
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f002 fe17 	bl	800ef98 <pbuf_add_header>
 800c36a:	4603      	mov	r3, r0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d13c      	bne.n	800c3ea <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	685b      	ldr	r3, [r3, #4]
 800c374:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800c376:	69fb      	ldr	r3, [r7, #28]
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c37e:	4b29      	ldr	r3, [pc, #164]	@ (800c424 <icmp_input+0x228>)
 800c380:	691a      	ldr	r2, [r3, #16]
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	2200      	movs	r2, #0
 800c38a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	885b      	ldrh	r3, [r3, #2]
 800c390:	b29b      	uxth	r3, r3
 800c392:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800c396:	4293      	cmp	r3, r2
 800c398:	d907      	bls.n	800c3aa <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	885b      	ldrh	r3, [r3, #2]
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	3309      	adds	r3, #9
 800c3a2:	b29a      	uxth	r2, r3
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	805a      	strh	r2, [r3, #2]
 800c3a8:	e006      	b.n	800c3b8 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	885b      	ldrh	r3, [r3, #2]
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	3308      	adds	r3, #8
 800c3b2:	b29a      	uxth	r2, r3
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	22ff      	movs	r2, #255	@ 0xff
 800c3bc:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	729a      	strb	r2, [r3, #10]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	9302      	str	r3, [sp, #8]
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	9301      	str	r3, [sp, #4]
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	9300      	str	r3, [sp, #0]
 800c3d4:	23ff      	movs	r3, #255	@ 0xff
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	69f9      	ldr	r1, [r7, #28]
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f000 fb54 	bl	800ca88 <ip4_output_if>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800c3e4:	e001      	b.n	800c3ea <icmp_input+0x1ee>
      break;
 800c3e6:	bf00      	nop
 800c3e8:	e000      	b.n	800c3ec <icmp_input+0x1f0>
      break;
 800c3ea:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f002 fe69 	bl	800f0c4 <pbuf_free>
  return;
 800c3f2:	e013      	b.n	800c41c <icmp_input+0x220>
    goto lenerr;
 800c3f4:	bf00      	nop
 800c3f6:	e002      	b.n	800c3fe <icmp_input+0x202>
    goto lenerr;
 800c3f8:	bf00      	nop
 800c3fa:	e000      	b.n	800c3fe <icmp_input+0x202>
        goto lenerr;
 800c3fc:	bf00      	nop
lenerr:
  pbuf_free(p);
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f002 fe60 	bl	800f0c4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c404:	e00a      	b.n	800c41c <icmp_input+0x220>
        goto icmperr;
 800c406:	bf00      	nop
 800c408:	e004      	b.n	800c414 <icmp_input+0x218>
        goto icmperr;
 800c40a:	bf00      	nop
 800c40c:	e002      	b.n	800c414 <icmp_input+0x218>
          goto icmperr;
 800c40e:	bf00      	nop
 800c410:	e000      	b.n	800c414 <icmp_input+0x218>
          goto icmperr;
 800c412:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f002 fe55 	bl	800f0c4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c41a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800c41c:	3728      	adds	r7, #40	@ 0x28
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	24009ca4 	.word	0x24009ca4
 800c428:	24009cb8 	.word	0x24009cb8
 800c42c:	08018f18 	.word	0x08018f18
 800c430:	08018f80 	.word	0x08018f80
 800c434:	08018fb8 	.word	0x08018fb8
 800c438:	08018fe0 	.word	0x08018fe0

0800c43c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	460b      	mov	r3, r1
 800c446:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800c448:	78fb      	ldrb	r3, [r7, #3]
 800c44a:	461a      	mov	r2, r3
 800c44c:	2103      	movs	r1, #3
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 f814 	bl	800c47c <icmp_send_response>
}
 800c454:	bf00      	nop
 800c456:	3708      	adds	r7, #8
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	460b      	mov	r3, r1
 800c466:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800c468:	78fb      	ldrb	r3, [r7, #3]
 800c46a:	461a      	mov	r2, r3
 800c46c:	210b      	movs	r1, #11
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 f804 	bl	800c47c <icmp_send_response>
}
 800c474:	bf00      	nop
 800c476:	3708      	adds	r7, #8
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b08c      	sub	sp, #48	@ 0x30
 800c480:	af04      	add	r7, sp, #16
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	460b      	mov	r3, r1
 800c486:	70fb      	strb	r3, [r7, #3]
 800c488:	4613      	mov	r3, r2
 800c48a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800c48c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c490:	2124      	movs	r1, #36	@ 0x24
 800c492:	2022      	movs	r0, #34	@ 0x22
 800c494:	f002 fb32 	bl	800eafc <pbuf_alloc>
 800c498:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800c49a:	69fb      	ldr	r3, [r7, #28]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d056      	beq.n	800c54e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800c4a0:	69fb      	ldr	r3, [r7, #28]
 800c4a2:	895b      	ldrh	r3, [r3, #10]
 800c4a4:	2b23      	cmp	r3, #35	@ 0x23
 800c4a6:	d806      	bhi.n	800c4b6 <icmp_send_response+0x3a>
 800c4a8:	4b2b      	ldr	r3, [pc, #172]	@ (800c558 <icmp_send_response+0xdc>)
 800c4aa:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800c4ae:	492b      	ldr	r1, [pc, #172]	@ (800c55c <icmp_send_response+0xe0>)
 800c4b0:	482b      	ldr	r0, [pc, #172]	@ (800c560 <icmp_send_response+0xe4>)
 800c4b2:	f00a fd53 	bl	8016f5c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800c4bc:	69fb      	ldr	r3, [r7, #28]
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	78fa      	ldrb	r2, [r7, #3]
 800c4c6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	78ba      	ldrb	r2, [r7, #2]
 800c4cc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	711a      	strb	r2, [r3, #4]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	719a      	strb	r2, [r3, #6]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c4e2:	69fb      	ldr	r3, [r7, #28]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	f103 0008 	add.w	r0, r3, #8
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	221c      	movs	r2, #28
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	f00a feb0 	bl	8017256 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800c4f6:	69bb      	ldr	r3, [r7, #24]
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800c4fc:	f107 030c 	add.w	r3, r7, #12
 800c500:	4618      	mov	r0, r3
 800c502:	f000 f903 	bl	800c70c <ip4_route>
 800c506:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d01b      	beq.n	800c546 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	2200      	movs	r2, #0
 800c512:	709a      	strb	r2, [r3, #2]
 800c514:	2200      	movs	r2, #0
 800c516:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800c518:	69fb      	ldr	r3, [r7, #28]
 800c51a:	895b      	ldrh	r3, [r3, #10]
 800c51c:	4619      	mov	r1, r3
 800c51e:	6978      	ldr	r0, [r7, #20]
 800c520:	f000 f87d 	bl	800c61e <inet_chksum>
 800c524:	4603      	mov	r3, r0
 800c526:	461a      	mov	r2, r3
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800c52c:	f107 020c 	add.w	r2, r7, #12
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	9302      	str	r3, [sp, #8]
 800c534:	2301      	movs	r3, #1
 800c536:	9301      	str	r3, [sp, #4]
 800c538:	2300      	movs	r3, #0
 800c53a:	9300      	str	r3, [sp, #0]
 800c53c:	23ff      	movs	r3, #255	@ 0xff
 800c53e:	2100      	movs	r1, #0
 800c540:	69f8      	ldr	r0, [r7, #28]
 800c542:	f000 faa1 	bl	800ca88 <ip4_output_if>
  }
  pbuf_free(q);
 800c546:	69f8      	ldr	r0, [r7, #28]
 800c548:	f002 fdbc 	bl	800f0c4 <pbuf_free>
 800c54c:	e000      	b.n	800c550 <icmp_send_response+0xd4>
    return;
 800c54e:	bf00      	nop
}
 800c550:	3720      	adds	r7, #32
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	08018f18 	.word	0x08018f18
 800c55c:	08019014 	.word	0x08019014
 800c560:	08018fb8 	.word	0x08018fb8

0800c564 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800c564:	b480      	push	{r7}
 800c566:	b089      	sub	sp, #36	@ 0x24
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800c572:	2300      	movs	r3, #0
 800c574:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800c576:	2300      	movs	r3, #0
 800c578:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	f003 0301 	and.w	r3, r3, #1
 800c580:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d00d      	beq.n	800c5a4 <lwip_standard_chksum+0x40>
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	dd0a      	ble.n	800c5a4 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800c58e:	69fa      	ldr	r2, [r7, #28]
 800c590:	1c53      	adds	r3, r2, #1
 800c592:	61fb      	str	r3, [r7, #28]
 800c594:	f107 030e 	add.w	r3, r7, #14
 800c598:	3301      	adds	r3, #1
 800c59a:	7812      	ldrb	r2, [r2, #0]
 800c59c:	701a      	strb	r2, [r3, #0]
    len--;
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	3b01      	subs	r3, #1
 800c5a2:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800c5a4:	69fb      	ldr	r3, [r7, #28]
 800c5a6:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800c5a8:	e00a      	b.n	800c5c0 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	1c9a      	adds	r2, r3, #2
 800c5ae:	61ba      	str	r2, [r7, #24]
 800c5b0:	881b      	ldrh	r3, [r3, #0]
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	617b      	str	r3, [r7, #20]
    len -= 2;
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	3b02      	subs	r3, #2
 800c5be:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	dcf1      	bgt.n	800c5aa <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	dd04      	ble.n	800c5d6 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800c5cc:	f107 030e 	add.w	r3, r7, #14
 800c5d0:	69ba      	ldr	r2, [r7, #24]
 800c5d2:	7812      	ldrb	r2, [r2, #0]
 800c5d4:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800c5d6:	89fb      	ldrh	r3, [r7, #14]
 800c5d8:	461a      	mov	r2, r3
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	4413      	add	r3, r2
 800c5de:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	0c1a      	lsrs	r2, r3, #16
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	4413      	add	r3, r2
 800c5ea:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	0c1a      	lsrs	r2, r3, #16
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	b29b      	uxth	r3, r3
 800c5f4:	4413      	add	r3, r2
 800c5f6:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d007      	beq.n	800c60e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	021b      	lsls	r3, r3, #8
 800c602:	b29a      	uxth	r2, r3
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	0a1b      	lsrs	r3, r3, #8
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	4313      	orrs	r3, r2
 800c60c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	b29b      	uxth	r3, r3
}
 800c612:	4618      	mov	r0, r3
 800c614:	3724      	adds	r7, #36	@ 0x24
 800c616:	46bd      	mov	sp, r7
 800c618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61c:	4770      	bx	lr

0800c61e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800c61e:	b580      	push	{r7, lr}
 800c620:	b082      	sub	sp, #8
 800c622:	af00      	add	r7, sp, #0
 800c624:	6078      	str	r0, [r7, #4]
 800c626:	460b      	mov	r3, r1
 800c628:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800c62a:	887b      	ldrh	r3, [r7, #2]
 800c62c:	4619      	mov	r1, r3
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f7ff ff98 	bl	800c564 <lwip_standard_chksum>
 800c634:	4603      	mov	r3, r0
 800c636:	43db      	mvns	r3, r3
 800c638:	b29b      	uxth	r3, r3
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3708      	adds	r7, #8
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}

0800c642 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800c642:	b580      	push	{r7, lr}
 800c644:	b086      	sub	sp, #24
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800c64a:	2300      	movs	r3, #0
 800c64c:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800c64e:	2300      	movs	r3, #0
 800c650:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	613b      	str	r3, [r7, #16]
 800c656:	e02b      	b.n	800c6b0 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	685a      	ldr	r2, [r3, #4]
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	895b      	ldrh	r3, [r3, #10]
 800c660:	4619      	mov	r1, r3
 800c662:	4610      	mov	r0, r2
 800c664:	f7ff ff7e 	bl	800c564 <lwip_standard_chksum>
 800c668:	4603      	mov	r3, r0
 800c66a:	461a      	mov	r2, r3
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	4413      	add	r3, r2
 800c670:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	0c1a      	lsrs	r2, r3, #16
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	b29b      	uxth	r3, r3
 800c67a:	4413      	add	r3, r2
 800c67c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	895b      	ldrh	r3, [r3, #10]
 800c682:	f003 0301 	and.w	r3, r3, #1
 800c686:	b29b      	uxth	r3, r3
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d00e      	beq.n	800c6aa <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	bf0c      	ite	eq
 800c692:	2301      	moveq	r3, #1
 800c694:	2300      	movne	r3, #0
 800c696:	b2db      	uxtb	r3, r3
 800c698:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	021b      	lsls	r3, r3, #8
 800c69e:	b29a      	uxth	r2, r3
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	0a1b      	lsrs	r3, r3, #8
 800c6a4:	b2db      	uxtb	r3, r3
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	613b      	str	r3, [r7, #16]
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d1d0      	bne.n	800c658 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d007      	beq.n	800c6cc <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	021b      	lsls	r3, r3, #8
 800c6c0:	b29a      	uxth	r2, r3
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	0a1b      	lsrs	r3, r3, #8
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	4313      	orrs	r3, r2
 800c6ca:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	43db      	mvns	r3, r3
 800c6d2:	b29b      	uxth	r3, r3
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3718      	adds	r7, #24
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c6e6:	f003 f963 	bl	800f9b0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c6ea:	f001 f9eb 	bl	800dac4 <mem_init>
  memp_init();
 800c6ee:	f001 fd43 	bl	800e178 <memp_init>
  pbuf_init();
  netif_init();
 800c6f2:	f001 fe6e 	bl	800e3d2 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c6f6:	f009 fdd9 	bl	80162ac <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c6fa:	f003 f9d5 	bl	800faa8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c6fe:	f009 fd1b 	bl	8016138 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c702:	bf00      	nop
 800c704:	3708      	adds	r7, #8
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
	...

0800c70c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b085      	sub	sp, #20
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800c714:	4b33      	ldr	r3, [pc, #204]	@ (800c7e4 <ip4_route+0xd8>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	60fb      	str	r3, [r7, #12]
 800c71a:	e036      	b.n	800c78a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c722:	f003 0301 	and.w	r3, r3, #1
 800c726:	b2db      	uxtb	r3, r3
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d02b      	beq.n	800c784 <ip4_route+0x78>
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c732:	089b      	lsrs	r3, r3, #2
 800c734:	f003 0301 	and.w	r3, r3, #1
 800c738:	b2db      	uxtb	r3, r3
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d022      	beq.n	800c784 <ip4_route+0x78>
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	3304      	adds	r3, #4
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d01d      	beq.n	800c784 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681a      	ldr	r2, [r3, #0]
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	3304      	adds	r3, #4
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	405a      	eors	r2, r3
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	3308      	adds	r3, #8
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4013      	ands	r3, r2
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d101      	bne.n	800c764 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	e038      	b.n	800c7d6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c76a:	f003 0302 	and.w	r3, r3, #2
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d108      	bne.n	800c784 <ip4_route+0x78>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681a      	ldr	r2, [r3, #0]
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	330c      	adds	r3, #12
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d101      	bne.n	800c784 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	e028      	b.n	800c7d6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	60fb      	str	r3, [r7, #12]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d1c5      	bne.n	800c71c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c790:	4b15      	ldr	r3, [pc, #84]	@ (800c7e8 <ip4_route+0xdc>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d01a      	beq.n	800c7ce <ip4_route+0xc2>
 800c798:	4b13      	ldr	r3, [pc, #76]	@ (800c7e8 <ip4_route+0xdc>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c7a0:	f003 0301 	and.w	r3, r3, #1
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d012      	beq.n	800c7ce <ip4_route+0xc2>
 800c7a8:	4b0f      	ldr	r3, [pc, #60]	@ (800c7e8 <ip4_route+0xdc>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c7b0:	f003 0304 	and.w	r3, r3, #4
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d00a      	beq.n	800c7ce <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800c7b8:	4b0b      	ldr	r3, [pc, #44]	@ (800c7e8 <ip4_route+0xdc>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	3304      	adds	r3, #4
 800c7be:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d004      	beq.n	800c7ce <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	2b7f      	cmp	r3, #127	@ 0x7f
 800c7cc:	d101      	bne.n	800c7d2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	e001      	b.n	800c7d6 <ip4_route+0xca>
  }

  return netif_default;
 800c7d2:	4b05      	ldr	r3, [pc, #20]	@ (800c7e8 <ip4_route+0xdc>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3714      	adds	r7, #20
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr
 800c7e2:	bf00      	nop
 800c7e4:	2400cda4 	.word	0x2400cda4
 800c7e8:	2400cda8 	.word	0x2400cda8

0800c7ec <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b082      	sub	sp, #8
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c7fa:	f003 0301 	and.w	r3, r3, #1
 800c7fe:	b2db      	uxtb	r3, r3
 800c800:	2b00      	cmp	r3, #0
 800c802:	d016      	beq.n	800c832 <ip4_input_accept+0x46>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	3304      	adds	r3, #4
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d011      	beq.n	800c832 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c80e:	4b0b      	ldr	r3, [pc, #44]	@ (800c83c <ip4_input_accept+0x50>)
 800c810:	695a      	ldr	r2, [r3, #20]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	3304      	adds	r3, #4
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d008      	beq.n	800c82e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800c81c:	4b07      	ldr	r3, [pc, #28]	@ (800c83c <ip4_input_accept+0x50>)
 800c81e:	695b      	ldr	r3, [r3, #20]
 800c820:	6879      	ldr	r1, [r7, #4]
 800c822:	4618      	mov	r0, r3
 800c824:	f000 fa08 	bl	800cc38 <ip4_addr_isbroadcast_u32>
 800c828:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d001      	beq.n	800c832 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800c82e:	2301      	movs	r3, #1
 800c830:	e000      	b.n	800c834 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800c832:	2300      	movs	r3, #0
}
 800c834:	4618      	mov	r0, r3
 800c836:	3708      	adds	r7, #8
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	24009ca4 	.word	0x24009ca4

0800c840 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b086      	sub	sp, #24
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	685b      	ldr	r3, [r3, #4]
 800c84e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	781b      	ldrb	r3, [r3, #0]
 800c854:	091b      	lsrs	r3, r3, #4
 800c856:	b2db      	uxtb	r3, r3
 800c858:	2b04      	cmp	r3, #4
 800c85a:	d004      	beq.n	800c866 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f002 fc31 	bl	800f0c4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800c862:	2300      	movs	r3, #0
 800c864:	e107      	b.n	800ca76 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	f003 030f 	and.w	r3, r3, #15
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	b2db      	uxtb	r3, r3
 800c874:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	885b      	ldrh	r3, [r3, #2]
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7fe fc6b 	bl	800b158 <lwip_htons>
 800c882:	4603      	mov	r3, r0
 800c884:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	891b      	ldrh	r3, [r3, #8]
 800c88a:	89ba      	ldrh	r2, [r7, #12]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d204      	bcs.n	800c89a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800c890:	89bb      	ldrh	r3, [r7, #12]
 800c892:	4619      	mov	r1, r3
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f002 fa8f 	bl	800edb8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	895b      	ldrh	r3, [r3, #10]
 800c89e:	89fa      	ldrh	r2, [r7, #14]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d807      	bhi.n	800c8b4 <ip4_input+0x74>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	891b      	ldrh	r3, [r3, #8]
 800c8a8:	89ba      	ldrh	r2, [r7, #12]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d802      	bhi.n	800c8b4 <ip4_input+0x74>
 800c8ae:	89fb      	ldrh	r3, [r7, #14]
 800c8b0:	2b13      	cmp	r3, #19
 800c8b2:	d804      	bhi.n	800c8be <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f002 fc05 	bl	800f0c4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	e0db      	b.n	800ca76 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	691b      	ldr	r3, [r3, #16]
 800c8c2:	4a6f      	ldr	r2, [pc, #444]	@ (800ca80 <ip4_input+0x240>)
 800c8c4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	68db      	ldr	r3, [r3, #12]
 800c8ca:	4a6d      	ldr	r2, [pc, #436]	@ (800ca80 <ip4_input+0x240>)
 800c8cc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c8ce:	4b6c      	ldr	r3, [pc, #432]	@ (800ca80 <ip4_input+0x240>)
 800c8d0:	695b      	ldr	r3, [r3, #20]
 800c8d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c8d6:	2be0      	cmp	r3, #224	@ 0xe0
 800c8d8:	d112      	bne.n	800c900 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c8e0:	f003 0301 	and.w	r3, r3, #1
 800c8e4:	b2db      	uxtb	r3, r3
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d007      	beq.n	800c8fa <ip4_input+0xba>
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	3304      	adds	r3, #4
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d002      	beq.n	800c8fa <ip4_input+0xba>
      netif = inp;
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	613b      	str	r3, [r7, #16]
 800c8f8:	e02a      	b.n	800c950 <ip4_input+0x110>
    } else {
      netif = NULL;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	613b      	str	r3, [r7, #16]
 800c8fe:	e027      	b.n	800c950 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800c900:	6838      	ldr	r0, [r7, #0]
 800c902:	f7ff ff73 	bl	800c7ec <ip4_input_accept>
 800c906:	4603      	mov	r3, r0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d002      	beq.n	800c912 <ip4_input+0xd2>
      netif = inp;
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	613b      	str	r3, [r7, #16]
 800c910:	e01e      	b.n	800c950 <ip4_input+0x110>
    } else {
      netif = NULL;
 800c912:	2300      	movs	r3, #0
 800c914:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800c916:	4b5a      	ldr	r3, [pc, #360]	@ (800ca80 <ip4_input+0x240>)
 800c918:	695b      	ldr	r3, [r3, #20]
 800c91a:	b2db      	uxtb	r3, r3
 800c91c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c91e:	d017      	beq.n	800c950 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800c920:	4b58      	ldr	r3, [pc, #352]	@ (800ca84 <ip4_input+0x244>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	613b      	str	r3, [r7, #16]
 800c926:	e00e      	b.n	800c946 <ip4_input+0x106>
          if (netif == inp) {
 800c928:	693a      	ldr	r2, [r7, #16]
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d006      	beq.n	800c93e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800c930:	6938      	ldr	r0, [r7, #16]
 800c932:	f7ff ff5b 	bl	800c7ec <ip4_input_accept>
 800c936:	4603      	mov	r3, r0
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d108      	bne.n	800c94e <ip4_input+0x10e>
 800c93c:	e000      	b.n	800c940 <ip4_input+0x100>
            continue;
 800c93e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	613b      	str	r3, [r7, #16]
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d1ed      	bne.n	800c928 <ip4_input+0xe8>
 800c94c:	e000      	b.n	800c950 <ip4_input+0x110>
            break;
 800c94e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c950:	4b4b      	ldr	r3, [pc, #300]	@ (800ca80 <ip4_input+0x240>)
 800c952:	691b      	ldr	r3, [r3, #16]
 800c954:	6839      	ldr	r1, [r7, #0]
 800c956:	4618      	mov	r0, r3
 800c958:	f000 f96e 	bl	800cc38 <ip4_addr_isbroadcast_u32>
 800c95c:	4603      	mov	r3, r0
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d105      	bne.n	800c96e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800c962:	4b47      	ldr	r3, [pc, #284]	@ (800ca80 <ip4_input+0x240>)
 800c964:	691b      	ldr	r3, [r3, #16]
 800c966:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c96a:	2be0      	cmp	r3, #224	@ 0xe0
 800c96c:	d104      	bne.n	800c978 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f002 fba8 	bl	800f0c4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800c974:	2300      	movs	r3, #0
 800c976:	e07e      	b.n	800ca76 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d104      	bne.n	800c988 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f002 fba0 	bl	800f0c4 <pbuf_free>
    return ERR_OK;
 800c984:	2300      	movs	r3, #0
 800c986:	e076      	b.n	800ca76 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	88db      	ldrh	r3, [r3, #6]
 800c98c:	b29b      	uxth	r3, r3
 800c98e:	461a      	mov	r2, r3
 800c990:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800c994:	4013      	ands	r3, r2
 800c996:	2b00      	cmp	r3, #0
 800c998:	d00b      	beq.n	800c9b2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 fc92 	bl	800d2c4 <ip4_reass>
 800c9a0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d101      	bne.n	800c9ac <ip4_input+0x16c>
      return ERR_OK;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	e064      	b.n	800ca76 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800c9b2:	4a33      	ldr	r2, [pc, #204]	@ (800ca80 <ip4_input+0x240>)
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800c9b8:	4a31      	ldr	r2, [pc, #196]	@ (800ca80 <ip4_input+0x240>)
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800c9be:	4a30      	ldr	r2, [pc, #192]	@ (800ca80 <ip4_input+0x240>)
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	f003 030f 	and.w	r3, r3, #15
 800c9cc:	b2db      	uxtb	r3, r3
 800c9ce:	009b      	lsls	r3, r3, #2
 800c9d0:	b2db      	uxtb	r3, r3
 800c9d2:	461a      	mov	r2, r3
 800c9d4:	4b2a      	ldr	r3, [pc, #168]	@ (800ca80 <ip4_input+0x240>)
 800c9d6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800c9d8:	89fb      	ldrh	r3, [r7, #14]
 800c9da:	4619      	mov	r1, r3
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f002 faeb 	bl	800efb8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	7a5b      	ldrb	r3, [r3, #9]
 800c9e6:	2b11      	cmp	r3, #17
 800c9e8:	d006      	beq.n	800c9f8 <ip4_input+0x1b8>
 800c9ea:	2b11      	cmp	r3, #17
 800c9ec:	dc13      	bgt.n	800ca16 <ip4_input+0x1d6>
 800c9ee:	2b01      	cmp	r3, #1
 800c9f0:	d00c      	beq.n	800ca0c <ip4_input+0x1cc>
 800c9f2:	2b06      	cmp	r3, #6
 800c9f4:	d005      	beq.n	800ca02 <ip4_input+0x1c2>
 800c9f6:	e00e      	b.n	800ca16 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800c9f8:	6839      	ldr	r1, [r7, #0]
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f009 fd04 	bl	8016408 <udp_input>
        break;
 800ca00:	e026      	b.n	800ca50 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800ca02:	6839      	ldr	r1, [r7, #0]
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f004 ff0b 	bl	8011820 <tcp_input>
        break;
 800ca0a:	e021      	b.n	800ca50 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800ca0c:	6839      	ldr	r1, [r7, #0]
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f7ff fbf4 	bl	800c1fc <icmp_input>
        break;
 800ca14:	e01c      	b.n	800ca50 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ca16:	4b1a      	ldr	r3, [pc, #104]	@ (800ca80 <ip4_input+0x240>)
 800ca18:	695b      	ldr	r3, [r3, #20]
 800ca1a:	6939      	ldr	r1, [r7, #16]
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f000 f90b 	bl	800cc38 <ip4_addr_isbroadcast_u32>
 800ca22:	4603      	mov	r3, r0
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d10f      	bne.n	800ca48 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ca28:	4b15      	ldr	r3, [pc, #84]	@ (800ca80 <ip4_input+0x240>)
 800ca2a:	695b      	ldr	r3, [r3, #20]
 800ca2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ca30:	2be0      	cmp	r3, #224	@ 0xe0
 800ca32:	d009      	beq.n	800ca48 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800ca34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ca38:	4619      	mov	r1, r3
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f002 fb2f 	bl	800f09e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ca40:	2102      	movs	r1, #2
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f7ff fcfa 	bl	800c43c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f002 fb3b 	bl	800f0c4 <pbuf_free>
        break;
 800ca4e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ca50:	4b0b      	ldr	r3, [pc, #44]	@ (800ca80 <ip4_input+0x240>)
 800ca52:	2200      	movs	r2, #0
 800ca54:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ca56:	4b0a      	ldr	r3, [pc, #40]	@ (800ca80 <ip4_input+0x240>)
 800ca58:	2200      	movs	r2, #0
 800ca5a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ca5c:	4b08      	ldr	r3, [pc, #32]	@ (800ca80 <ip4_input+0x240>)
 800ca5e:	2200      	movs	r2, #0
 800ca60:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ca62:	4b07      	ldr	r3, [pc, #28]	@ (800ca80 <ip4_input+0x240>)
 800ca64:	2200      	movs	r2, #0
 800ca66:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ca68:	4b05      	ldr	r3, [pc, #20]	@ (800ca80 <ip4_input+0x240>)
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ca6e:	4b04      	ldr	r3, [pc, #16]	@ (800ca80 <ip4_input+0x240>)
 800ca70:	2200      	movs	r2, #0
 800ca72:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800ca74:	2300      	movs	r3, #0
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3718      	adds	r7, #24
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}
 800ca7e:	bf00      	nop
 800ca80:	24009ca4 	.word	0x24009ca4
 800ca84:	2400cda4 	.word	0x2400cda4

0800ca88 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b08a      	sub	sp, #40	@ 0x28
 800ca8c:	af04      	add	r7, sp, #16
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	607a      	str	r2, [r7, #4]
 800ca94:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d009      	beq.n	800cab4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d003      	beq.n	800caae <ip4_output_if+0x26>
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d102      	bne.n	800cab4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800caae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cab0:	3304      	adds	r3, #4
 800cab2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800cab4:	78fa      	ldrb	r2, [r7, #3]
 800cab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cab8:	9302      	str	r3, [sp, #8]
 800caba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cabe:	9301      	str	r3, [sp, #4]
 800cac0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cac4:	9300      	str	r3, [sp, #0]
 800cac6:	4613      	mov	r3, r2
 800cac8:	687a      	ldr	r2, [r7, #4]
 800caca:	6979      	ldr	r1, [r7, #20]
 800cacc:	68f8      	ldr	r0, [r7, #12]
 800cace:	f000 f805 	bl	800cadc <ip4_output_if_src>
 800cad2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3718      	adds	r7, #24
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b088      	sub	sp, #32
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	60f8      	str	r0, [r7, #12]
 800cae4:	60b9      	str	r1, [r7, #8]
 800cae6:	607a      	str	r2, [r7, #4]
 800cae8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	7b9b      	ldrb	r3, [r3, #14]
 800caee:	2b01      	cmp	r3, #1
 800caf0:	d006      	beq.n	800cb00 <ip4_output_if_src+0x24>
 800caf2:	4b4b      	ldr	r3, [pc, #300]	@ (800cc20 <ip4_output_if_src+0x144>)
 800caf4:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800caf8:	494a      	ldr	r1, [pc, #296]	@ (800cc24 <ip4_output_if_src+0x148>)
 800cafa:	484b      	ldr	r0, [pc, #300]	@ (800cc28 <ip4_output_if_src+0x14c>)
 800cafc:	f00a fa2e 	bl	8016f5c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d060      	beq.n	800cbc8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800cb06:	2314      	movs	r3, #20
 800cb08:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800cb0a:	2114      	movs	r1, #20
 800cb0c:	68f8      	ldr	r0, [r7, #12]
 800cb0e:	f002 fa43 	bl	800ef98 <pbuf_add_header>
 800cb12:	4603      	mov	r3, r0
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d002      	beq.n	800cb1e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800cb18:	f06f 0301 	mvn.w	r3, #1
 800cb1c:	e07c      	b.n	800cc18 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	895b      	ldrh	r3, [r3, #10]
 800cb28:	2b13      	cmp	r3, #19
 800cb2a:	d806      	bhi.n	800cb3a <ip4_output_if_src+0x5e>
 800cb2c:	4b3c      	ldr	r3, [pc, #240]	@ (800cc20 <ip4_output_if_src+0x144>)
 800cb2e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800cb32:	493e      	ldr	r1, [pc, #248]	@ (800cc2c <ip4_output_if_src+0x150>)
 800cb34:	483c      	ldr	r0, [pc, #240]	@ (800cc28 <ip4_output_if_src+0x14c>)
 800cb36:	f00a fa11 	bl	8016f5c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800cb3a:	69fb      	ldr	r3, [r7, #28]
 800cb3c:	78fa      	ldrb	r2, [r7, #3]
 800cb3e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800cb40:	69fb      	ldr	r3, [r7, #28]
 800cb42:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800cb46:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	69fb      	ldr	r3, [r7, #28]
 800cb4e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800cb50:	8b7b      	ldrh	r3, [r7, #26]
 800cb52:	089b      	lsrs	r3, r3, #2
 800cb54:	b29b      	uxth	r3, r3
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb5c:	b2da      	uxtb	r2, r3
 800cb5e:	69fb      	ldr	r3, [r7, #28]
 800cb60:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800cb62:	69fb      	ldr	r3, [r7, #28]
 800cb64:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800cb68:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	891b      	ldrh	r3, [r3, #8]
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7fe faf2 	bl	800b158 <lwip_htons>
 800cb74:	4603      	mov	r3, r0
 800cb76:	461a      	mov	r2, r3
 800cb78:	69fb      	ldr	r3, [r7, #28]
 800cb7a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800cb7c:	69fb      	ldr	r3, [r7, #28]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	719a      	strb	r2, [r3, #6]
 800cb82:	2200      	movs	r2, #0
 800cb84:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800cb86:	4b2a      	ldr	r3, [pc, #168]	@ (800cc30 <ip4_output_if_src+0x154>)
 800cb88:	881b      	ldrh	r3, [r3, #0]
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7fe fae4 	bl	800b158 <lwip_htons>
 800cb90:	4603      	mov	r3, r0
 800cb92:	461a      	mov	r2, r3
 800cb94:	69fb      	ldr	r3, [r7, #28]
 800cb96:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800cb98:	4b25      	ldr	r3, [pc, #148]	@ (800cc30 <ip4_output_if_src+0x154>)
 800cb9a:	881b      	ldrh	r3, [r3, #0]
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	b29a      	uxth	r2, r3
 800cba0:	4b23      	ldr	r3, [pc, #140]	@ (800cc30 <ip4_output_if_src+0x154>)
 800cba2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d104      	bne.n	800cbb4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800cbaa:	4b22      	ldr	r3, [pc, #136]	@ (800cc34 <ip4_output_if_src+0x158>)
 800cbac:	681a      	ldr	r2, [r3, #0]
 800cbae:	69fb      	ldr	r3, [r7, #28]
 800cbb0:	60da      	str	r2, [r3, #12]
 800cbb2:	e003      	b.n	800cbbc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	681a      	ldr	r2, [r3, #0]
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	729a      	strb	r2, [r3, #10]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	72da      	strb	r2, [r3, #11]
 800cbc6:	e00f      	b.n	800cbe8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	895b      	ldrh	r3, [r3, #10]
 800cbcc:	2b13      	cmp	r3, #19
 800cbce:	d802      	bhi.n	800cbd6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800cbd0:	f06f 0301 	mvn.w	r3, #1
 800cbd4:	e020      	b.n	800cc18 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	685b      	ldr	r3, [r3, #4]
 800cbda:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800cbdc:	69fb      	ldr	r3, [r7, #28]
 800cbde:	691b      	ldr	r3, [r3, #16]
 800cbe0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800cbe2:	f107 0314 	add.w	r3, r7, #20
 800cbe6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800cbe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d00c      	beq.n	800cc0a <ip4_output_if_src+0x12e>
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	891a      	ldrh	r2, [r3, #8]
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d906      	bls.n	800cc0a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cc00:	68f8      	ldr	r0, [r7, #12]
 800cc02:	f000 fd53 	bl	800d6ac <ip4_frag>
 800cc06:	4603      	mov	r3, r0
 800cc08:	e006      	b.n	800cc18 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800cc0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc0c:	695b      	ldr	r3, [r3, #20]
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	68f9      	ldr	r1, [r7, #12]
 800cc12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cc14:	4798      	blx	r3
 800cc16:	4603      	mov	r3, r0
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3720      	adds	r7, #32
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	08019040 	.word	0x08019040
 800cc24:	080190a8 	.word	0x080190a8
 800cc28:	080190b4 	.word	0x080190b4
 800cc2c:	080190dc 	.word	0x080190dc
 800cc30:	24009cbc 	.word	0x24009cbc
 800cc34:	0801b97c 	.word	0x0801b97c

0800cc38 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b085      	sub	sp, #20
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc4c:	d002      	beq.n	800cc54 <ip4_addr_isbroadcast_u32+0x1c>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d101      	bne.n	800cc58 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800cc54:	2301      	movs	r3, #1
 800cc56:	e02a      	b.n	800ccae <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cc5e:	f003 0302 	and.w	r3, r3, #2
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d101      	bne.n	800cc6a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800cc66:	2300      	movs	r3, #0
 800cc68:	e021      	b.n	800ccae <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	3304      	adds	r3, #4
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d101      	bne.n	800cc7a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800cc76:	2300      	movs	r3, #0
 800cc78:	e019      	b.n	800ccae <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800cc7a:	68fa      	ldr	r2, [r7, #12]
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	3304      	adds	r3, #4
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	405a      	eors	r2, r3
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	3308      	adds	r3, #8
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	4013      	ands	r3, r2
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d10d      	bne.n	800ccac <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	3308      	adds	r3, #8
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	43da      	mvns	r2, r3
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	3308      	adds	r3, #8
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d101      	bne.n	800ccac <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e000      	b.n	800ccae <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800ccac:	2300      	movs	r3, #0
  }
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3714      	adds	r7, #20
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb8:	4770      	bx	lr
	...

0800ccbc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b084      	sub	sp, #16
 800ccc0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ccc6:	4b12      	ldr	r3, [pc, #72]	@ (800cd10 <ip_reass_tmr+0x54>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800cccc:	e018      	b.n	800cd00 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	7fdb      	ldrb	r3, [r3, #31]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d00b      	beq.n	800ccee <ip_reass_tmr+0x32>
      r->timer--;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	7fdb      	ldrb	r3, [r3, #31]
 800ccda:	3b01      	subs	r3, #1
 800ccdc:	b2da      	uxtb	r2, r3
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	60fb      	str	r3, [r7, #12]
 800ccec:	e008      	b.n	800cd00 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ccf8:	68b9      	ldr	r1, [r7, #8]
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f000 f80a 	bl	800cd14 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d1e3      	bne.n	800ccce <ip_reass_tmr+0x12>
    }
  }
}
 800cd06:	bf00      	nop
 800cd08:	bf00      	nop
 800cd0a:	3710      	adds	r7, #16
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	24009cc0 	.word	0x24009cc0

0800cd14 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b088      	sub	sp, #32
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800cd22:	683a      	ldr	r2, [r7, #0]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d105      	bne.n	800cd36 <ip_reass_free_complete_datagram+0x22>
 800cd2a:	4b45      	ldr	r3, [pc, #276]	@ (800ce40 <ip_reass_free_complete_datagram+0x12c>)
 800cd2c:	22ab      	movs	r2, #171	@ 0xab
 800cd2e:	4945      	ldr	r1, [pc, #276]	@ (800ce44 <ip_reass_free_complete_datagram+0x130>)
 800cd30:	4845      	ldr	r0, [pc, #276]	@ (800ce48 <ip_reass_free_complete_datagram+0x134>)
 800cd32:	f00a f913 	bl	8016f5c <iprintf>
  if (prev != NULL) {
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d00a      	beq.n	800cd52 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d005      	beq.n	800cd52 <ip_reass_free_complete_datagram+0x3e>
 800cd46:	4b3e      	ldr	r3, [pc, #248]	@ (800ce40 <ip_reass_free_complete_datagram+0x12c>)
 800cd48:	22ad      	movs	r2, #173	@ 0xad
 800cd4a:	4940      	ldr	r1, [pc, #256]	@ (800ce4c <ip_reass_free_complete_datagram+0x138>)
 800cd4c:	483e      	ldr	r0, [pc, #248]	@ (800ce48 <ip_reass_free_complete_datagram+0x134>)
 800cd4e:	f00a f905 	bl	8016f5c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	685b      	ldr	r3, [r3, #4]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	889b      	ldrh	r3, [r3, #4]
 800cd5e:	b29b      	uxth	r3, r3
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d12a      	bne.n	800cdba <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800cd72:	69bb      	ldr	r3, [r7, #24]
 800cd74:	6858      	ldr	r0, [r3, #4]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	3308      	adds	r3, #8
 800cd7a:	2214      	movs	r2, #20
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	f00a fa6a 	bl	8017256 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800cd82:	2101      	movs	r1, #1
 800cd84:	69b8      	ldr	r0, [r7, #24]
 800cd86:	f7ff fb69 	bl	800c45c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800cd8a:	69b8      	ldr	r0, [r7, #24]
 800cd8c:	f002 fa28 	bl	800f1e0 <pbuf_clen>
 800cd90:	4603      	mov	r3, r0
 800cd92:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800cd94:	8bfa      	ldrh	r2, [r7, #30]
 800cd96:	8a7b      	ldrh	r3, [r7, #18]
 800cd98:	4413      	add	r3, r2
 800cd9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd9e:	db05      	blt.n	800cdac <ip_reass_free_complete_datagram+0x98>
 800cda0:	4b27      	ldr	r3, [pc, #156]	@ (800ce40 <ip_reass_free_complete_datagram+0x12c>)
 800cda2:	22bc      	movs	r2, #188	@ 0xbc
 800cda4:	492a      	ldr	r1, [pc, #168]	@ (800ce50 <ip_reass_free_complete_datagram+0x13c>)
 800cda6:	4828      	ldr	r0, [pc, #160]	@ (800ce48 <ip_reass_free_complete_datagram+0x134>)
 800cda8:	f00a f8d8 	bl	8016f5c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800cdac:	8bfa      	ldrh	r2, [r7, #30]
 800cdae:	8a7b      	ldrh	r3, [r7, #18]
 800cdb0:	4413      	add	r3, r2
 800cdb2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800cdb4:	69b8      	ldr	r0, [r7, #24]
 800cdb6:	f002 f985 	bl	800f0c4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800cdc0:	e01f      	b.n	800ce02 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800cdc2:	69bb      	ldr	r3, [r7, #24]
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	617b      	str	r3, [r7, #20]
    pcur = p;
 800cdc8:	69bb      	ldr	r3, [r7, #24]
 800cdca:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800cdd2:	68f8      	ldr	r0, [r7, #12]
 800cdd4:	f002 fa04 	bl	800f1e0 <pbuf_clen>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800cddc:	8bfa      	ldrh	r2, [r7, #30]
 800cdde:	8a7b      	ldrh	r3, [r7, #18]
 800cde0:	4413      	add	r3, r2
 800cde2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cde6:	db05      	blt.n	800cdf4 <ip_reass_free_complete_datagram+0xe0>
 800cde8:	4b15      	ldr	r3, [pc, #84]	@ (800ce40 <ip_reass_free_complete_datagram+0x12c>)
 800cdea:	22cc      	movs	r2, #204	@ 0xcc
 800cdec:	4918      	ldr	r1, [pc, #96]	@ (800ce50 <ip_reass_free_complete_datagram+0x13c>)
 800cdee:	4816      	ldr	r0, [pc, #88]	@ (800ce48 <ip_reass_free_complete_datagram+0x134>)
 800cdf0:	f00a f8b4 	bl	8016f5c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800cdf4:	8bfa      	ldrh	r2, [r7, #30]
 800cdf6:	8a7b      	ldrh	r3, [r7, #18]
 800cdf8:	4413      	add	r3, r2
 800cdfa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800cdfc:	68f8      	ldr	r0, [r7, #12]
 800cdfe:	f002 f961 	bl	800f0c4 <pbuf_free>
  while (p != NULL) {
 800ce02:	69bb      	ldr	r3, [r7, #24]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d1dc      	bne.n	800cdc2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ce08:	6839      	ldr	r1, [r7, #0]
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 f8c2 	bl	800cf94 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ce10:	4b10      	ldr	r3, [pc, #64]	@ (800ce54 <ip_reass_free_complete_datagram+0x140>)
 800ce12:	881b      	ldrh	r3, [r3, #0]
 800ce14:	8bfa      	ldrh	r2, [r7, #30]
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d905      	bls.n	800ce26 <ip_reass_free_complete_datagram+0x112>
 800ce1a:	4b09      	ldr	r3, [pc, #36]	@ (800ce40 <ip_reass_free_complete_datagram+0x12c>)
 800ce1c:	22d2      	movs	r2, #210	@ 0xd2
 800ce1e:	490e      	ldr	r1, [pc, #56]	@ (800ce58 <ip_reass_free_complete_datagram+0x144>)
 800ce20:	4809      	ldr	r0, [pc, #36]	@ (800ce48 <ip_reass_free_complete_datagram+0x134>)
 800ce22:	f00a f89b 	bl	8016f5c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ce26:	4b0b      	ldr	r3, [pc, #44]	@ (800ce54 <ip_reass_free_complete_datagram+0x140>)
 800ce28:	881a      	ldrh	r2, [r3, #0]
 800ce2a:	8bfb      	ldrh	r3, [r7, #30]
 800ce2c:	1ad3      	subs	r3, r2, r3
 800ce2e:	b29a      	uxth	r2, r3
 800ce30:	4b08      	ldr	r3, [pc, #32]	@ (800ce54 <ip_reass_free_complete_datagram+0x140>)
 800ce32:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ce34:	8bfb      	ldrh	r3, [r7, #30]
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3720      	adds	r7, #32
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	bf00      	nop
 800ce40:	0801910c 	.word	0x0801910c
 800ce44:	08019178 	.word	0x08019178
 800ce48:	08019184 	.word	0x08019184
 800ce4c:	080191ac 	.word	0x080191ac
 800ce50:	080191c0 	.word	0x080191c0
 800ce54:	24009cc4 	.word	0x24009cc4
 800ce58:	080191e0 	.word	0x080191e0

0800ce5c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b08a      	sub	sp, #40	@ 0x28
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ce66:	2300      	movs	r3, #0
 800ce68:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ce72:	2300      	movs	r3, #0
 800ce74:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ce76:	2300      	movs	r3, #0
 800ce78:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ce7a:	4b28      	ldr	r3, [pc, #160]	@ (800cf1c <ip_reass_remove_oldest_datagram+0xc0>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800ce80:	e030      	b.n	800cee4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ce82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce84:	695a      	ldr	r2, [r3, #20]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	68db      	ldr	r3, [r3, #12]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d10c      	bne.n	800cea8 <ip_reass_remove_oldest_datagram+0x4c>
 800ce8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce90:	699a      	ldr	r2, [r3, #24]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	691b      	ldr	r3, [r3, #16]
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d106      	bne.n	800cea8 <ip_reass_remove_oldest_datagram+0x4c>
 800ce9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce9c:	899a      	ldrh	r2, [r3, #12]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	889b      	ldrh	r3, [r3, #4]
 800cea2:	b29b      	uxth	r3, r3
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d014      	beq.n	800ced2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	3301      	adds	r3, #1
 800ceac:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800ceae:	6a3b      	ldr	r3, [r7, #32]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d104      	bne.n	800cebe <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800ceb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ceb8:	69fb      	ldr	r3, [r7, #28]
 800ceba:	61bb      	str	r3, [r7, #24]
 800cebc:	e009      	b.n	800ced2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800cebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec0:	7fda      	ldrb	r2, [r3, #31]
 800cec2:	6a3b      	ldr	r3, [r7, #32]
 800cec4:	7fdb      	ldrb	r3, [r3, #31]
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d803      	bhi.n	800ced2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800ceca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cecc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800cece:	69fb      	ldr	r3, [r7, #28]
 800ced0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800ced2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d001      	beq.n	800cede <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800ceda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cedc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800cede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800cee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d1cb      	bne.n	800ce82 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800ceea:	6a3b      	ldr	r3, [r7, #32]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d008      	beq.n	800cf02 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800cef0:	69b9      	ldr	r1, [r7, #24]
 800cef2:	6a38      	ldr	r0, [r7, #32]
 800cef4:	f7ff ff0e 	bl	800cd14 <ip_reass_free_complete_datagram>
 800cef8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800cefa:	697a      	ldr	r2, [r7, #20]
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	4413      	add	r3, r2
 800cf00:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800cf02:	697a      	ldr	r2, [r7, #20]
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	429a      	cmp	r2, r3
 800cf08:	da02      	bge.n	800cf10 <ip_reass_remove_oldest_datagram+0xb4>
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	dcac      	bgt.n	800ce6a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800cf10:	697b      	ldr	r3, [r7, #20]
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3728      	adds	r7, #40	@ 0x28
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	24009cc0 	.word	0x24009cc0

0800cf20 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800cf2a:	2004      	movs	r0, #4
 800cf2c:	f001 f992 	bl	800e254 <memp_malloc>
 800cf30:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d110      	bne.n	800cf5a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800cf38:	6839      	ldr	r1, [r7, #0]
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f7ff ff8e 	bl	800ce5c <ip_reass_remove_oldest_datagram>
 800cf40:	4602      	mov	r2, r0
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	4293      	cmp	r3, r2
 800cf46:	dc03      	bgt.n	800cf50 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800cf48:	2004      	movs	r0, #4
 800cf4a:	f001 f983 	bl	800e254 <memp_malloc>
 800cf4e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d101      	bne.n	800cf5a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800cf56:	2300      	movs	r3, #0
 800cf58:	e016      	b.n	800cf88 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800cf5a:	2220      	movs	r2, #32
 800cf5c:	2100      	movs	r1, #0
 800cf5e:	68f8      	ldr	r0, [r7, #12]
 800cf60:	f00a f89d 	bl	801709e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	220f      	movs	r2, #15
 800cf68:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800cf6a:	4b09      	ldr	r3, [pc, #36]	@ (800cf90 <ip_reass_enqueue_new_datagram+0x70>)
 800cf6c:	681a      	ldr	r2, [r3, #0]
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800cf72:	4a07      	ldr	r2, [pc, #28]	@ (800cf90 <ip_reass_enqueue_new_datagram+0x70>)
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	3308      	adds	r3, #8
 800cf7c:	2214      	movs	r2, #20
 800cf7e:	6879      	ldr	r1, [r7, #4]
 800cf80:	4618      	mov	r0, r3
 800cf82:	f00a f968 	bl	8017256 <memcpy>
  return ipr;
 800cf86:	68fb      	ldr	r3, [r7, #12]
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3710      	adds	r7, #16
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	24009cc0 	.word	0x24009cc0

0800cf94 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b082      	sub	sp, #8
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800cf9e:	4b10      	ldr	r3, [pc, #64]	@ (800cfe0 <ip_reass_dequeue_datagram+0x4c>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d104      	bne.n	800cfb2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4a0c      	ldr	r2, [pc, #48]	@ (800cfe0 <ip_reass_dequeue_datagram+0x4c>)
 800cfae:	6013      	str	r3, [r2, #0]
 800cfb0:	e00d      	b.n	800cfce <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d106      	bne.n	800cfc6 <ip_reass_dequeue_datagram+0x32>
 800cfb8:	4b0a      	ldr	r3, [pc, #40]	@ (800cfe4 <ip_reass_dequeue_datagram+0x50>)
 800cfba:	f240 1245 	movw	r2, #325	@ 0x145
 800cfbe:	490a      	ldr	r1, [pc, #40]	@ (800cfe8 <ip_reass_dequeue_datagram+0x54>)
 800cfc0:	480a      	ldr	r0, [pc, #40]	@ (800cfec <ip_reass_dequeue_datagram+0x58>)
 800cfc2:	f009 ffcb 	bl	8016f5c <iprintf>
    prev->next = ipr->next;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681a      	ldr	r2, [r3, #0]
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800cfce:	6879      	ldr	r1, [r7, #4]
 800cfd0:	2004      	movs	r0, #4
 800cfd2:	f001 f9b5 	bl	800e340 <memp_free>
}
 800cfd6:	bf00      	nop
 800cfd8:	3708      	adds	r7, #8
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	24009cc0 	.word	0x24009cc0
 800cfe4:	0801910c 	.word	0x0801910c
 800cfe8:	08019204 	.word	0x08019204
 800cfec:	08019184 	.word	0x08019184

0800cff0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b08c      	sub	sp, #48	@ 0x30
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	60b9      	str	r1, [r7, #8]
 800cffa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800cffc:	2300      	movs	r3, #0
 800cffe:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d000:	2301      	movs	r3, #1
 800d002:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	685b      	ldr	r3, [r3, #4]
 800d008:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d00a:	69fb      	ldr	r3, [r7, #28]
 800d00c:	885b      	ldrh	r3, [r3, #2]
 800d00e:	b29b      	uxth	r3, r3
 800d010:	4618      	mov	r0, r3
 800d012:	f7fe f8a1 	bl	800b158 <lwip_htons>
 800d016:	4603      	mov	r3, r0
 800d018:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800d01a:	69fb      	ldr	r3, [r7, #28]
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	f003 030f 	and.w	r3, r3, #15
 800d022:	b2db      	uxtb	r3, r3
 800d024:	009b      	lsls	r3, r3, #2
 800d026:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800d028:	7e7b      	ldrb	r3, [r7, #25]
 800d02a:	b29b      	uxth	r3, r3
 800d02c:	8b7a      	ldrh	r2, [r7, #26]
 800d02e:	429a      	cmp	r2, r3
 800d030:	d202      	bcs.n	800d038 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d032:	f04f 33ff 	mov.w	r3, #4294967295
 800d036:	e135      	b.n	800d2a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800d038:	7e7b      	ldrb	r3, [r7, #25]
 800d03a:	b29b      	uxth	r3, r3
 800d03c:	8b7a      	ldrh	r2, [r7, #26]
 800d03e:	1ad3      	subs	r3, r2, r3
 800d040:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d042:	69fb      	ldr	r3, [r7, #28]
 800d044:	88db      	ldrh	r3, [r3, #6]
 800d046:	b29b      	uxth	r3, r3
 800d048:	4618      	mov	r0, r3
 800d04a:	f7fe f885 	bl	800b158 <lwip_htons>
 800d04e:	4603      	mov	r3, r0
 800d050:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d054:	b29b      	uxth	r3, r3
 800d056:	00db      	lsls	r3, r3, #3
 800d058:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800d060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d062:	2200      	movs	r2, #0
 800d064:	701a      	strb	r2, [r3, #0]
 800d066:	2200      	movs	r2, #0
 800d068:	705a      	strb	r2, [r3, #1]
 800d06a:	2200      	movs	r2, #0
 800d06c:	709a      	strb	r2, [r3, #2]
 800d06e:	2200      	movs	r2, #0
 800d070:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d074:	8afa      	ldrh	r2, [r7, #22]
 800d076:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800d078:	8afa      	ldrh	r2, [r7, #22]
 800d07a:	8b7b      	ldrh	r3, [r7, #26]
 800d07c:	4413      	add	r3, r2
 800d07e:	b29a      	uxth	r2, r3
 800d080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d082:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800d084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d086:	88db      	ldrh	r3, [r3, #6]
 800d088:	b29b      	uxth	r3, r3
 800d08a:	8afa      	ldrh	r2, [r7, #22]
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d902      	bls.n	800d096 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d090:	f04f 33ff 	mov.w	r3, #4294967295
 800d094:	e106      	b.n	800d2a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d09c:	e068      	b.n	800d170 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800d0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0a6:	889b      	ldrh	r3, [r3, #4]
 800d0a8:	b29a      	uxth	r2, r3
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	889b      	ldrh	r3, [r3, #4]
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d235      	bcs.n	800d120 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0b8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d0ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d020      	beq.n	800d102 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0c2:	889b      	ldrh	r3, [r3, #4]
 800d0c4:	b29a      	uxth	r2, r3
 800d0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0c8:	88db      	ldrh	r3, [r3, #6]
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d307      	bcc.n	800d0e0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800d0d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0d2:	88db      	ldrh	r3, [r3, #6]
 800d0d4:	b29a      	uxth	r2, r3
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	889b      	ldrh	r3, [r3, #4]
 800d0da:	b29b      	uxth	r3, r3
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d902      	bls.n	800d0e6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d0e0:	f04f 33ff 	mov.w	r3, #4294967295
 800d0e4:	e0de      	b.n	800d2a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0e8:	68ba      	ldr	r2, [r7, #8]
 800d0ea:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ee:	88db      	ldrh	r3, [r3, #6]
 800d0f0:	b29a      	uxth	r2, r3
 800d0f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0f4:	889b      	ldrh	r3, [r3, #4]
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d03d      	beq.n	800d178 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d100:	e03a      	b.n	800d178 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800d102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d104:	88db      	ldrh	r3, [r3, #6]
 800d106:	b29a      	uxth	r2, r3
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	889b      	ldrh	r3, [r3, #4]
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	429a      	cmp	r2, r3
 800d110:	d902      	bls.n	800d118 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d112:	f04f 33ff 	mov.w	r3, #4294967295
 800d116:	e0c5      	b.n	800d2a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	68ba      	ldr	r2, [r7, #8]
 800d11c:	605a      	str	r2, [r3, #4]
      break;
 800d11e:	e02b      	b.n	800d178 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800d120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d122:	889b      	ldrh	r3, [r3, #4]
 800d124:	b29a      	uxth	r2, r3
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	889b      	ldrh	r3, [r3, #4]
 800d12a:	b29b      	uxth	r3, r3
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d102      	bne.n	800d136 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d130:	f04f 33ff 	mov.w	r3, #4294967295
 800d134:	e0b6      	b.n	800d2a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d138:	889b      	ldrh	r3, [r3, #4]
 800d13a:	b29a      	uxth	r2, r3
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	88db      	ldrh	r3, [r3, #6]
 800d140:	b29b      	uxth	r3, r3
 800d142:	429a      	cmp	r2, r3
 800d144:	d202      	bcs.n	800d14c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d146:	f04f 33ff 	mov.w	r3, #4294967295
 800d14a:	e0ab      	b.n	800d2a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d009      	beq.n	800d166 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800d152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d154:	88db      	ldrh	r3, [r3, #6]
 800d156:	b29a      	uxth	r2, r3
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	889b      	ldrh	r3, [r3, #4]
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	429a      	cmp	r2, r3
 800d160:	d001      	beq.n	800d166 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d162:	2300      	movs	r3, #0
 800d164:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800d170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d172:	2b00      	cmp	r3, #0
 800d174:	d193      	bne.n	800d09e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800d176:	e000      	b.n	800d17a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800d178:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d12d      	bne.n	800d1dc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800d180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d182:	2b00      	cmp	r3, #0
 800d184:	d01c      	beq.n	800d1c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d188:	88db      	ldrh	r3, [r3, #6]
 800d18a:	b29a      	uxth	r2, r3
 800d18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d18e:	889b      	ldrh	r3, [r3, #4]
 800d190:	b29b      	uxth	r3, r3
 800d192:	429a      	cmp	r2, r3
 800d194:	d906      	bls.n	800d1a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800d196:	4b45      	ldr	r3, [pc, #276]	@ (800d2ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d198:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800d19c:	4944      	ldr	r1, [pc, #272]	@ (800d2b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d19e:	4845      	ldr	r0, [pc, #276]	@ (800d2b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d1a0:	f009 fedc 	bl	8016f5c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1a6:	68ba      	ldr	r2, [r7, #8]
 800d1a8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ac:	88db      	ldrh	r3, [r3, #6]
 800d1ae:	b29a      	uxth	r2, r3
 800d1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1b2:	889b      	ldrh	r3, [r3, #4]
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d010      	beq.n	800d1dc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	623b      	str	r3, [r7, #32]
 800d1be:	e00d      	b.n	800d1dc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d006      	beq.n	800d1d6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d1c8:	4b38      	ldr	r3, [pc, #224]	@ (800d2ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d1ca:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800d1ce:	493a      	ldr	r1, [pc, #232]	@ (800d2b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d1d0:	4838      	ldr	r0, [pc, #224]	@ (800d2b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d1d2:	f009 fec3 	bl	8016f5c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	68ba      	ldr	r2, [r7, #8]
 800d1da:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d105      	bne.n	800d1ee <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	7f9b      	ldrb	r3, [r3, #30]
 800d1e6:	f003 0301 	and.w	r3, r3, #1
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d059      	beq.n	800d2a2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800d1ee:	6a3b      	ldr	r3, [r7, #32]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d04f      	beq.n	800d294 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	685b      	ldr	r3, [r3, #4]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d006      	beq.n	800d20a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	685b      	ldr	r3, [r3, #4]
 800d200:	685b      	ldr	r3, [r3, #4]
 800d202:	889b      	ldrh	r3, [r3, #4]
 800d204:	b29b      	uxth	r3, r3
 800d206:	2b00      	cmp	r3, #0
 800d208:	d002      	beq.n	800d210 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800d20a:	2300      	movs	r3, #0
 800d20c:	623b      	str	r3, [r7, #32]
 800d20e:	e041      	b.n	800d294 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d212:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800d214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800d21a:	e012      	b.n	800d242 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800d21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800d222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d224:	88db      	ldrh	r3, [r3, #6]
 800d226:	b29a      	uxth	r2, r3
 800d228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d22a:	889b      	ldrh	r3, [r3, #4]
 800d22c:	b29b      	uxth	r3, r3
 800d22e:	429a      	cmp	r2, r3
 800d230:	d002      	beq.n	800d238 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800d232:	2300      	movs	r3, #0
 800d234:	623b      	str	r3, [r7, #32]
            break;
 800d236:	e007      	b.n	800d248 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800d238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d23a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800d23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800d242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d244:	2b00      	cmp	r3, #0
 800d246:	d1e9      	bne.n	800d21c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d248:	6a3b      	ldr	r3, [r7, #32]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d022      	beq.n	800d294 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d106      	bne.n	800d264 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800d256:	4b15      	ldr	r3, [pc, #84]	@ (800d2ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d258:	f240 12df 	movw	r2, #479	@ 0x1df
 800d25c:	4917      	ldr	r1, [pc, #92]	@ (800d2bc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d25e:	4815      	ldr	r0, [pc, #84]	@ (800d2b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d260:	f009 fe7c 	bl	8016f5c <iprintf>
          LWIP_ASSERT("sanity check",
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	685b      	ldr	r3, [r3, #4]
 800d26a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d106      	bne.n	800d27e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800d270:	4b0e      	ldr	r3, [pc, #56]	@ (800d2ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d272:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800d276:	4911      	ldr	r1, [pc, #68]	@ (800d2bc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d278:	480e      	ldr	r0, [pc, #56]	@ (800d2b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d27a:	f009 fe6f 	bl	8016f5c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d006      	beq.n	800d294 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800d286:	4b09      	ldr	r3, [pc, #36]	@ (800d2ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d288:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800d28c:	490c      	ldr	r1, [pc, #48]	@ (800d2c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d28e:	4809      	ldr	r0, [pc, #36]	@ (800d2b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d290:	f009 fe64 	bl	8016f5c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d294:	6a3b      	ldr	r3, [r7, #32]
 800d296:	2b00      	cmp	r3, #0
 800d298:	bf14      	ite	ne
 800d29a:	2301      	movne	r3, #1
 800d29c:	2300      	moveq	r3, #0
 800d29e:	b2db      	uxtb	r3, r3
 800d2a0:	e000      	b.n	800d2a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d2a2:	2300      	movs	r3, #0
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	3730      	adds	r7, #48	@ 0x30
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}
 800d2ac:	0801910c 	.word	0x0801910c
 800d2b0:	08019220 	.word	0x08019220
 800d2b4:	08019184 	.word	0x08019184
 800d2b8:	08019240 	.word	0x08019240
 800d2bc:	08019278 	.word	0x08019278
 800d2c0:	08019288 	.word	0x08019288

0800d2c4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b08e      	sub	sp, #56	@ 0x38
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	685b      	ldr	r3, [r3, #4]
 800d2d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800d2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	f003 030f 	and.w	r3, r3, #15
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	009b      	lsls	r3, r3, #2
 800d2de:	b2db      	uxtb	r3, r3
 800d2e0:	2b14      	cmp	r3, #20
 800d2e2:	f040 8171 	bne.w	800d5c8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800d2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2e8:	88db      	ldrh	r3, [r3, #6]
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f7fd ff33 	bl	800b158 <lwip_htons>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2f8:	b29b      	uxth	r3, r3
 800d2fa:	00db      	lsls	r3, r3, #3
 800d2fc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d300:	885b      	ldrh	r3, [r3, #2]
 800d302:	b29b      	uxth	r3, r3
 800d304:	4618      	mov	r0, r3
 800d306:	f7fd ff27 	bl	800b158 <lwip_htons>
 800d30a:	4603      	mov	r3, r0
 800d30c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800d30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	f003 030f 	and.w	r3, r3, #15
 800d316:	b2db      	uxtb	r3, r3
 800d318:	009b      	lsls	r3, r3, #2
 800d31a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800d31e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d322:	b29b      	uxth	r3, r3
 800d324:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d326:	429a      	cmp	r2, r3
 800d328:	f0c0 8150 	bcc.w	800d5cc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800d32c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d330:	b29b      	uxth	r3, r3
 800d332:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d334:	1ad3      	subs	r3, r2, r3
 800d336:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f001 ff51 	bl	800f1e0 <pbuf_clen>
 800d33e:	4603      	mov	r3, r0
 800d340:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d342:	4b8c      	ldr	r3, [pc, #560]	@ (800d574 <ip4_reass+0x2b0>)
 800d344:	881b      	ldrh	r3, [r3, #0]
 800d346:	461a      	mov	r2, r3
 800d348:	8c3b      	ldrh	r3, [r7, #32]
 800d34a:	4413      	add	r3, r2
 800d34c:	2b0a      	cmp	r3, #10
 800d34e:	dd10      	ble.n	800d372 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d350:	8c3b      	ldrh	r3, [r7, #32]
 800d352:	4619      	mov	r1, r3
 800d354:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d356:	f7ff fd81 	bl	800ce5c <ip_reass_remove_oldest_datagram>
 800d35a:	4603      	mov	r3, r0
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	f000 8137 	beq.w	800d5d0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d362:	4b84      	ldr	r3, [pc, #528]	@ (800d574 <ip4_reass+0x2b0>)
 800d364:	881b      	ldrh	r3, [r3, #0]
 800d366:	461a      	mov	r2, r3
 800d368:	8c3b      	ldrh	r3, [r7, #32]
 800d36a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d36c:	2b0a      	cmp	r3, #10
 800d36e:	f300 812f 	bgt.w	800d5d0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d372:	4b81      	ldr	r3, [pc, #516]	@ (800d578 <ip4_reass+0x2b4>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	633b      	str	r3, [r7, #48]	@ 0x30
 800d378:	e015      	b.n	800d3a6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d37c:	695a      	ldr	r2, [r3, #20]
 800d37e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d380:	68db      	ldr	r3, [r3, #12]
 800d382:	429a      	cmp	r2, r3
 800d384:	d10c      	bne.n	800d3a0 <ip4_reass+0xdc>
 800d386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d388:	699a      	ldr	r2, [r3, #24]
 800d38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d38c:	691b      	ldr	r3, [r3, #16]
 800d38e:	429a      	cmp	r2, r3
 800d390:	d106      	bne.n	800d3a0 <ip4_reass+0xdc>
 800d392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d394:	899a      	ldrh	r2, [r3, #12]
 800d396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d398:	889b      	ldrh	r3, [r3, #4]
 800d39a:	b29b      	uxth	r3, r3
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d006      	beq.n	800d3ae <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	633b      	str	r3, [r7, #48]	@ 0x30
 800d3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d1e6      	bne.n	800d37a <ip4_reass+0xb6>
 800d3ac:	e000      	b.n	800d3b0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800d3ae:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800d3b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d109      	bne.n	800d3ca <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d3b6:	8c3b      	ldrh	r3, [r7, #32]
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d3bc:	f7ff fdb0 	bl	800cf20 <ip_reass_enqueue_new_datagram>
 800d3c0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d11c      	bne.n	800d402 <ip4_reass+0x13e>
      goto nullreturn;
 800d3c8:	e105      	b.n	800d5d6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3cc:	88db      	ldrh	r3, [r3, #6]
 800d3ce:	b29b      	uxth	r3, r3
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7fd fec1 	bl	800b158 <lwip_htons>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d110      	bne.n	800d402 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3e2:	89db      	ldrh	r3, [r3, #14]
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f7fd feb7 	bl	800b158 <lwip_htons>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d006      	beq.n	800d402 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d3f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3f6:	3308      	adds	r3, #8
 800d3f8:	2214      	movs	r2, #20
 800d3fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f009 ff2a 	bl	8017256 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d404:	88db      	ldrh	r3, [r3, #6]
 800d406:	b29b      	uxth	r3, r3
 800d408:	f003 0320 	and.w	r3, r3, #32
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	bf0c      	ite	eq
 800d410:	2301      	moveq	r3, #1
 800d412:	2300      	movne	r3, #0
 800d414:	b2db      	uxtb	r3, r3
 800d416:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d00e      	beq.n	800d43c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800d41e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d420:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d422:	4413      	add	r3, r2
 800d424:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d426:	8b7a      	ldrh	r2, [r7, #26]
 800d428:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d42a:	429a      	cmp	r2, r3
 800d42c:	f0c0 80a0 	bcc.w	800d570 <ip4_reass+0x2ac>
 800d430:	8b7b      	ldrh	r3, [r7, #26]
 800d432:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800d436:	4293      	cmp	r3, r2
 800d438:	f200 809a 	bhi.w	800d570 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d43c:	69fa      	ldr	r2, [r7, #28]
 800d43e:	6879      	ldr	r1, [r7, #4]
 800d440:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d442:	f7ff fdd5 	bl	800cff0 <ip_reass_chain_frag_into_datagram_and_validate>
 800d446:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d44e:	f000 809b 	beq.w	800d588 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d452:	4b48      	ldr	r3, [pc, #288]	@ (800d574 <ip4_reass+0x2b0>)
 800d454:	881a      	ldrh	r2, [r3, #0]
 800d456:	8c3b      	ldrh	r3, [r7, #32]
 800d458:	4413      	add	r3, r2
 800d45a:	b29a      	uxth	r2, r3
 800d45c:	4b45      	ldr	r3, [pc, #276]	@ (800d574 <ip4_reass+0x2b0>)
 800d45e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d460:	69fb      	ldr	r3, [r7, #28]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d00d      	beq.n	800d482 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800d466:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d468:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d46a:	4413      	add	r3, r2
 800d46c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d470:	8a7a      	ldrh	r2, [r7, #18]
 800d472:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d476:	7f9b      	ldrb	r3, [r3, #30]
 800d478:	f043 0301 	orr.w	r3, r3, #1
 800d47c:	b2da      	uxtb	r2, r3
 800d47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d480:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	2b01      	cmp	r3, #1
 800d486:	d171      	bne.n	800d56c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800d488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d48a:	8b9b      	ldrh	r3, [r3, #28]
 800d48c:	3314      	adds	r3, #20
 800d48e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800d490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800d49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4a4:	3308      	adds	r3, #8
 800d4a6:	2214      	movs	r2, #20
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d4ac:	f009 fed3 	bl	8017256 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800d4b0:	8a3b      	ldrh	r3, [r7, #16]
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7fd fe50 	bl	800b158 <lwip_htons>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4be:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	719a      	strb	r2, [r3, #6]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	729a      	strb	r2, [r3, #10]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d4da:	e00d      	b.n	800d4f8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800d4dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800d4e2:	2114      	movs	r1, #20
 800d4e4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d4e6:	f001 fd67 	bl	800efb8 <pbuf_remove_header>
      pbuf_cat(p, r);
 800d4ea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f001 feb7 	bl	800f260 <pbuf_cat>
      r = iprh->next_pbuf;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800d4f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d1ee      	bne.n	800d4dc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800d4fe:	4b1e      	ldr	r3, [pc, #120]	@ (800d578 <ip4_reass+0x2b4>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d504:	429a      	cmp	r2, r3
 800d506:	d102      	bne.n	800d50e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800d508:	2300      	movs	r3, #0
 800d50a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d50c:	e010      	b.n	800d530 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d50e:	4b1a      	ldr	r3, [pc, #104]	@ (800d578 <ip4_reass+0x2b4>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d514:	e007      	b.n	800d526 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800d516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d006      	beq.n	800d52e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d1f4      	bne.n	800d516 <ip4_reass+0x252>
 800d52c:	e000      	b.n	800d530 <ip4_reass+0x26c>
          break;
 800d52e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d530:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d532:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d534:	f7ff fd2e 	bl	800cf94 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f001 fe51 	bl	800f1e0 <pbuf_clen>
 800d53e:	4603      	mov	r3, r0
 800d540:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800d542:	4b0c      	ldr	r3, [pc, #48]	@ (800d574 <ip4_reass+0x2b0>)
 800d544:	881b      	ldrh	r3, [r3, #0]
 800d546:	8c3a      	ldrh	r2, [r7, #32]
 800d548:	429a      	cmp	r2, r3
 800d54a:	d906      	bls.n	800d55a <ip4_reass+0x296>
 800d54c:	4b0b      	ldr	r3, [pc, #44]	@ (800d57c <ip4_reass+0x2b8>)
 800d54e:	f240 229b 	movw	r2, #667	@ 0x29b
 800d552:	490b      	ldr	r1, [pc, #44]	@ (800d580 <ip4_reass+0x2bc>)
 800d554:	480b      	ldr	r0, [pc, #44]	@ (800d584 <ip4_reass+0x2c0>)
 800d556:	f009 fd01 	bl	8016f5c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800d55a:	4b06      	ldr	r3, [pc, #24]	@ (800d574 <ip4_reass+0x2b0>)
 800d55c:	881a      	ldrh	r2, [r3, #0]
 800d55e:	8c3b      	ldrh	r3, [r7, #32]
 800d560:	1ad3      	subs	r3, r2, r3
 800d562:	b29a      	uxth	r2, r3
 800d564:	4b03      	ldr	r3, [pc, #12]	@ (800d574 <ip4_reass+0x2b0>)
 800d566:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	e038      	b.n	800d5de <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800d56c:	2300      	movs	r3, #0
 800d56e:	e036      	b.n	800d5de <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800d570:	bf00      	nop
 800d572:	e00a      	b.n	800d58a <ip4_reass+0x2c6>
 800d574:	24009cc4 	.word	0x24009cc4
 800d578:	24009cc0 	.word	0x24009cc0
 800d57c:	0801910c 	.word	0x0801910c
 800d580:	080192ac 	.word	0x080192ac
 800d584:	08019184 	.word	0x08019184
    goto nullreturn_ipr;
 800d588:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800d58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d106      	bne.n	800d59e <ip4_reass+0x2da>
 800d590:	4b15      	ldr	r3, [pc, #84]	@ (800d5e8 <ip4_reass+0x324>)
 800d592:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800d596:	4915      	ldr	r1, [pc, #84]	@ (800d5ec <ip4_reass+0x328>)
 800d598:	4815      	ldr	r0, [pc, #84]	@ (800d5f0 <ip4_reass+0x32c>)
 800d59a:	f009 fcdf 	bl	8016f5c <iprintf>
  if (ipr->p == NULL) {
 800d59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5a0:	685b      	ldr	r3, [r3, #4]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d116      	bne.n	800d5d4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800d5a6:	4b13      	ldr	r3, [pc, #76]	@ (800d5f4 <ip4_reass+0x330>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	d006      	beq.n	800d5be <ip4_reass+0x2fa>
 800d5b0:	4b0d      	ldr	r3, [pc, #52]	@ (800d5e8 <ip4_reass+0x324>)
 800d5b2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800d5b6:	4910      	ldr	r1, [pc, #64]	@ (800d5f8 <ip4_reass+0x334>)
 800d5b8:	480d      	ldr	r0, [pc, #52]	@ (800d5f0 <ip4_reass+0x32c>)
 800d5ba:	f009 fccf 	bl	8016f5c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800d5be:	2100      	movs	r1, #0
 800d5c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d5c2:	f7ff fce7 	bl	800cf94 <ip_reass_dequeue_datagram>
 800d5c6:	e006      	b.n	800d5d6 <ip4_reass+0x312>
    goto nullreturn;
 800d5c8:	bf00      	nop
 800d5ca:	e004      	b.n	800d5d6 <ip4_reass+0x312>
    goto nullreturn;
 800d5cc:	bf00      	nop
 800d5ce:	e002      	b.n	800d5d6 <ip4_reass+0x312>
      goto nullreturn;
 800d5d0:	bf00      	nop
 800d5d2:	e000      	b.n	800d5d6 <ip4_reass+0x312>
  }

nullreturn:
 800d5d4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f001 fd74 	bl	800f0c4 <pbuf_free>
  return NULL;
 800d5dc:	2300      	movs	r3, #0
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3738      	adds	r7, #56	@ 0x38
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	0801910c 	.word	0x0801910c
 800d5ec:	080192c8 	.word	0x080192c8
 800d5f0:	08019184 	.word	0x08019184
 800d5f4:	24009cc0 	.word	0x24009cc0
 800d5f8:	080192d4 	.word	0x080192d4

0800d5fc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800d600:	2005      	movs	r0, #5
 800d602:	f000 fe27 	bl	800e254 <memp_malloc>
 800d606:	4603      	mov	r3, r0
}
 800d608:	4618      	mov	r0, r3
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d106      	bne.n	800d628 <ip_frag_free_pbuf_custom_ref+0x1c>
 800d61a:	4b07      	ldr	r3, [pc, #28]	@ (800d638 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800d61c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800d620:	4906      	ldr	r1, [pc, #24]	@ (800d63c <ip_frag_free_pbuf_custom_ref+0x30>)
 800d622:	4807      	ldr	r0, [pc, #28]	@ (800d640 <ip_frag_free_pbuf_custom_ref+0x34>)
 800d624:	f009 fc9a 	bl	8016f5c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800d628:	6879      	ldr	r1, [r7, #4]
 800d62a:	2005      	movs	r0, #5
 800d62c:	f000 fe88 	bl	800e340 <memp_free>
}
 800d630:	bf00      	nop
 800d632:	3708      	adds	r7, #8
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}
 800d638:	0801910c 	.word	0x0801910c
 800d63c:	080192f4 	.word	0x080192f4
 800d640:	08019184 	.word	0x08019184

0800d644 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d106      	bne.n	800d664 <ipfrag_free_pbuf_custom+0x20>
 800d656:	4b11      	ldr	r3, [pc, #68]	@ (800d69c <ipfrag_free_pbuf_custom+0x58>)
 800d658:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800d65c:	4910      	ldr	r1, [pc, #64]	@ (800d6a0 <ipfrag_free_pbuf_custom+0x5c>)
 800d65e:	4811      	ldr	r0, [pc, #68]	@ (800d6a4 <ipfrag_free_pbuf_custom+0x60>)
 800d660:	f009 fc7c 	bl	8016f5c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800d664:	68fa      	ldr	r2, [r7, #12]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	429a      	cmp	r2, r3
 800d66a:	d006      	beq.n	800d67a <ipfrag_free_pbuf_custom+0x36>
 800d66c:	4b0b      	ldr	r3, [pc, #44]	@ (800d69c <ipfrag_free_pbuf_custom+0x58>)
 800d66e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800d672:	490d      	ldr	r1, [pc, #52]	@ (800d6a8 <ipfrag_free_pbuf_custom+0x64>)
 800d674:	480b      	ldr	r0, [pc, #44]	@ (800d6a4 <ipfrag_free_pbuf_custom+0x60>)
 800d676:	f009 fc71 	bl	8016f5c <iprintf>
  if (pcr->original != NULL) {
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	695b      	ldr	r3, [r3, #20]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d004      	beq.n	800d68c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	695b      	ldr	r3, [r3, #20]
 800d686:	4618      	mov	r0, r3
 800d688:	f001 fd1c 	bl	800f0c4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800d68c:	68f8      	ldr	r0, [r7, #12]
 800d68e:	f7ff ffbd 	bl	800d60c <ip_frag_free_pbuf_custom_ref>
}
 800d692:	bf00      	nop
 800d694:	3710      	adds	r7, #16
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}
 800d69a:	bf00      	nop
 800d69c:	0801910c 	.word	0x0801910c
 800d6a0:	08019300 	.word	0x08019300
 800d6a4:	08019184 	.word	0x08019184
 800d6a8:	0801930c 	.word	0x0801930c

0800d6ac <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b094      	sub	sp, #80	@ 0x50
 800d6b0:	af02      	add	r7, sp, #8
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	60b9      	str	r1, [r7, #8]
 800d6b6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d6c2:	3b14      	subs	r3, #20
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	da00      	bge.n	800d6ca <ip4_frag+0x1e>
 800d6c8:	3307      	adds	r3, #7
 800d6ca:	10db      	asrs	r3, r3, #3
 800d6cc:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800d6ce:	2314      	movs	r3, #20
 800d6d0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800d6d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6da:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800d6dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6de:	781b      	ldrb	r3, [r3, #0]
 800d6e0:	f003 030f 	and.w	r3, r3, #15
 800d6e4:	b2db      	uxtb	r3, r3
 800d6e6:	009b      	lsls	r3, r3, #2
 800d6e8:	b2db      	uxtb	r3, r3
 800d6ea:	2b14      	cmp	r3, #20
 800d6ec:	d002      	beq.n	800d6f4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800d6ee:	f06f 0305 	mvn.w	r3, #5
 800d6f2:	e110      	b.n	800d916 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	895b      	ldrh	r3, [r3, #10]
 800d6f8:	2b13      	cmp	r3, #19
 800d6fa:	d809      	bhi.n	800d710 <ip4_frag+0x64>
 800d6fc:	4b88      	ldr	r3, [pc, #544]	@ (800d920 <ip4_frag+0x274>)
 800d6fe:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800d702:	4988      	ldr	r1, [pc, #544]	@ (800d924 <ip4_frag+0x278>)
 800d704:	4888      	ldr	r0, [pc, #544]	@ (800d928 <ip4_frag+0x27c>)
 800d706:	f009 fc29 	bl	8016f5c <iprintf>
 800d70a:	f06f 0305 	mvn.w	r3, #5
 800d70e:	e102      	b.n	800d916 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800d710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d712:	88db      	ldrh	r3, [r3, #6]
 800d714:	b29b      	uxth	r3, r3
 800d716:	4618      	mov	r0, r3
 800d718:	f7fd fd1e 	bl	800b158 <lwip_htons>
 800d71c:	4603      	mov	r3, r0
 800d71e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800d720:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d722:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d726:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800d72a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d72c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d730:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	891b      	ldrh	r3, [r3, #8]
 800d736:	3b14      	subs	r3, #20
 800d738:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800d73c:	e0e1      	b.n	800d902 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800d73e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d740:	00db      	lsls	r3, r3, #3
 800d742:	b29b      	uxth	r3, r3
 800d744:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d748:	4293      	cmp	r3, r2
 800d74a:	bf28      	it	cs
 800d74c:	4613      	movcs	r3, r2
 800d74e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800d750:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d754:	2114      	movs	r1, #20
 800d756:	200e      	movs	r0, #14
 800d758:	f001 f9d0 	bl	800eafc <pbuf_alloc>
 800d75c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800d75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d760:	2b00      	cmp	r3, #0
 800d762:	f000 80d5 	beq.w	800d910 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d768:	895b      	ldrh	r3, [r3, #10]
 800d76a:	2b13      	cmp	r3, #19
 800d76c:	d806      	bhi.n	800d77c <ip4_frag+0xd0>
 800d76e:	4b6c      	ldr	r3, [pc, #432]	@ (800d920 <ip4_frag+0x274>)
 800d770:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800d774:	496d      	ldr	r1, [pc, #436]	@ (800d92c <ip4_frag+0x280>)
 800d776:	486c      	ldr	r0, [pc, #432]	@ (800d928 <ip4_frag+0x27c>)
 800d778:	f009 fbf0 	bl	8016f5c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800d77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77e:	685b      	ldr	r3, [r3, #4]
 800d780:	2214      	movs	r2, #20
 800d782:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d784:	4618      	mov	r0, r3
 800d786:	f009 fd66 	bl	8017256 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800d78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800d790:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d792:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800d796:	e064      	b.n	800d862 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	895a      	ldrh	r2, [r3, #10]
 800d79c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d79e:	1ad3      	subs	r3, r2, r3
 800d7a0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	895b      	ldrh	r3, [r3, #10]
 800d7a6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d906      	bls.n	800d7ba <ip4_frag+0x10e>
 800d7ac:	4b5c      	ldr	r3, [pc, #368]	@ (800d920 <ip4_frag+0x274>)
 800d7ae:	f240 322d 	movw	r2, #813	@ 0x32d
 800d7b2:	495f      	ldr	r1, [pc, #380]	@ (800d930 <ip4_frag+0x284>)
 800d7b4:	485c      	ldr	r0, [pc, #368]	@ (800d928 <ip4_frag+0x27c>)
 800d7b6:	f009 fbd1 	bl	8016f5c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800d7ba:	8bfa      	ldrh	r2, [r7, #30]
 800d7bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	bf28      	it	cs
 800d7c4:	4613      	movcs	r3, r2
 800d7c6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800d7ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d105      	bne.n	800d7de <ip4_frag+0x132>
        poff = 0;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	60fb      	str	r3, [r7, #12]
        continue;
 800d7dc:	e041      	b.n	800d862 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800d7de:	f7ff ff0d 	bl	800d5fc <ip_frag_alloc_pbuf_custom_ref>
 800d7e2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800d7e4:	69bb      	ldr	r3, [r7, #24]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d103      	bne.n	800d7f2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800d7ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d7ec:	f001 fc6a 	bl	800f0c4 <pbuf_free>
        goto memerr;
 800d7f0:	e08f      	b.n	800d912 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d7f2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d7f8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d7fa:	4413      	add	r3, r2
 800d7fc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800d800:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800d804:	9201      	str	r2, [sp, #4]
 800d806:	9300      	str	r3, [sp, #0]
 800d808:	4603      	mov	r3, r0
 800d80a:	2241      	movs	r2, #65	@ 0x41
 800d80c:	2000      	movs	r0, #0
 800d80e:	f001 fa9f 	bl	800ed50 <pbuf_alloced_custom>
 800d812:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d106      	bne.n	800d828 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800d81a:	69b8      	ldr	r0, [r7, #24]
 800d81c:	f7ff fef6 	bl	800d60c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800d820:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d822:	f001 fc4f 	bl	800f0c4 <pbuf_free>
        goto memerr;
 800d826:	e074      	b.n	800d912 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800d828:	68f8      	ldr	r0, [r7, #12]
 800d82a:	f001 fcf1 	bl	800f210 <pbuf_ref>
      pcr->original = p;
 800d82e:	69bb      	ldr	r3, [r7, #24]
 800d830:	68fa      	ldr	r2, [r7, #12]
 800d832:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800d834:	69bb      	ldr	r3, [r7, #24]
 800d836:	4a3f      	ldr	r2, [pc, #252]	@ (800d934 <ip4_frag+0x288>)
 800d838:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800d83a:	6979      	ldr	r1, [r7, #20]
 800d83c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d83e:	f001 fd0f 	bl	800f260 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800d842:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800d846:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d84a:	1ad3      	subs	r3, r2, r3
 800d84c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800d850:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d854:	2b00      	cmp	r3, #0
 800d856:	d004      	beq.n	800d862 <ip4_frag+0x1b6>
        poff = 0;
 800d858:	2300      	movs	r3, #0
 800d85a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800d862:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d866:	2b00      	cmp	r3, #0
 800d868:	d196      	bne.n	800d798 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800d86a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800d86c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d870:	4413      	add	r3, r2
 800d872:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d878:	f1a3 0213 	sub.w	r2, r3, #19
 800d87c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d880:	429a      	cmp	r2, r3
 800d882:	bfcc      	ite	gt
 800d884:	2301      	movgt	r3, #1
 800d886:	2300      	movle	r3, #0
 800d888:	b2db      	uxtb	r3, r3
 800d88a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800d88c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d890:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d894:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800d896:	6a3b      	ldr	r3, [r7, #32]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d002      	beq.n	800d8a2 <ip4_frag+0x1f6>
 800d89c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d003      	beq.n	800d8aa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800d8a2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d8a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d8a8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d8aa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7fd fc53 	bl	800b158 <lwip_htons>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800d8ba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d8bc:	3314      	adds	r3, #20
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f7fd fc49 	bl	800b158 <lwip_htons>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8cc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800d8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	729a      	strb	r2, [r3, #10]
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	695b      	ldr	r3, [r3, #20]
 800d8dc:	687a      	ldr	r2, [r7, #4]
 800d8de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d8e0:	68b8      	ldr	r0, [r7, #8]
 800d8e2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800d8e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d8e6:	f001 fbed 	bl	800f0c4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800d8ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d8ee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d8f0:	1ad3      	subs	r3, r2, r3
 800d8f2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800d8f6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800d8fa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d8fc:	4413      	add	r3, r2
 800d8fe:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800d902:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d906:	2b00      	cmp	r3, #0
 800d908:	f47f af19 	bne.w	800d73e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800d90c:	2300      	movs	r3, #0
 800d90e:	e002      	b.n	800d916 <ip4_frag+0x26a>
      goto memerr;
 800d910:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800d912:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d916:	4618      	mov	r0, r3
 800d918:	3748      	adds	r7, #72	@ 0x48
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}
 800d91e:	bf00      	nop
 800d920:	0801910c 	.word	0x0801910c
 800d924:	08019318 	.word	0x08019318
 800d928:	08019184 	.word	0x08019184
 800d92c:	08019334 	.word	0x08019334
 800d930:	08019354 	.word	0x08019354
 800d934:	0800d645 	.word	0x0800d645

0800d938 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d938:	b480      	push	{r7}
 800d93a:	b083      	sub	sp, #12
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	4603      	mov	r3, r0
 800d940:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d942:	4b05      	ldr	r3, [pc, #20]	@ (800d958 <ptr_to_mem+0x20>)
 800d944:	681a      	ldr	r2, [r3, #0]
 800d946:	88fb      	ldrh	r3, [r7, #6]
 800d948:	4413      	add	r3, r2
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	370c      	adds	r7, #12
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr
 800d956:	bf00      	nop
 800d958:	24009cc8 	.word	0x24009cc8

0800d95c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b083      	sub	sp, #12
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d964:	4b05      	ldr	r3, [pc, #20]	@ (800d97c <mem_to_ptr+0x20>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	1ad3      	subs	r3, r2, r3
 800d96c:	b29b      	uxth	r3, r3
}
 800d96e:	4618      	mov	r0, r3
 800d970:	370c      	adds	r7, #12
 800d972:	46bd      	mov	sp, r7
 800d974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d978:	4770      	bx	lr
 800d97a:	bf00      	nop
 800d97c:	24009cc8 	.word	0x24009cc8

0800d980 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d980:	b590      	push	{r4, r7, lr}
 800d982:	b085      	sub	sp, #20
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d988:	4b45      	ldr	r3, [pc, #276]	@ (800daa0 <plug_holes+0x120>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	687a      	ldr	r2, [r7, #4]
 800d98e:	429a      	cmp	r2, r3
 800d990:	d206      	bcs.n	800d9a0 <plug_holes+0x20>
 800d992:	4b44      	ldr	r3, [pc, #272]	@ (800daa4 <plug_holes+0x124>)
 800d994:	f240 12df 	movw	r2, #479	@ 0x1df
 800d998:	4943      	ldr	r1, [pc, #268]	@ (800daa8 <plug_holes+0x128>)
 800d99a:	4844      	ldr	r0, [pc, #272]	@ (800daac <plug_holes+0x12c>)
 800d99c:	f009 fade 	bl	8016f5c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d9a0:	4b43      	ldr	r3, [pc, #268]	@ (800dab0 <plug_holes+0x130>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	687a      	ldr	r2, [r7, #4]
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d306      	bcc.n	800d9b8 <plug_holes+0x38>
 800d9aa:	4b3e      	ldr	r3, [pc, #248]	@ (800daa4 <plug_holes+0x124>)
 800d9ac:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800d9b0:	4940      	ldr	r1, [pc, #256]	@ (800dab4 <plug_holes+0x134>)
 800d9b2:	483e      	ldr	r0, [pc, #248]	@ (800daac <plug_holes+0x12c>)
 800d9b4:	f009 fad2 	bl	8016f5c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	791b      	ldrb	r3, [r3, #4]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d006      	beq.n	800d9ce <plug_holes+0x4e>
 800d9c0:	4b38      	ldr	r3, [pc, #224]	@ (800daa4 <plug_holes+0x124>)
 800d9c2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800d9c6:	493c      	ldr	r1, [pc, #240]	@ (800dab8 <plug_holes+0x138>)
 800d9c8:	4838      	ldr	r0, [pc, #224]	@ (800daac <plug_holes+0x12c>)
 800d9ca:	f009 fac7 	bl	8016f5c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	881b      	ldrh	r3, [r3, #0]
 800d9d2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d9d6:	d906      	bls.n	800d9e6 <plug_holes+0x66>
 800d9d8:	4b32      	ldr	r3, [pc, #200]	@ (800daa4 <plug_holes+0x124>)
 800d9da:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800d9de:	4937      	ldr	r1, [pc, #220]	@ (800dabc <plug_holes+0x13c>)
 800d9e0:	4832      	ldr	r0, [pc, #200]	@ (800daac <plug_holes+0x12c>)
 800d9e2:	f009 fabb 	bl	8016f5c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	881b      	ldrh	r3, [r3, #0]
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7ff ffa4 	bl	800d938 <ptr_to_mem>
 800d9f0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d024      	beq.n	800da44 <plug_holes+0xc4>
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	791b      	ldrb	r3, [r3, #4]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d120      	bne.n	800da44 <plug_holes+0xc4>
 800da02:	4b2b      	ldr	r3, [pc, #172]	@ (800dab0 <plug_holes+0x130>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	68fa      	ldr	r2, [r7, #12]
 800da08:	429a      	cmp	r2, r3
 800da0a:	d01b      	beq.n	800da44 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800da0c:	4b2c      	ldr	r3, [pc, #176]	@ (800dac0 <plug_holes+0x140>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	68fa      	ldr	r2, [r7, #12]
 800da12:	429a      	cmp	r2, r3
 800da14:	d102      	bne.n	800da1c <plug_holes+0x9c>
      lfree = mem;
 800da16:	4a2a      	ldr	r2, [pc, #168]	@ (800dac0 <plug_holes+0x140>)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	881a      	ldrh	r2, [r3, #0]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	881b      	ldrh	r3, [r3, #0]
 800da28:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800da2c:	d00a      	beq.n	800da44 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	881b      	ldrh	r3, [r3, #0]
 800da32:	4618      	mov	r0, r3
 800da34:	f7ff ff80 	bl	800d938 <ptr_to_mem>
 800da38:	4604      	mov	r4, r0
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f7ff ff8e 	bl	800d95c <mem_to_ptr>
 800da40:	4603      	mov	r3, r0
 800da42:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	885b      	ldrh	r3, [r3, #2]
 800da48:	4618      	mov	r0, r3
 800da4a:	f7ff ff75 	bl	800d938 <ptr_to_mem>
 800da4e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800da50:	68ba      	ldr	r2, [r7, #8]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	429a      	cmp	r2, r3
 800da56:	d01f      	beq.n	800da98 <plug_holes+0x118>
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	791b      	ldrb	r3, [r3, #4]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d11b      	bne.n	800da98 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800da60:	4b17      	ldr	r3, [pc, #92]	@ (800dac0 <plug_holes+0x140>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	429a      	cmp	r2, r3
 800da68:	d102      	bne.n	800da70 <plug_holes+0xf0>
      lfree = pmem;
 800da6a:	4a15      	ldr	r2, [pc, #84]	@ (800dac0 <plug_holes+0x140>)
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	881a      	ldrh	r2, [r3, #0]
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	881b      	ldrh	r3, [r3, #0]
 800da7c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800da80:	d00a      	beq.n	800da98 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	881b      	ldrh	r3, [r3, #0]
 800da86:	4618      	mov	r0, r3
 800da88:	f7ff ff56 	bl	800d938 <ptr_to_mem>
 800da8c:	4604      	mov	r4, r0
 800da8e:	68b8      	ldr	r0, [r7, #8]
 800da90:	f7ff ff64 	bl	800d95c <mem_to_ptr>
 800da94:	4603      	mov	r3, r0
 800da96:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800da98:	bf00      	nop
 800da9a:	3714      	adds	r7, #20
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd90      	pop	{r4, r7, pc}
 800daa0:	24009cc8 	.word	0x24009cc8
 800daa4:	08019364 	.word	0x08019364
 800daa8:	080193c8 	.word	0x080193c8
 800daac:	080193e0 	.word	0x080193e0
 800dab0:	24009ccc 	.word	0x24009ccc
 800dab4:	08019408 	.word	0x08019408
 800dab8:	08019424 	.word	0x08019424
 800dabc:	08019440 	.word	0x08019440
 800dac0:	24009cd4 	.word	0x24009cd4

0800dac4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b082      	sub	sp, #8
 800dac8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800daca:	4b1d      	ldr	r3, [pc, #116]	@ (800db40 <mem_init+0x7c>)
 800dacc:	4a1d      	ldr	r2, [pc, #116]	@ (800db44 <mem_init+0x80>)
 800dace:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800dad0:	4b1b      	ldr	r3, [pc, #108]	@ (800db40 <mem_init+0x7c>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800dadc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2200      	movs	r2, #0
 800dae2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2200      	movs	r2, #0
 800dae8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800daea:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800daee:	f7ff ff23 	bl	800d938 <ptr_to_mem>
 800daf2:	4603      	mov	r3, r0
 800daf4:	4a14      	ldr	r2, [pc, #80]	@ (800db48 <mem_init+0x84>)
 800daf6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800daf8:	4b13      	ldr	r3, [pc, #76]	@ (800db48 <mem_init+0x84>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	2201      	movs	r2, #1
 800dafe:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800db00:	4b11      	ldr	r3, [pc, #68]	@ (800db48 <mem_init+0x84>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800db08:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800db0a:	4b0f      	ldr	r3, [pc, #60]	@ (800db48 <mem_init+0x84>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800db12:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800db14:	4b0a      	ldr	r3, [pc, #40]	@ (800db40 <mem_init+0x7c>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	4a0c      	ldr	r2, [pc, #48]	@ (800db4c <mem_init+0x88>)
 800db1a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800db1c:	480c      	ldr	r0, [pc, #48]	@ (800db50 <mem_init+0x8c>)
 800db1e:	f001 ff53 	bl	800f9c8 <sys_mutex_new>
 800db22:	4603      	mov	r3, r0
 800db24:	2b00      	cmp	r3, #0
 800db26:	d006      	beq.n	800db36 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800db28:	4b0a      	ldr	r3, [pc, #40]	@ (800db54 <mem_init+0x90>)
 800db2a:	f240 221f 	movw	r2, #543	@ 0x21f
 800db2e:	490a      	ldr	r1, [pc, #40]	@ (800db58 <mem_init+0x94>)
 800db30:	480a      	ldr	r0, [pc, #40]	@ (800db5c <mem_init+0x98>)
 800db32:	f009 fa13 	bl	8016f5c <iprintf>
  }
}
 800db36:	bf00      	nop
 800db38:	3708      	adds	r7, #8
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop
 800db40:	24009cc8 	.word	0x24009cc8
 800db44:	30002000 	.word	0x30002000
 800db48:	24009ccc 	.word	0x24009ccc
 800db4c:	24009cd4 	.word	0x24009cd4
 800db50:	24009cd0 	.word	0x24009cd0
 800db54:	08019364 	.word	0x08019364
 800db58:	0801946c 	.word	0x0801946c
 800db5c:	080193e0 	.word	0x080193e0

0800db60 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b086      	sub	sp, #24
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f7ff fef7 	bl	800d95c <mem_to_ptr>
 800db6e:	4603      	mov	r3, r0
 800db70:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	881b      	ldrh	r3, [r3, #0]
 800db76:	4618      	mov	r0, r3
 800db78:	f7ff fede 	bl	800d938 <ptr_to_mem>
 800db7c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	885b      	ldrh	r3, [r3, #2]
 800db82:	4618      	mov	r0, r3
 800db84:	f7ff fed8 	bl	800d938 <ptr_to_mem>
 800db88:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	881b      	ldrh	r3, [r3, #0]
 800db8e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800db92:	d818      	bhi.n	800dbc6 <mem_link_valid+0x66>
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	885b      	ldrh	r3, [r3, #2]
 800db98:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800db9c:	d813      	bhi.n	800dbc6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800dba2:	8afa      	ldrh	r2, [r7, #22]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d004      	beq.n	800dbb2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	881b      	ldrh	r3, [r3, #0]
 800dbac:	8afa      	ldrh	r2, [r7, #22]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d109      	bne.n	800dbc6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800dbb2:	4b08      	ldr	r3, [pc, #32]	@ (800dbd4 <mem_link_valid+0x74>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dbb6:	693a      	ldr	r2, [r7, #16]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d006      	beq.n	800dbca <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	885b      	ldrh	r3, [r3, #2]
 800dbc0:	8afa      	ldrh	r2, [r7, #22]
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d001      	beq.n	800dbca <mem_link_valid+0x6a>
    return 0;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	e000      	b.n	800dbcc <mem_link_valid+0x6c>
  }
  return 1;
 800dbca:	2301      	movs	r3, #1
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3718      	adds	r7, #24
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}
 800dbd4:	24009ccc 	.word	0x24009ccc

0800dbd8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b088      	sub	sp, #32
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d070      	beq.n	800dcc8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f003 0303 	and.w	r3, r3, #3
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d00d      	beq.n	800dc0c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800dbf0:	4b37      	ldr	r3, [pc, #220]	@ (800dcd0 <mem_free+0xf8>)
 800dbf2:	f240 2273 	movw	r2, #627	@ 0x273
 800dbf6:	4937      	ldr	r1, [pc, #220]	@ (800dcd4 <mem_free+0xfc>)
 800dbf8:	4837      	ldr	r0, [pc, #220]	@ (800dcd8 <mem_free+0x100>)
 800dbfa:	f009 f9af 	bl	8016f5c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dbfe:	f001 ff35 	bl	800fa6c <sys_arch_protect>
 800dc02:	60f8      	str	r0, [r7, #12]
 800dc04:	68f8      	ldr	r0, [r7, #12]
 800dc06:	f001 ff3f 	bl	800fa88 <sys_arch_unprotect>
    return;
 800dc0a:	e05e      	b.n	800dcca <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	3b08      	subs	r3, #8
 800dc10:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800dc12:	4b32      	ldr	r3, [pc, #200]	@ (800dcdc <mem_free+0x104>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	69fa      	ldr	r2, [r7, #28]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d306      	bcc.n	800dc2a <mem_free+0x52>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f103 020c 	add.w	r2, r3, #12
 800dc22:	4b2f      	ldr	r3, [pc, #188]	@ (800dce0 <mem_free+0x108>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d90d      	bls.n	800dc46 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800dc2a:	4b29      	ldr	r3, [pc, #164]	@ (800dcd0 <mem_free+0xf8>)
 800dc2c:	f240 227f 	movw	r2, #639	@ 0x27f
 800dc30:	492c      	ldr	r1, [pc, #176]	@ (800dce4 <mem_free+0x10c>)
 800dc32:	4829      	ldr	r0, [pc, #164]	@ (800dcd8 <mem_free+0x100>)
 800dc34:	f009 f992 	bl	8016f5c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dc38:	f001 ff18 	bl	800fa6c <sys_arch_protect>
 800dc3c:	6138      	str	r0, [r7, #16]
 800dc3e:	6938      	ldr	r0, [r7, #16]
 800dc40:	f001 ff22 	bl	800fa88 <sys_arch_unprotect>
    return;
 800dc44:	e041      	b.n	800dcca <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800dc46:	4828      	ldr	r0, [pc, #160]	@ (800dce8 <mem_free+0x110>)
 800dc48:	f001 fed4 	bl	800f9f4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800dc4c:	69fb      	ldr	r3, [r7, #28]
 800dc4e:	791b      	ldrb	r3, [r3, #4]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d110      	bne.n	800dc76 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800dc54:	4b1e      	ldr	r3, [pc, #120]	@ (800dcd0 <mem_free+0xf8>)
 800dc56:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800dc5a:	4924      	ldr	r1, [pc, #144]	@ (800dcec <mem_free+0x114>)
 800dc5c:	481e      	ldr	r0, [pc, #120]	@ (800dcd8 <mem_free+0x100>)
 800dc5e:	f009 f97d 	bl	8016f5c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800dc62:	4821      	ldr	r0, [pc, #132]	@ (800dce8 <mem_free+0x110>)
 800dc64:	f001 fed5 	bl	800fa12 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dc68:	f001 ff00 	bl	800fa6c <sys_arch_protect>
 800dc6c:	6178      	str	r0, [r7, #20]
 800dc6e:	6978      	ldr	r0, [r7, #20]
 800dc70:	f001 ff0a 	bl	800fa88 <sys_arch_unprotect>
    return;
 800dc74:	e029      	b.n	800dcca <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800dc76:	69f8      	ldr	r0, [r7, #28]
 800dc78:	f7ff ff72 	bl	800db60 <mem_link_valid>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d110      	bne.n	800dca4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800dc82:	4b13      	ldr	r3, [pc, #76]	@ (800dcd0 <mem_free+0xf8>)
 800dc84:	f240 2295 	movw	r2, #661	@ 0x295
 800dc88:	4919      	ldr	r1, [pc, #100]	@ (800dcf0 <mem_free+0x118>)
 800dc8a:	4813      	ldr	r0, [pc, #76]	@ (800dcd8 <mem_free+0x100>)
 800dc8c:	f009 f966 	bl	8016f5c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800dc90:	4815      	ldr	r0, [pc, #84]	@ (800dce8 <mem_free+0x110>)
 800dc92:	f001 febe 	bl	800fa12 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dc96:	f001 fee9 	bl	800fa6c <sys_arch_protect>
 800dc9a:	61b8      	str	r0, [r7, #24]
 800dc9c:	69b8      	ldr	r0, [r7, #24]
 800dc9e:	f001 fef3 	bl	800fa88 <sys_arch_unprotect>
    return;
 800dca2:	e012      	b.n	800dcca <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800dca4:	69fb      	ldr	r3, [r7, #28]
 800dca6:	2200      	movs	r2, #0
 800dca8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800dcaa:	4b12      	ldr	r3, [pc, #72]	@ (800dcf4 <mem_free+0x11c>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	69fa      	ldr	r2, [r7, #28]
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d202      	bcs.n	800dcba <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800dcb4:	4a0f      	ldr	r2, [pc, #60]	@ (800dcf4 <mem_free+0x11c>)
 800dcb6:	69fb      	ldr	r3, [r7, #28]
 800dcb8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800dcba:	69f8      	ldr	r0, [r7, #28]
 800dcbc:	f7ff fe60 	bl	800d980 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800dcc0:	4809      	ldr	r0, [pc, #36]	@ (800dce8 <mem_free+0x110>)
 800dcc2:	f001 fea6 	bl	800fa12 <sys_mutex_unlock>
 800dcc6:	e000      	b.n	800dcca <mem_free+0xf2>
    return;
 800dcc8:	bf00      	nop
}
 800dcca:	3720      	adds	r7, #32
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}
 800dcd0:	08019364 	.word	0x08019364
 800dcd4:	08019488 	.word	0x08019488
 800dcd8:	080193e0 	.word	0x080193e0
 800dcdc:	24009cc8 	.word	0x24009cc8
 800dce0:	24009ccc 	.word	0x24009ccc
 800dce4:	080194ac 	.word	0x080194ac
 800dce8:	24009cd0 	.word	0x24009cd0
 800dcec:	080194c8 	.word	0x080194c8
 800dcf0:	080194f0 	.word	0x080194f0
 800dcf4:	24009cd4 	.word	0x24009cd4

0800dcf8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b088      	sub	sp, #32
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	460b      	mov	r3, r1
 800dd02:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800dd04:	887b      	ldrh	r3, [r7, #2]
 800dd06:	3303      	adds	r3, #3
 800dd08:	b29b      	uxth	r3, r3
 800dd0a:	f023 0303 	bic.w	r3, r3, #3
 800dd0e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800dd10:	8bfb      	ldrh	r3, [r7, #30]
 800dd12:	2b0b      	cmp	r3, #11
 800dd14:	d801      	bhi.n	800dd1a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800dd16:	230c      	movs	r3, #12
 800dd18:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800dd1a:	8bfb      	ldrh	r3, [r7, #30]
 800dd1c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800dd20:	d803      	bhi.n	800dd2a <mem_trim+0x32>
 800dd22:	8bfa      	ldrh	r2, [r7, #30]
 800dd24:	887b      	ldrh	r3, [r7, #2]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d201      	bcs.n	800dd2e <mem_trim+0x36>
    return NULL;
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	e0d8      	b.n	800dee0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800dd2e:	4b6e      	ldr	r3, [pc, #440]	@ (800dee8 <mem_trim+0x1f0>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	687a      	ldr	r2, [r7, #4]
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d304      	bcc.n	800dd42 <mem_trim+0x4a>
 800dd38:	4b6c      	ldr	r3, [pc, #432]	@ (800deec <mem_trim+0x1f4>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	687a      	ldr	r2, [r7, #4]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d306      	bcc.n	800dd50 <mem_trim+0x58>
 800dd42:	4b6b      	ldr	r3, [pc, #428]	@ (800def0 <mem_trim+0x1f8>)
 800dd44:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800dd48:	496a      	ldr	r1, [pc, #424]	@ (800def4 <mem_trim+0x1fc>)
 800dd4a:	486b      	ldr	r0, [pc, #428]	@ (800def8 <mem_trim+0x200>)
 800dd4c:	f009 f906 	bl	8016f5c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800dd50:	4b65      	ldr	r3, [pc, #404]	@ (800dee8 <mem_trim+0x1f0>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	687a      	ldr	r2, [r7, #4]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d304      	bcc.n	800dd64 <mem_trim+0x6c>
 800dd5a:	4b64      	ldr	r3, [pc, #400]	@ (800deec <mem_trim+0x1f4>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	687a      	ldr	r2, [r7, #4]
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d307      	bcc.n	800dd74 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dd64:	f001 fe82 	bl	800fa6c <sys_arch_protect>
 800dd68:	60b8      	str	r0, [r7, #8]
 800dd6a:	68b8      	ldr	r0, [r7, #8]
 800dd6c:	f001 fe8c 	bl	800fa88 <sys_arch_unprotect>
    return rmem;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	e0b5      	b.n	800dee0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	3b08      	subs	r3, #8
 800dd78:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800dd7a:	69b8      	ldr	r0, [r7, #24]
 800dd7c:	f7ff fdee 	bl	800d95c <mem_to_ptr>
 800dd80:	4603      	mov	r3, r0
 800dd82:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800dd84:	69bb      	ldr	r3, [r7, #24]
 800dd86:	881a      	ldrh	r2, [r3, #0]
 800dd88:	8afb      	ldrh	r3, [r7, #22]
 800dd8a:	1ad3      	subs	r3, r2, r3
 800dd8c:	b29b      	uxth	r3, r3
 800dd8e:	3b08      	subs	r3, #8
 800dd90:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800dd92:	8bfa      	ldrh	r2, [r7, #30]
 800dd94:	8abb      	ldrh	r3, [r7, #20]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d906      	bls.n	800dda8 <mem_trim+0xb0>
 800dd9a:	4b55      	ldr	r3, [pc, #340]	@ (800def0 <mem_trim+0x1f8>)
 800dd9c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800dda0:	4956      	ldr	r1, [pc, #344]	@ (800defc <mem_trim+0x204>)
 800dda2:	4855      	ldr	r0, [pc, #340]	@ (800def8 <mem_trim+0x200>)
 800dda4:	f009 f8da 	bl	8016f5c <iprintf>
  if (newsize > size) {
 800dda8:	8bfa      	ldrh	r2, [r7, #30]
 800ddaa:	8abb      	ldrh	r3, [r7, #20]
 800ddac:	429a      	cmp	r2, r3
 800ddae:	d901      	bls.n	800ddb4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	e095      	b.n	800dee0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800ddb4:	8bfa      	ldrh	r2, [r7, #30]
 800ddb6:	8abb      	ldrh	r3, [r7, #20]
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d101      	bne.n	800ddc0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	e08f      	b.n	800dee0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ddc0:	484f      	ldr	r0, [pc, #316]	@ (800df00 <mem_trim+0x208>)
 800ddc2:	f001 fe17 	bl	800f9f4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ddc6:	69bb      	ldr	r3, [r7, #24]
 800ddc8:	881b      	ldrh	r3, [r3, #0]
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f7ff fdb4 	bl	800d938 <ptr_to_mem>
 800ddd0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ddd2:	693b      	ldr	r3, [r7, #16]
 800ddd4:	791b      	ldrb	r3, [r3, #4]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d13f      	bne.n	800de5a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ddda:	69bb      	ldr	r3, [r7, #24]
 800dddc:	881b      	ldrh	r3, [r3, #0]
 800ddde:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800dde2:	d106      	bne.n	800ddf2 <mem_trim+0xfa>
 800dde4:	4b42      	ldr	r3, [pc, #264]	@ (800def0 <mem_trim+0x1f8>)
 800dde6:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800ddea:	4946      	ldr	r1, [pc, #280]	@ (800df04 <mem_trim+0x20c>)
 800ddec:	4842      	ldr	r0, [pc, #264]	@ (800def8 <mem_trim+0x200>)
 800ddee:	f009 f8b5 	bl	8016f5c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	881b      	ldrh	r3, [r3, #0]
 800ddf6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ddf8:	8afa      	ldrh	r2, [r7, #22]
 800ddfa:	8bfb      	ldrh	r3, [r7, #30]
 800ddfc:	4413      	add	r3, r2
 800ddfe:	b29b      	uxth	r3, r3
 800de00:	3308      	adds	r3, #8
 800de02:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800de04:	4b40      	ldr	r3, [pc, #256]	@ (800df08 <mem_trim+0x210>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	693a      	ldr	r2, [r7, #16]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d106      	bne.n	800de1c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800de0e:	89fb      	ldrh	r3, [r7, #14]
 800de10:	4618      	mov	r0, r3
 800de12:	f7ff fd91 	bl	800d938 <ptr_to_mem>
 800de16:	4603      	mov	r3, r0
 800de18:	4a3b      	ldr	r2, [pc, #236]	@ (800df08 <mem_trim+0x210>)
 800de1a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800de1c:	89fb      	ldrh	r3, [r7, #14]
 800de1e:	4618      	mov	r0, r3
 800de20:	f7ff fd8a 	bl	800d938 <ptr_to_mem>
 800de24:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	2200      	movs	r2, #0
 800de2a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	89ba      	ldrh	r2, [r7, #12]
 800de30:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	8afa      	ldrh	r2, [r7, #22]
 800de36:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800de38:	69bb      	ldr	r3, [r7, #24]
 800de3a:	89fa      	ldrh	r2, [r7, #14]
 800de3c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	881b      	ldrh	r3, [r3, #0]
 800de42:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800de46:	d047      	beq.n	800ded8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	881b      	ldrh	r3, [r3, #0]
 800de4c:	4618      	mov	r0, r3
 800de4e:	f7ff fd73 	bl	800d938 <ptr_to_mem>
 800de52:	4602      	mov	r2, r0
 800de54:	89fb      	ldrh	r3, [r7, #14]
 800de56:	8053      	strh	r3, [r2, #2]
 800de58:	e03e      	b.n	800ded8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800de5a:	8bfb      	ldrh	r3, [r7, #30]
 800de5c:	f103 0214 	add.w	r2, r3, #20
 800de60:	8abb      	ldrh	r3, [r7, #20]
 800de62:	429a      	cmp	r2, r3
 800de64:	d838      	bhi.n	800ded8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800de66:	8afa      	ldrh	r2, [r7, #22]
 800de68:	8bfb      	ldrh	r3, [r7, #30]
 800de6a:	4413      	add	r3, r2
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	3308      	adds	r3, #8
 800de70:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800de72:	69bb      	ldr	r3, [r7, #24]
 800de74:	881b      	ldrh	r3, [r3, #0]
 800de76:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800de7a:	d106      	bne.n	800de8a <mem_trim+0x192>
 800de7c:	4b1c      	ldr	r3, [pc, #112]	@ (800def0 <mem_trim+0x1f8>)
 800de7e:	f240 3216 	movw	r2, #790	@ 0x316
 800de82:	4920      	ldr	r1, [pc, #128]	@ (800df04 <mem_trim+0x20c>)
 800de84:	481c      	ldr	r0, [pc, #112]	@ (800def8 <mem_trim+0x200>)
 800de86:	f009 f869 	bl	8016f5c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800de8a:	89fb      	ldrh	r3, [r7, #14]
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7ff fd53 	bl	800d938 <ptr_to_mem>
 800de92:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800de94:	4b1c      	ldr	r3, [pc, #112]	@ (800df08 <mem_trim+0x210>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	693a      	ldr	r2, [r7, #16]
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d202      	bcs.n	800dea4 <mem_trim+0x1ac>
      lfree = mem2;
 800de9e:	4a1a      	ldr	r2, [pc, #104]	@ (800df08 <mem_trim+0x210>)
 800dea0:	693b      	ldr	r3, [r7, #16]
 800dea2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	2200      	movs	r2, #0
 800dea8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800deaa:	69bb      	ldr	r3, [r7, #24]
 800deac:	881a      	ldrh	r2, [r3, #0]
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	8afa      	ldrh	r2, [r7, #22]
 800deb6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800deb8:	69bb      	ldr	r3, [r7, #24]
 800deba:	89fa      	ldrh	r2, [r7, #14]
 800debc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	881b      	ldrh	r3, [r3, #0]
 800dec2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800dec6:	d007      	beq.n	800ded8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	881b      	ldrh	r3, [r3, #0]
 800decc:	4618      	mov	r0, r3
 800dece:	f7ff fd33 	bl	800d938 <ptr_to_mem>
 800ded2:	4602      	mov	r2, r0
 800ded4:	89fb      	ldrh	r3, [r7, #14]
 800ded6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ded8:	4809      	ldr	r0, [pc, #36]	@ (800df00 <mem_trim+0x208>)
 800deda:	f001 fd9a 	bl	800fa12 <sys_mutex_unlock>
  return rmem;
 800dede:	687b      	ldr	r3, [r7, #4]
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3720      	adds	r7, #32
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	24009cc8 	.word	0x24009cc8
 800deec:	24009ccc 	.word	0x24009ccc
 800def0:	08019364 	.word	0x08019364
 800def4:	08019524 	.word	0x08019524
 800def8:	080193e0 	.word	0x080193e0
 800defc:	0801953c 	.word	0x0801953c
 800df00:	24009cd0 	.word	0x24009cd0
 800df04:	0801955c 	.word	0x0801955c
 800df08:	24009cd4 	.word	0x24009cd4

0800df0c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b088      	sub	sp, #32
 800df10:	af00      	add	r7, sp, #0
 800df12:	4603      	mov	r3, r0
 800df14:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800df16:	88fb      	ldrh	r3, [r7, #6]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d101      	bne.n	800df20 <mem_malloc+0x14>
    return NULL;
 800df1c:	2300      	movs	r3, #0
 800df1e:	e0e2      	b.n	800e0e6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800df20:	88fb      	ldrh	r3, [r7, #6]
 800df22:	3303      	adds	r3, #3
 800df24:	b29b      	uxth	r3, r3
 800df26:	f023 0303 	bic.w	r3, r3, #3
 800df2a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800df2c:	8bbb      	ldrh	r3, [r7, #28]
 800df2e:	2b0b      	cmp	r3, #11
 800df30:	d801      	bhi.n	800df36 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800df32:	230c      	movs	r3, #12
 800df34:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800df36:	8bbb      	ldrh	r3, [r7, #28]
 800df38:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800df3c:	d803      	bhi.n	800df46 <mem_malloc+0x3a>
 800df3e:	8bba      	ldrh	r2, [r7, #28]
 800df40:	88fb      	ldrh	r3, [r7, #6]
 800df42:	429a      	cmp	r2, r3
 800df44:	d201      	bcs.n	800df4a <mem_malloc+0x3e>
    return NULL;
 800df46:	2300      	movs	r3, #0
 800df48:	e0cd      	b.n	800e0e6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800df4a:	4869      	ldr	r0, [pc, #420]	@ (800e0f0 <mem_malloc+0x1e4>)
 800df4c:	f001 fd52 	bl	800f9f4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800df50:	4b68      	ldr	r3, [pc, #416]	@ (800e0f4 <mem_malloc+0x1e8>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4618      	mov	r0, r3
 800df56:	f7ff fd01 	bl	800d95c <mem_to_ptr>
 800df5a:	4603      	mov	r3, r0
 800df5c:	83fb      	strh	r3, [r7, #30]
 800df5e:	e0b7      	b.n	800e0d0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800df60:	8bfb      	ldrh	r3, [r7, #30]
 800df62:	4618      	mov	r0, r3
 800df64:	f7ff fce8 	bl	800d938 <ptr_to_mem>
 800df68:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	791b      	ldrb	r3, [r3, #4]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	f040 80a7 	bne.w	800e0c2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	881b      	ldrh	r3, [r3, #0]
 800df78:	461a      	mov	r2, r3
 800df7a:	8bfb      	ldrh	r3, [r7, #30]
 800df7c:	1ad3      	subs	r3, r2, r3
 800df7e:	f1a3 0208 	sub.w	r2, r3, #8
 800df82:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800df84:	429a      	cmp	r2, r3
 800df86:	f0c0 809c 	bcc.w	800e0c2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	881b      	ldrh	r3, [r3, #0]
 800df8e:	461a      	mov	r2, r3
 800df90:	8bfb      	ldrh	r3, [r7, #30]
 800df92:	1ad3      	subs	r3, r2, r3
 800df94:	f1a3 0208 	sub.w	r2, r3, #8
 800df98:	8bbb      	ldrh	r3, [r7, #28]
 800df9a:	3314      	adds	r3, #20
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d333      	bcc.n	800e008 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800dfa0:	8bfa      	ldrh	r2, [r7, #30]
 800dfa2:	8bbb      	ldrh	r3, [r7, #28]
 800dfa4:	4413      	add	r3, r2
 800dfa6:	b29b      	uxth	r3, r3
 800dfa8:	3308      	adds	r3, #8
 800dfaa:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800dfac:	8a7b      	ldrh	r3, [r7, #18]
 800dfae:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800dfb2:	d106      	bne.n	800dfc2 <mem_malloc+0xb6>
 800dfb4:	4b50      	ldr	r3, [pc, #320]	@ (800e0f8 <mem_malloc+0x1ec>)
 800dfb6:	f240 3287 	movw	r2, #903	@ 0x387
 800dfba:	4950      	ldr	r1, [pc, #320]	@ (800e0fc <mem_malloc+0x1f0>)
 800dfbc:	4850      	ldr	r0, [pc, #320]	@ (800e100 <mem_malloc+0x1f4>)
 800dfbe:	f008 ffcd 	bl	8016f5c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800dfc2:	8a7b      	ldrh	r3, [r7, #18]
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f7ff fcb7 	bl	800d938 <ptr_to_mem>
 800dfca:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	881a      	ldrh	r2, [r3, #0]
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	8bfa      	ldrh	r2, [r7, #30]
 800dfde:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	8a7a      	ldrh	r2, [r7, #18]
 800dfe4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	2201      	movs	r2, #1
 800dfea:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	881b      	ldrh	r3, [r3, #0]
 800dff0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800dff4:	d00b      	beq.n	800e00e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	881b      	ldrh	r3, [r3, #0]
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7ff fc9c 	bl	800d938 <ptr_to_mem>
 800e000:	4602      	mov	r2, r0
 800e002:	8a7b      	ldrh	r3, [r7, #18]
 800e004:	8053      	strh	r3, [r2, #2]
 800e006:	e002      	b.n	800e00e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	2201      	movs	r2, #1
 800e00c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e00e:	4b39      	ldr	r3, [pc, #228]	@ (800e0f4 <mem_malloc+0x1e8>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	697a      	ldr	r2, [r7, #20]
 800e014:	429a      	cmp	r2, r3
 800e016:	d127      	bne.n	800e068 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800e018:	4b36      	ldr	r3, [pc, #216]	@ (800e0f4 <mem_malloc+0x1e8>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e01e:	e005      	b.n	800e02c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e020:	69bb      	ldr	r3, [r7, #24]
 800e022:	881b      	ldrh	r3, [r3, #0]
 800e024:	4618      	mov	r0, r3
 800e026:	f7ff fc87 	bl	800d938 <ptr_to_mem>
 800e02a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e02c:	69bb      	ldr	r3, [r7, #24]
 800e02e:	791b      	ldrb	r3, [r3, #4]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d004      	beq.n	800e03e <mem_malloc+0x132>
 800e034:	4b33      	ldr	r3, [pc, #204]	@ (800e104 <mem_malloc+0x1f8>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	69ba      	ldr	r2, [r7, #24]
 800e03a:	429a      	cmp	r2, r3
 800e03c:	d1f0      	bne.n	800e020 <mem_malloc+0x114>
          }
          lfree = cur;
 800e03e:	4a2d      	ldr	r2, [pc, #180]	@ (800e0f4 <mem_malloc+0x1e8>)
 800e040:	69bb      	ldr	r3, [r7, #24]
 800e042:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e044:	4b2b      	ldr	r3, [pc, #172]	@ (800e0f4 <mem_malloc+0x1e8>)
 800e046:	681a      	ldr	r2, [r3, #0]
 800e048:	4b2e      	ldr	r3, [pc, #184]	@ (800e104 <mem_malloc+0x1f8>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d00b      	beq.n	800e068 <mem_malloc+0x15c>
 800e050:	4b28      	ldr	r3, [pc, #160]	@ (800e0f4 <mem_malloc+0x1e8>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	791b      	ldrb	r3, [r3, #4]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d006      	beq.n	800e068 <mem_malloc+0x15c>
 800e05a:	4b27      	ldr	r3, [pc, #156]	@ (800e0f8 <mem_malloc+0x1ec>)
 800e05c:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800e060:	4929      	ldr	r1, [pc, #164]	@ (800e108 <mem_malloc+0x1fc>)
 800e062:	4827      	ldr	r0, [pc, #156]	@ (800e100 <mem_malloc+0x1f4>)
 800e064:	f008 ff7a 	bl	8016f5c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e068:	4821      	ldr	r0, [pc, #132]	@ (800e0f0 <mem_malloc+0x1e4>)
 800e06a:	f001 fcd2 	bl	800fa12 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e06e:	8bba      	ldrh	r2, [r7, #28]
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	4413      	add	r3, r2
 800e074:	3308      	adds	r3, #8
 800e076:	4a23      	ldr	r2, [pc, #140]	@ (800e104 <mem_malloc+0x1f8>)
 800e078:	6812      	ldr	r2, [r2, #0]
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d906      	bls.n	800e08c <mem_malloc+0x180>
 800e07e:	4b1e      	ldr	r3, [pc, #120]	@ (800e0f8 <mem_malloc+0x1ec>)
 800e080:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800e084:	4921      	ldr	r1, [pc, #132]	@ (800e10c <mem_malloc+0x200>)
 800e086:	481e      	ldr	r0, [pc, #120]	@ (800e100 <mem_malloc+0x1f4>)
 800e088:	f008 ff68 	bl	8016f5c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	f003 0303 	and.w	r3, r3, #3
 800e092:	2b00      	cmp	r3, #0
 800e094:	d006      	beq.n	800e0a4 <mem_malloc+0x198>
 800e096:	4b18      	ldr	r3, [pc, #96]	@ (800e0f8 <mem_malloc+0x1ec>)
 800e098:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800e09c:	491c      	ldr	r1, [pc, #112]	@ (800e110 <mem_malloc+0x204>)
 800e09e:	4818      	ldr	r0, [pc, #96]	@ (800e100 <mem_malloc+0x1f4>)
 800e0a0:	f008 ff5c 	bl	8016f5c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	f003 0303 	and.w	r3, r3, #3
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d006      	beq.n	800e0bc <mem_malloc+0x1b0>
 800e0ae:	4b12      	ldr	r3, [pc, #72]	@ (800e0f8 <mem_malloc+0x1ec>)
 800e0b0:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800e0b4:	4917      	ldr	r1, [pc, #92]	@ (800e114 <mem_malloc+0x208>)
 800e0b6:	4812      	ldr	r0, [pc, #72]	@ (800e100 <mem_malloc+0x1f4>)
 800e0b8:	f008 ff50 	bl	8016f5c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	3308      	adds	r3, #8
 800e0c0:	e011      	b.n	800e0e6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800e0c2:	8bfb      	ldrh	r3, [r7, #30]
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7ff fc37 	bl	800d938 <ptr_to_mem>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	881b      	ldrh	r3, [r3, #0]
 800e0ce:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e0d0:	8bfa      	ldrh	r2, [r7, #30]
 800e0d2:	8bbb      	ldrh	r3, [r7, #28]
 800e0d4:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	f4ff af41 	bcc.w	800df60 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e0de:	4804      	ldr	r0, [pc, #16]	@ (800e0f0 <mem_malloc+0x1e4>)
 800e0e0:	f001 fc97 	bl	800fa12 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e0e4:	2300      	movs	r3, #0
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3720      	adds	r7, #32
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	24009cd0 	.word	0x24009cd0
 800e0f4:	24009cd4 	.word	0x24009cd4
 800e0f8:	08019364 	.word	0x08019364
 800e0fc:	0801955c 	.word	0x0801955c
 800e100:	080193e0 	.word	0x080193e0
 800e104:	24009ccc 	.word	0x24009ccc
 800e108:	08019570 	.word	0x08019570
 800e10c:	0801958c 	.word	0x0801958c
 800e110:	080195bc 	.word	0x080195bc
 800e114:	080195ec 	.word	0x080195ec

0800e118 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e118:	b480      	push	{r7}
 800e11a:	b085      	sub	sp, #20
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	689b      	ldr	r3, [r3, #8]
 800e124:	2200      	movs	r2, #0
 800e126:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	3303      	adds	r3, #3
 800e12e:	f023 0303 	bic.w	r3, r3, #3
 800e132:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e134:	2300      	movs	r3, #0
 800e136:	60fb      	str	r3, [r7, #12]
 800e138:	e011      	b.n	800e15e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	689b      	ldr	r3, [r3, #8]
 800e13e:	681a      	ldr	r2, [r3, #0]
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	689b      	ldr	r3, [r3, #8]
 800e148:	68ba      	ldr	r2, [r7, #8]
 800e14a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	881b      	ldrh	r3, [r3, #0]
 800e150:	461a      	mov	r2, r3
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	4413      	add	r3, r2
 800e156:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	3301      	adds	r3, #1
 800e15c:	60fb      	str	r3, [r7, #12]
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	885b      	ldrh	r3, [r3, #2]
 800e162:	461a      	mov	r2, r3
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	4293      	cmp	r3, r2
 800e168:	dbe7      	blt.n	800e13a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e16a:	bf00      	nop
 800e16c:	bf00      	nop
 800e16e:	3714      	adds	r7, #20
 800e170:	46bd      	mov	sp, r7
 800e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e176:	4770      	bx	lr

0800e178 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b082      	sub	sp, #8
 800e17c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e17e:	2300      	movs	r3, #0
 800e180:	80fb      	strh	r3, [r7, #6]
 800e182:	e009      	b.n	800e198 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e184:	88fb      	ldrh	r3, [r7, #6]
 800e186:	4a08      	ldr	r2, [pc, #32]	@ (800e1a8 <memp_init+0x30>)
 800e188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e18c:	4618      	mov	r0, r3
 800e18e:	f7ff ffc3 	bl	800e118 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e192:	88fb      	ldrh	r3, [r7, #6]
 800e194:	3301      	adds	r3, #1
 800e196:	80fb      	strh	r3, [r7, #6]
 800e198:	88fb      	ldrh	r3, [r7, #6]
 800e19a:	2b0c      	cmp	r3, #12
 800e19c:	d9f2      	bls.n	800e184 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e19e:	bf00      	nop
 800e1a0:	bf00      	nop
 800e1a2:	3708      	adds	r7, #8
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}
 800e1a8:	0801ba1c 	.word	0x0801ba1c

0800e1ac <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e1b4:	f001 fc5a 	bl	800fa6c <sys_arch_protect>
 800e1b8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	689b      	ldr	r3, [r3, #8]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d015      	beq.n	800e1f4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	689b      	ldr	r3, [r3, #8]
 800e1cc:	68ba      	ldr	r2, [r7, #8]
 800e1ce:	6812      	ldr	r2, [r2, #0]
 800e1d0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	f003 0303 	and.w	r3, r3, #3
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d006      	beq.n	800e1ea <do_memp_malloc_pool+0x3e>
 800e1dc:	4b09      	ldr	r3, [pc, #36]	@ (800e204 <do_memp_malloc_pool+0x58>)
 800e1de:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800e1e2:	4909      	ldr	r1, [pc, #36]	@ (800e208 <do_memp_malloc_pool+0x5c>)
 800e1e4:	4809      	ldr	r0, [pc, #36]	@ (800e20c <do_memp_malloc_pool+0x60>)
 800e1e6:	f008 feb9 	bl	8016f5c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e1ea:	68f8      	ldr	r0, [r7, #12]
 800e1ec:	f001 fc4c 	bl	800fa88 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	e003      	b.n	800e1fc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e1f4:	68f8      	ldr	r0, [r7, #12]
 800e1f6:	f001 fc47 	bl	800fa88 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e1fa:	2300      	movs	r3, #0
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3710      	adds	r7, #16
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}
 800e204:	08019610 	.word	0x08019610
 800e208:	08019674 	.word	0x08019674
 800e20c:	08019698 	.word	0x08019698

0800e210 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d106      	bne.n	800e22c <memp_malloc_pool+0x1c>
 800e21e:	4b0a      	ldr	r3, [pc, #40]	@ (800e248 <memp_malloc_pool+0x38>)
 800e220:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800e224:	4909      	ldr	r1, [pc, #36]	@ (800e24c <memp_malloc_pool+0x3c>)
 800e226:	480a      	ldr	r0, [pc, #40]	@ (800e250 <memp_malloc_pool+0x40>)
 800e228:	f008 fe98 	bl	8016f5c <iprintf>
  if (desc == NULL) {
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d101      	bne.n	800e236 <memp_malloc_pool+0x26>
    return NULL;
 800e232:	2300      	movs	r3, #0
 800e234:	e003      	b.n	800e23e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f7ff ffb8 	bl	800e1ac <do_memp_malloc_pool>
 800e23c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3708      	adds	r7, #8
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}
 800e246:	bf00      	nop
 800e248:	08019610 	.word	0x08019610
 800e24c:	080196c0 	.word	0x080196c0
 800e250:	08019698 	.word	0x08019698

0800e254 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	4603      	mov	r3, r0
 800e25c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e25e:	79fb      	ldrb	r3, [r7, #7]
 800e260:	2b0c      	cmp	r3, #12
 800e262:	d908      	bls.n	800e276 <memp_malloc+0x22>
 800e264:	4b0a      	ldr	r3, [pc, #40]	@ (800e290 <memp_malloc+0x3c>)
 800e266:	f240 1257 	movw	r2, #343	@ 0x157
 800e26a:	490a      	ldr	r1, [pc, #40]	@ (800e294 <memp_malloc+0x40>)
 800e26c:	480a      	ldr	r0, [pc, #40]	@ (800e298 <memp_malloc+0x44>)
 800e26e:	f008 fe75 	bl	8016f5c <iprintf>
 800e272:	2300      	movs	r3, #0
 800e274:	e008      	b.n	800e288 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e276:	79fb      	ldrb	r3, [r7, #7]
 800e278:	4a08      	ldr	r2, [pc, #32]	@ (800e29c <memp_malloc+0x48>)
 800e27a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e27e:	4618      	mov	r0, r3
 800e280:	f7ff ff94 	bl	800e1ac <do_memp_malloc_pool>
 800e284:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e286:	68fb      	ldr	r3, [r7, #12]
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3710      	adds	r7, #16
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}
 800e290:	08019610 	.word	0x08019610
 800e294:	080196d4 	.word	0x080196d4
 800e298:	08019698 	.word	0x08019698
 800e29c:	0801ba1c 	.word	0x0801ba1c

0800e2a0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	f003 0303 	and.w	r3, r3, #3
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d006      	beq.n	800e2c2 <do_memp_free_pool+0x22>
 800e2b4:	4b0d      	ldr	r3, [pc, #52]	@ (800e2ec <do_memp_free_pool+0x4c>)
 800e2b6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800e2ba:	490d      	ldr	r1, [pc, #52]	@ (800e2f0 <do_memp_free_pool+0x50>)
 800e2bc:	480d      	ldr	r0, [pc, #52]	@ (800e2f4 <do_memp_free_pool+0x54>)
 800e2be:	f008 fe4d 	bl	8016f5c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e2c6:	f001 fbd1 	bl	800fa6c <sys_arch_protect>
 800e2ca:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	689b      	ldr	r3, [r3, #8]
 800e2d0:	681a      	ldr	r2, [r3, #0]
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	689b      	ldr	r3, [r3, #8]
 800e2da:	68fa      	ldr	r2, [r7, #12]
 800e2dc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e2de:	68b8      	ldr	r0, [r7, #8]
 800e2e0:	f001 fbd2 	bl	800fa88 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e2e4:	bf00      	nop
 800e2e6:	3710      	adds	r7, #16
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}
 800e2ec:	08019610 	.word	0x08019610
 800e2f0:	080196f4 	.word	0x080196f4
 800e2f4:	08019698 	.word	0x08019698

0800e2f8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d106      	bne.n	800e316 <memp_free_pool+0x1e>
 800e308:	4b0a      	ldr	r3, [pc, #40]	@ (800e334 <memp_free_pool+0x3c>)
 800e30a:	f240 1295 	movw	r2, #405	@ 0x195
 800e30e:	490a      	ldr	r1, [pc, #40]	@ (800e338 <memp_free_pool+0x40>)
 800e310:	480a      	ldr	r0, [pc, #40]	@ (800e33c <memp_free_pool+0x44>)
 800e312:	f008 fe23 	bl	8016f5c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d007      	beq.n	800e32c <memp_free_pool+0x34>
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d004      	beq.n	800e32c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800e322:	6839      	ldr	r1, [r7, #0]
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f7ff ffbb 	bl	800e2a0 <do_memp_free_pool>
 800e32a:	e000      	b.n	800e32e <memp_free_pool+0x36>
    return;
 800e32c:	bf00      	nop
}
 800e32e:	3708      	adds	r7, #8
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}
 800e334:	08019610 	.word	0x08019610
 800e338:	080196c0 	.word	0x080196c0
 800e33c:	08019698 	.word	0x08019698

0800e340 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b082      	sub	sp, #8
 800e344:	af00      	add	r7, sp, #0
 800e346:	4603      	mov	r3, r0
 800e348:	6039      	str	r1, [r7, #0]
 800e34a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e34c:	79fb      	ldrb	r3, [r7, #7]
 800e34e:	2b0c      	cmp	r3, #12
 800e350:	d907      	bls.n	800e362 <memp_free+0x22>
 800e352:	4b0c      	ldr	r3, [pc, #48]	@ (800e384 <memp_free+0x44>)
 800e354:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800e358:	490b      	ldr	r1, [pc, #44]	@ (800e388 <memp_free+0x48>)
 800e35a:	480c      	ldr	r0, [pc, #48]	@ (800e38c <memp_free+0x4c>)
 800e35c:	f008 fdfe 	bl	8016f5c <iprintf>
 800e360:	e00c      	b.n	800e37c <memp_free+0x3c>

  if (mem == NULL) {
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d008      	beq.n	800e37a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e368:	79fb      	ldrb	r3, [r7, #7]
 800e36a:	4a09      	ldr	r2, [pc, #36]	@ (800e390 <memp_free+0x50>)
 800e36c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e370:	6839      	ldr	r1, [r7, #0]
 800e372:	4618      	mov	r0, r3
 800e374:	f7ff ff94 	bl	800e2a0 <do_memp_free_pool>
 800e378:	e000      	b.n	800e37c <memp_free+0x3c>
    return;
 800e37a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e37c:	3708      	adds	r7, #8
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}
 800e382:	bf00      	nop
 800e384:	08019610 	.word	0x08019610
 800e388:	08019714 	.word	0x08019714
 800e38c:	08019698 	.word	0x08019698
 800e390:	0801ba1c 	.word	0x0801ba1c

0800e394 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b082      	sub	sp, #8
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d013      	beq.n	800e3ca <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d00b      	beq.n	800e3c2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f000 fe88 	bl	800f0c4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	605a      	str	r2, [r3, #4]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	685a      	ldr	r2, [r3, #4]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800e3c2:	6879      	ldr	r1, [r7, #4]
 800e3c4:	2006      	movs	r0, #6
 800e3c6:	f7ff ffbb 	bl	800e340 <memp_free>
  }
}
 800e3ca:	bf00      	nop
 800e3cc:	3708      	adds	r7, #8
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}

0800e3d2 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e3d2:	b480      	push	{r7}
 800e3d4:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e3d6:	bf00      	nop
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3de:	4770      	bx	lr

0800e3e0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b086      	sub	sp, #24
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	60f8      	str	r0, [r7, #12]
 800e3e8:	60b9      	str	r1, [r7, #8]
 800e3ea:	607a      	str	r2, [r7, #4]
 800e3ec:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d108      	bne.n	800e406 <netif_add+0x26>
 800e3f4:	4b57      	ldr	r3, [pc, #348]	@ (800e554 <netif_add+0x174>)
 800e3f6:	f240 1227 	movw	r2, #295	@ 0x127
 800e3fa:	4957      	ldr	r1, [pc, #348]	@ (800e558 <netif_add+0x178>)
 800e3fc:	4857      	ldr	r0, [pc, #348]	@ (800e55c <netif_add+0x17c>)
 800e3fe:	f008 fdad 	bl	8016f5c <iprintf>
 800e402:	2300      	movs	r3, #0
 800e404:	e0a2      	b.n	800e54c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d108      	bne.n	800e41e <netif_add+0x3e>
 800e40c:	4b51      	ldr	r3, [pc, #324]	@ (800e554 <netif_add+0x174>)
 800e40e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800e412:	4953      	ldr	r1, [pc, #332]	@ (800e560 <netif_add+0x180>)
 800e414:	4851      	ldr	r0, [pc, #324]	@ (800e55c <netif_add+0x17c>)
 800e416:	f008 fda1 	bl	8016f5c <iprintf>
 800e41a:	2300      	movs	r3, #0
 800e41c:	e096      	b.n	800e54c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d101      	bne.n	800e428 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e424:	4b4f      	ldr	r3, [pc, #316]	@ (800e564 <netif_add+0x184>)
 800e426:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d101      	bne.n	800e432 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e42e:	4b4d      	ldr	r3, [pc, #308]	@ (800e564 <netif_add+0x184>)
 800e430:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d101      	bne.n	800e43c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e438:	4b4a      	ldr	r3, [pc, #296]	@ (800e564 <netif_add+0x184>)
 800e43a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2200      	movs	r2, #0
 800e440:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	2200      	movs	r2, #0
 800e446:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	2200      	movs	r2, #0
 800e44c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	4a45      	ldr	r2, [pc, #276]	@ (800e568 <netif_add+0x188>)
 800e452:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	2200      	movs	r2, #0
 800e458:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	2200      	movs	r2, #0
 800e45e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2200      	movs	r2, #0
 800e466:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	6a3a      	ldr	r2, [r7, #32]
 800e46c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e46e:	4b3f      	ldr	r3, [pc, #252]	@ (800e56c <netif_add+0x18c>)
 800e470:	781a      	ldrb	r2, [r3, #0]
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e47c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	687a      	ldr	r2, [r7, #4]
 800e482:	68b9      	ldr	r1, [r7, #8]
 800e484:	68f8      	ldr	r0, [r7, #12]
 800e486:	f000 f913 	bl	800e6b0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e48c:	68f8      	ldr	r0, [r7, #12]
 800e48e:	4798      	blx	r3
 800e490:	4603      	mov	r3, r0
 800e492:	2b00      	cmp	r3, #0
 800e494:	d001      	beq.n	800e49a <netif_add+0xba>
    return NULL;
 800e496:	2300      	movs	r3, #0
 800e498:	e058      	b.n	800e54c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e4a0:	2bff      	cmp	r3, #255	@ 0xff
 800e4a2:	d103      	bne.n	800e4ac <netif_add+0xcc>
        netif->num = 0;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e4b0:	4b2f      	ldr	r3, [pc, #188]	@ (800e570 <netif_add+0x190>)
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	617b      	str	r3, [r7, #20]
 800e4b6:	e02b      	b.n	800e510 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e4b8:	697a      	ldr	r2, [r7, #20]
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d106      	bne.n	800e4ce <netif_add+0xee>
 800e4c0:	4b24      	ldr	r3, [pc, #144]	@ (800e554 <netif_add+0x174>)
 800e4c2:	f240 128b 	movw	r2, #395	@ 0x18b
 800e4c6:	492b      	ldr	r1, [pc, #172]	@ (800e574 <netif_add+0x194>)
 800e4c8:	4824      	ldr	r0, [pc, #144]	@ (800e55c <netif_add+0x17c>)
 800e4ca:	f008 fd47 	bl	8016f5c <iprintf>
        num_netifs++;
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e4d4:	693b      	ldr	r3, [r7, #16]
 800e4d6:	2bff      	cmp	r3, #255	@ 0xff
 800e4d8:	dd06      	ble.n	800e4e8 <netif_add+0x108>
 800e4da:	4b1e      	ldr	r3, [pc, #120]	@ (800e554 <netif_add+0x174>)
 800e4dc:	f240 128d 	movw	r2, #397	@ 0x18d
 800e4e0:	4925      	ldr	r1, [pc, #148]	@ (800e578 <netif_add+0x198>)
 800e4e2:	481e      	ldr	r0, [pc, #120]	@ (800e55c <netif_add+0x17c>)
 800e4e4:	f008 fd3a 	bl	8016f5c <iprintf>
        if (netif2->num == netif->num) {
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d108      	bne.n	800e50a <netif_add+0x12a>
          netif->num++;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e4fe:	3301      	adds	r3, #1
 800e500:	b2da      	uxtb	r2, r3
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800e508:	e005      	b.n	800e516 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	617b      	str	r3, [r7, #20]
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d1d0      	bne.n	800e4b8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d1be      	bne.n	800e49a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e522:	2bfe      	cmp	r3, #254	@ 0xfe
 800e524:	d103      	bne.n	800e52e <netif_add+0x14e>
    netif_num = 0;
 800e526:	4b11      	ldr	r3, [pc, #68]	@ (800e56c <netif_add+0x18c>)
 800e528:	2200      	movs	r2, #0
 800e52a:	701a      	strb	r2, [r3, #0]
 800e52c:	e006      	b.n	800e53c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e534:	3301      	adds	r3, #1
 800e536:	b2da      	uxtb	r2, r3
 800e538:	4b0c      	ldr	r3, [pc, #48]	@ (800e56c <netif_add+0x18c>)
 800e53a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e53c:	4b0c      	ldr	r3, [pc, #48]	@ (800e570 <netif_add+0x190>)
 800e53e:	681a      	ldr	r2, [r3, #0]
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e544:	4a0a      	ldr	r2, [pc, #40]	@ (800e570 <netif_add+0x190>)
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e54a:	68fb      	ldr	r3, [r7, #12]
}
 800e54c:	4618      	mov	r0, r3
 800e54e:	3718      	adds	r7, #24
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}
 800e554:	08019730 	.word	0x08019730
 800e558:	080197f4 	.word	0x080197f4
 800e55c:	080197b0 	.word	0x080197b0
 800e560:	08019810 	.word	0x08019810
 800e564:	0801b97c 	.word	0x0801b97c
 800e568:	0800e98b 	.word	0x0800e98b
 800e56c:	2400cdac 	.word	0x2400cdac
 800e570:	2400cda4 	.word	0x2400cda4
 800e574:	08019834 	.word	0x08019834
 800e578:	08019848 	.word	0x08019848

0800e57c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b082      	sub	sp, #8
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
 800e584:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e586:	6839      	ldr	r1, [r7, #0]
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f003 f8f7 	bl	801177c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e58e:	6839      	ldr	r1, [r7, #0]
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f008 fbb3 	bl	8016cfc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e596:	bf00      	nop
 800e598:	3708      	adds	r7, #8
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
	...

0800e5a0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b086      	sub	sp, #24
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	60f8      	str	r0, [r7, #12]
 800e5a8:	60b9      	str	r1, [r7, #8]
 800e5aa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d106      	bne.n	800e5c0 <netif_do_set_ipaddr+0x20>
 800e5b2:	4b1d      	ldr	r3, [pc, #116]	@ (800e628 <netif_do_set_ipaddr+0x88>)
 800e5b4:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800e5b8:	491c      	ldr	r1, [pc, #112]	@ (800e62c <netif_do_set_ipaddr+0x8c>)
 800e5ba:	481d      	ldr	r0, [pc, #116]	@ (800e630 <netif_do_set_ipaddr+0x90>)
 800e5bc:	f008 fcce 	bl	8016f5c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d106      	bne.n	800e5d4 <netif_do_set_ipaddr+0x34>
 800e5c6:	4b18      	ldr	r3, [pc, #96]	@ (800e628 <netif_do_set_ipaddr+0x88>)
 800e5c8:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800e5cc:	4917      	ldr	r1, [pc, #92]	@ (800e62c <netif_do_set_ipaddr+0x8c>)
 800e5ce:	4818      	ldr	r0, [pc, #96]	@ (800e630 <netif_do_set_ipaddr+0x90>)
 800e5d0:	f008 fcc4 	bl	8016f5c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	681a      	ldr	r2, [r3, #0]
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	3304      	adds	r3, #4
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d01c      	beq.n	800e61c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	3304      	adds	r3, #4
 800e5ec:	681a      	ldr	r2, [r3, #0]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e5f2:	f107 0314 	add.w	r3, r7, #20
 800e5f6:	4619      	mov	r1, r3
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f7ff ffbf 	bl	800e57c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d002      	beq.n	800e60a <netif_do_set_ipaddr+0x6a>
 800e604:	68bb      	ldr	r3, [r7, #8]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	e000      	b.n	800e60c <netif_do_set_ipaddr+0x6c>
 800e60a:	2300      	movs	r3, #0
 800e60c:	68fa      	ldr	r2, [r7, #12]
 800e60e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e610:	2101      	movs	r1, #1
 800e612:	68f8      	ldr	r0, [r7, #12]
 800e614:	f000 f8d2 	bl	800e7bc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e618:	2301      	movs	r3, #1
 800e61a:	e000      	b.n	800e61e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800e61c:	2300      	movs	r3, #0
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3718      	adds	r7, #24
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}
 800e626:	bf00      	nop
 800e628:	08019730 	.word	0x08019730
 800e62c:	08019878 	.word	0x08019878
 800e630:	080197b0 	.word	0x080197b0

0800e634 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e634:	b480      	push	{r7}
 800e636:	b085      	sub	sp, #20
 800e638:	af00      	add	r7, sp, #0
 800e63a:	60f8      	str	r0, [r7, #12]
 800e63c:	60b9      	str	r1, [r7, #8]
 800e63e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	681a      	ldr	r2, [r3, #0]
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	3308      	adds	r3, #8
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d00a      	beq.n	800e664 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d002      	beq.n	800e65a <netif_do_set_netmask+0x26>
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	e000      	b.n	800e65c <netif_do_set_netmask+0x28>
 800e65a:	2300      	movs	r3, #0
 800e65c:	68fa      	ldr	r2, [r7, #12]
 800e65e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e660:	2301      	movs	r3, #1
 800e662:	e000      	b.n	800e666 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e664:	2300      	movs	r3, #0
}
 800e666:	4618      	mov	r0, r3
 800e668:	3714      	adds	r7, #20
 800e66a:	46bd      	mov	sp, r7
 800e66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e670:	4770      	bx	lr

0800e672 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e672:	b480      	push	{r7}
 800e674:	b085      	sub	sp, #20
 800e676:	af00      	add	r7, sp, #0
 800e678:	60f8      	str	r0, [r7, #12]
 800e67a:	60b9      	str	r1, [r7, #8]
 800e67c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	681a      	ldr	r2, [r3, #0]
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	330c      	adds	r3, #12
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	429a      	cmp	r2, r3
 800e68a:	d00a      	beq.n	800e6a2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d002      	beq.n	800e698 <netif_do_set_gw+0x26>
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	e000      	b.n	800e69a <netif_do_set_gw+0x28>
 800e698:	2300      	movs	r3, #0
 800e69a:	68fa      	ldr	r2, [r7, #12]
 800e69c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e69e:	2301      	movs	r3, #1
 800e6a0:	e000      	b.n	800e6a4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e6a2:	2300      	movs	r3, #0
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3714      	adds	r7, #20
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ae:	4770      	bx	lr

0800e6b0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b088      	sub	sp, #32
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	60f8      	str	r0, [r7, #12]
 800e6b8:	60b9      	str	r1, [r7, #8]
 800e6ba:	607a      	str	r2, [r7, #4]
 800e6bc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d101      	bne.n	800e6d0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e6cc:	4b1c      	ldr	r3, [pc, #112]	@ (800e740 <netif_set_addr+0x90>)
 800e6ce:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d101      	bne.n	800e6da <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e6d6:	4b1a      	ldr	r3, [pc, #104]	@ (800e740 <netif_set_addr+0x90>)
 800e6d8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d101      	bne.n	800e6e4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e6e0:	4b17      	ldr	r3, [pc, #92]	@ (800e740 <netif_set_addr+0x90>)
 800e6e2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d003      	beq.n	800e6f2 <netif_set_addr+0x42>
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d101      	bne.n	800e6f6 <netif_set_addr+0x46>
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	e000      	b.n	800e6f8 <netif_set_addr+0x48>
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d006      	beq.n	800e70e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e700:	f107 0310 	add.w	r3, r7, #16
 800e704:	461a      	mov	r2, r3
 800e706:	68b9      	ldr	r1, [r7, #8]
 800e708:	68f8      	ldr	r0, [r7, #12]
 800e70a:	f7ff ff49 	bl	800e5a0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e70e:	69fa      	ldr	r2, [r7, #28]
 800e710:	6879      	ldr	r1, [r7, #4]
 800e712:	68f8      	ldr	r0, [r7, #12]
 800e714:	f7ff ff8e 	bl	800e634 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e718:	69ba      	ldr	r2, [r7, #24]
 800e71a:	6839      	ldr	r1, [r7, #0]
 800e71c:	68f8      	ldr	r0, [r7, #12]
 800e71e:	f7ff ffa8 	bl	800e672 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d106      	bne.n	800e736 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e728:	f107 0310 	add.w	r3, r7, #16
 800e72c:	461a      	mov	r2, r3
 800e72e:	68b9      	ldr	r1, [r7, #8]
 800e730:	68f8      	ldr	r0, [r7, #12]
 800e732:	f7ff ff35 	bl	800e5a0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e736:	bf00      	nop
 800e738:	3720      	adds	r7, #32
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}
 800e73e:	bf00      	nop
 800e740:	0801b97c 	.word	0x0801b97c

0800e744 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e744:	b480      	push	{r7}
 800e746:	b083      	sub	sp, #12
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e74c:	4a04      	ldr	r2, [pc, #16]	@ (800e760 <netif_set_default+0x1c>)
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e752:	bf00      	nop
 800e754:	370c      	adds	r7, #12
 800e756:	46bd      	mov	sp, r7
 800e758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75c:	4770      	bx	lr
 800e75e:	bf00      	nop
 800e760:	2400cda8 	.word	0x2400cda8

0800e764 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b082      	sub	sp, #8
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d107      	bne.n	800e782 <netif_set_up+0x1e>
 800e772:	4b0f      	ldr	r3, [pc, #60]	@ (800e7b0 <netif_set_up+0x4c>)
 800e774:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800e778:	490e      	ldr	r1, [pc, #56]	@ (800e7b4 <netif_set_up+0x50>)
 800e77a:	480f      	ldr	r0, [pc, #60]	@ (800e7b8 <netif_set_up+0x54>)
 800e77c:	f008 fbee 	bl	8016f5c <iprintf>
 800e780:	e013      	b.n	800e7aa <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e788:	f003 0301 	and.w	r3, r3, #1
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d10c      	bne.n	800e7aa <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e796:	f043 0301 	orr.w	r3, r3, #1
 800e79a:	b2da      	uxtb	r2, r3
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e7a2:	2103      	movs	r1, #3
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f000 f809 	bl	800e7bc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e7aa:	3708      	adds	r7, #8
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}
 800e7b0:	08019730 	.word	0x08019730
 800e7b4:	080198e8 	.word	0x080198e8
 800e7b8:	080197b0 	.word	0x080197b0

0800e7bc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b082      	sub	sp, #8
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
 800e7c4:	460b      	mov	r3, r1
 800e7c6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d106      	bne.n	800e7dc <netif_issue_reports+0x20>
 800e7ce:	4b18      	ldr	r3, [pc, #96]	@ (800e830 <netif_issue_reports+0x74>)
 800e7d0:	f240 326d 	movw	r2, #877	@ 0x36d
 800e7d4:	4917      	ldr	r1, [pc, #92]	@ (800e834 <netif_issue_reports+0x78>)
 800e7d6:	4818      	ldr	r0, [pc, #96]	@ (800e838 <netif_issue_reports+0x7c>)
 800e7d8:	f008 fbc0 	bl	8016f5c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e7e2:	f003 0304 	and.w	r3, r3, #4
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d01e      	beq.n	800e828 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e7f0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d017      	beq.n	800e828 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e7f8:	78fb      	ldrb	r3, [r7, #3]
 800e7fa:	f003 0301 	and.w	r3, r3, #1
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d013      	beq.n	800e82a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	3304      	adds	r3, #4
 800e806:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d00e      	beq.n	800e82a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e812:	f003 0308 	and.w	r3, r3, #8
 800e816:	2b00      	cmp	r3, #0
 800e818:	d007      	beq.n	800e82a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	3304      	adds	r3, #4
 800e81e:	4619      	mov	r1, r3
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f7fd fc03 	bl	800c02c <etharp_request>
 800e826:	e000      	b.n	800e82a <netif_issue_reports+0x6e>
    return;
 800e828:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e82a:	3708      	adds	r7, #8
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}
 800e830:	08019730 	.word	0x08019730
 800e834:	08019904 	.word	0x08019904
 800e838:	080197b0 	.word	0x080197b0

0800e83c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b082      	sub	sp, #8
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d107      	bne.n	800e85a <netif_set_down+0x1e>
 800e84a:	4b12      	ldr	r3, [pc, #72]	@ (800e894 <netif_set_down+0x58>)
 800e84c:	f240 329b 	movw	r2, #923	@ 0x39b
 800e850:	4911      	ldr	r1, [pc, #68]	@ (800e898 <netif_set_down+0x5c>)
 800e852:	4812      	ldr	r0, [pc, #72]	@ (800e89c <netif_set_down+0x60>)
 800e854:	f008 fb82 	bl	8016f5c <iprintf>
 800e858:	e019      	b.n	800e88e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e860:	f003 0301 	and.w	r3, r3, #1
 800e864:	2b00      	cmp	r3, #0
 800e866:	d012      	beq.n	800e88e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e86e:	f023 0301 	bic.w	r3, r3, #1
 800e872:	b2da      	uxtb	r2, r3
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e880:	f003 0308 	and.w	r3, r3, #8
 800e884:	2b00      	cmp	r3, #0
 800e886:	d002      	beq.n	800e88e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f7fc ff8d 	bl	800b7a8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e88e:	3708      	adds	r7, #8
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}
 800e894:	08019730 	.word	0x08019730
 800e898:	08019928 	.word	0x08019928
 800e89c:	080197b0 	.word	0x080197b0

0800e8a0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b082      	sub	sp, #8
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d107      	bne.n	800e8be <netif_set_link_up+0x1e>
 800e8ae:	4b13      	ldr	r3, [pc, #76]	@ (800e8fc <netif_set_link_up+0x5c>)
 800e8b0:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800e8b4:	4912      	ldr	r1, [pc, #72]	@ (800e900 <netif_set_link_up+0x60>)
 800e8b6:	4813      	ldr	r0, [pc, #76]	@ (800e904 <netif_set_link_up+0x64>)
 800e8b8:	f008 fb50 	bl	8016f5c <iprintf>
 800e8bc:	e01b      	b.n	800e8f6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e8c4:	f003 0304 	and.w	r3, r3, #4
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d114      	bne.n	800e8f6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e8d2:	f043 0304 	orr.w	r3, r3, #4
 800e8d6:	b2da      	uxtb	r2, r3
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e8de:	2103      	movs	r1, #3
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	f7ff ff6b 	bl	800e7bc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	69db      	ldr	r3, [r3, #28]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d003      	beq.n	800e8f6 <netif_set_link_up+0x56>
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	69db      	ldr	r3, [r3, #28]
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e8f6:	3708      	adds	r7, #8
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}
 800e8fc:	08019730 	.word	0x08019730
 800e900:	08019948 	.word	0x08019948
 800e904:	080197b0 	.word	0x080197b0

0800e908 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d107      	bne.n	800e926 <netif_set_link_down+0x1e>
 800e916:	4b11      	ldr	r3, [pc, #68]	@ (800e95c <netif_set_link_down+0x54>)
 800e918:	f240 4206 	movw	r2, #1030	@ 0x406
 800e91c:	4910      	ldr	r1, [pc, #64]	@ (800e960 <netif_set_link_down+0x58>)
 800e91e:	4811      	ldr	r0, [pc, #68]	@ (800e964 <netif_set_link_down+0x5c>)
 800e920:	f008 fb1c 	bl	8016f5c <iprintf>
 800e924:	e017      	b.n	800e956 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e92c:	f003 0304 	and.w	r3, r3, #4
 800e930:	2b00      	cmp	r3, #0
 800e932:	d010      	beq.n	800e956 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e93a:	f023 0304 	bic.w	r3, r3, #4
 800e93e:	b2da      	uxtb	r2, r3
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	69db      	ldr	r3, [r3, #28]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d003      	beq.n	800e956 <netif_set_link_down+0x4e>
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	69db      	ldr	r3, [r3, #28]
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e956:	3708      	adds	r7, #8
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}
 800e95c:	08019730 	.word	0x08019730
 800e960:	0801996c 	.word	0x0801996c
 800e964:	080197b0 	.word	0x080197b0

0800e968 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e968:	b480      	push	{r7}
 800e96a:	b083      	sub	sp, #12
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
 800e970:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d002      	beq.n	800e97e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	683a      	ldr	r2, [r7, #0]
 800e97c:	61da      	str	r2, [r3, #28]
  }
}
 800e97e:	bf00      	nop
 800e980:	370c      	adds	r7, #12
 800e982:	46bd      	mov	sp, r7
 800e984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e988:	4770      	bx	lr

0800e98a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e98a:	b480      	push	{r7}
 800e98c:	b085      	sub	sp, #20
 800e98e:	af00      	add	r7, sp, #0
 800e990:	60f8      	str	r0, [r7, #12]
 800e992:	60b9      	str	r1, [r7, #8]
 800e994:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e996:	f06f 030b 	mvn.w	r3, #11
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3714      	adds	r7, #20
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a4:	4770      	bx	lr
	...

0800e9a8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b085      	sub	sp, #20
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e9b2:	79fb      	ldrb	r3, [r7, #7]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d013      	beq.n	800e9e0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e9b8:	4b0d      	ldr	r3, [pc, #52]	@ (800e9f0 <netif_get_by_index+0x48>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	60fb      	str	r3, [r7, #12]
 800e9be:	e00c      	b.n	800e9da <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e9c6:	3301      	adds	r3, #1
 800e9c8:	b2db      	uxtb	r3, r3
 800e9ca:	79fa      	ldrb	r2, [r7, #7]
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d101      	bne.n	800e9d4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	e006      	b.n	800e9e2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	60fb      	str	r3, [r7, #12]
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d1ef      	bne.n	800e9c0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e9e0:	2300      	movs	r3, #0
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3714      	adds	r7, #20
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr
 800e9ee:	bf00      	nop
 800e9f0:	2400cda4 	.word	0x2400cda4

0800e9f4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b082      	sub	sp, #8
 800e9f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e9fa:	f001 f837 	bl	800fa6c <sys_arch_protect>
 800e9fe:	6038      	str	r0, [r7, #0]
 800ea00:	4b0d      	ldr	r3, [pc, #52]	@ (800ea38 <pbuf_free_ooseq+0x44>)
 800ea02:	2200      	movs	r2, #0
 800ea04:	701a      	strb	r2, [r3, #0]
 800ea06:	6838      	ldr	r0, [r7, #0]
 800ea08:	f001 f83e 	bl	800fa88 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ea0c:	4b0b      	ldr	r3, [pc, #44]	@ (800ea3c <pbuf_free_ooseq+0x48>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	607b      	str	r3, [r7, #4]
 800ea12:	e00a      	b.n	800ea2a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d003      	beq.n	800ea24 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	f002 feeb 	bl	80117f8 <tcp_free_ooseq>
      return;
 800ea22:	e005      	b.n	800ea30 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	607b      	str	r3, [r7, #4]
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d1f1      	bne.n	800ea14 <pbuf_free_ooseq+0x20>
    }
  }
}
 800ea30:	3708      	adds	r7, #8
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	bf00      	nop
 800ea38:	2400cdad 	.word	0x2400cdad
 800ea3c:	2400cdc0 	.word	0x2400cdc0

0800ea40 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b082      	sub	sp, #8
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ea48:	f7ff ffd4 	bl	800e9f4 <pbuf_free_ooseq>
}
 800ea4c:	bf00      	nop
 800ea4e:	3708      	adds	r7, #8
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}

0800ea54 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b082      	sub	sp, #8
 800ea58:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800ea5a:	f001 f807 	bl	800fa6c <sys_arch_protect>
 800ea5e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800ea60:	4b0f      	ldr	r3, [pc, #60]	@ (800eaa0 <pbuf_pool_is_empty+0x4c>)
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ea66:	4b0e      	ldr	r3, [pc, #56]	@ (800eaa0 <pbuf_pool_is_empty+0x4c>)
 800ea68:	2201      	movs	r2, #1
 800ea6a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f001 f80b 	bl	800fa88 <sys_arch_unprotect>

  if (!queued) {
 800ea72:	78fb      	ldrb	r3, [r7, #3]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d10f      	bne.n	800ea98 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ea78:	2100      	movs	r1, #0
 800ea7a:	480a      	ldr	r0, [pc, #40]	@ (800eaa4 <pbuf_pool_is_empty+0x50>)
 800ea7c:	f007 f9d8 	bl	8015e30 <tcpip_try_callback>
 800ea80:	4603      	mov	r3, r0
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d008      	beq.n	800ea98 <pbuf_pool_is_empty+0x44>
 800ea86:	f000 fff1 	bl	800fa6c <sys_arch_protect>
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	4b04      	ldr	r3, [pc, #16]	@ (800eaa0 <pbuf_pool_is_empty+0x4c>)
 800ea8e:	2200      	movs	r2, #0
 800ea90:	701a      	strb	r2, [r3, #0]
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f000 fff8 	bl	800fa88 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ea98:	bf00      	nop
 800ea9a:	3708      	adds	r7, #8
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	2400cdad 	.word	0x2400cdad
 800eaa4:	0800ea41 	.word	0x0800ea41

0800eaa8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b085      	sub	sp, #20
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	60f8      	str	r0, [r7, #12]
 800eab0:	60b9      	str	r1, [r7, #8]
 800eab2:	4611      	mov	r1, r2
 800eab4:	461a      	mov	r2, r3
 800eab6:	460b      	mov	r3, r1
 800eab8:	80fb      	strh	r3, [r7, #6]
 800eaba:	4613      	mov	r3, r2
 800eabc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	2200      	movs	r2, #0
 800eac2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	68ba      	ldr	r2, [r7, #8]
 800eac8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	88fa      	ldrh	r2, [r7, #6]
 800eace:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	88ba      	ldrh	r2, [r7, #4]
 800ead4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ead6:	8b3b      	ldrh	r3, [r7, #24]
 800ead8:	b2da      	uxtb	r2, r3
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	7f3a      	ldrb	r2, [r7, #28]
 800eae2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	2201      	movs	r2, #1
 800eae8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	2200      	movs	r2, #0
 800eaee:	73da      	strb	r2, [r3, #15]
}
 800eaf0:	bf00      	nop
 800eaf2:	3714      	adds	r7, #20
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafa:	4770      	bx	lr

0800eafc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b08c      	sub	sp, #48	@ 0x30
 800eb00:	af02      	add	r7, sp, #8
 800eb02:	4603      	mov	r3, r0
 800eb04:	71fb      	strb	r3, [r7, #7]
 800eb06:	460b      	mov	r3, r1
 800eb08:	80bb      	strh	r3, [r7, #4]
 800eb0a:	4613      	mov	r3, r2
 800eb0c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800eb0e:	79fb      	ldrb	r3, [r7, #7]
 800eb10:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800eb12:	887b      	ldrh	r3, [r7, #2]
 800eb14:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800eb18:	d07f      	beq.n	800ec1a <pbuf_alloc+0x11e>
 800eb1a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800eb1e:	f300 80c8 	bgt.w	800ecb2 <pbuf_alloc+0x1b6>
 800eb22:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800eb26:	d010      	beq.n	800eb4a <pbuf_alloc+0x4e>
 800eb28:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800eb2c:	f300 80c1 	bgt.w	800ecb2 <pbuf_alloc+0x1b6>
 800eb30:	2b01      	cmp	r3, #1
 800eb32:	d002      	beq.n	800eb3a <pbuf_alloc+0x3e>
 800eb34:	2b41      	cmp	r3, #65	@ 0x41
 800eb36:	f040 80bc 	bne.w	800ecb2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800eb3a:	887a      	ldrh	r2, [r7, #2]
 800eb3c:	88bb      	ldrh	r3, [r7, #4]
 800eb3e:	4619      	mov	r1, r3
 800eb40:	2000      	movs	r0, #0
 800eb42:	f000 f8d1 	bl	800ece8 <pbuf_alloc_reference>
 800eb46:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800eb48:	e0bd      	b.n	800ecc6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800eb52:	88bb      	ldrh	r3, [r7, #4]
 800eb54:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800eb56:	200c      	movs	r0, #12
 800eb58:	f7ff fb7c 	bl	800e254 <memp_malloc>
 800eb5c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d109      	bne.n	800eb78 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800eb64:	f7ff ff76 	bl	800ea54 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800eb68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d002      	beq.n	800eb74 <pbuf_alloc+0x78>
            pbuf_free(p);
 800eb6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eb70:	f000 faa8 	bl	800f0c4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800eb74:	2300      	movs	r3, #0
 800eb76:	e0a7      	b.n	800ecc8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800eb78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eb7a:	3303      	adds	r3, #3
 800eb7c:	b29b      	uxth	r3, r3
 800eb7e:	f023 0303 	bic.w	r3, r3, #3
 800eb82:	b29b      	uxth	r3, r3
 800eb84:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800eb88:	b29b      	uxth	r3, r3
 800eb8a:	8b7a      	ldrh	r2, [r7, #26]
 800eb8c:	4293      	cmp	r3, r2
 800eb8e:	bf28      	it	cs
 800eb90:	4613      	movcs	r3, r2
 800eb92:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800eb94:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eb96:	3310      	adds	r3, #16
 800eb98:	693a      	ldr	r2, [r7, #16]
 800eb9a:	4413      	add	r3, r2
 800eb9c:	3303      	adds	r3, #3
 800eb9e:	f023 0303 	bic.w	r3, r3, #3
 800eba2:	4618      	mov	r0, r3
 800eba4:	89f9      	ldrh	r1, [r7, #14]
 800eba6:	8b7a      	ldrh	r2, [r7, #26]
 800eba8:	2300      	movs	r3, #0
 800ebaa:	9301      	str	r3, [sp, #4]
 800ebac:	887b      	ldrh	r3, [r7, #2]
 800ebae:	9300      	str	r3, [sp, #0]
 800ebb0:	460b      	mov	r3, r1
 800ebb2:	4601      	mov	r1, r0
 800ebb4:	6938      	ldr	r0, [r7, #16]
 800ebb6:	f7ff ff77 	bl	800eaa8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	f003 0303 	and.w	r3, r3, #3
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d006      	beq.n	800ebd4 <pbuf_alloc+0xd8>
 800ebc6:	4b42      	ldr	r3, [pc, #264]	@ (800ecd0 <pbuf_alloc+0x1d4>)
 800ebc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ebcc:	4941      	ldr	r1, [pc, #260]	@ (800ecd4 <pbuf_alloc+0x1d8>)
 800ebce:	4842      	ldr	r0, [pc, #264]	@ (800ecd8 <pbuf_alloc+0x1dc>)
 800ebd0:	f008 f9c4 	bl	8016f5c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ebd4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ebd6:	3303      	adds	r3, #3
 800ebd8:	f023 0303 	bic.w	r3, r3, #3
 800ebdc:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800ebe0:	d106      	bne.n	800ebf0 <pbuf_alloc+0xf4>
 800ebe2:	4b3b      	ldr	r3, [pc, #236]	@ (800ecd0 <pbuf_alloc+0x1d4>)
 800ebe4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800ebe8:	493c      	ldr	r1, [pc, #240]	@ (800ecdc <pbuf_alloc+0x1e0>)
 800ebea:	483b      	ldr	r0, [pc, #236]	@ (800ecd8 <pbuf_alloc+0x1dc>)
 800ebec:	f008 f9b6 	bl	8016f5c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ebf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d102      	bne.n	800ebfc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	627b      	str	r3, [r7, #36]	@ 0x24
 800ebfa:	e002      	b.n	800ec02 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ebfc:	69fb      	ldr	r3, [r7, #28]
 800ebfe:	693a      	ldr	r2, [r7, #16]
 800ec00:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ec02:	693b      	ldr	r3, [r7, #16]
 800ec04:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ec06:	8b7a      	ldrh	r2, [r7, #26]
 800ec08:	89fb      	ldrh	r3, [r7, #14]
 800ec0a:	1ad3      	subs	r3, r2, r3
 800ec0c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800ec12:	8b7b      	ldrh	r3, [r7, #26]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d19e      	bne.n	800eb56 <pbuf_alloc+0x5a>
      break;
 800ec18:	e055      	b.n	800ecc6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ec1a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ec1c:	3303      	adds	r3, #3
 800ec1e:	b29b      	uxth	r3, r3
 800ec20:	f023 0303 	bic.w	r3, r3, #3
 800ec24:	b29a      	uxth	r2, r3
 800ec26:	88bb      	ldrh	r3, [r7, #4]
 800ec28:	3303      	adds	r3, #3
 800ec2a:	b29b      	uxth	r3, r3
 800ec2c:	f023 0303 	bic.w	r3, r3, #3
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	4413      	add	r3, r2
 800ec34:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ec36:	8b3b      	ldrh	r3, [r7, #24]
 800ec38:	3310      	adds	r3, #16
 800ec3a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ec3c:	8b3a      	ldrh	r2, [r7, #24]
 800ec3e:	88bb      	ldrh	r3, [r7, #4]
 800ec40:	3303      	adds	r3, #3
 800ec42:	f023 0303 	bic.w	r3, r3, #3
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d306      	bcc.n	800ec58 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ec4a:	8afa      	ldrh	r2, [r7, #22]
 800ec4c:	88bb      	ldrh	r3, [r7, #4]
 800ec4e:	3303      	adds	r3, #3
 800ec50:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d201      	bcs.n	800ec5c <pbuf_alloc+0x160>
        return NULL;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	e035      	b.n	800ecc8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ec5c:	8afb      	ldrh	r3, [r7, #22]
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7ff f954 	bl	800df0c <mem_malloc>
 800ec64:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800ec66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d101      	bne.n	800ec70 <pbuf_alloc+0x174>
        return NULL;
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	e02b      	b.n	800ecc8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ec70:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ec72:	3310      	adds	r3, #16
 800ec74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec76:	4413      	add	r3, r2
 800ec78:	3303      	adds	r3, #3
 800ec7a:	f023 0303 	bic.w	r3, r3, #3
 800ec7e:	4618      	mov	r0, r3
 800ec80:	88b9      	ldrh	r1, [r7, #4]
 800ec82:	88ba      	ldrh	r2, [r7, #4]
 800ec84:	2300      	movs	r3, #0
 800ec86:	9301      	str	r3, [sp, #4]
 800ec88:	887b      	ldrh	r3, [r7, #2]
 800ec8a:	9300      	str	r3, [sp, #0]
 800ec8c:	460b      	mov	r3, r1
 800ec8e:	4601      	mov	r1, r0
 800ec90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ec92:	f7ff ff09 	bl	800eaa8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ec96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec98:	685b      	ldr	r3, [r3, #4]
 800ec9a:	f003 0303 	and.w	r3, r3, #3
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d010      	beq.n	800ecc4 <pbuf_alloc+0x1c8>
 800eca2:	4b0b      	ldr	r3, [pc, #44]	@ (800ecd0 <pbuf_alloc+0x1d4>)
 800eca4:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800eca8:	490d      	ldr	r1, [pc, #52]	@ (800ece0 <pbuf_alloc+0x1e4>)
 800ecaa:	480b      	ldr	r0, [pc, #44]	@ (800ecd8 <pbuf_alloc+0x1dc>)
 800ecac:	f008 f956 	bl	8016f5c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ecb0:	e008      	b.n	800ecc4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ecb2:	4b07      	ldr	r3, [pc, #28]	@ (800ecd0 <pbuf_alloc+0x1d4>)
 800ecb4:	f240 1227 	movw	r2, #295	@ 0x127
 800ecb8:	490a      	ldr	r1, [pc, #40]	@ (800ece4 <pbuf_alloc+0x1e8>)
 800ecba:	4807      	ldr	r0, [pc, #28]	@ (800ecd8 <pbuf_alloc+0x1dc>)
 800ecbc:	f008 f94e 	bl	8016f5c <iprintf>
      return NULL;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	e001      	b.n	800ecc8 <pbuf_alloc+0x1cc>
      break;
 800ecc4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ecc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3728      	adds	r7, #40	@ 0x28
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}
 800ecd0:	08019990 	.word	0x08019990
 800ecd4:	080199f4 	.word	0x080199f4
 800ecd8:	08019a24 	.word	0x08019a24
 800ecdc:	08019a4c 	.word	0x08019a4c
 800ece0:	08019a80 	.word	0x08019a80
 800ece4:	08019aac 	.word	0x08019aac

0800ece8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b086      	sub	sp, #24
 800ecec:	af02      	add	r7, sp, #8
 800ecee:	6078      	str	r0, [r7, #4]
 800ecf0:	460b      	mov	r3, r1
 800ecf2:	807b      	strh	r3, [r7, #2]
 800ecf4:	4613      	mov	r3, r2
 800ecf6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ecf8:	883b      	ldrh	r3, [r7, #0]
 800ecfa:	2b41      	cmp	r3, #65	@ 0x41
 800ecfc:	d009      	beq.n	800ed12 <pbuf_alloc_reference+0x2a>
 800ecfe:	883b      	ldrh	r3, [r7, #0]
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	d006      	beq.n	800ed12 <pbuf_alloc_reference+0x2a>
 800ed04:	4b0f      	ldr	r3, [pc, #60]	@ (800ed44 <pbuf_alloc_reference+0x5c>)
 800ed06:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800ed0a:	490f      	ldr	r1, [pc, #60]	@ (800ed48 <pbuf_alloc_reference+0x60>)
 800ed0c:	480f      	ldr	r0, [pc, #60]	@ (800ed4c <pbuf_alloc_reference+0x64>)
 800ed0e:	f008 f925 	bl	8016f5c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ed12:	200b      	movs	r0, #11
 800ed14:	f7ff fa9e 	bl	800e254 <memp_malloc>
 800ed18:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d101      	bne.n	800ed24 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ed20:	2300      	movs	r3, #0
 800ed22:	e00b      	b.n	800ed3c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ed24:	8879      	ldrh	r1, [r7, #2]
 800ed26:	887a      	ldrh	r2, [r7, #2]
 800ed28:	2300      	movs	r3, #0
 800ed2a:	9301      	str	r3, [sp, #4]
 800ed2c:	883b      	ldrh	r3, [r7, #0]
 800ed2e:	9300      	str	r3, [sp, #0]
 800ed30:	460b      	mov	r3, r1
 800ed32:	6879      	ldr	r1, [r7, #4]
 800ed34:	68f8      	ldr	r0, [r7, #12]
 800ed36:	f7ff feb7 	bl	800eaa8 <pbuf_init_alloced_pbuf>
  return p;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3710      	adds	r7, #16
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}
 800ed44:	08019990 	.word	0x08019990
 800ed48:	08019ac8 	.word	0x08019ac8
 800ed4c:	08019a24 	.word	0x08019a24

0800ed50 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b088      	sub	sp, #32
 800ed54:	af02      	add	r7, sp, #8
 800ed56:	607b      	str	r3, [r7, #4]
 800ed58:	4603      	mov	r3, r0
 800ed5a:	73fb      	strb	r3, [r7, #15]
 800ed5c:	460b      	mov	r3, r1
 800ed5e:	81bb      	strh	r3, [r7, #12]
 800ed60:	4613      	mov	r3, r2
 800ed62:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ed64:	7bfb      	ldrb	r3, [r7, #15]
 800ed66:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ed68:	8a7b      	ldrh	r3, [r7, #18]
 800ed6a:	3303      	adds	r3, #3
 800ed6c:	f023 0203 	bic.w	r2, r3, #3
 800ed70:	89bb      	ldrh	r3, [r7, #12]
 800ed72:	441a      	add	r2, r3
 800ed74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d901      	bls.n	800ed7e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	e018      	b.n	800edb0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ed7e:	6a3b      	ldr	r3, [r7, #32]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d007      	beq.n	800ed94 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ed84:	8a7b      	ldrh	r3, [r7, #18]
 800ed86:	3303      	adds	r3, #3
 800ed88:	f023 0303 	bic.w	r3, r3, #3
 800ed8c:	6a3a      	ldr	r2, [r7, #32]
 800ed8e:	4413      	add	r3, r2
 800ed90:	617b      	str	r3, [r7, #20]
 800ed92:	e001      	b.n	800ed98 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ed94:	2300      	movs	r3, #0
 800ed96:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	89b9      	ldrh	r1, [r7, #12]
 800ed9c:	89ba      	ldrh	r2, [r7, #12]
 800ed9e:	2302      	movs	r3, #2
 800eda0:	9301      	str	r3, [sp, #4]
 800eda2:	897b      	ldrh	r3, [r7, #10]
 800eda4:	9300      	str	r3, [sp, #0]
 800eda6:	460b      	mov	r3, r1
 800eda8:	6979      	ldr	r1, [r7, #20]
 800edaa:	f7ff fe7d 	bl	800eaa8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800edae:	687b      	ldr	r3, [r7, #4]
}
 800edb0:	4618      	mov	r0, r3
 800edb2:	3718      	adds	r7, #24
 800edb4:	46bd      	mov	sp, r7
 800edb6:	bd80      	pop	{r7, pc}

0800edb8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b084      	sub	sp, #16
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	460b      	mov	r3, r1
 800edc2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d106      	bne.n	800edd8 <pbuf_realloc+0x20>
 800edca:	4b3a      	ldr	r3, [pc, #232]	@ (800eeb4 <pbuf_realloc+0xfc>)
 800edcc:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800edd0:	4939      	ldr	r1, [pc, #228]	@ (800eeb8 <pbuf_realloc+0x100>)
 800edd2:	483a      	ldr	r0, [pc, #232]	@ (800eebc <pbuf_realloc+0x104>)
 800edd4:	f008 f8c2 	bl	8016f5c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	891b      	ldrh	r3, [r3, #8]
 800eddc:	887a      	ldrh	r2, [r7, #2]
 800edde:	429a      	cmp	r2, r3
 800ede0:	d263      	bcs.n	800eeaa <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	891a      	ldrh	r2, [r3, #8]
 800ede6:	887b      	ldrh	r3, [r7, #2]
 800ede8:	1ad3      	subs	r3, r2, r3
 800edea:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800edec:	887b      	ldrh	r3, [r7, #2]
 800edee:	817b      	strh	r3, [r7, #10]
  q = p;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800edf4:	e018      	b.n	800ee28 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	895b      	ldrh	r3, [r3, #10]
 800edfa:	897a      	ldrh	r2, [r7, #10]
 800edfc:	1ad3      	subs	r3, r2, r3
 800edfe:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	891a      	ldrh	r2, [r3, #8]
 800ee04:	893b      	ldrh	r3, [r7, #8]
 800ee06:	1ad3      	subs	r3, r2, r3
 800ee08:	b29a      	uxth	r2, r3
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d106      	bne.n	800ee28 <pbuf_realloc+0x70>
 800ee1a:	4b26      	ldr	r3, [pc, #152]	@ (800eeb4 <pbuf_realloc+0xfc>)
 800ee1c:	f240 12af 	movw	r2, #431	@ 0x1af
 800ee20:	4927      	ldr	r1, [pc, #156]	@ (800eec0 <pbuf_realloc+0x108>)
 800ee22:	4826      	ldr	r0, [pc, #152]	@ (800eebc <pbuf_realloc+0x104>)
 800ee24:	f008 f89a 	bl	8016f5c <iprintf>
  while (rem_len > q->len) {
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	895b      	ldrh	r3, [r3, #10]
 800ee2c:	897a      	ldrh	r2, [r7, #10]
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	d8e1      	bhi.n	800edf6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	7b1b      	ldrb	r3, [r3, #12]
 800ee36:	f003 030f 	and.w	r3, r3, #15
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d121      	bne.n	800ee82 <pbuf_realloc+0xca>
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	895b      	ldrh	r3, [r3, #10]
 800ee42:	897a      	ldrh	r2, [r7, #10]
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d01c      	beq.n	800ee82 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	7b5b      	ldrb	r3, [r3, #13]
 800ee4c:	f003 0302 	and.w	r3, r3, #2
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d116      	bne.n	800ee82 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	685a      	ldr	r2, [r3, #4]
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	1ad3      	subs	r3, r2, r3
 800ee5c:	b29a      	uxth	r2, r3
 800ee5e:	897b      	ldrh	r3, [r7, #10]
 800ee60:	4413      	add	r3, r2
 800ee62:	b29b      	uxth	r3, r3
 800ee64:	4619      	mov	r1, r3
 800ee66:	68f8      	ldr	r0, [r7, #12]
 800ee68:	f7fe ff46 	bl	800dcf8 <mem_trim>
 800ee6c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d106      	bne.n	800ee82 <pbuf_realloc+0xca>
 800ee74:	4b0f      	ldr	r3, [pc, #60]	@ (800eeb4 <pbuf_realloc+0xfc>)
 800ee76:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800ee7a:	4912      	ldr	r1, [pc, #72]	@ (800eec4 <pbuf_realloc+0x10c>)
 800ee7c:	480f      	ldr	r0, [pc, #60]	@ (800eebc <pbuf_realloc+0x104>)
 800ee7e:	f008 f86d 	bl	8016f5c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	897a      	ldrh	r2, [r7, #10]
 800ee86:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	895a      	ldrh	r2, [r3, #10]
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d004      	beq.n	800eea2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f000 f911 	bl	800f0c4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	2200      	movs	r2, #0
 800eea6:	601a      	str	r2, [r3, #0]
 800eea8:	e000      	b.n	800eeac <pbuf_realloc+0xf4>
    return;
 800eeaa:	bf00      	nop

}
 800eeac:	3710      	adds	r7, #16
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	08019990 	.word	0x08019990
 800eeb8:	08019adc 	.word	0x08019adc
 800eebc:	08019a24 	.word	0x08019a24
 800eec0:	08019af4 	.word	0x08019af4
 800eec4:	08019b0c 	.word	0x08019b0c

0800eec8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b086      	sub	sp, #24
 800eecc:	af00      	add	r7, sp, #0
 800eece:	60f8      	str	r0, [r7, #12]
 800eed0:	60b9      	str	r1, [r7, #8]
 800eed2:	4613      	mov	r3, r2
 800eed4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d106      	bne.n	800eeea <pbuf_add_header_impl+0x22>
 800eedc:	4b2b      	ldr	r3, [pc, #172]	@ (800ef8c <pbuf_add_header_impl+0xc4>)
 800eede:	f240 12df 	movw	r2, #479	@ 0x1df
 800eee2:	492b      	ldr	r1, [pc, #172]	@ (800ef90 <pbuf_add_header_impl+0xc8>)
 800eee4:	482b      	ldr	r0, [pc, #172]	@ (800ef94 <pbuf_add_header_impl+0xcc>)
 800eee6:	f008 f839 	bl	8016f5c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d003      	beq.n	800eef8 <pbuf_add_header_impl+0x30>
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eef6:	d301      	bcc.n	800eefc <pbuf_add_header_impl+0x34>
    return 1;
 800eef8:	2301      	movs	r3, #1
 800eefa:	e043      	b.n	800ef84 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d101      	bne.n	800ef06 <pbuf_add_header_impl+0x3e>
    return 0;
 800ef02:	2300      	movs	r3, #0
 800ef04:	e03e      	b.n	800ef84 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	891a      	ldrh	r2, [r3, #8]
 800ef0e:	8a7b      	ldrh	r3, [r7, #18]
 800ef10:	4413      	add	r3, r2
 800ef12:	b29b      	uxth	r3, r3
 800ef14:	8a7a      	ldrh	r2, [r7, #18]
 800ef16:	429a      	cmp	r2, r3
 800ef18:	d901      	bls.n	800ef1e <pbuf_add_header_impl+0x56>
    return 1;
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	e032      	b.n	800ef84 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	7b1b      	ldrb	r3, [r3, #12]
 800ef22:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ef24:	8a3b      	ldrh	r3, [r7, #16]
 800ef26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d00c      	beq.n	800ef48 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	685a      	ldr	r2, [r3, #4]
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	425b      	negs	r3, r3
 800ef36:	4413      	add	r3, r2
 800ef38:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	3310      	adds	r3, #16
 800ef3e:	697a      	ldr	r2, [r7, #20]
 800ef40:	429a      	cmp	r2, r3
 800ef42:	d20d      	bcs.n	800ef60 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ef44:	2301      	movs	r3, #1
 800ef46:	e01d      	b.n	800ef84 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ef48:	79fb      	ldrb	r3, [r7, #7]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d006      	beq.n	800ef5c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	685a      	ldr	r2, [r3, #4]
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	425b      	negs	r3, r3
 800ef56:	4413      	add	r3, r2
 800ef58:	617b      	str	r3, [r7, #20]
 800ef5a:	e001      	b.n	800ef60 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	e011      	b.n	800ef84 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	697a      	ldr	r2, [r7, #20]
 800ef64:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	895a      	ldrh	r2, [r3, #10]
 800ef6a:	8a7b      	ldrh	r3, [r7, #18]
 800ef6c:	4413      	add	r3, r2
 800ef6e:	b29a      	uxth	r2, r3
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	891a      	ldrh	r2, [r3, #8]
 800ef78:	8a7b      	ldrh	r3, [r7, #18]
 800ef7a:	4413      	add	r3, r2
 800ef7c:	b29a      	uxth	r2, r3
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	811a      	strh	r2, [r3, #8]


  return 0;
 800ef82:	2300      	movs	r3, #0
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	3718      	adds	r7, #24
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}
 800ef8c:	08019990 	.word	0x08019990
 800ef90:	08019b28 	.word	0x08019b28
 800ef94:	08019a24 	.word	0x08019a24

0800ef98 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800efa2:	2200      	movs	r2, #0
 800efa4:	6839      	ldr	r1, [r7, #0]
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f7ff ff8e 	bl	800eec8 <pbuf_add_header_impl>
 800efac:	4603      	mov	r3, r0
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3708      	adds	r7, #8
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
	...

0800efb8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b084      	sub	sp, #16
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d106      	bne.n	800efd6 <pbuf_remove_header+0x1e>
 800efc8:	4b20      	ldr	r3, [pc, #128]	@ (800f04c <pbuf_remove_header+0x94>)
 800efca:	f240 224b 	movw	r2, #587	@ 0x24b
 800efce:	4920      	ldr	r1, [pc, #128]	@ (800f050 <pbuf_remove_header+0x98>)
 800efd0:	4820      	ldr	r0, [pc, #128]	@ (800f054 <pbuf_remove_header+0x9c>)
 800efd2:	f007 ffc3 	bl	8016f5c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d003      	beq.n	800efe4 <pbuf_remove_header+0x2c>
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800efe2:	d301      	bcc.n	800efe8 <pbuf_remove_header+0x30>
    return 1;
 800efe4:	2301      	movs	r3, #1
 800efe6:	e02c      	b.n	800f042 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d101      	bne.n	800eff2 <pbuf_remove_header+0x3a>
    return 0;
 800efee:	2300      	movs	r3, #0
 800eff0:	e027      	b.n	800f042 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	895b      	ldrh	r3, [r3, #10]
 800effa:	89fa      	ldrh	r2, [r7, #14]
 800effc:	429a      	cmp	r2, r3
 800effe:	d908      	bls.n	800f012 <pbuf_remove_header+0x5a>
 800f000:	4b12      	ldr	r3, [pc, #72]	@ (800f04c <pbuf_remove_header+0x94>)
 800f002:	f240 2255 	movw	r2, #597	@ 0x255
 800f006:	4914      	ldr	r1, [pc, #80]	@ (800f058 <pbuf_remove_header+0xa0>)
 800f008:	4812      	ldr	r0, [pc, #72]	@ (800f054 <pbuf_remove_header+0x9c>)
 800f00a:	f007 ffa7 	bl	8016f5c <iprintf>
 800f00e:	2301      	movs	r3, #1
 800f010:	e017      	b.n	800f042 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	685b      	ldr	r3, [r3, #4]
 800f016:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	685a      	ldr	r2, [r3, #4]
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	441a      	add	r2, r3
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	895a      	ldrh	r2, [r3, #10]
 800f028:	89fb      	ldrh	r3, [r7, #14]
 800f02a:	1ad3      	subs	r3, r2, r3
 800f02c:	b29a      	uxth	r2, r3
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	891a      	ldrh	r2, [r3, #8]
 800f036:	89fb      	ldrh	r3, [r7, #14]
 800f038:	1ad3      	subs	r3, r2, r3
 800f03a:	b29a      	uxth	r2, r3
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f040:	2300      	movs	r3, #0
}
 800f042:	4618      	mov	r0, r3
 800f044:	3710      	adds	r7, #16
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}
 800f04a:	bf00      	nop
 800f04c:	08019990 	.word	0x08019990
 800f050:	08019b28 	.word	0x08019b28
 800f054:	08019a24 	.word	0x08019a24
 800f058:	08019b34 	.word	0x08019b34

0800f05c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b082      	sub	sp, #8
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
 800f064:	460b      	mov	r3, r1
 800f066:	807b      	strh	r3, [r7, #2]
 800f068:	4613      	mov	r3, r2
 800f06a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f06c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f070:	2b00      	cmp	r3, #0
 800f072:	da08      	bge.n	800f086 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f074:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f078:	425b      	negs	r3, r3
 800f07a:	4619      	mov	r1, r3
 800f07c:	6878      	ldr	r0, [r7, #4]
 800f07e:	f7ff ff9b 	bl	800efb8 <pbuf_remove_header>
 800f082:	4603      	mov	r3, r0
 800f084:	e007      	b.n	800f096 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f086:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f08a:	787a      	ldrb	r2, [r7, #1]
 800f08c:	4619      	mov	r1, r3
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f7ff ff1a 	bl	800eec8 <pbuf_add_header_impl>
 800f094:	4603      	mov	r3, r0
  }
}
 800f096:	4618      	mov	r0, r3
 800f098:	3708      	adds	r7, #8
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bd80      	pop	{r7, pc}

0800f09e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f09e:	b580      	push	{r7, lr}
 800f0a0:	b082      	sub	sp, #8
 800f0a2:	af00      	add	r7, sp, #0
 800f0a4:	6078      	str	r0, [r7, #4]
 800f0a6:	460b      	mov	r3, r1
 800f0a8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f0aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f7ff ffd2 	bl	800f05c <pbuf_header_impl>
 800f0b8:	4603      	mov	r3, r0
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	3708      	adds	r7, #8
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}
	...

0800f0c4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b088      	sub	sp, #32
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d10b      	bne.n	800f0ea <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d106      	bne.n	800f0e6 <pbuf_free+0x22>
 800f0d8:	4b3b      	ldr	r3, [pc, #236]	@ (800f1c8 <pbuf_free+0x104>)
 800f0da:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800f0de:	493b      	ldr	r1, [pc, #236]	@ (800f1cc <pbuf_free+0x108>)
 800f0e0:	483b      	ldr	r0, [pc, #236]	@ (800f1d0 <pbuf_free+0x10c>)
 800f0e2:	f007 ff3b 	bl	8016f5c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	e069      	b.n	800f1be <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f0ee:	e062      	b.n	800f1b6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f0f0:	f000 fcbc 	bl	800fa6c <sys_arch_protect>
 800f0f4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	7b9b      	ldrb	r3, [r3, #14]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d106      	bne.n	800f10c <pbuf_free+0x48>
 800f0fe:	4b32      	ldr	r3, [pc, #200]	@ (800f1c8 <pbuf_free+0x104>)
 800f100:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800f104:	4933      	ldr	r1, [pc, #204]	@ (800f1d4 <pbuf_free+0x110>)
 800f106:	4832      	ldr	r0, [pc, #200]	@ (800f1d0 <pbuf_free+0x10c>)
 800f108:	f007 ff28 	bl	8016f5c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	7b9b      	ldrb	r3, [r3, #14]
 800f110:	3b01      	subs	r3, #1
 800f112:	b2da      	uxtb	r2, r3
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	739a      	strb	r2, [r3, #14]
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	7b9b      	ldrb	r3, [r3, #14]
 800f11c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800f11e:	69b8      	ldr	r0, [r7, #24]
 800f120:	f000 fcb2 	bl	800fa88 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f124:	7dfb      	ldrb	r3, [r7, #23]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d143      	bne.n	800f1b2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	7b1b      	ldrb	r3, [r3, #12]
 800f134:	f003 030f 	and.w	r3, r3, #15
 800f138:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	7b5b      	ldrb	r3, [r3, #13]
 800f13e:	f003 0302 	and.w	r3, r3, #2
 800f142:	2b00      	cmp	r3, #0
 800f144:	d011      	beq.n	800f16a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	691b      	ldr	r3, [r3, #16]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d106      	bne.n	800f160 <pbuf_free+0x9c>
 800f152:	4b1d      	ldr	r3, [pc, #116]	@ (800f1c8 <pbuf_free+0x104>)
 800f154:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800f158:	491f      	ldr	r1, [pc, #124]	@ (800f1d8 <pbuf_free+0x114>)
 800f15a:	481d      	ldr	r0, [pc, #116]	@ (800f1d0 <pbuf_free+0x10c>)
 800f15c:	f007 fefe 	bl	8016f5c <iprintf>
        pc->custom_free_function(p);
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	691b      	ldr	r3, [r3, #16]
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	4798      	blx	r3
 800f168:	e01d      	b.n	800f1a6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f16a:	7bfb      	ldrb	r3, [r7, #15]
 800f16c:	2b02      	cmp	r3, #2
 800f16e:	d104      	bne.n	800f17a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800f170:	6879      	ldr	r1, [r7, #4]
 800f172:	200c      	movs	r0, #12
 800f174:	f7ff f8e4 	bl	800e340 <memp_free>
 800f178:	e015      	b.n	800f1a6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f17a:	7bfb      	ldrb	r3, [r7, #15]
 800f17c:	2b01      	cmp	r3, #1
 800f17e:	d104      	bne.n	800f18a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800f180:	6879      	ldr	r1, [r7, #4]
 800f182:	200b      	movs	r0, #11
 800f184:	f7ff f8dc 	bl	800e340 <memp_free>
 800f188:	e00d      	b.n	800f1a6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f18a:	7bfb      	ldrb	r3, [r7, #15]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d103      	bne.n	800f198 <pbuf_free+0xd4>
          mem_free(p);
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f7fe fd21 	bl	800dbd8 <mem_free>
 800f196:	e006      	b.n	800f1a6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f198:	4b0b      	ldr	r3, [pc, #44]	@ (800f1c8 <pbuf_free+0x104>)
 800f19a:	f240 320f 	movw	r2, #783	@ 0x30f
 800f19e:	490f      	ldr	r1, [pc, #60]	@ (800f1dc <pbuf_free+0x118>)
 800f1a0:	480b      	ldr	r0, [pc, #44]	@ (800f1d0 <pbuf_free+0x10c>)
 800f1a2:	f007 fedb 	bl	8016f5c <iprintf>
        }
      }
      count++;
 800f1a6:	7ffb      	ldrb	r3, [r7, #31]
 800f1a8:	3301      	adds	r3, #1
 800f1aa:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f1ac:	693b      	ldr	r3, [r7, #16]
 800f1ae:	607b      	str	r3, [r7, #4]
 800f1b0:	e001      	b.n	800f1b6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d199      	bne.n	800f0f0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f1bc:	7ffb      	ldrb	r3, [r7, #31]
}
 800f1be:	4618      	mov	r0, r3
 800f1c0:	3720      	adds	r7, #32
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}
 800f1c6:	bf00      	nop
 800f1c8:	08019990 	.word	0x08019990
 800f1cc:	08019b28 	.word	0x08019b28
 800f1d0:	08019a24 	.word	0x08019a24
 800f1d4:	08019b54 	.word	0x08019b54
 800f1d8:	08019b6c 	.word	0x08019b6c
 800f1dc:	08019b90 	.word	0x08019b90

0800f1e0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	b085      	sub	sp, #20
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f1ec:	e005      	b.n	800f1fa <pbuf_clen+0x1a>
    ++len;
 800f1ee:	89fb      	ldrh	r3, [r7, #14]
 800f1f0:	3301      	adds	r3, #1
 800f1f2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d1f6      	bne.n	800f1ee <pbuf_clen+0xe>
  }
  return len;
 800f200:	89fb      	ldrh	r3, [r7, #14]
}
 800f202:	4618      	mov	r0, r3
 800f204:	3714      	adds	r7, #20
 800f206:	46bd      	mov	sp, r7
 800f208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20c:	4770      	bx	lr
	...

0800f210 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b084      	sub	sp, #16
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d016      	beq.n	800f24c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f21e:	f000 fc25 	bl	800fa6c <sys_arch_protect>
 800f222:	60f8      	str	r0, [r7, #12]
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	7b9b      	ldrb	r3, [r3, #14]
 800f228:	3301      	adds	r3, #1
 800f22a:	b2da      	uxtb	r2, r3
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	739a      	strb	r2, [r3, #14]
 800f230:	68f8      	ldr	r0, [r7, #12]
 800f232:	f000 fc29 	bl	800fa88 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	7b9b      	ldrb	r3, [r3, #14]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d106      	bne.n	800f24c <pbuf_ref+0x3c>
 800f23e:	4b05      	ldr	r3, [pc, #20]	@ (800f254 <pbuf_ref+0x44>)
 800f240:	f240 3242 	movw	r2, #834	@ 0x342
 800f244:	4904      	ldr	r1, [pc, #16]	@ (800f258 <pbuf_ref+0x48>)
 800f246:	4805      	ldr	r0, [pc, #20]	@ (800f25c <pbuf_ref+0x4c>)
 800f248:	f007 fe88 	bl	8016f5c <iprintf>
  }
}
 800f24c:	bf00      	nop
 800f24e:	3710      	adds	r7, #16
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}
 800f254:	08019990 	.word	0x08019990
 800f258:	08019ba4 	.word	0x08019ba4
 800f25c:	08019a24 	.word	0x08019a24

0800f260 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b084      	sub	sp, #16
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d002      	beq.n	800f276 <pbuf_cat+0x16>
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d107      	bne.n	800f286 <pbuf_cat+0x26>
 800f276:	4b20      	ldr	r3, [pc, #128]	@ (800f2f8 <pbuf_cat+0x98>)
 800f278:	f240 3259 	movw	r2, #857	@ 0x359
 800f27c:	491f      	ldr	r1, [pc, #124]	@ (800f2fc <pbuf_cat+0x9c>)
 800f27e:	4820      	ldr	r0, [pc, #128]	@ (800f300 <pbuf_cat+0xa0>)
 800f280:	f007 fe6c 	bl	8016f5c <iprintf>
 800f284:	e034      	b.n	800f2f0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	60fb      	str	r3, [r7, #12]
 800f28a:	e00a      	b.n	800f2a2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	891a      	ldrh	r2, [r3, #8]
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	891b      	ldrh	r3, [r3, #8]
 800f294:	4413      	add	r3, r2
 800f296:	b29a      	uxth	r2, r3
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	60fb      	str	r3, [r7, #12]
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d1f0      	bne.n	800f28c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	891a      	ldrh	r2, [r3, #8]
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	895b      	ldrh	r3, [r3, #10]
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d006      	beq.n	800f2c4 <pbuf_cat+0x64>
 800f2b6:	4b10      	ldr	r3, [pc, #64]	@ (800f2f8 <pbuf_cat+0x98>)
 800f2b8:	f240 3262 	movw	r2, #866	@ 0x362
 800f2bc:	4911      	ldr	r1, [pc, #68]	@ (800f304 <pbuf_cat+0xa4>)
 800f2be:	4810      	ldr	r0, [pc, #64]	@ (800f300 <pbuf_cat+0xa0>)
 800f2c0:	f007 fe4c 	bl	8016f5c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d006      	beq.n	800f2da <pbuf_cat+0x7a>
 800f2cc:	4b0a      	ldr	r3, [pc, #40]	@ (800f2f8 <pbuf_cat+0x98>)
 800f2ce:	f240 3263 	movw	r2, #867	@ 0x363
 800f2d2:	490d      	ldr	r1, [pc, #52]	@ (800f308 <pbuf_cat+0xa8>)
 800f2d4:	480a      	ldr	r0, [pc, #40]	@ (800f300 <pbuf_cat+0xa0>)
 800f2d6:	f007 fe41 	bl	8016f5c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	891a      	ldrh	r2, [r3, #8]
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	891b      	ldrh	r3, [r3, #8]
 800f2e2:	4413      	add	r3, r2
 800f2e4:	b29a      	uxth	r2, r3
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	683a      	ldr	r2, [r7, #0]
 800f2ee:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f2f0:	3710      	adds	r7, #16
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}
 800f2f6:	bf00      	nop
 800f2f8:	08019990 	.word	0x08019990
 800f2fc:	08019bb8 	.word	0x08019bb8
 800f300:	08019a24 	.word	0x08019a24
 800f304:	08019bf0 	.word	0x08019bf0
 800f308:	08019c20 	.word	0x08019c20

0800f30c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800f316:	6839      	ldr	r1, [r7, #0]
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f7ff ffa1 	bl	800f260 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800f31e:	6838      	ldr	r0, [r7, #0]
 800f320:	f7ff ff76 	bl	800f210 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800f324:	bf00      	nop
 800f326:	3708      	adds	r7, #8
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}

0800f32c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b086      	sub	sp, #24
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f336:	2300      	movs	r3, #0
 800f338:	617b      	str	r3, [r7, #20]
 800f33a:	2300      	movs	r3, #0
 800f33c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d008      	beq.n	800f356 <pbuf_copy+0x2a>
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d005      	beq.n	800f356 <pbuf_copy+0x2a>
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	891a      	ldrh	r2, [r3, #8]
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	891b      	ldrh	r3, [r3, #8]
 800f352:	429a      	cmp	r2, r3
 800f354:	d209      	bcs.n	800f36a <pbuf_copy+0x3e>
 800f356:	4b57      	ldr	r3, [pc, #348]	@ (800f4b4 <pbuf_copy+0x188>)
 800f358:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800f35c:	4956      	ldr	r1, [pc, #344]	@ (800f4b8 <pbuf_copy+0x18c>)
 800f35e:	4857      	ldr	r0, [pc, #348]	@ (800f4bc <pbuf_copy+0x190>)
 800f360:	f007 fdfc 	bl	8016f5c <iprintf>
 800f364:	f06f 030f 	mvn.w	r3, #15
 800f368:	e09f      	b.n	800f4aa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	895b      	ldrh	r3, [r3, #10]
 800f36e:	461a      	mov	r2, r3
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	1ad2      	subs	r2, r2, r3
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	895b      	ldrh	r3, [r3, #10]
 800f378:	4619      	mov	r1, r3
 800f37a:	693b      	ldr	r3, [r7, #16]
 800f37c:	1acb      	subs	r3, r1, r3
 800f37e:	429a      	cmp	r2, r3
 800f380:	d306      	bcc.n	800f390 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	895b      	ldrh	r3, [r3, #10]
 800f386:	461a      	mov	r2, r3
 800f388:	693b      	ldr	r3, [r7, #16]
 800f38a:	1ad3      	subs	r3, r2, r3
 800f38c:	60fb      	str	r3, [r7, #12]
 800f38e:	e005      	b.n	800f39c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	895b      	ldrh	r3, [r3, #10]
 800f394:	461a      	mov	r2, r3
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	1ad3      	subs	r3, r2, r3
 800f39a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	685a      	ldr	r2, [r3, #4]
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	18d0      	adds	r0, r2, r3
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	685a      	ldr	r2, [r3, #4]
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	4413      	add	r3, r2
 800f3ac:	68fa      	ldr	r2, [r7, #12]
 800f3ae:	4619      	mov	r1, r3
 800f3b0:	f007 ff51 	bl	8017256 <memcpy>
    offset_to += len;
 800f3b4:	697a      	ldr	r2, [r7, #20]
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	4413      	add	r3, r2
 800f3ba:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f3bc:	693a      	ldr	r2, [r7, #16]
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	4413      	add	r3, r2
 800f3c2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	895b      	ldrh	r3, [r3, #10]
 800f3c8:	461a      	mov	r2, r3
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	4293      	cmp	r3, r2
 800f3ce:	d906      	bls.n	800f3de <pbuf_copy+0xb2>
 800f3d0:	4b38      	ldr	r3, [pc, #224]	@ (800f4b4 <pbuf_copy+0x188>)
 800f3d2:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800f3d6:	493a      	ldr	r1, [pc, #232]	@ (800f4c0 <pbuf_copy+0x194>)
 800f3d8:	4838      	ldr	r0, [pc, #224]	@ (800f4bc <pbuf_copy+0x190>)
 800f3da:	f007 fdbf 	bl	8016f5c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	895b      	ldrh	r3, [r3, #10]
 800f3e2:	461a      	mov	r2, r3
 800f3e4:	693b      	ldr	r3, [r7, #16]
 800f3e6:	4293      	cmp	r3, r2
 800f3e8:	d906      	bls.n	800f3f8 <pbuf_copy+0xcc>
 800f3ea:	4b32      	ldr	r3, [pc, #200]	@ (800f4b4 <pbuf_copy+0x188>)
 800f3ec:	f240 32da 	movw	r2, #986	@ 0x3da
 800f3f0:	4934      	ldr	r1, [pc, #208]	@ (800f4c4 <pbuf_copy+0x198>)
 800f3f2:	4832      	ldr	r0, [pc, #200]	@ (800f4bc <pbuf_copy+0x190>)
 800f3f4:	f007 fdb2 	bl	8016f5c <iprintf>
    if (offset_from >= p_from->len) {
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	895b      	ldrh	r3, [r3, #10]
 800f3fc:	461a      	mov	r2, r3
 800f3fe:	693b      	ldr	r3, [r7, #16]
 800f400:	4293      	cmp	r3, r2
 800f402:	d304      	bcc.n	800f40e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f404:	2300      	movs	r3, #0
 800f406:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	895b      	ldrh	r3, [r3, #10]
 800f412:	461a      	mov	r2, r3
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	4293      	cmp	r3, r2
 800f418:	d114      	bne.n	800f444 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f41a:	2300      	movs	r3, #0
 800f41c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d10c      	bne.n	800f444 <pbuf_copy+0x118>
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d009      	beq.n	800f444 <pbuf_copy+0x118>
 800f430:	4b20      	ldr	r3, [pc, #128]	@ (800f4b4 <pbuf_copy+0x188>)
 800f432:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800f436:	4924      	ldr	r1, [pc, #144]	@ (800f4c8 <pbuf_copy+0x19c>)
 800f438:	4820      	ldr	r0, [pc, #128]	@ (800f4bc <pbuf_copy+0x190>)
 800f43a:	f007 fd8f 	bl	8016f5c <iprintf>
 800f43e:	f06f 030f 	mvn.w	r3, #15
 800f442:	e032      	b.n	800f4aa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d013      	beq.n	800f472 <pbuf_copy+0x146>
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	895a      	ldrh	r2, [r3, #10]
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	891b      	ldrh	r3, [r3, #8]
 800f452:	429a      	cmp	r2, r3
 800f454:	d10d      	bne.n	800f472 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d009      	beq.n	800f472 <pbuf_copy+0x146>
 800f45e:	4b15      	ldr	r3, [pc, #84]	@ (800f4b4 <pbuf_copy+0x188>)
 800f460:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800f464:	4919      	ldr	r1, [pc, #100]	@ (800f4cc <pbuf_copy+0x1a0>)
 800f466:	4815      	ldr	r0, [pc, #84]	@ (800f4bc <pbuf_copy+0x190>)
 800f468:	f007 fd78 	bl	8016f5c <iprintf>
 800f46c:	f06f 0305 	mvn.w	r3, #5
 800f470:	e01b      	b.n	800f4aa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d013      	beq.n	800f4a0 <pbuf_copy+0x174>
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	895a      	ldrh	r2, [r3, #10]
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	891b      	ldrh	r3, [r3, #8]
 800f480:	429a      	cmp	r2, r3
 800f482:	d10d      	bne.n	800f4a0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d009      	beq.n	800f4a0 <pbuf_copy+0x174>
 800f48c:	4b09      	ldr	r3, [pc, #36]	@ (800f4b4 <pbuf_copy+0x188>)
 800f48e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800f492:	490e      	ldr	r1, [pc, #56]	@ (800f4cc <pbuf_copy+0x1a0>)
 800f494:	4809      	ldr	r0, [pc, #36]	@ (800f4bc <pbuf_copy+0x190>)
 800f496:	f007 fd61 	bl	8016f5c <iprintf>
 800f49a:	f06f 0305 	mvn.w	r3, #5
 800f49e:	e004      	b.n	800f4aa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	f47f af61 	bne.w	800f36a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f4a8:	2300      	movs	r3, #0
}
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	3718      	adds	r7, #24
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}
 800f4b2:	bf00      	nop
 800f4b4:	08019990 	.word	0x08019990
 800f4b8:	08019c6c 	.word	0x08019c6c
 800f4bc:	08019a24 	.word	0x08019a24
 800f4c0:	08019c9c 	.word	0x08019c9c
 800f4c4:	08019cb4 	.word	0x08019cb4
 800f4c8:	08019cd0 	.word	0x08019cd0
 800f4cc:	08019ce0 	.word	0x08019ce0

0800f4d0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b088      	sub	sp, #32
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	4611      	mov	r1, r2
 800f4dc:	461a      	mov	r2, r3
 800f4de:	460b      	mov	r3, r1
 800f4e0:	80fb      	strh	r3, [r7, #6]
 800f4e2:	4613      	mov	r3, r2
 800f4e4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d108      	bne.n	800f506 <pbuf_copy_partial+0x36>
 800f4f4:	4b2b      	ldr	r3, [pc, #172]	@ (800f5a4 <pbuf_copy_partial+0xd4>)
 800f4f6:	f240 420a 	movw	r2, #1034	@ 0x40a
 800f4fa:	492b      	ldr	r1, [pc, #172]	@ (800f5a8 <pbuf_copy_partial+0xd8>)
 800f4fc:	482b      	ldr	r0, [pc, #172]	@ (800f5ac <pbuf_copy_partial+0xdc>)
 800f4fe:	f007 fd2d 	bl	8016f5c <iprintf>
 800f502:	2300      	movs	r3, #0
 800f504:	e04a      	b.n	800f59c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d108      	bne.n	800f51e <pbuf_copy_partial+0x4e>
 800f50c:	4b25      	ldr	r3, [pc, #148]	@ (800f5a4 <pbuf_copy_partial+0xd4>)
 800f50e:	f240 420b 	movw	r2, #1035	@ 0x40b
 800f512:	4927      	ldr	r1, [pc, #156]	@ (800f5b0 <pbuf_copy_partial+0xe0>)
 800f514:	4825      	ldr	r0, [pc, #148]	@ (800f5ac <pbuf_copy_partial+0xdc>)
 800f516:	f007 fd21 	bl	8016f5c <iprintf>
 800f51a:	2300      	movs	r3, #0
 800f51c:	e03e      	b.n	800f59c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	61fb      	str	r3, [r7, #28]
 800f522:	e034      	b.n	800f58e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f524:	88bb      	ldrh	r3, [r7, #4]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d00a      	beq.n	800f540 <pbuf_copy_partial+0x70>
 800f52a:	69fb      	ldr	r3, [r7, #28]
 800f52c:	895b      	ldrh	r3, [r3, #10]
 800f52e:	88ba      	ldrh	r2, [r7, #4]
 800f530:	429a      	cmp	r2, r3
 800f532:	d305      	bcc.n	800f540 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f534:	69fb      	ldr	r3, [r7, #28]
 800f536:	895b      	ldrh	r3, [r3, #10]
 800f538:	88ba      	ldrh	r2, [r7, #4]
 800f53a:	1ad3      	subs	r3, r2, r3
 800f53c:	80bb      	strh	r3, [r7, #4]
 800f53e:	e023      	b.n	800f588 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f540:	69fb      	ldr	r3, [r7, #28]
 800f542:	895a      	ldrh	r2, [r3, #10]
 800f544:	88bb      	ldrh	r3, [r7, #4]
 800f546:	1ad3      	subs	r3, r2, r3
 800f548:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f54a:	8b3a      	ldrh	r2, [r7, #24]
 800f54c:	88fb      	ldrh	r3, [r7, #6]
 800f54e:	429a      	cmp	r2, r3
 800f550:	d901      	bls.n	800f556 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f552:	88fb      	ldrh	r3, [r7, #6]
 800f554:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f556:	8b7b      	ldrh	r3, [r7, #26]
 800f558:	68ba      	ldr	r2, [r7, #8]
 800f55a:	18d0      	adds	r0, r2, r3
 800f55c:	69fb      	ldr	r3, [r7, #28]
 800f55e:	685a      	ldr	r2, [r3, #4]
 800f560:	88bb      	ldrh	r3, [r7, #4]
 800f562:	4413      	add	r3, r2
 800f564:	8b3a      	ldrh	r2, [r7, #24]
 800f566:	4619      	mov	r1, r3
 800f568:	f007 fe75 	bl	8017256 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f56c:	8afa      	ldrh	r2, [r7, #22]
 800f56e:	8b3b      	ldrh	r3, [r7, #24]
 800f570:	4413      	add	r3, r2
 800f572:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f574:	8b7a      	ldrh	r2, [r7, #26]
 800f576:	8b3b      	ldrh	r3, [r7, #24]
 800f578:	4413      	add	r3, r2
 800f57a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f57c:	88fa      	ldrh	r2, [r7, #6]
 800f57e:	8b3b      	ldrh	r3, [r7, #24]
 800f580:	1ad3      	subs	r3, r2, r3
 800f582:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f584:	2300      	movs	r3, #0
 800f586:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f588:	69fb      	ldr	r3, [r7, #28]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	61fb      	str	r3, [r7, #28]
 800f58e:	88fb      	ldrh	r3, [r7, #6]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d002      	beq.n	800f59a <pbuf_copy_partial+0xca>
 800f594:	69fb      	ldr	r3, [r7, #28]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d1c4      	bne.n	800f524 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f59a:	8afb      	ldrh	r3, [r7, #22]
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	3720      	adds	r7, #32
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	08019990 	.word	0x08019990
 800f5a8:	08019d0c 	.word	0x08019d0c
 800f5ac:	08019a24 	.word	0x08019a24
 800f5b0:	08019d2c 	.word	0x08019d2c

0800f5b4 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b088      	sub	sp, #32
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	60f8      	str	r0, [r7, #12]
 800f5bc:	60b9      	str	r1, [r7, #8]
 800f5be:	4613      	mov	r3, r2
 800f5c0:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800f5c2:	88fb      	ldrh	r3, [r7, #6]
 800f5c4:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d109      	bne.n	800f5e4 <pbuf_take+0x30>
 800f5d0:	4b3a      	ldr	r3, [pc, #232]	@ (800f6bc <pbuf_take+0x108>)
 800f5d2:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 800f5d6:	493a      	ldr	r1, [pc, #232]	@ (800f6c0 <pbuf_take+0x10c>)
 800f5d8:	483a      	ldr	r0, [pc, #232]	@ (800f6c4 <pbuf_take+0x110>)
 800f5da:	f007 fcbf 	bl	8016f5c <iprintf>
 800f5de:	f06f 030f 	mvn.w	r3, #15
 800f5e2:	e067      	b.n	800f6b4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d109      	bne.n	800f5fe <pbuf_take+0x4a>
 800f5ea:	4b34      	ldr	r3, [pc, #208]	@ (800f6bc <pbuf_take+0x108>)
 800f5ec:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 800f5f0:	4935      	ldr	r1, [pc, #212]	@ (800f6c8 <pbuf_take+0x114>)
 800f5f2:	4834      	ldr	r0, [pc, #208]	@ (800f6c4 <pbuf_take+0x110>)
 800f5f4:	f007 fcb2 	bl	8016f5c <iprintf>
 800f5f8:	f06f 030f 	mvn.w	r3, #15
 800f5fc:	e05a      	b.n	800f6b4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	891b      	ldrh	r3, [r3, #8]
 800f602:	88fa      	ldrh	r2, [r7, #6]
 800f604:	429a      	cmp	r2, r3
 800f606:	d909      	bls.n	800f61c <pbuf_take+0x68>
 800f608:	4b2c      	ldr	r3, [pc, #176]	@ (800f6bc <pbuf_take+0x108>)
 800f60a:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 800f60e:	492f      	ldr	r1, [pc, #188]	@ (800f6cc <pbuf_take+0x118>)
 800f610:	482c      	ldr	r0, [pc, #176]	@ (800f6c4 <pbuf_take+0x110>)
 800f612:	f007 fca3 	bl	8016f5c <iprintf>
 800f616:	f04f 33ff 	mov.w	r3, #4294967295
 800f61a:	e04b      	b.n	800f6b4 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d007      	beq.n	800f632 <pbuf_take+0x7e>
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d004      	beq.n	800f632 <pbuf_take+0x7e>
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	891b      	ldrh	r3, [r3, #8]
 800f62c:	88fa      	ldrh	r2, [r7, #6]
 800f62e:	429a      	cmp	r2, r3
 800f630:	d902      	bls.n	800f638 <pbuf_take+0x84>
    return ERR_ARG;
 800f632:	f06f 030f 	mvn.w	r3, #15
 800f636:	e03d      	b.n	800f6b4 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	61fb      	str	r3, [r7, #28]
 800f63c:	e028      	b.n	800f690 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800f63e:	69fb      	ldr	r3, [r7, #28]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d106      	bne.n	800f652 <pbuf_take+0x9e>
 800f644:	4b1d      	ldr	r3, [pc, #116]	@ (800f6bc <pbuf_take+0x108>)
 800f646:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 800f64a:	4921      	ldr	r1, [pc, #132]	@ (800f6d0 <pbuf_take+0x11c>)
 800f64c:	481d      	ldr	r0, [pc, #116]	@ (800f6c4 <pbuf_take+0x110>)
 800f64e:	f007 fc85 	bl	8016f5c <iprintf>
    buf_copy_len = total_copy_len;
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800f656:	69fb      	ldr	r3, [r7, #28]
 800f658:	895b      	ldrh	r3, [r3, #10]
 800f65a:	461a      	mov	r2, r3
 800f65c:	69bb      	ldr	r3, [r7, #24]
 800f65e:	4293      	cmp	r3, r2
 800f660:	d902      	bls.n	800f668 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800f662:	69fb      	ldr	r3, [r7, #28]
 800f664:	895b      	ldrh	r3, [r3, #10]
 800f666:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800f668:	69fb      	ldr	r3, [r7, #28]
 800f66a:	6858      	ldr	r0, [r3, #4]
 800f66c:	68ba      	ldr	r2, [r7, #8]
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	4413      	add	r3, r2
 800f672:	69ba      	ldr	r2, [r7, #24]
 800f674:	4619      	mov	r1, r3
 800f676:	f007 fdee 	bl	8017256 <memcpy>
    total_copy_len -= buf_copy_len;
 800f67a:	697a      	ldr	r2, [r7, #20]
 800f67c:	69bb      	ldr	r3, [r7, #24]
 800f67e:	1ad3      	subs	r3, r2, r3
 800f680:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800f682:	693a      	ldr	r2, [r7, #16]
 800f684:	69bb      	ldr	r3, [r7, #24]
 800f686:	4413      	add	r3, r2
 800f688:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800f68a:	69fb      	ldr	r3, [r7, #28]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	61fb      	str	r3, [r7, #28]
 800f690:	697b      	ldr	r3, [r7, #20]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d1d3      	bne.n	800f63e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800f696:	697b      	ldr	r3, [r7, #20]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d103      	bne.n	800f6a4 <pbuf_take+0xf0>
 800f69c:	88fb      	ldrh	r3, [r7, #6]
 800f69e:	693a      	ldr	r2, [r7, #16]
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	d006      	beq.n	800f6b2 <pbuf_take+0xfe>
 800f6a4:	4b05      	ldr	r3, [pc, #20]	@ (800f6bc <pbuf_take+0x108>)
 800f6a6:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 800f6aa:	490a      	ldr	r1, [pc, #40]	@ (800f6d4 <pbuf_take+0x120>)
 800f6ac:	4805      	ldr	r0, [pc, #20]	@ (800f6c4 <pbuf_take+0x110>)
 800f6ae:	f007 fc55 	bl	8016f5c <iprintf>
  return ERR_OK;
 800f6b2:	2300      	movs	r3, #0
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3720      	adds	r7, #32
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}
 800f6bc:	08019990 	.word	0x08019990
 800f6c0:	08019d9c 	.word	0x08019d9c
 800f6c4:	08019a24 	.word	0x08019a24
 800f6c8:	08019db4 	.word	0x08019db4
 800f6cc:	08019dd0 	.word	0x08019dd0
 800f6d0:	08019df0 	.word	0x08019df0
 800f6d4:	08019e08 	.word	0x08019e08

0800f6d8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b084      	sub	sp, #16
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	4603      	mov	r3, r0
 800f6e0:	603a      	str	r2, [r7, #0]
 800f6e2:	71fb      	strb	r3, [r7, #7]
 800f6e4:	460b      	mov	r3, r1
 800f6e6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	8919      	ldrh	r1, [r3, #8]
 800f6ec:	88ba      	ldrh	r2, [r7, #4]
 800f6ee:	79fb      	ldrb	r3, [r7, #7]
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f7ff fa03 	bl	800eafc <pbuf_alloc>
 800f6f6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d101      	bne.n	800f702 <pbuf_clone+0x2a>
    return NULL;
 800f6fe:	2300      	movs	r3, #0
 800f700:	e011      	b.n	800f726 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f702:	6839      	ldr	r1, [r7, #0]
 800f704:	68f8      	ldr	r0, [r7, #12]
 800f706:	f7ff fe11 	bl	800f32c <pbuf_copy>
 800f70a:	4603      	mov	r3, r0
 800f70c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f70e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d006      	beq.n	800f724 <pbuf_clone+0x4c>
 800f716:	4b06      	ldr	r3, [pc, #24]	@ (800f730 <pbuf_clone+0x58>)
 800f718:	f240 5224 	movw	r2, #1316	@ 0x524
 800f71c:	4905      	ldr	r1, [pc, #20]	@ (800f734 <pbuf_clone+0x5c>)
 800f71e:	4806      	ldr	r0, [pc, #24]	@ (800f738 <pbuf_clone+0x60>)
 800f720:	f007 fc1c 	bl	8016f5c <iprintf>
  return q;
 800f724:	68fb      	ldr	r3, [r7, #12]
}
 800f726:	4618      	mov	r0, r3
 800f728:	3710      	adds	r7, #16
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}
 800f72e:	bf00      	nop
 800f730:	08019990 	.word	0x08019990
 800f734:	08019e38 	.word	0x08019e38
 800f738:	08019a24 	.word	0x08019a24

0800f73c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b082      	sub	sp, #8
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	2200      	movs	r2, #0
 800f74a:	2104      	movs	r1, #4
 800f74c:	4618      	mov	r0, r3
 800f74e:	f7f6 fa37 	bl	8005bc0 <osMessageQueueNew>
 800f752:	4602      	mov	r2, r0
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d102      	bne.n	800f766 <sys_mbox_new+0x2a>
    return ERR_MEM;
 800f760:	f04f 33ff 	mov.w	r3, #4294967295
 800f764:	e000      	b.n	800f768 <sys_mbox_new+0x2c>

  return ERR_OK;
 800f766:	2300      	movs	r3, #0
}
 800f768:	4618      	mov	r0, r3
 800f76a:	3708      	adds	r7, #8
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}

0800f770 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b082      	sub	sp, #8
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	4618      	mov	r0, r3
 800f77e:	f7f6 fb51 	bl	8005e24 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	4618      	mov	r0, r3
 800f788:	f7f6 fb6c 	bl	8005e64 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800f78c:	bf00      	nop
 800f78e:	3708      	adds	r7, #8
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}

0800f794 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b084      	sub	sp, #16
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6818      	ldr	r0, [r3, #0]
 800f7a2:	4639      	mov	r1, r7
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	f7f6 fa7e 	bl	8005ca8 <osMessageQueuePut>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d102      	bne.n	800f7b8 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	73fb      	strb	r3, [r7, #15]
 800f7b6:	e001      	b.n	800f7bc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 800f7b8:	23ff      	movs	r3, #255	@ 0xff
 800f7ba:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 800f7bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	3710      	adds	r7, #16
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}

0800f7c8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b086      	sub	sp, #24
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	60f8      	str	r0, [r7, #12]
 800f7d0:	60b9      	str	r1, [r7, #8]
 800f7d2:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 800f7d4:	f7f5 fee0 	bl	8005598 <osKernelGetTickCount>
 800f7d8:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d013      	beq.n	800f808 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	6818      	ldr	r0, [r3, #0]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	68b9      	ldr	r1, [r7, #8]
 800f7ea:	f7f6 fabd 	bl	8005d68 <osMessageQueueGet>
 800f7ee:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 800f7f0:	693b      	ldr	r3, [r7, #16]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d105      	bne.n	800f802 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 800f7f6:	f7f5 fecf 	bl	8005598 <osKernelGetTickCount>
 800f7fa:	4602      	mov	r2, r0
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	1ad3      	subs	r3, r2, r3
 800f800:	e00f      	b.n	800f822 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800f802:	f04f 33ff 	mov.w	r3, #4294967295
 800f806:	e00c      	b.n	800f822 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	6818      	ldr	r0, [r3, #0]
 800f80c:	f04f 33ff 	mov.w	r3, #4294967295
 800f810:	2200      	movs	r2, #0
 800f812:	68b9      	ldr	r1, [r7, #8]
 800f814:	f7f6 faa8 	bl	8005d68 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 800f818:	f7f5 febe 	bl	8005598 <osKernelGetTickCount>
 800f81c:	4602      	mov	r2, r0
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 800f822:	4618      	mov	r0, r3
 800f824:	3718      	adds	r7, #24
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}

0800f82a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800f82a:	b580      	push	{r7, lr}
 800f82c:	b082      	sub	sp, #8
 800f82e:	af00      	add	r7, sp, #0
 800f830:	6078      	str	r0, [r7, #4]
 800f832:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6818      	ldr	r0, [r3, #0]
 800f838:	2300      	movs	r3, #0
 800f83a:	2200      	movs	r2, #0
 800f83c:	6839      	ldr	r1, [r7, #0]
 800f83e:	f7f6 fa93 	bl	8005d68 <osMessageQueueGet>
 800f842:	4603      	mov	r3, r0
 800f844:	2b00      	cmp	r3, #0
 800f846:	d101      	bne.n	800f84c <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 800f848:	2300      	movs	r3, #0
 800f84a:	e001      	b.n	800f850 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800f84c:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800f850:	4618      	mov	r0, r3
 800f852:	3708      	adds	r7, #8
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}

0800f858 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 800f858:	b480      	push	{r7}
 800f85a:	b083      	sub	sp, #12
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d101      	bne.n	800f86c <sys_mbox_valid+0x14>
    return 0;
 800f868:	2300      	movs	r3, #0
 800f86a:	e000      	b.n	800f86e <sys_mbox_valid+0x16>
  else
    return 1;
 800f86c:	2301      	movs	r3, #1
}
 800f86e:	4618      	mov	r0, r3
 800f870:	370c      	adds	r7, #12
 800f872:	46bd      	mov	sp, r7
 800f874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f878:	4770      	bx	lr

0800f87a <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 800f87a:	b480      	push	{r7}
 800f87c:	b083      	sub	sp, #12
 800f87e:	af00      	add	r7, sp, #0
 800f880:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	2200      	movs	r2, #0
 800f886:	601a      	str	r2, [r3, #0]
}
 800f888:	bf00      	nop
 800f88a:	370c      	adds	r7, #12
 800f88c:	46bd      	mov	sp, r7
 800f88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f892:	4770      	bx	lr

0800f894 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b082      	sub	sp, #8
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	460b      	mov	r3, r1
 800f89e:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 800f8a0:	78fb      	ldrb	r3, [r7, #3]
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	4619      	mov	r1, r3
 800f8a6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800f8aa:	f7f6 f846 	bl	800593a <osSemaphoreNew>
 800f8ae:	4602      	mov	r2, r0
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d102      	bne.n	800f8c2 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 800f8bc:	f04f 33ff 	mov.w	r3, #4294967295
 800f8c0:	e009      	b.n	800f8d6 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 800f8c2:	78fb      	ldrb	r3, [r7, #3]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d105      	bne.n	800f8d4 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	2100      	movs	r1, #0
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f7f6 f8bc 	bl	8005a4c <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800f8d4:	2300      	movs	r3, #0
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3708      	adds	r7, #8
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}

0800f8de <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800f8de:	b580      	push	{r7, lr}
 800f8e0:	b084      	sub	sp, #16
 800f8e2:	af00      	add	r7, sp, #0
 800f8e4:	6078      	str	r0, [r7, #4]
 800f8e6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 800f8e8:	f7f5 fe56 	bl	8005598 <osKernelGetTickCount>
 800f8ec:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d011      	beq.n	800f918 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	6839      	ldr	r1, [r7, #0]
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7f6 f8a6 	bl	8005a4c <osSemaphoreAcquire>
 800f900:	4603      	mov	r3, r0
 800f902:	2b00      	cmp	r3, #0
 800f904:	d105      	bne.n	800f912 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 800f906:	f7f5 fe47 	bl	8005598 <osKernelGetTickCount>
 800f90a:	4602      	mov	r2, r0
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	1ad3      	subs	r3, r2, r3
 800f910:	e012      	b.n	800f938 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 800f912:	f04f 33ff 	mov.w	r3, #4294967295
 800f916:	e00f      	b.n	800f938 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 800f918:	bf00      	nop
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	f04f 31ff 	mov.w	r1, #4294967295
 800f922:	4618      	mov	r0, r3
 800f924:	f7f6 f892 	bl	8005a4c <osSemaphoreAcquire>
 800f928:	4603      	mov	r3, r0
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d1f5      	bne.n	800f91a <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 800f92e:	f7f5 fe33 	bl	8005598 <osKernelGetTickCount>
 800f932:	4602      	mov	r2, r0
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 800f938:	4618      	mov	r0, r3
 800f93a:	3710      	adds	r7, #16
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bd80      	pop	{r7, pc}

0800f940 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b082      	sub	sp, #8
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7f6 f8cf 	bl	8005af0 <osSemaphoreRelease>
}
 800f952:	bf00      	nop
 800f954:	3708      	adds	r7, #8
 800f956:	46bd      	mov	sp, r7
 800f958:	bd80      	pop	{r7, pc}

0800f95a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 800f95a:	b580      	push	{r7, lr}
 800f95c:	b082      	sub	sp, #8
 800f95e:	af00      	add	r7, sp, #0
 800f960:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	4618      	mov	r0, r3
 800f968:	f7f6 f906 	bl	8005b78 <osSemaphoreDelete>
}
 800f96c:	bf00      	nop
 800f96e:	3708      	adds	r7, #8
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}

0800f974 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 800f974:	b480      	push	{r7}
 800f976:	b083      	sub	sp, #12
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d101      	bne.n	800f988 <sys_sem_valid+0x14>
    return 0;
 800f984:	2300      	movs	r3, #0
 800f986:	e000      	b.n	800f98a <sys_sem_valid+0x16>
  else
    return 1;
 800f988:	2301      	movs	r3, #1
}
 800f98a:	4618      	mov	r0, r3
 800f98c:	370c      	adds	r7, #12
 800f98e:	46bd      	mov	sp, r7
 800f990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f994:	4770      	bx	lr

0800f996 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 800f996:	b480      	push	{r7}
 800f998:	b083      	sub	sp, #12
 800f99a:	af00      	add	r7, sp, #0
 800f99c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	601a      	str	r2, [r3, #0]
}
 800f9a4:	bf00      	nop
 800f9a6:	370c      	adds	r7, #12
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ae:	4770      	bx	lr

0800f9b0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 800f9b4:	2000      	movs	r0, #0
 800f9b6:	f7f5 feb2 	bl	800571e <osMutexNew>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	4a01      	ldr	r2, [pc, #4]	@ (800f9c4 <sys_init+0x14>)
 800f9be:	6013      	str	r3, [r2, #0]
#endif
}
 800f9c0:	bf00      	nop
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	2400cdb0 	.word	0x2400cdb0

0800f9c8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b082      	sub	sp, #8
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 800f9d0:	2000      	movs	r0, #0
 800f9d2:	f7f5 fea4 	bl	800571e <osMutexNew>
 800f9d6:	4602      	mov	r2, r0
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d102      	bne.n	800f9ea <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 800f9e4:	f04f 33ff 	mov.w	r3, #4294967295
 800f9e8:	e000      	b.n	800f9ec <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 800f9ea:	2300      	movs	r3, #0
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3708      	adds	r7, #8
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	f04f 31ff 	mov.w	r1, #4294967295
 800fa04:	4618      	mov	r0, r3
 800fa06:	f7f5 ff10 	bl	800582a <osMutexAcquire>
#endif
}
 800fa0a:	bf00      	nop
 800fa0c:	3708      	adds	r7, #8
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}

0800fa12 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 800fa12:	b580      	push	{r7, lr}
 800fa14:	b082      	sub	sp, #8
 800fa16:	af00      	add	r7, sp, #0
 800fa18:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f7f5 ff4e 	bl	80058c0 <osMutexRelease>
}
 800fa24:	bf00      	nop
 800fa26:	3708      	adds	r7, #8
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	bd80      	pop	{r7, pc}

0800fa2c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b08e      	sub	sp, #56	@ 0x38
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	60f8      	str	r0, [r7, #12]
 800fa34:	60b9      	str	r1, [r7, #8]
 800fa36:	607a      	str	r2, [r7, #4]
 800fa38:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 800fa3a:	f107 0314 	add.w	r3, r7, #20
 800fa3e:	2224      	movs	r2, #36	@ 0x24
 800fa40:	2100      	movs	r1, #0
 800fa42:	4618      	mov	r0, r3
 800fa44:	f007 fb2b 	bl	801709e <memset>
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	617b      	str	r3, [r7, #20]
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fa50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa52:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 800fa54:	f107 0314 	add.w	r3, r7, #20
 800fa58:	461a      	mov	r2, r3
 800fa5a:	6879      	ldr	r1, [r7, #4]
 800fa5c:	68b8      	ldr	r0, [r7, #8]
 800fa5e:	f7f5 fdb0 	bl	80055c2 <osThreadNew>
 800fa62:	4603      	mov	r3, r0
#endif
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	3738      	adds	r7, #56	@ 0x38
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}

0800fa6c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 800fa70:	4b04      	ldr	r3, [pc, #16]	@ (800fa84 <sys_arch_protect+0x18>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	f04f 31ff 	mov.w	r1, #4294967295
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f7f5 fed6 	bl	800582a <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 800fa7e:	2301      	movs	r3, #1
}
 800fa80:	4618      	mov	r0, r3
 800fa82:	bd80      	pop	{r7, pc}
 800fa84:	2400cdb0 	.word	0x2400cdb0

0800fa88 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800fa90:	4b04      	ldr	r3, [pc, #16]	@ (800faa4 <sys_arch_unprotect+0x1c>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	4618      	mov	r0, r3
 800fa96:	f7f5 ff13 	bl	80058c0 <osMutexRelease>
}
 800fa9a:	bf00      	nop
 800fa9c:	3708      	adds	r7, #8
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}
 800faa2:	bf00      	nop
 800faa4:	2400cdb0 	.word	0x2400cdb0

0800faa8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800faac:	f007 f956 	bl	8016d5c <rand>
 800fab0:	4603      	mov	r3, r0
 800fab2:	b29b      	uxth	r3, r3
 800fab4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fab8:	b29b      	uxth	r3, r3
 800faba:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800fabe:	b29a      	uxth	r2, r3
 800fac0:	4b01      	ldr	r3, [pc, #4]	@ (800fac8 <tcp_init+0x20>)
 800fac2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800fac4:	bf00      	nop
 800fac6:	bd80      	pop	{r7, pc}
 800fac8:	24000028 	.word	0x24000028

0800facc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	7d1b      	ldrb	r3, [r3, #20]
 800fad8:	2b01      	cmp	r3, #1
 800fada:	d105      	bne.n	800fae8 <tcp_free+0x1c>
 800fadc:	4b06      	ldr	r3, [pc, #24]	@ (800faf8 <tcp_free+0x2c>)
 800fade:	22d4      	movs	r2, #212	@ 0xd4
 800fae0:	4906      	ldr	r1, [pc, #24]	@ (800fafc <tcp_free+0x30>)
 800fae2:	4807      	ldr	r0, [pc, #28]	@ (800fb00 <tcp_free+0x34>)
 800fae4:	f007 fa3a 	bl	8016f5c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800fae8:	6879      	ldr	r1, [r7, #4]
 800faea:	2001      	movs	r0, #1
 800faec:	f7fe fc28 	bl	800e340 <memp_free>
}
 800faf0:	bf00      	nop
 800faf2:	3708      	adds	r7, #8
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}
 800faf8:	08019ec4 	.word	0x08019ec4
 800fafc:	08019f28 	.word	0x08019f28
 800fb00:	08019f3c 	.word	0x08019f3c

0800fb04 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b082      	sub	sp, #8
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	7d1b      	ldrb	r3, [r3, #20]
 800fb10:	2b01      	cmp	r3, #1
 800fb12:	d105      	bne.n	800fb20 <tcp_free_listen+0x1c>
 800fb14:	4b06      	ldr	r3, [pc, #24]	@ (800fb30 <tcp_free_listen+0x2c>)
 800fb16:	22df      	movs	r2, #223	@ 0xdf
 800fb18:	4906      	ldr	r1, [pc, #24]	@ (800fb34 <tcp_free_listen+0x30>)
 800fb1a:	4807      	ldr	r0, [pc, #28]	@ (800fb38 <tcp_free_listen+0x34>)
 800fb1c:	f007 fa1e 	bl	8016f5c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800fb20:	6879      	ldr	r1, [r7, #4]
 800fb22:	2002      	movs	r0, #2
 800fb24:	f7fe fc0c 	bl	800e340 <memp_free>
}
 800fb28:	bf00      	nop
 800fb2a:	3708      	adds	r7, #8
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}
 800fb30:	08019ec4 	.word	0x08019ec4
 800fb34:	08019f64 	.word	0x08019f64
 800fb38:	08019f3c 	.word	0x08019f3c

0800fb3c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800fb40:	f001 f8f6 	bl	8010d30 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800fb44:	4b07      	ldr	r3, [pc, #28]	@ (800fb64 <tcp_tmr+0x28>)
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	3301      	adds	r3, #1
 800fb4a:	b2da      	uxtb	r2, r3
 800fb4c:	4b05      	ldr	r3, [pc, #20]	@ (800fb64 <tcp_tmr+0x28>)
 800fb4e:	701a      	strb	r2, [r3, #0]
 800fb50:	4b04      	ldr	r3, [pc, #16]	@ (800fb64 <tcp_tmr+0x28>)
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	f003 0301 	and.w	r3, r3, #1
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d001      	beq.n	800fb60 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800fb5c:	f000 fda6 	bl	80106ac <tcp_slowtmr>
  }
}
 800fb60:	bf00      	nop
 800fb62:	bd80      	pop	{r7, pc}
 800fb64:	2400cdc9 	.word	0x2400cdc9

0800fb68 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b084      	sub	sp, #16
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800fb72:	683b      	ldr	r3, [r7, #0]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d105      	bne.n	800fb84 <tcp_remove_listener+0x1c>
 800fb78:	4b0d      	ldr	r3, [pc, #52]	@ (800fbb0 <tcp_remove_listener+0x48>)
 800fb7a:	22ff      	movs	r2, #255	@ 0xff
 800fb7c:	490d      	ldr	r1, [pc, #52]	@ (800fbb4 <tcp_remove_listener+0x4c>)
 800fb7e:	480e      	ldr	r0, [pc, #56]	@ (800fbb8 <tcp_remove_listener+0x50>)
 800fb80:	f007 f9ec 	bl	8016f5c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	60fb      	str	r3, [r7, #12]
 800fb88:	e00a      	b.n	800fba0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fb8e:	683a      	ldr	r2, [r7, #0]
 800fb90:	429a      	cmp	r2, r3
 800fb92:	d102      	bne.n	800fb9a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	2200      	movs	r2, #0
 800fb98:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	68db      	ldr	r3, [r3, #12]
 800fb9e:	60fb      	str	r3, [r7, #12]
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d1f1      	bne.n	800fb8a <tcp_remove_listener+0x22>
    }
  }
}
 800fba6:	bf00      	nop
 800fba8:	bf00      	nop
 800fbaa:	3710      	adds	r7, #16
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}
 800fbb0:	08019ec4 	.word	0x08019ec4
 800fbb4:	08019f80 	.word	0x08019f80
 800fbb8:	08019f3c 	.word	0x08019f3c

0800fbbc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b084      	sub	sp, #16
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d106      	bne.n	800fbd8 <tcp_listen_closed+0x1c>
 800fbca:	4b14      	ldr	r3, [pc, #80]	@ (800fc1c <tcp_listen_closed+0x60>)
 800fbcc:	f240 1211 	movw	r2, #273	@ 0x111
 800fbd0:	4913      	ldr	r1, [pc, #76]	@ (800fc20 <tcp_listen_closed+0x64>)
 800fbd2:	4814      	ldr	r0, [pc, #80]	@ (800fc24 <tcp_listen_closed+0x68>)
 800fbd4:	f007 f9c2 	bl	8016f5c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	7d1b      	ldrb	r3, [r3, #20]
 800fbdc:	2b01      	cmp	r3, #1
 800fbde:	d006      	beq.n	800fbee <tcp_listen_closed+0x32>
 800fbe0:	4b0e      	ldr	r3, [pc, #56]	@ (800fc1c <tcp_listen_closed+0x60>)
 800fbe2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800fbe6:	4910      	ldr	r1, [pc, #64]	@ (800fc28 <tcp_listen_closed+0x6c>)
 800fbe8:	480e      	ldr	r0, [pc, #56]	@ (800fc24 <tcp_listen_closed+0x68>)
 800fbea:	f007 f9b7 	bl	8016f5c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fbee:	2301      	movs	r3, #1
 800fbf0:	60fb      	str	r3, [r7, #12]
 800fbf2:	e00b      	b.n	800fc0c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800fbf4:	4a0d      	ldr	r2, [pc, #52]	@ (800fc2c <tcp_listen_closed+0x70>)
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	6879      	ldr	r1, [r7, #4]
 800fc00:	4618      	mov	r0, r3
 800fc02:	f7ff ffb1 	bl	800fb68 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	3301      	adds	r3, #1
 800fc0a:	60fb      	str	r3, [r7, #12]
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	2b03      	cmp	r3, #3
 800fc10:	d9f0      	bls.n	800fbf4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800fc12:	bf00      	nop
 800fc14:	bf00      	nop
 800fc16:	3710      	adds	r7, #16
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}
 800fc1c:	08019ec4 	.word	0x08019ec4
 800fc20:	08019fa8 	.word	0x08019fa8
 800fc24:	08019f3c 	.word	0x08019f3c
 800fc28:	08019fb4 	.word	0x08019fb4
 800fc2c:	0801ba68 	.word	0x0801ba68

0800fc30 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800fc30:	b5b0      	push	{r4, r5, r7, lr}
 800fc32:	b088      	sub	sp, #32
 800fc34:	af04      	add	r7, sp, #16
 800fc36:	6078      	str	r0, [r7, #4]
 800fc38:	460b      	mov	r3, r1
 800fc3a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d106      	bne.n	800fc50 <tcp_close_shutdown+0x20>
 800fc42:	4b63      	ldr	r3, [pc, #396]	@ (800fdd0 <tcp_close_shutdown+0x1a0>)
 800fc44:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800fc48:	4962      	ldr	r1, [pc, #392]	@ (800fdd4 <tcp_close_shutdown+0x1a4>)
 800fc4a:	4863      	ldr	r0, [pc, #396]	@ (800fdd8 <tcp_close_shutdown+0x1a8>)
 800fc4c:	f007 f986 	bl	8016f5c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800fc50:	78fb      	ldrb	r3, [r7, #3]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d066      	beq.n	800fd24 <tcp_close_shutdown+0xf4>
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	7d1b      	ldrb	r3, [r3, #20]
 800fc5a:	2b04      	cmp	r3, #4
 800fc5c:	d003      	beq.n	800fc66 <tcp_close_shutdown+0x36>
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	7d1b      	ldrb	r3, [r3, #20]
 800fc62:	2b07      	cmp	r3, #7
 800fc64:	d15e      	bne.n	800fd24 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d104      	bne.n	800fc78 <tcp_close_shutdown+0x48>
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc72:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800fc76:	d055      	beq.n	800fd24 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	8b5b      	ldrh	r3, [r3, #26]
 800fc7c:	f003 0310 	and.w	r3, r3, #16
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d106      	bne.n	800fc92 <tcp_close_shutdown+0x62>
 800fc84:	4b52      	ldr	r3, [pc, #328]	@ (800fdd0 <tcp_close_shutdown+0x1a0>)
 800fc86:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800fc8a:	4954      	ldr	r1, [pc, #336]	@ (800fddc <tcp_close_shutdown+0x1ac>)
 800fc8c:	4852      	ldr	r0, [pc, #328]	@ (800fdd8 <tcp_close_shutdown+0x1a8>)
 800fc8e:	f007 f965 	bl	8016f5c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800fc9a:	687d      	ldr	r5, [r7, #4]
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	3304      	adds	r3, #4
 800fca0:	687a      	ldr	r2, [r7, #4]
 800fca2:	8ad2      	ldrh	r2, [r2, #22]
 800fca4:	6879      	ldr	r1, [r7, #4]
 800fca6:	8b09      	ldrh	r1, [r1, #24]
 800fca8:	9102      	str	r1, [sp, #8]
 800fcaa:	9201      	str	r2, [sp, #4]
 800fcac:	9300      	str	r3, [sp, #0]
 800fcae:	462b      	mov	r3, r5
 800fcb0:	4622      	mov	r2, r4
 800fcb2:	4601      	mov	r1, r0
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f005 fe05 	bl	80158c4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f001 fbe8 	bl	8011490 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800fcc0:	4b47      	ldr	r3, [pc, #284]	@ (800fde0 <tcp_close_shutdown+0x1b0>)
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	687a      	ldr	r2, [r7, #4]
 800fcc6:	429a      	cmp	r2, r3
 800fcc8:	d105      	bne.n	800fcd6 <tcp_close_shutdown+0xa6>
 800fcca:	4b45      	ldr	r3, [pc, #276]	@ (800fde0 <tcp_close_shutdown+0x1b0>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	68db      	ldr	r3, [r3, #12]
 800fcd0:	4a43      	ldr	r2, [pc, #268]	@ (800fde0 <tcp_close_shutdown+0x1b0>)
 800fcd2:	6013      	str	r3, [r2, #0]
 800fcd4:	e013      	b.n	800fcfe <tcp_close_shutdown+0xce>
 800fcd6:	4b42      	ldr	r3, [pc, #264]	@ (800fde0 <tcp_close_shutdown+0x1b0>)
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	60fb      	str	r3, [r7, #12]
 800fcdc:	e00c      	b.n	800fcf8 <tcp_close_shutdown+0xc8>
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	68db      	ldr	r3, [r3, #12]
 800fce2:	687a      	ldr	r2, [r7, #4]
 800fce4:	429a      	cmp	r2, r3
 800fce6:	d104      	bne.n	800fcf2 <tcp_close_shutdown+0xc2>
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	68da      	ldr	r2, [r3, #12]
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	60da      	str	r2, [r3, #12]
 800fcf0:	e005      	b.n	800fcfe <tcp_close_shutdown+0xce>
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	68db      	ldr	r3, [r3, #12]
 800fcf6:	60fb      	str	r3, [r7, #12]
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d1ef      	bne.n	800fcde <tcp_close_shutdown+0xae>
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	2200      	movs	r2, #0
 800fd02:	60da      	str	r2, [r3, #12]
 800fd04:	4b37      	ldr	r3, [pc, #220]	@ (800fde4 <tcp_close_shutdown+0x1b4>)
 800fd06:	2201      	movs	r2, #1
 800fd08:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800fd0a:	4b37      	ldr	r3, [pc, #220]	@ (800fde8 <tcp_close_shutdown+0x1b8>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	687a      	ldr	r2, [r7, #4]
 800fd10:	429a      	cmp	r2, r3
 800fd12:	d102      	bne.n	800fd1a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800fd14:	f004 f87c 	bl	8013e10 <tcp_trigger_input_pcb_close>
 800fd18:	e002      	b.n	800fd20 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800fd1a:	6878      	ldr	r0, [r7, #4]
 800fd1c:	f7ff fed6 	bl	800facc <tcp_free>
      }
      return ERR_OK;
 800fd20:	2300      	movs	r3, #0
 800fd22:	e050      	b.n	800fdc6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	7d1b      	ldrb	r3, [r3, #20]
 800fd28:	2b02      	cmp	r3, #2
 800fd2a:	d03b      	beq.n	800fda4 <tcp_close_shutdown+0x174>
 800fd2c:	2b02      	cmp	r3, #2
 800fd2e:	dc44      	bgt.n	800fdba <tcp_close_shutdown+0x18a>
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d002      	beq.n	800fd3a <tcp_close_shutdown+0x10a>
 800fd34:	2b01      	cmp	r3, #1
 800fd36:	d02a      	beq.n	800fd8e <tcp_close_shutdown+0x15e>
 800fd38:	e03f      	b.n	800fdba <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	8adb      	ldrh	r3, [r3, #22]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d021      	beq.n	800fd86 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fd42:	4b2a      	ldr	r3, [pc, #168]	@ (800fdec <tcp_close_shutdown+0x1bc>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	687a      	ldr	r2, [r7, #4]
 800fd48:	429a      	cmp	r2, r3
 800fd4a:	d105      	bne.n	800fd58 <tcp_close_shutdown+0x128>
 800fd4c:	4b27      	ldr	r3, [pc, #156]	@ (800fdec <tcp_close_shutdown+0x1bc>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	68db      	ldr	r3, [r3, #12]
 800fd52:	4a26      	ldr	r2, [pc, #152]	@ (800fdec <tcp_close_shutdown+0x1bc>)
 800fd54:	6013      	str	r3, [r2, #0]
 800fd56:	e013      	b.n	800fd80 <tcp_close_shutdown+0x150>
 800fd58:	4b24      	ldr	r3, [pc, #144]	@ (800fdec <tcp_close_shutdown+0x1bc>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	60bb      	str	r3, [r7, #8]
 800fd5e:	e00c      	b.n	800fd7a <tcp_close_shutdown+0x14a>
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	68db      	ldr	r3, [r3, #12]
 800fd64:	687a      	ldr	r2, [r7, #4]
 800fd66:	429a      	cmp	r2, r3
 800fd68:	d104      	bne.n	800fd74 <tcp_close_shutdown+0x144>
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	68da      	ldr	r2, [r3, #12]
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	60da      	str	r2, [r3, #12]
 800fd72:	e005      	b.n	800fd80 <tcp_close_shutdown+0x150>
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	68db      	ldr	r3, [r3, #12]
 800fd78:	60bb      	str	r3, [r7, #8]
 800fd7a:	68bb      	ldr	r3, [r7, #8]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d1ef      	bne.n	800fd60 <tcp_close_shutdown+0x130>
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	2200      	movs	r2, #0
 800fd84:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f7ff fea0 	bl	800facc <tcp_free>
      break;
 800fd8c:	e01a      	b.n	800fdc4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f7ff ff14 	bl	800fbbc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800fd94:	6879      	ldr	r1, [r7, #4]
 800fd96:	4816      	ldr	r0, [pc, #88]	@ (800fdf0 <tcp_close_shutdown+0x1c0>)
 800fd98:	f001 fbca 	bl	8011530 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f7ff feb1 	bl	800fb04 <tcp_free_listen>
      break;
 800fda2:	e00f      	b.n	800fdc4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fda4:	6879      	ldr	r1, [r7, #4]
 800fda6:	480e      	ldr	r0, [pc, #56]	@ (800fde0 <tcp_close_shutdown+0x1b0>)
 800fda8:	f001 fbc2 	bl	8011530 <tcp_pcb_remove>
 800fdac:	4b0d      	ldr	r3, [pc, #52]	@ (800fde4 <tcp_close_shutdown+0x1b4>)
 800fdae:	2201      	movs	r2, #1
 800fdb0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800fdb2:	6878      	ldr	r0, [r7, #4]
 800fdb4:	f7ff fe8a 	bl	800facc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800fdb8:	e004      	b.n	800fdc4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f000 f81a 	bl	800fdf4 <tcp_close_shutdown_fin>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	e000      	b.n	800fdc6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800fdc4:	2300      	movs	r3, #0
}
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3710      	adds	r7, #16
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bdb0      	pop	{r4, r5, r7, pc}
 800fdce:	bf00      	nop
 800fdd0:	08019ec4 	.word	0x08019ec4
 800fdd4:	08019fcc 	.word	0x08019fcc
 800fdd8:	08019f3c 	.word	0x08019f3c
 800fddc:	08019fec 	.word	0x08019fec
 800fde0:	2400cdc0 	.word	0x2400cdc0
 800fde4:	2400cdc8 	.word	0x2400cdc8
 800fde8:	2400ce00 	.word	0x2400ce00
 800fdec:	2400cdb8 	.word	0x2400cdb8
 800fdf0:	2400cdbc 	.word	0x2400cdbc

0800fdf4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b084      	sub	sp, #16
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d106      	bne.n	800fe10 <tcp_close_shutdown_fin+0x1c>
 800fe02:	4b2e      	ldr	r3, [pc, #184]	@ (800febc <tcp_close_shutdown_fin+0xc8>)
 800fe04:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800fe08:	492d      	ldr	r1, [pc, #180]	@ (800fec0 <tcp_close_shutdown_fin+0xcc>)
 800fe0a:	482e      	ldr	r0, [pc, #184]	@ (800fec4 <tcp_close_shutdown_fin+0xd0>)
 800fe0c:	f007 f8a6 	bl	8016f5c <iprintf>

  switch (pcb->state) {
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	7d1b      	ldrb	r3, [r3, #20]
 800fe14:	2b07      	cmp	r3, #7
 800fe16:	d020      	beq.n	800fe5a <tcp_close_shutdown_fin+0x66>
 800fe18:	2b07      	cmp	r3, #7
 800fe1a:	dc2b      	bgt.n	800fe74 <tcp_close_shutdown_fin+0x80>
 800fe1c:	2b03      	cmp	r3, #3
 800fe1e:	d002      	beq.n	800fe26 <tcp_close_shutdown_fin+0x32>
 800fe20:	2b04      	cmp	r3, #4
 800fe22:	d00d      	beq.n	800fe40 <tcp_close_shutdown_fin+0x4c>
 800fe24:	e026      	b.n	800fe74 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f004 fe5a 	bl	8014ae0 <tcp_send_fin>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fe30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d11f      	bne.n	800fe78 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2205      	movs	r2, #5
 800fe3c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fe3e:	e01b      	b.n	800fe78 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f004 fe4d 	bl	8014ae0 <tcp_send_fin>
 800fe46:	4603      	mov	r3, r0
 800fe48:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fe4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d114      	bne.n	800fe7c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2205      	movs	r2, #5
 800fe56:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fe58:	e010      	b.n	800fe7c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f004 fe40 	bl	8014ae0 <tcp_send_fin>
 800fe60:	4603      	mov	r3, r0
 800fe62:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fe64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d109      	bne.n	800fe80 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2209      	movs	r2, #9
 800fe70:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fe72:	e005      	b.n	800fe80 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800fe74:	2300      	movs	r3, #0
 800fe76:	e01c      	b.n	800feb2 <tcp_close_shutdown_fin+0xbe>
      break;
 800fe78:	bf00      	nop
 800fe7a:	e002      	b.n	800fe82 <tcp_close_shutdown_fin+0x8e>
      break;
 800fe7c:	bf00      	nop
 800fe7e:	e000      	b.n	800fe82 <tcp_close_shutdown_fin+0x8e>
      break;
 800fe80:	bf00      	nop
  }

  if (err == ERR_OK) {
 800fe82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d103      	bne.n	800fe92 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800fe8a:	6878      	ldr	r0, [r7, #4]
 800fe8c:	f004 ff66 	bl	8014d5c <tcp_output>
 800fe90:	e00d      	b.n	800feae <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800fe92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe9a:	d108      	bne.n	800feae <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	8b5b      	ldrh	r3, [r3, #26]
 800fea0:	f043 0308 	orr.w	r3, r3, #8
 800fea4:	b29a      	uxth	r2, r3
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800feaa:	2300      	movs	r3, #0
 800feac:	e001      	b.n	800feb2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800feae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3710      	adds	r7, #16
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}
 800feba:	bf00      	nop
 800febc:	08019ec4 	.word	0x08019ec4
 800fec0:	08019fa8 	.word	0x08019fa8
 800fec4:	08019f3c 	.word	0x08019f3c

0800fec8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d109      	bne.n	800feea <tcp_close+0x22>
 800fed6:	4b0f      	ldr	r3, [pc, #60]	@ (800ff14 <tcp_close+0x4c>)
 800fed8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800fedc:	490e      	ldr	r1, [pc, #56]	@ (800ff18 <tcp_close+0x50>)
 800fede:	480f      	ldr	r0, [pc, #60]	@ (800ff1c <tcp_close+0x54>)
 800fee0:	f007 f83c 	bl	8016f5c <iprintf>
 800fee4:	f06f 030f 	mvn.w	r3, #15
 800fee8:	e00f      	b.n	800ff0a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	7d1b      	ldrb	r3, [r3, #20]
 800feee:	2b01      	cmp	r3, #1
 800fef0:	d006      	beq.n	800ff00 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	8b5b      	ldrh	r3, [r3, #26]
 800fef6:	f043 0310 	orr.w	r3, r3, #16
 800fefa:	b29a      	uxth	r2, r3
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ff00:	2101      	movs	r1, #1
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f7ff fe94 	bl	800fc30 <tcp_close_shutdown>
 800ff08:	4603      	mov	r3, r0
}
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	3708      	adds	r7, #8
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}
 800ff12:	bf00      	nop
 800ff14:	08019ec4 	.word	0x08019ec4
 800ff18:	0801a008 	.word	0x0801a008
 800ff1c:	08019f3c 	.word	0x08019f3c

0800ff20 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b084      	sub	sp, #16
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	60f8      	str	r0, [r7, #12]
 800ff28:	60b9      	str	r1, [r7, #8]
 800ff2a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d109      	bne.n	800ff46 <tcp_shutdown+0x26>
 800ff32:	4b26      	ldr	r3, [pc, #152]	@ (800ffcc <tcp_shutdown+0xac>)
 800ff34:	f240 2207 	movw	r2, #519	@ 0x207
 800ff38:	4925      	ldr	r1, [pc, #148]	@ (800ffd0 <tcp_shutdown+0xb0>)
 800ff3a:	4826      	ldr	r0, [pc, #152]	@ (800ffd4 <tcp_shutdown+0xb4>)
 800ff3c:	f007 f80e 	bl	8016f5c <iprintf>
 800ff40:	f06f 030f 	mvn.w	r3, #15
 800ff44:	e03d      	b.n	800ffc2 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	7d1b      	ldrb	r3, [r3, #20]
 800ff4a:	2b01      	cmp	r3, #1
 800ff4c:	d102      	bne.n	800ff54 <tcp_shutdown+0x34>
    return ERR_CONN;
 800ff4e:	f06f 030a 	mvn.w	r3, #10
 800ff52:	e036      	b.n	800ffc2 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800ff54:	68bb      	ldr	r3, [r7, #8]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d01b      	beq.n	800ff92 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	8b5b      	ldrh	r3, [r3, #26]
 800ff5e:	f043 0310 	orr.w	r3, r3, #16
 800ff62:	b29a      	uxth	r2, r3
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d005      	beq.n	800ff7a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800ff6e:	2101      	movs	r1, #1
 800ff70:	68f8      	ldr	r0, [r7, #12]
 800ff72:	f7ff fe5d 	bl	800fc30 <tcp_close_shutdown>
 800ff76:	4603      	mov	r3, r0
 800ff78:	e023      	b.n	800ffc2 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d007      	beq.n	800ff92 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ff86:	4618      	mov	r0, r3
 800ff88:	f7ff f89c 	bl	800f0c4 <pbuf_free>
      pcb->refused_data = NULL;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	2200      	movs	r2, #0
 800ff90:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d013      	beq.n	800ffc0 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	7d1b      	ldrb	r3, [r3, #20]
 800ff9c:	2b04      	cmp	r3, #4
 800ff9e:	dc02      	bgt.n	800ffa6 <tcp_shutdown+0x86>
 800ffa0:	2b03      	cmp	r3, #3
 800ffa2:	da02      	bge.n	800ffaa <tcp_shutdown+0x8a>
 800ffa4:	e009      	b.n	800ffba <tcp_shutdown+0x9a>
 800ffa6:	2b07      	cmp	r3, #7
 800ffa8:	d107      	bne.n	800ffba <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	b2db      	uxtb	r3, r3
 800ffae:	4619      	mov	r1, r3
 800ffb0:	68f8      	ldr	r0, [r7, #12]
 800ffb2:	f7ff fe3d 	bl	800fc30 <tcp_close_shutdown>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	e003      	b.n	800ffc2 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800ffba:	f06f 030a 	mvn.w	r3, #10
 800ffbe:	e000      	b.n	800ffc2 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800ffc0:	2300      	movs	r3, #0
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3710      	adds	r7, #16
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	08019ec4 	.word	0x08019ec4
 800ffd0:	0801a020 	.word	0x0801a020
 800ffd4:	08019f3c 	.word	0x08019f3c

0800ffd8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b08e      	sub	sp, #56	@ 0x38
 800ffdc:	af04      	add	r7, sp, #16
 800ffde:	6078      	str	r0, [r7, #4]
 800ffe0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d107      	bne.n	800fff8 <tcp_abandon+0x20>
 800ffe8:	4b52      	ldr	r3, [pc, #328]	@ (8010134 <tcp_abandon+0x15c>)
 800ffea:	f240 223d 	movw	r2, #573	@ 0x23d
 800ffee:	4952      	ldr	r1, [pc, #328]	@ (8010138 <tcp_abandon+0x160>)
 800fff0:	4852      	ldr	r0, [pc, #328]	@ (801013c <tcp_abandon+0x164>)
 800fff2:	f006 ffb3 	bl	8016f5c <iprintf>
 800fff6:	e099      	b.n	801012c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	7d1b      	ldrb	r3, [r3, #20]
 800fffc:	2b01      	cmp	r3, #1
 800fffe:	d106      	bne.n	801000e <tcp_abandon+0x36>
 8010000:	4b4c      	ldr	r3, [pc, #304]	@ (8010134 <tcp_abandon+0x15c>)
 8010002:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8010006:	494e      	ldr	r1, [pc, #312]	@ (8010140 <tcp_abandon+0x168>)
 8010008:	484c      	ldr	r0, [pc, #304]	@ (801013c <tcp_abandon+0x164>)
 801000a:	f006 ffa7 	bl	8016f5c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	7d1b      	ldrb	r3, [r3, #20]
 8010012:	2b0a      	cmp	r3, #10
 8010014:	d107      	bne.n	8010026 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010016:	6879      	ldr	r1, [r7, #4]
 8010018:	484a      	ldr	r0, [pc, #296]	@ (8010144 <tcp_abandon+0x16c>)
 801001a:	f001 fa89 	bl	8011530 <tcp_pcb_remove>
    tcp_free(pcb);
 801001e:	6878      	ldr	r0, [r7, #4]
 8010020:	f7ff fd54 	bl	800facc <tcp_free>
 8010024:	e082      	b.n	801012c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8010026:	2300      	movs	r3, #0
 8010028:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 801002a:	2300      	movs	r3, #0
 801002c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010032:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010038:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010040:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	691b      	ldr	r3, [r3, #16]
 8010046:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	7d1b      	ldrb	r3, [r3, #20]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d126      	bne.n	801009e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	8adb      	ldrh	r3, [r3, #22]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d02e      	beq.n	80100b6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010058:	4b3b      	ldr	r3, [pc, #236]	@ (8010148 <tcp_abandon+0x170>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	687a      	ldr	r2, [r7, #4]
 801005e:	429a      	cmp	r2, r3
 8010060:	d105      	bne.n	801006e <tcp_abandon+0x96>
 8010062:	4b39      	ldr	r3, [pc, #228]	@ (8010148 <tcp_abandon+0x170>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	68db      	ldr	r3, [r3, #12]
 8010068:	4a37      	ldr	r2, [pc, #220]	@ (8010148 <tcp_abandon+0x170>)
 801006a:	6013      	str	r3, [r2, #0]
 801006c:	e013      	b.n	8010096 <tcp_abandon+0xbe>
 801006e:	4b36      	ldr	r3, [pc, #216]	@ (8010148 <tcp_abandon+0x170>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	61fb      	str	r3, [r7, #28]
 8010074:	e00c      	b.n	8010090 <tcp_abandon+0xb8>
 8010076:	69fb      	ldr	r3, [r7, #28]
 8010078:	68db      	ldr	r3, [r3, #12]
 801007a:	687a      	ldr	r2, [r7, #4]
 801007c:	429a      	cmp	r2, r3
 801007e:	d104      	bne.n	801008a <tcp_abandon+0xb2>
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	68da      	ldr	r2, [r3, #12]
 8010084:	69fb      	ldr	r3, [r7, #28]
 8010086:	60da      	str	r2, [r3, #12]
 8010088:	e005      	b.n	8010096 <tcp_abandon+0xbe>
 801008a:	69fb      	ldr	r3, [r7, #28]
 801008c:	68db      	ldr	r3, [r3, #12]
 801008e:	61fb      	str	r3, [r7, #28]
 8010090:	69fb      	ldr	r3, [r7, #28]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d1ef      	bne.n	8010076 <tcp_abandon+0x9e>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2200      	movs	r2, #0
 801009a:	60da      	str	r2, [r3, #12]
 801009c:	e00b      	b.n	80100b6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	8adb      	ldrh	r3, [r3, #22]
 80100a6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80100a8:	6879      	ldr	r1, [r7, #4]
 80100aa:	4828      	ldr	r0, [pc, #160]	@ (801014c <tcp_abandon+0x174>)
 80100ac:	f001 fa40 	bl	8011530 <tcp_pcb_remove>
 80100b0:	4b27      	ldr	r3, [pc, #156]	@ (8010150 <tcp_abandon+0x178>)
 80100b2:	2201      	movs	r2, #1
 80100b4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d004      	beq.n	80100c8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80100c2:	4618      	mov	r0, r3
 80100c4:	f000 ff14 	bl	8010ef0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d004      	beq.n	80100da <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80100d4:	4618      	mov	r0, r3
 80100d6:	f000 ff0b 	bl	8010ef0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d004      	beq.n	80100ec <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80100e6:	4618      	mov	r0, r3
 80100e8:	f000 ff02 	bl	8010ef0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80100ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d00e      	beq.n	8010110 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80100f2:	6879      	ldr	r1, [r7, #4]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	3304      	adds	r3, #4
 80100f8:	687a      	ldr	r2, [r7, #4]
 80100fa:	8b12      	ldrh	r2, [r2, #24]
 80100fc:	9202      	str	r2, [sp, #8]
 80100fe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010100:	9201      	str	r2, [sp, #4]
 8010102:	9300      	str	r3, [sp, #0]
 8010104:	460b      	mov	r3, r1
 8010106:	697a      	ldr	r2, [r7, #20]
 8010108:	69b9      	ldr	r1, [r7, #24]
 801010a:	6878      	ldr	r0, [r7, #4]
 801010c:	f005 fbda 	bl	80158c4 <tcp_rst>
    }
    last_state = pcb->state;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	7d1b      	ldrb	r3, [r3, #20]
 8010114:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8010116:	6878      	ldr	r0, [r7, #4]
 8010118:	f7ff fcd8 	bl	800facc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801011c:	693b      	ldr	r3, [r7, #16]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d004      	beq.n	801012c <tcp_abandon+0x154>
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	f06f 010c 	mvn.w	r1, #12
 8010128:	68f8      	ldr	r0, [r7, #12]
 801012a:	4798      	blx	r3
  }
}
 801012c:	3728      	adds	r7, #40	@ 0x28
 801012e:	46bd      	mov	sp, r7
 8010130:	bd80      	pop	{r7, pc}
 8010132:	bf00      	nop
 8010134:	08019ec4 	.word	0x08019ec4
 8010138:	0801a03c 	.word	0x0801a03c
 801013c:	08019f3c 	.word	0x08019f3c
 8010140:	0801a058 	.word	0x0801a058
 8010144:	2400cdc4 	.word	0x2400cdc4
 8010148:	2400cdb8 	.word	0x2400cdb8
 801014c:	2400cdc0 	.word	0x2400cdc0
 8010150:	2400cdc8 	.word	0x2400cdc8

08010154 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b082      	sub	sp, #8
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801015c:	2101      	movs	r1, #1
 801015e:	6878      	ldr	r0, [r7, #4]
 8010160:	f7ff ff3a 	bl	800ffd8 <tcp_abandon>
}
 8010164:	bf00      	nop
 8010166:	3708      	adds	r7, #8
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}

0801016c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b088      	sub	sp, #32
 8010170:	af00      	add	r7, sp, #0
 8010172:	60f8      	str	r0, [r7, #12]
 8010174:	60b9      	str	r1, [r7, #8]
 8010176:	4613      	mov	r3, r2
 8010178:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801017a:	2304      	movs	r3, #4
 801017c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d101      	bne.n	8010188 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8010184:	4b3e      	ldr	r3, [pc, #248]	@ (8010280 <tcp_bind+0x114>)
 8010186:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d109      	bne.n	80101a2 <tcp_bind+0x36>
 801018e:	4b3d      	ldr	r3, [pc, #244]	@ (8010284 <tcp_bind+0x118>)
 8010190:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8010194:	493c      	ldr	r1, [pc, #240]	@ (8010288 <tcp_bind+0x11c>)
 8010196:	483d      	ldr	r0, [pc, #244]	@ (801028c <tcp_bind+0x120>)
 8010198:	f006 fee0 	bl	8016f5c <iprintf>
 801019c:	f06f 030f 	mvn.w	r3, #15
 80101a0:	e06a      	b.n	8010278 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	7d1b      	ldrb	r3, [r3, #20]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d009      	beq.n	80101be <tcp_bind+0x52>
 80101aa:	4b36      	ldr	r3, [pc, #216]	@ (8010284 <tcp_bind+0x118>)
 80101ac:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80101b0:	4937      	ldr	r1, [pc, #220]	@ (8010290 <tcp_bind+0x124>)
 80101b2:	4836      	ldr	r0, [pc, #216]	@ (801028c <tcp_bind+0x120>)
 80101b4:	f006 fed2 	bl	8016f5c <iprintf>
 80101b8:	f06f 0305 	mvn.w	r3, #5
 80101bc:	e05c      	b.n	8010278 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80101be:	88fb      	ldrh	r3, [r7, #6]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d109      	bne.n	80101d8 <tcp_bind+0x6c>
    port = tcp_new_port();
 80101c4:	f000 f914 	bl	80103f0 <tcp_new_port>
 80101c8:	4603      	mov	r3, r0
 80101ca:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80101cc:	88fb      	ldrh	r3, [r7, #6]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d135      	bne.n	801023e <tcp_bind+0xd2>
      return ERR_BUF;
 80101d2:	f06f 0301 	mvn.w	r3, #1
 80101d6:	e04f      	b.n	8010278 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80101d8:	2300      	movs	r3, #0
 80101da:	61fb      	str	r3, [r7, #28]
 80101dc:	e02b      	b.n	8010236 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80101de:	4a2d      	ldr	r2, [pc, #180]	@ (8010294 <tcp_bind+0x128>)
 80101e0:	69fb      	ldr	r3, [r7, #28]
 80101e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	61bb      	str	r3, [r7, #24]
 80101ea:	e01e      	b.n	801022a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80101ec:	69bb      	ldr	r3, [r7, #24]
 80101ee:	8adb      	ldrh	r3, [r3, #22]
 80101f0:	88fa      	ldrh	r2, [r7, #6]
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d116      	bne.n	8010224 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80101f6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d010      	beq.n	801021e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80101fc:	69bb      	ldr	r3, [r7, #24]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d00c      	beq.n	801021e <tcp_bind+0xb2>
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d009      	beq.n	801021e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d005      	beq.n	801021e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8010212:	69bb      	ldr	r3, [r7, #24]
 8010214:	681a      	ldr	r2, [r3, #0]
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801021a:	429a      	cmp	r2, r3
 801021c:	d102      	bne.n	8010224 <tcp_bind+0xb8>
              return ERR_USE;
 801021e:	f06f 0307 	mvn.w	r3, #7
 8010222:	e029      	b.n	8010278 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010224:	69bb      	ldr	r3, [r7, #24]
 8010226:	68db      	ldr	r3, [r3, #12]
 8010228:	61bb      	str	r3, [r7, #24]
 801022a:	69bb      	ldr	r3, [r7, #24]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d1dd      	bne.n	80101ec <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8010230:	69fb      	ldr	r3, [r7, #28]
 8010232:	3301      	adds	r3, #1
 8010234:	61fb      	str	r3, [r7, #28]
 8010236:	69fa      	ldr	r2, [r7, #28]
 8010238:	697b      	ldr	r3, [r7, #20]
 801023a:	429a      	cmp	r2, r3
 801023c:	dbcf      	blt.n	80101de <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d00c      	beq.n	801025e <tcp_bind+0xf2>
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d008      	beq.n	801025e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d002      	beq.n	8010258 <tcp_bind+0xec>
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	e000      	b.n	801025a <tcp_bind+0xee>
 8010258:	2300      	movs	r3, #0
 801025a:	68fa      	ldr	r2, [r7, #12]
 801025c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	88fa      	ldrh	r2, [r7, #6]
 8010262:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8010264:	4b0c      	ldr	r3, [pc, #48]	@ (8010298 <tcp_bind+0x12c>)
 8010266:	681a      	ldr	r2, [r3, #0]
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	60da      	str	r2, [r3, #12]
 801026c:	4a0a      	ldr	r2, [pc, #40]	@ (8010298 <tcp_bind+0x12c>)
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	6013      	str	r3, [r2, #0]
 8010272:	f005 fea1 	bl	8015fb8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8010276:	2300      	movs	r3, #0
}
 8010278:	4618      	mov	r0, r3
 801027a:	3720      	adds	r7, #32
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}
 8010280:	0801b97c 	.word	0x0801b97c
 8010284:	08019ec4 	.word	0x08019ec4
 8010288:	0801a08c 	.word	0x0801a08c
 801028c:	08019f3c 	.word	0x08019f3c
 8010290:	0801a0a4 	.word	0x0801a0a4
 8010294:	0801ba68 	.word	0x0801ba68
 8010298:	2400cdb8 	.word	0x2400cdb8

0801029c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b084      	sub	sp, #16
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d106      	bne.n	80102b8 <tcp_update_rcv_ann_wnd+0x1c>
 80102aa:	4b25      	ldr	r3, [pc, #148]	@ (8010340 <tcp_update_rcv_ann_wnd+0xa4>)
 80102ac:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80102b0:	4924      	ldr	r1, [pc, #144]	@ (8010344 <tcp_update_rcv_ann_wnd+0xa8>)
 80102b2:	4825      	ldr	r0, [pc, #148]	@ (8010348 <tcp_update_rcv_ann_wnd+0xac>)
 80102b4:	f006 fe52 	bl	8016f5c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102bc:	687a      	ldr	r2, [r7, #4]
 80102be:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80102c0:	4413      	add	r3, r2
 80102c2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102c8:	687a      	ldr	r2, [r7, #4]
 80102ca:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80102cc:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80102d0:	bf28      	it	cs
 80102d2:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80102d6:	b292      	uxth	r2, r2
 80102d8:	4413      	add	r3, r2
 80102da:	68fa      	ldr	r2, [r7, #12]
 80102dc:	1ad3      	subs	r3, r2, r3
 80102de:	2b00      	cmp	r3, #0
 80102e0:	db08      	blt.n	80102f4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102ee:	68fa      	ldr	r2, [r7, #12]
 80102f0:	1ad3      	subs	r3, r2, r3
 80102f2:	e020      	b.n	8010336 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102fc:	1ad3      	subs	r3, r2, r3
 80102fe:	2b00      	cmp	r3, #0
 8010300:	dd03      	ble.n	801030a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2200      	movs	r2, #0
 8010306:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010308:	e014      	b.n	8010334 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010312:	1ad3      	subs	r3, r2, r3
 8010314:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801031c:	d306      	bcc.n	801032c <tcp_update_rcv_ann_wnd+0x90>
 801031e:	4b08      	ldr	r3, [pc, #32]	@ (8010340 <tcp_update_rcv_ann_wnd+0xa4>)
 8010320:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8010324:	4909      	ldr	r1, [pc, #36]	@ (801034c <tcp_update_rcv_ann_wnd+0xb0>)
 8010326:	4808      	ldr	r0, [pc, #32]	@ (8010348 <tcp_update_rcv_ann_wnd+0xac>)
 8010328:	f006 fe18 	bl	8016f5c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	b29a      	uxth	r2, r3
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8010334:	2300      	movs	r3, #0
  }
}
 8010336:	4618      	mov	r0, r3
 8010338:	3710      	adds	r7, #16
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}
 801033e:	bf00      	nop
 8010340:	08019ec4 	.word	0x08019ec4
 8010344:	0801a154 	.word	0x0801a154
 8010348:	08019f3c 	.word	0x08019f3c
 801034c:	0801a178 	.word	0x0801a178

08010350 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b084      	sub	sp, #16
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
 8010358:	460b      	mov	r3, r1
 801035a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d107      	bne.n	8010372 <tcp_recved+0x22>
 8010362:	4b1f      	ldr	r3, [pc, #124]	@ (80103e0 <tcp_recved+0x90>)
 8010364:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8010368:	491e      	ldr	r1, [pc, #120]	@ (80103e4 <tcp_recved+0x94>)
 801036a:	481f      	ldr	r0, [pc, #124]	@ (80103e8 <tcp_recved+0x98>)
 801036c:	f006 fdf6 	bl	8016f5c <iprintf>
 8010370:	e032      	b.n	80103d8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	7d1b      	ldrb	r3, [r3, #20]
 8010376:	2b01      	cmp	r3, #1
 8010378:	d106      	bne.n	8010388 <tcp_recved+0x38>
 801037a:	4b19      	ldr	r3, [pc, #100]	@ (80103e0 <tcp_recved+0x90>)
 801037c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8010380:	491a      	ldr	r1, [pc, #104]	@ (80103ec <tcp_recved+0x9c>)
 8010382:	4819      	ldr	r0, [pc, #100]	@ (80103e8 <tcp_recved+0x98>)
 8010384:	f006 fdea 	bl	8016f5c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801038c:	887b      	ldrh	r3, [r7, #2]
 801038e:	4413      	add	r3, r2
 8010390:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010392:	89fb      	ldrh	r3, [r7, #14]
 8010394:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8010398:	d804      	bhi.n	80103a4 <tcp_recved+0x54>
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801039e:	89fa      	ldrh	r2, [r7, #14]
 80103a0:	429a      	cmp	r2, r3
 80103a2:	d204      	bcs.n	80103ae <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80103aa:	851a      	strh	r2, [r3, #40]	@ 0x28
 80103ac:	e002      	b.n	80103b4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	89fa      	ldrh	r2, [r7, #14]
 80103b2:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f7ff ff71 	bl	801029c <tcp_update_rcv_ann_wnd>
 80103ba:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80103c2:	d309      	bcc.n	80103d8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	8b5b      	ldrh	r3, [r3, #26]
 80103c8:	f043 0302 	orr.w	r3, r3, #2
 80103cc:	b29a      	uxth	r2, r3
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	f004 fcc2 	bl	8014d5c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80103d8:	3710      	adds	r7, #16
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}
 80103de:	bf00      	nop
 80103e0:	08019ec4 	.word	0x08019ec4
 80103e4:	0801a194 	.word	0x0801a194
 80103e8:	08019f3c 	.word	0x08019f3c
 80103ec:	0801a1ac 	.word	0x0801a1ac

080103f0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80103f0:	b480      	push	{r7}
 80103f2:	b083      	sub	sp, #12
 80103f4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80103f6:	2300      	movs	r3, #0
 80103f8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80103fa:	4b1e      	ldr	r3, [pc, #120]	@ (8010474 <tcp_new_port+0x84>)
 80103fc:	881b      	ldrh	r3, [r3, #0]
 80103fe:	3301      	adds	r3, #1
 8010400:	b29a      	uxth	r2, r3
 8010402:	4b1c      	ldr	r3, [pc, #112]	@ (8010474 <tcp_new_port+0x84>)
 8010404:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8010406:	4b1b      	ldr	r3, [pc, #108]	@ (8010474 <tcp_new_port+0x84>)
 8010408:	881b      	ldrh	r3, [r3, #0]
 801040a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801040e:	4293      	cmp	r3, r2
 8010410:	d103      	bne.n	801041a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8010412:	4b18      	ldr	r3, [pc, #96]	@ (8010474 <tcp_new_port+0x84>)
 8010414:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8010418:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801041a:	2300      	movs	r3, #0
 801041c:	71fb      	strb	r3, [r7, #7]
 801041e:	e01e      	b.n	801045e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010420:	79fb      	ldrb	r3, [r7, #7]
 8010422:	4a15      	ldr	r2, [pc, #84]	@ (8010478 <tcp_new_port+0x88>)
 8010424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	603b      	str	r3, [r7, #0]
 801042c:	e011      	b.n	8010452 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	8ada      	ldrh	r2, [r3, #22]
 8010432:	4b10      	ldr	r3, [pc, #64]	@ (8010474 <tcp_new_port+0x84>)
 8010434:	881b      	ldrh	r3, [r3, #0]
 8010436:	429a      	cmp	r2, r3
 8010438:	d108      	bne.n	801044c <tcp_new_port+0x5c>
        n++;
 801043a:	88bb      	ldrh	r3, [r7, #4]
 801043c:	3301      	adds	r3, #1
 801043e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8010440:	88bb      	ldrh	r3, [r7, #4]
 8010442:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010446:	d3d8      	bcc.n	80103fa <tcp_new_port+0xa>
          return 0;
 8010448:	2300      	movs	r3, #0
 801044a:	e00d      	b.n	8010468 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	68db      	ldr	r3, [r3, #12]
 8010450:	603b      	str	r3, [r7, #0]
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d1ea      	bne.n	801042e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010458:	79fb      	ldrb	r3, [r7, #7]
 801045a:	3301      	adds	r3, #1
 801045c:	71fb      	strb	r3, [r7, #7]
 801045e:	79fb      	ldrb	r3, [r7, #7]
 8010460:	2b03      	cmp	r3, #3
 8010462:	d9dd      	bls.n	8010420 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8010464:	4b03      	ldr	r3, [pc, #12]	@ (8010474 <tcp_new_port+0x84>)
 8010466:	881b      	ldrh	r3, [r3, #0]
}
 8010468:	4618      	mov	r0, r3
 801046a:	370c      	adds	r7, #12
 801046c:	46bd      	mov	sp, r7
 801046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010472:	4770      	bx	lr
 8010474:	24000028 	.word	0x24000028
 8010478:	0801ba68 	.word	0x0801ba68

0801047c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b08a      	sub	sp, #40	@ 0x28
 8010480:	af00      	add	r7, sp, #0
 8010482:	60f8      	str	r0, [r7, #12]
 8010484:	60b9      	str	r1, [r7, #8]
 8010486:	603b      	str	r3, [r7, #0]
 8010488:	4613      	mov	r3, r2
 801048a:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 801048c:	2300      	movs	r3, #0
 801048e:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d109      	bne.n	80104aa <tcp_connect+0x2e>
 8010496:	4b7d      	ldr	r3, [pc, #500]	@ (801068c <tcp_connect+0x210>)
 8010498:	f240 4235 	movw	r2, #1077	@ 0x435
 801049c:	497c      	ldr	r1, [pc, #496]	@ (8010690 <tcp_connect+0x214>)
 801049e:	487d      	ldr	r0, [pc, #500]	@ (8010694 <tcp_connect+0x218>)
 80104a0:	f006 fd5c 	bl	8016f5c <iprintf>
 80104a4:	f06f 030f 	mvn.w	r3, #15
 80104a8:	e0ec      	b.n	8010684 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80104aa:	68bb      	ldr	r3, [r7, #8]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d109      	bne.n	80104c4 <tcp_connect+0x48>
 80104b0:	4b76      	ldr	r3, [pc, #472]	@ (801068c <tcp_connect+0x210>)
 80104b2:	f240 4236 	movw	r2, #1078	@ 0x436
 80104b6:	4978      	ldr	r1, [pc, #480]	@ (8010698 <tcp_connect+0x21c>)
 80104b8:	4876      	ldr	r0, [pc, #472]	@ (8010694 <tcp_connect+0x218>)
 80104ba:	f006 fd4f 	bl	8016f5c <iprintf>
 80104be:	f06f 030f 	mvn.w	r3, #15
 80104c2:	e0df      	b.n	8010684 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	7d1b      	ldrb	r3, [r3, #20]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d009      	beq.n	80104e0 <tcp_connect+0x64>
 80104cc:	4b6f      	ldr	r3, [pc, #444]	@ (801068c <tcp_connect+0x210>)
 80104ce:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 80104d2:	4972      	ldr	r1, [pc, #456]	@ (801069c <tcp_connect+0x220>)
 80104d4:	486f      	ldr	r0, [pc, #444]	@ (8010694 <tcp_connect+0x218>)
 80104d6:	f006 fd41 	bl	8016f5c <iprintf>
 80104da:	f06f 0309 	mvn.w	r3, #9
 80104de:	e0d1      	b.n	8010684 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d002      	beq.n	80104ec <tcp_connect+0x70>
 80104e6:	68bb      	ldr	r3, [r7, #8]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	e000      	b.n	80104ee <tcp_connect+0x72>
 80104ec:	2300      	movs	r3, #0
 80104ee:	68fa      	ldr	r2, [r7, #12]
 80104f0:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	88fa      	ldrh	r2, [r7, #6]
 80104f6:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	7a1b      	ldrb	r3, [r3, #8]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d006      	beq.n	801050e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	7a1b      	ldrb	r3, [r3, #8]
 8010504:	4618      	mov	r0, r3
 8010506:	f7fe fa4f 	bl	800e9a8 <netif_get_by_index>
 801050a:	6278      	str	r0, [r7, #36]	@ 0x24
 801050c:	e005      	b.n	801051a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	3304      	adds	r3, #4
 8010512:	4618      	mov	r0, r3
 8010514:	f7fc f8fa 	bl	800c70c <ip4_route>
 8010518:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 801051a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801051c:	2b00      	cmp	r3, #0
 801051e:	d102      	bne.n	8010526 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8010520:	f06f 0303 	mvn.w	r3, #3
 8010524:	e0ae      	b.n	8010684 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d003      	beq.n	8010534 <tcp_connect+0xb8>
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d111      	bne.n	8010558 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8010534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010536:	2b00      	cmp	r3, #0
 8010538:	d002      	beq.n	8010540 <tcp_connect+0xc4>
 801053a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801053c:	3304      	adds	r3, #4
 801053e:	e000      	b.n	8010542 <tcp_connect+0xc6>
 8010540:	2300      	movs	r3, #0
 8010542:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8010544:	69fb      	ldr	r3, [r7, #28]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d102      	bne.n	8010550 <tcp_connect+0xd4>
      return ERR_RTE;
 801054a:	f06f 0303 	mvn.w	r3, #3
 801054e:	e099      	b.n	8010684 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010550:	69fb      	ldr	r3, [r7, #28]
 8010552:	681a      	ldr	r2, [r3, #0]
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	8adb      	ldrh	r3, [r3, #22]
 801055c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	8adb      	ldrh	r3, [r3, #22]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d10c      	bne.n	8010580 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8010566:	f7ff ff43 	bl	80103f0 <tcp_new_port>
 801056a:	4603      	mov	r3, r0
 801056c:	461a      	mov	r2, r3
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	8adb      	ldrh	r3, [r3, #22]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d102      	bne.n	8010580 <tcp_connect+0x104>
      return ERR_BUF;
 801057a:	f06f 0301 	mvn.w	r3, #1
 801057e:	e081      	b.n	8010684 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8010580:	68f8      	ldr	r0, [r7, #12]
 8010582:	f001 f869 	bl	8011658 <tcp_next_iss>
 8010586:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	2200      	movs	r2, #0
 801058c:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	697a      	ldr	r2, [r7, #20]
 8010592:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 8010594:	697b      	ldr	r3, [r7, #20]
 8010596:	1e5a      	subs	r2, r3, #1
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 801059c:	697b      	ldr	r3, [r7, #20]
 801059e:	1e5a      	subs	r2, r3, #1
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	1e5a      	subs	r2, r3, #1
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80105b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80105ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80105d4:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	3304      	adds	r3, #4
 80105de:	461a      	mov	r2, r3
 80105e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80105e2:	f001 f85f 	bl	80116a4 <tcp_eff_send_mss_netif>
 80105e6:	4603      	mov	r3, r0
 80105e8:	461a      	mov	r2, r3
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	2201      	movs	r2, #1
 80105f2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	683a      	ldr	r2, [r7, #0]
 80105fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80105fe:	2102      	movs	r1, #2
 8010600:	68f8      	ldr	r0, [r7, #12]
 8010602:	f004 fabd 	bl	8014b80 <tcp_enqueue_flags>
 8010606:	4603      	mov	r3, r0
 8010608:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 801060a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d136      	bne.n	8010680 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	2202      	movs	r2, #2
 8010616:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8010618:	8b7b      	ldrh	r3, [r7, #26]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d021      	beq.n	8010662 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801061e:	4b20      	ldr	r3, [pc, #128]	@ (80106a0 <tcp_connect+0x224>)
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	68fa      	ldr	r2, [r7, #12]
 8010624:	429a      	cmp	r2, r3
 8010626:	d105      	bne.n	8010634 <tcp_connect+0x1b8>
 8010628:	4b1d      	ldr	r3, [pc, #116]	@ (80106a0 <tcp_connect+0x224>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	68db      	ldr	r3, [r3, #12]
 801062e:	4a1c      	ldr	r2, [pc, #112]	@ (80106a0 <tcp_connect+0x224>)
 8010630:	6013      	str	r3, [r2, #0]
 8010632:	e013      	b.n	801065c <tcp_connect+0x1e0>
 8010634:	4b1a      	ldr	r3, [pc, #104]	@ (80106a0 <tcp_connect+0x224>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	623b      	str	r3, [r7, #32]
 801063a:	e00c      	b.n	8010656 <tcp_connect+0x1da>
 801063c:	6a3b      	ldr	r3, [r7, #32]
 801063e:	68db      	ldr	r3, [r3, #12]
 8010640:	68fa      	ldr	r2, [r7, #12]
 8010642:	429a      	cmp	r2, r3
 8010644:	d104      	bne.n	8010650 <tcp_connect+0x1d4>
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	68da      	ldr	r2, [r3, #12]
 801064a:	6a3b      	ldr	r3, [r7, #32]
 801064c:	60da      	str	r2, [r3, #12]
 801064e:	e005      	b.n	801065c <tcp_connect+0x1e0>
 8010650:	6a3b      	ldr	r3, [r7, #32]
 8010652:	68db      	ldr	r3, [r3, #12]
 8010654:	623b      	str	r3, [r7, #32]
 8010656:	6a3b      	ldr	r3, [r7, #32]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d1ef      	bne.n	801063c <tcp_connect+0x1c0>
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	2200      	movs	r2, #0
 8010660:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8010662:	4b10      	ldr	r3, [pc, #64]	@ (80106a4 <tcp_connect+0x228>)
 8010664:	681a      	ldr	r2, [r3, #0]
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	60da      	str	r2, [r3, #12]
 801066a:	4a0e      	ldr	r2, [pc, #56]	@ (80106a4 <tcp_connect+0x228>)
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	6013      	str	r3, [r2, #0]
 8010670:	f005 fca2 	bl	8015fb8 <tcp_timer_needed>
 8010674:	4b0c      	ldr	r3, [pc, #48]	@ (80106a8 <tcp_connect+0x22c>)
 8010676:	2201      	movs	r2, #1
 8010678:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 801067a:	68f8      	ldr	r0, [r7, #12]
 801067c:	f004 fb6e 	bl	8014d5c <tcp_output>
  }
  return ret;
 8010680:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8010684:	4618      	mov	r0, r3
 8010686:	3728      	adds	r7, #40	@ 0x28
 8010688:	46bd      	mov	sp, r7
 801068a:	bd80      	pop	{r7, pc}
 801068c:	08019ec4 	.word	0x08019ec4
 8010690:	0801a1d4 	.word	0x0801a1d4
 8010694:	08019f3c 	.word	0x08019f3c
 8010698:	0801a1f0 	.word	0x0801a1f0
 801069c:	0801a20c 	.word	0x0801a20c
 80106a0:	2400cdb8 	.word	0x2400cdb8
 80106a4:	2400cdc0 	.word	0x2400cdc0
 80106a8:	2400cdc8 	.word	0x2400cdc8

080106ac <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80106ac:	b5b0      	push	{r4, r5, r7, lr}
 80106ae:	b090      	sub	sp, #64	@ 0x40
 80106b0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80106b2:	2300      	movs	r3, #0
 80106b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80106b8:	4b95      	ldr	r3, [pc, #596]	@ (8010910 <tcp_slowtmr+0x264>)
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	3301      	adds	r3, #1
 80106be:	4a94      	ldr	r2, [pc, #592]	@ (8010910 <tcp_slowtmr+0x264>)
 80106c0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80106c2:	4b94      	ldr	r3, [pc, #592]	@ (8010914 <tcp_slowtmr+0x268>)
 80106c4:	781b      	ldrb	r3, [r3, #0]
 80106c6:	3301      	adds	r3, #1
 80106c8:	b2da      	uxtb	r2, r3
 80106ca:	4b92      	ldr	r3, [pc, #584]	@ (8010914 <tcp_slowtmr+0x268>)
 80106cc:	701a      	strb	r2, [r3, #0]
 80106ce:	e000      	b.n	80106d2 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80106d0:	bf00      	nop
  prev = NULL;
 80106d2:	2300      	movs	r3, #0
 80106d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80106d6:	4b90      	ldr	r3, [pc, #576]	@ (8010918 <tcp_slowtmr+0x26c>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80106dc:	e29d      	b.n	8010c1a <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80106de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106e0:	7d1b      	ldrb	r3, [r3, #20]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d106      	bne.n	80106f4 <tcp_slowtmr+0x48>
 80106e6:	4b8d      	ldr	r3, [pc, #564]	@ (801091c <tcp_slowtmr+0x270>)
 80106e8:	f240 42be 	movw	r2, #1214	@ 0x4be
 80106ec:	498c      	ldr	r1, [pc, #560]	@ (8010920 <tcp_slowtmr+0x274>)
 80106ee:	488d      	ldr	r0, [pc, #564]	@ (8010924 <tcp_slowtmr+0x278>)
 80106f0:	f006 fc34 	bl	8016f5c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80106f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106f6:	7d1b      	ldrb	r3, [r3, #20]
 80106f8:	2b01      	cmp	r3, #1
 80106fa:	d106      	bne.n	801070a <tcp_slowtmr+0x5e>
 80106fc:	4b87      	ldr	r3, [pc, #540]	@ (801091c <tcp_slowtmr+0x270>)
 80106fe:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8010702:	4989      	ldr	r1, [pc, #548]	@ (8010928 <tcp_slowtmr+0x27c>)
 8010704:	4887      	ldr	r0, [pc, #540]	@ (8010924 <tcp_slowtmr+0x278>)
 8010706:	f006 fc29 	bl	8016f5c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801070a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801070c:	7d1b      	ldrb	r3, [r3, #20]
 801070e:	2b0a      	cmp	r3, #10
 8010710:	d106      	bne.n	8010720 <tcp_slowtmr+0x74>
 8010712:	4b82      	ldr	r3, [pc, #520]	@ (801091c <tcp_slowtmr+0x270>)
 8010714:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8010718:	4984      	ldr	r1, [pc, #528]	@ (801092c <tcp_slowtmr+0x280>)
 801071a:	4882      	ldr	r0, [pc, #520]	@ (8010924 <tcp_slowtmr+0x278>)
 801071c:	f006 fc1e 	bl	8016f5c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010722:	7f9a      	ldrb	r2, [r3, #30]
 8010724:	4b7b      	ldr	r3, [pc, #492]	@ (8010914 <tcp_slowtmr+0x268>)
 8010726:	781b      	ldrb	r3, [r3, #0]
 8010728:	429a      	cmp	r2, r3
 801072a:	d105      	bne.n	8010738 <tcp_slowtmr+0x8c>
      prev = pcb;
 801072c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801072e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010732:	68db      	ldr	r3, [r3, #12]
 8010734:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8010736:	e270      	b.n	8010c1a <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8010738:	4b76      	ldr	r3, [pc, #472]	@ (8010914 <tcp_slowtmr+0x268>)
 801073a:	781a      	ldrb	r2, [r3, #0]
 801073c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801073e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8010740:	2300      	movs	r3, #0
 8010742:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8010746:	2300      	movs	r3, #0
 8010748:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801074c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801074e:	7d1b      	ldrb	r3, [r3, #20]
 8010750:	2b02      	cmp	r3, #2
 8010752:	d10a      	bne.n	801076a <tcp_slowtmr+0xbe>
 8010754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010756:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801075a:	2b05      	cmp	r3, #5
 801075c:	d905      	bls.n	801076a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801075e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010762:	3301      	adds	r3, #1
 8010764:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010768:	e11e      	b.n	80109a8 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801076a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801076c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010770:	2b0b      	cmp	r3, #11
 8010772:	d905      	bls.n	8010780 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8010774:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010778:	3301      	adds	r3, #1
 801077a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801077e:	e113      	b.n	80109a8 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8010780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010782:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010786:	2b00      	cmp	r3, #0
 8010788:	d075      	beq.n	8010876 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801078a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801078c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801078e:	2b00      	cmp	r3, #0
 8010790:	d006      	beq.n	80107a0 <tcp_slowtmr+0xf4>
 8010792:	4b62      	ldr	r3, [pc, #392]	@ (801091c <tcp_slowtmr+0x270>)
 8010794:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8010798:	4965      	ldr	r1, [pc, #404]	@ (8010930 <tcp_slowtmr+0x284>)
 801079a:	4862      	ldr	r0, [pc, #392]	@ (8010924 <tcp_slowtmr+0x278>)
 801079c:	f006 fbde 	bl	8016f5c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80107a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d106      	bne.n	80107b6 <tcp_slowtmr+0x10a>
 80107a8:	4b5c      	ldr	r3, [pc, #368]	@ (801091c <tcp_slowtmr+0x270>)
 80107aa:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80107ae:	4961      	ldr	r1, [pc, #388]	@ (8010934 <tcp_slowtmr+0x288>)
 80107b0:	485c      	ldr	r0, [pc, #368]	@ (8010924 <tcp_slowtmr+0x278>)
 80107b2:	f006 fbd3 	bl	8016f5c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80107b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107b8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80107bc:	2b0b      	cmp	r3, #11
 80107be:	d905      	bls.n	80107cc <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80107c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80107c4:	3301      	adds	r3, #1
 80107c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80107ca:	e0ed      	b.n	80109a8 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80107cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107ce:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80107d2:	3b01      	subs	r3, #1
 80107d4:	4a58      	ldr	r2, [pc, #352]	@ (8010938 <tcp_slowtmr+0x28c>)
 80107d6:	5cd3      	ldrb	r3, [r2, r3]
 80107d8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80107da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107dc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80107e0:	7c7a      	ldrb	r2, [r7, #17]
 80107e2:	429a      	cmp	r2, r3
 80107e4:	d907      	bls.n	80107f6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80107e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107e8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80107ec:	3301      	adds	r3, #1
 80107ee:	b2da      	uxtb	r2, r3
 80107f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107f2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80107f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107f8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80107fc:	7c7a      	ldrb	r2, [r7, #17]
 80107fe:	429a      	cmp	r2, r3
 8010800:	f200 80d2 	bhi.w	80109a8 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8010804:	2301      	movs	r3, #1
 8010806:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8010808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801080a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801080e:	2b00      	cmp	r3, #0
 8010810:	d108      	bne.n	8010824 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010812:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010814:	f005 f94a 	bl	8015aac <tcp_zero_window_probe>
 8010818:	4603      	mov	r3, r0
 801081a:	2b00      	cmp	r3, #0
 801081c:	d014      	beq.n	8010848 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 801081e:	2300      	movs	r3, #0
 8010820:	623b      	str	r3, [r7, #32]
 8010822:	e011      	b.n	8010848 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010826:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801082a:	4619      	mov	r1, r3
 801082c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801082e:	f004 f80f 	bl	8014850 <tcp_split_unsent_seg>
 8010832:	4603      	mov	r3, r0
 8010834:	2b00      	cmp	r3, #0
 8010836:	d107      	bne.n	8010848 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8010838:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801083a:	f004 fa8f 	bl	8014d5c <tcp_output>
 801083e:	4603      	mov	r3, r0
 8010840:	2b00      	cmp	r3, #0
 8010842:	d101      	bne.n	8010848 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8010844:	2300      	movs	r3, #0
 8010846:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8010848:	6a3b      	ldr	r3, [r7, #32]
 801084a:	2b00      	cmp	r3, #0
 801084c:	f000 80ac 	beq.w	80109a8 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8010850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010852:	2200      	movs	r2, #0
 8010854:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801085a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801085e:	2b06      	cmp	r3, #6
 8010860:	f200 80a2 	bhi.w	80109a8 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8010864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010866:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801086a:	3301      	adds	r3, #1
 801086c:	b2da      	uxtb	r2, r3
 801086e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010870:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8010874:	e098      	b.n	80109a8 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8010876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010878:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801087c:	2b00      	cmp	r3, #0
 801087e:	db0f      	blt.n	80108a0 <tcp_slowtmr+0x1f4>
 8010880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010882:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010886:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801088a:	4293      	cmp	r3, r2
 801088c:	d008      	beq.n	80108a0 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 801088e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010890:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010894:	b29b      	uxth	r3, r3
 8010896:	3301      	adds	r3, #1
 8010898:	b29b      	uxth	r3, r3
 801089a:	b21a      	sxth	r2, r3
 801089c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801089e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80108a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108a2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80108a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108a8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80108ac:	429a      	cmp	r2, r3
 80108ae:	db7b      	blt.n	80109a8 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80108b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80108b2:	f004 fd47 	bl	8015344 <tcp_rexmit_rto_prepare>
 80108b6:	4603      	mov	r3, r0
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d007      	beq.n	80108cc <tcp_slowtmr+0x220>
 80108bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d171      	bne.n	80109a8 <tcp_slowtmr+0x2fc>
 80108c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d06d      	beq.n	80109a8 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80108cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ce:	7d1b      	ldrb	r3, [r3, #20]
 80108d0:	2b02      	cmp	r3, #2
 80108d2:	d03a      	beq.n	801094a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80108d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80108da:	2b0c      	cmp	r3, #12
 80108dc:	bf28      	it	cs
 80108de:	230c      	movcs	r3, #12
 80108e0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80108e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80108e8:	10db      	asrs	r3, r3, #3
 80108ea:	b21b      	sxth	r3, r3
 80108ec:	461a      	mov	r2, r3
 80108ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80108f4:	4413      	add	r3, r2
 80108f6:	7efa      	ldrb	r2, [r7, #27]
 80108f8:	4910      	ldr	r1, [pc, #64]	@ (801093c <tcp_slowtmr+0x290>)
 80108fa:	5c8a      	ldrb	r2, [r1, r2]
 80108fc:	4093      	lsls	r3, r2
 80108fe:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8010906:	4293      	cmp	r3, r2
 8010908:	dc1a      	bgt.n	8010940 <tcp_slowtmr+0x294>
 801090a:	697b      	ldr	r3, [r7, #20]
 801090c:	b21a      	sxth	r2, r3
 801090e:	e019      	b.n	8010944 <tcp_slowtmr+0x298>
 8010910:	2400cdb4 	.word	0x2400cdb4
 8010914:	2400cdca 	.word	0x2400cdca
 8010918:	2400cdc0 	.word	0x2400cdc0
 801091c:	08019ec4 	.word	0x08019ec4
 8010920:	0801a23c 	.word	0x0801a23c
 8010924:	08019f3c 	.word	0x08019f3c
 8010928:	0801a268 	.word	0x0801a268
 801092c:	0801a294 	.word	0x0801a294
 8010930:	0801a2c4 	.word	0x0801a2c4
 8010934:	0801a2f8 	.word	0x0801a2f8
 8010938:	0801ba60 	.word	0x0801ba60
 801093c:	0801ba50 	.word	0x0801ba50
 8010940:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8010944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010946:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801094a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801094c:	2200      	movs	r2, #0
 801094e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010952:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010958:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801095c:	4293      	cmp	r3, r2
 801095e:	bf28      	it	cs
 8010960:	4613      	movcs	r3, r2
 8010962:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8010964:	8a7b      	ldrh	r3, [r7, #18]
 8010966:	085b      	lsrs	r3, r3, #1
 8010968:	b29a      	uxth	r2, r3
 801096a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801096c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010972:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010978:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801097a:	005b      	lsls	r3, r3, #1
 801097c:	b29b      	uxth	r3, r3
 801097e:	429a      	cmp	r2, r3
 8010980:	d206      	bcs.n	8010990 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8010982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010984:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010986:	005b      	lsls	r3, r3, #1
 8010988:	b29a      	uxth	r2, r3
 801098a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801098c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8010990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010992:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8010994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010996:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801099a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801099c:	2200      	movs	r2, #0
 801099e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80109a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80109a4:	f004 fd3e 	bl	8015424 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80109a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109aa:	7d1b      	ldrb	r3, [r3, #20]
 80109ac:	2b06      	cmp	r3, #6
 80109ae:	d111      	bne.n	80109d4 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80109b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109b2:	8b5b      	ldrh	r3, [r3, #26]
 80109b4:	f003 0310 	and.w	r3, r3, #16
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d00b      	beq.n	80109d4 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80109bc:	4b9c      	ldr	r3, [pc, #624]	@ (8010c30 <tcp_slowtmr+0x584>)
 80109be:	681a      	ldr	r2, [r3, #0]
 80109c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109c2:	6a1b      	ldr	r3, [r3, #32]
 80109c4:	1ad3      	subs	r3, r2, r3
 80109c6:	2b28      	cmp	r3, #40	@ 0x28
 80109c8:	d904      	bls.n	80109d4 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80109ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80109ce:	3301      	adds	r3, #1
 80109d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80109d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109d6:	7a5b      	ldrb	r3, [r3, #9]
 80109d8:	f003 0308 	and.w	r3, r3, #8
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d04a      	beq.n	8010a76 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80109e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109e2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80109e4:	2b04      	cmp	r3, #4
 80109e6:	d003      	beq.n	80109f0 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80109e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109ea:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80109ec:	2b07      	cmp	r3, #7
 80109ee:	d142      	bne.n	8010a76 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80109f0:	4b8f      	ldr	r3, [pc, #572]	@ (8010c30 <tcp_slowtmr+0x584>)
 80109f2:	681a      	ldr	r2, [r3, #0]
 80109f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109f6:	6a1b      	ldr	r3, [r3, #32]
 80109f8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80109fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109fc:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8010a00:	4b8c      	ldr	r3, [pc, #560]	@ (8010c34 <tcp_slowtmr+0x588>)
 8010a02:	440b      	add	r3, r1
 8010a04:	498c      	ldr	r1, [pc, #560]	@ (8010c38 <tcp_slowtmr+0x58c>)
 8010a06:	fba1 1303 	umull	r1, r3, r1, r3
 8010a0a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010a0c:	429a      	cmp	r2, r3
 8010a0e:	d90a      	bls.n	8010a26 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8010a10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a14:	3301      	adds	r3, #1
 8010a16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8010a1a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010a1e:	3301      	adds	r3, #1
 8010a20:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010a24:	e027      	b.n	8010a76 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010a26:	4b82      	ldr	r3, [pc, #520]	@ (8010c30 <tcp_slowtmr+0x584>)
 8010a28:	681a      	ldr	r2, [r3, #0]
 8010a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a2c:	6a1b      	ldr	r3, [r3, #32]
 8010a2e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8010a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a32:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8010a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a38:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	4b7f      	ldr	r3, [pc, #508]	@ (8010c3c <tcp_slowtmr+0x590>)
 8010a40:	fb00 f303 	mul.w	r3, r0, r3
 8010a44:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8010a46:	497c      	ldr	r1, [pc, #496]	@ (8010c38 <tcp_slowtmr+0x58c>)
 8010a48:	fba1 1303 	umull	r1, r3, r1, r3
 8010a4c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d911      	bls.n	8010a76 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8010a52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010a54:	f004 ffea 	bl	8015a2c <tcp_keepalive>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8010a5e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d107      	bne.n	8010a76 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8010a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a68:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8010a6c:	3301      	adds	r3, #1
 8010a6e:	b2da      	uxtb	r2, r3
 8010a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a72:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8010a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d011      	beq.n	8010aa2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8010a7e:	4b6c      	ldr	r3, [pc, #432]	@ (8010c30 <tcp_slowtmr+0x584>)
 8010a80:	681a      	ldr	r2, [r3, #0]
 8010a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a84:	6a1b      	ldr	r3, [r3, #32]
 8010a86:	1ad2      	subs	r2, r2, r3
 8010a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a8a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8010a8e:	4619      	mov	r1, r3
 8010a90:	460b      	mov	r3, r1
 8010a92:	005b      	lsls	r3, r3, #1
 8010a94:	440b      	add	r3, r1
 8010a96:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010a98:	429a      	cmp	r2, r3
 8010a9a:	d302      	bcc.n	8010aa2 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8010a9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010a9e:	f000 feab 	bl	80117f8 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8010aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aa4:	7d1b      	ldrb	r3, [r3, #20]
 8010aa6:	2b03      	cmp	r3, #3
 8010aa8:	d10b      	bne.n	8010ac2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010aaa:	4b61      	ldr	r3, [pc, #388]	@ (8010c30 <tcp_slowtmr+0x584>)
 8010aac:	681a      	ldr	r2, [r3, #0]
 8010aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ab0:	6a1b      	ldr	r3, [r3, #32]
 8010ab2:	1ad3      	subs	r3, r2, r3
 8010ab4:	2b28      	cmp	r3, #40	@ 0x28
 8010ab6:	d904      	bls.n	8010ac2 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8010ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010abc:	3301      	adds	r3, #1
 8010abe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8010ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ac4:	7d1b      	ldrb	r3, [r3, #20]
 8010ac6:	2b09      	cmp	r3, #9
 8010ac8:	d10b      	bne.n	8010ae2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010aca:	4b59      	ldr	r3, [pc, #356]	@ (8010c30 <tcp_slowtmr+0x584>)
 8010acc:	681a      	ldr	r2, [r3, #0]
 8010ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ad0:	6a1b      	ldr	r3, [r3, #32]
 8010ad2:	1ad3      	subs	r3, r2, r3
 8010ad4:	2bf0      	cmp	r3, #240	@ 0xf0
 8010ad6:	d904      	bls.n	8010ae2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8010ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010adc:	3301      	adds	r3, #1
 8010ade:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8010ae2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d060      	beq.n	8010bac <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8010aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010af0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8010af2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010af4:	f000 fccc 	bl	8011490 <tcp_pcb_purge>
      if (prev != NULL) {
 8010af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d010      	beq.n	8010b20 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010afe:	4b50      	ldr	r3, [pc, #320]	@ (8010c40 <tcp_slowtmr+0x594>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d106      	bne.n	8010b16 <tcp_slowtmr+0x46a>
 8010b08:	4b4e      	ldr	r3, [pc, #312]	@ (8010c44 <tcp_slowtmr+0x598>)
 8010b0a:	f240 526d 	movw	r2, #1389	@ 0x56d
 8010b0e:	494e      	ldr	r1, [pc, #312]	@ (8010c48 <tcp_slowtmr+0x59c>)
 8010b10:	484e      	ldr	r0, [pc, #312]	@ (8010c4c <tcp_slowtmr+0x5a0>)
 8010b12:	f006 fa23 	bl	8016f5c <iprintf>
        prev->next = pcb->next;
 8010b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b18:	68da      	ldr	r2, [r3, #12]
 8010b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b1c:	60da      	str	r2, [r3, #12]
 8010b1e:	e00f      	b.n	8010b40 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010b20:	4b47      	ldr	r3, [pc, #284]	@ (8010c40 <tcp_slowtmr+0x594>)
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b26:	429a      	cmp	r2, r3
 8010b28:	d006      	beq.n	8010b38 <tcp_slowtmr+0x48c>
 8010b2a:	4b46      	ldr	r3, [pc, #280]	@ (8010c44 <tcp_slowtmr+0x598>)
 8010b2c:	f240 5271 	movw	r2, #1393	@ 0x571
 8010b30:	4947      	ldr	r1, [pc, #284]	@ (8010c50 <tcp_slowtmr+0x5a4>)
 8010b32:	4846      	ldr	r0, [pc, #280]	@ (8010c4c <tcp_slowtmr+0x5a0>)
 8010b34:	f006 fa12 	bl	8016f5c <iprintf>
        tcp_active_pcbs = pcb->next;
 8010b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b3a:	68db      	ldr	r3, [r3, #12]
 8010b3c:	4a40      	ldr	r2, [pc, #256]	@ (8010c40 <tcp_slowtmr+0x594>)
 8010b3e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8010b40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d013      	beq.n	8010b70 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b4a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8010b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b4e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8010b50:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8010b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b54:	3304      	adds	r3, #4
 8010b56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b58:	8ad2      	ldrh	r2, [r2, #22]
 8010b5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010b5c:	8b09      	ldrh	r1, [r1, #24]
 8010b5e:	9102      	str	r1, [sp, #8]
 8010b60:	9201      	str	r2, [sp, #4]
 8010b62:	9300      	str	r3, [sp, #0]
 8010b64:	462b      	mov	r3, r5
 8010b66:	4622      	mov	r2, r4
 8010b68:	4601      	mov	r1, r0
 8010b6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010b6c:	f004 feaa 	bl	80158c4 <tcp_rst>
      err_arg = pcb->callback_arg;
 8010b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b72:	691b      	ldr	r3, [r3, #16]
 8010b74:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8010b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b78:	7d1b      	ldrb	r3, [r3, #20]
 8010b7a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b7e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b82:	68db      	ldr	r3, [r3, #12]
 8010b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8010b86:	6838      	ldr	r0, [r7, #0]
 8010b88:	f7fe ffa0 	bl	800facc <tcp_free>
      tcp_active_pcbs_changed = 0;
 8010b8c:	4b31      	ldr	r3, [pc, #196]	@ (8010c54 <tcp_slowtmr+0x5a8>)
 8010b8e:	2200      	movs	r2, #0
 8010b90:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d004      	beq.n	8010ba2 <tcp_slowtmr+0x4f6>
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	f06f 010c 	mvn.w	r1, #12
 8010b9e:	68b8      	ldr	r0, [r7, #8]
 8010ba0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010ba2:	4b2c      	ldr	r3, [pc, #176]	@ (8010c54 <tcp_slowtmr+0x5a8>)
 8010ba4:	781b      	ldrb	r3, [r3, #0]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d037      	beq.n	8010c1a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8010baa:	e592      	b.n	80106d2 <tcp_slowtmr+0x26>
      prev = pcb;
 8010bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bae:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bb2:	68db      	ldr	r3, [r3, #12]
 8010bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8010bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bb8:	7f1b      	ldrb	r3, [r3, #28]
 8010bba:	3301      	adds	r3, #1
 8010bbc:	b2da      	uxtb	r2, r3
 8010bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bc0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8010bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bc4:	7f1a      	ldrb	r2, [r3, #28]
 8010bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bc8:	7f5b      	ldrb	r3, [r3, #29]
 8010bca:	429a      	cmp	r2, r3
 8010bcc:	d325      	bcc.n	8010c1a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8010bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8010bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8010c54 <tcp_slowtmr+0x5a8>)
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8010bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d00b      	beq.n	8010bfc <tcp_slowtmr+0x550>
 8010be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010bea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010bec:	6912      	ldr	r2, [r2, #16]
 8010bee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010bf0:	4610      	mov	r0, r2
 8010bf2:	4798      	blx	r3
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8010bfa:	e002      	b.n	8010c02 <tcp_slowtmr+0x556>
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8010c02:	4b14      	ldr	r3, [pc, #80]	@ (8010c54 <tcp_slowtmr+0x5a8>)
 8010c04:	781b      	ldrb	r3, [r3, #0]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	f47f ad62 	bne.w	80106d0 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010c0c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d102      	bne.n	8010c1a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8010c14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010c16:	f004 f8a1 	bl	8014d5c <tcp_output>
  while (pcb != NULL) {
 8010c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	f47f ad5e 	bne.w	80106de <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010c22:	2300      	movs	r3, #0
 8010c24:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8010c26:	4b0c      	ldr	r3, [pc, #48]	@ (8010c58 <tcp_slowtmr+0x5ac>)
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8010c2c:	e069      	b.n	8010d02 <tcp_slowtmr+0x656>
 8010c2e:	bf00      	nop
 8010c30:	2400cdb4 	.word	0x2400cdb4
 8010c34:	000a4cb8 	.word	0x000a4cb8
 8010c38:	10624dd3 	.word	0x10624dd3
 8010c3c:	000124f8 	.word	0x000124f8
 8010c40:	2400cdc0 	.word	0x2400cdc0
 8010c44:	08019ec4 	.word	0x08019ec4
 8010c48:	0801a330 	.word	0x0801a330
 8010c4c:	08019f3c 	.word	0x08019f3c
 8010c50:	0801a35c 	.word	0x0801a35c
 8010c54:	2400cdc8 	.word	0x2400cdc8
 8010c58:	2400cdc4 	.word	0x2400cdc4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c5e:	7d1b      	ldrb	r3, [r3, #20]
 8010c60:	2b0a      	cmp	r3, #10
 8010c62:	d006      	beq.n	8010c72 <tcp_slowtmr+0x5c6>
 8010c64:	4b2b      	ldr	r3, [pc, #172]	@ (8010d14 <tcp_slowtmr+0x668>)
 8010c66:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8010c6a:	492b      	ldr	r1, [pc, #172]	@ (8010d18 <tcp_slowtmr+0x66c>)
 8010c6c:	482b      	ldr	r0, [pc, #172]	@ (8010d1c <tcp_slowtmr+0x670>)
 8010c6e:	f006 f975 	bl	8016f5c <iprintf>
    pcb_remove = 0;
 8010c72:	2300      	movs	r3, #0
 8010c74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010c78:	4b29      	ldr	r3, [pc, #164]	@ (8010d20 <tcp_slowtmr+0x674>)
 8010c7a:	681a      	ldr	r2, [r3, #0]
 8010c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c7e:	6a1b      	ldr	r3, [r3, #32]
 8010c80:	1ad3      	subs	r3, r2, r3
 8010c82:	2bf0      	cmp	r3, #240	@ 0xf0
 8010c84:	d904      	bls.n	8010c90 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8010c86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c8a:	3301      	adds	r3, #1
 8010c8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010c90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d02f      	beq.n	8010cf8 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010c98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010c9a:	f000 fbf9 	bl	8011490 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d010      	beq.n	8010cc6 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8010d24 <tcp_slowtmr+0x678>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010caa:	429a      	cmp	r2, r3
 8010cac:	d106      	bne.n	8010cbc <tcp_slowtmr+0x610>
 8010cae:	4b19      	ldr	r3, [pc, #100]	@ (8010d14 <tcp_slowtmr+0x668>)
 8010cb0:	f240 52af 	movw	r2, #1455	@ 0x5af
 8010cb4:	491c      	ldr	r1, [pc, #112]	@ (8010d28 <tcp_slowtmr+0x67c>)
 8010cb6:	4819      	ldr	r0, [pc, #100]	@ (8010d1c <tcp_slowtmr+0x670>)
 8010cb8:	f006 f950 	bl	8016f5c <iprintf>
        prev->next = pcb->next;
 8010cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cbe:	68da      	ldr	r2, [r3, #12]
 8010cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cc2:	60da      	str	r2, [r3, #12]
 8010cc4:	e00f      	b.n	8010ce6 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010cc6:	4b17      	ldr	r3, [pc, #92]	@ (8010d24 <tcp_slowtmr+0x678>)
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d006      	beq.n	8010cde <tcp_slowtmr+0x632>
 8010cd0:	4b10      	ldr	r3, [pc, #64]	@ (8010d14 <tcp_slowtmr+0x668>)
 8010cd2:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8010cd6:	4915      	ldr	r1, [pc, #84]	@ (8010d2c <tcp_slowtmr+0x680>)
 8010cd8:	4810      	ldr	r0, [pc, #64]	@ (8010d1c <tcp_slowtmr+0x670>)
 8010cda:	f006 f93f 	bl	8016f5c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ce0:	68db      	ldr	r3, [r3, #12]
 8010ce2:	4a10      	ldr	r2, [pc, #64]	@ (8010d24 <tcp_slowtmr+0x678>)
 8010ce4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ce8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8010cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cec:	68db      	ldr	r3, [r3, #12]
 8010cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8010cf0:	69f8      	ldr	r0, [r7, #28]
 8010cf2:	f7fe feeb 	bl	800facc <tcp_free>
 8010cf6:	e004      	b.n	8010d02 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8010cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cfe:	68db      	ldr	r3, [r3, #12]
 8010d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8010d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d1a9      	bne.n	8010c5c <tcp_slowtmr+0x5b0>
    }
  }
}
 8010d08:	bf00      	nop
 8010d0a:	bf00      	nop
 8010d0c:	3730      	adds	r7, #48	@ 0x30
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	bdb0      	pop	{r4, r5, r7, pc}
 8010d12:	bf00      	nop
 8010d14:	08019ec4 	.word	0x08019ec4
 8010d18:	0801a388 	.word	0x0801a388
 8010d1c:	08019f3c 	.word	0x08019f3c
 8010d20:	2400cdb4 	.word	0x2400cdb4
 8010d24:	2400cdc4 	.word	0x2400cdc4
 8010d28:	0801a3b8 	.word	0x0801a3b8
 8010d2c:	0801a3e0 	.word	0x0801a3e0

08010d30 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b082      	sub	sp, #8
 8010d34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010d36:	4b2d      	ldr	r3, [pc, #180]	@ (8010dec <tcp_fasttmr+0xbc>)
 8010d38:	781b      	ldrb	r3, [r3, #0]
 8010d3a:	3301      	adds	r3, #1
 8010d3c:	b2da      	uxtb	r2, r3
 8010d3e:	4b2b      	ldr	r3, [pc, #172]	@ (8010dec <tcp_fasttmr+0xbc>)
 8010d40:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010d42:	4b2b      	ldr	r3, [pc, #172]	@ (8010df0 <tcp_fasttmr+0xc0>)
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010d48:	e048      	b.n	8010ddc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	7f9a      	ldrb	r2, [r3, #30]
 8010d4e:	4b27      	ldr	r3, [pc, #156]	@ (8010dec <tcp_fasttmr+0xbc>)
 8010d50:	781b      	ldrb	r3, [r3, #0]
 8010d52:	429a      	cmp	r2, r3
 8010d54:	d03f      	beq.n	8010dd6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010d56:	4b25      	ldr	r3, [pc, #148]	@ (8010dec <tcp_fasttmr+0xbc>)
 8010d58:	781a      	ldrb	r2, [r3, #0]
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	8b5b      	ldrh	r3, [r3, #26]
 8010d62:	f003 0301 	and.w	r3, r3, #1
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d010      	beq.n	8010d8c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	8b5b      	ldrh	r3, [r3, #26]
 8010d6e:	f043 0302 	orr.w	r3, r3, #2
 8010d72:	b29a      	uxth	r2, r3
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010d78:	6878      	ldr	r0, [r7, #4]
 8010d7a:	f003 ffef 	bl	8014d5c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	8b5b      	ldrh	r3, [r3, #26]
 8010d82:	f023 0303 	bic.w	r3, r3, #3
 8010d86:	b29a      	uxth	r2, r3
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	8b5b      	ldrh	r3, [r3, #26]
 8010d90:	f003 0308 	and.w	r3, r3, #8
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d009      	beq.n	8010dac <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	8b5b      	ldrh	r3, [r3, #26]
 8010d9c:	f023 0308 	bic.w	r3, r3, #8
 8010da0:	b29a      	uxth	r2, r3
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010da6:	6878      	ldr	r0, [r7, #4]
 8010da8:	f7ff f824 	bl	800fdf4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	68db      	ldr	r3, [r3, #12]
 8010db0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d00a      	beq.n	8010dd0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010dba:	4b0e      	ldr	r3, [pc, #56]	@ (8010df4 <tcp_fasttmr+0xc4>)
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f000 f819 	bl	8010df8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8010df4 <tcp_fasttmr+0xc4>)
 8010dc8:	781b      	ldrb	r3, [r3, #0]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d000      	beq.n	8010dd0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010dce:	e7b8      	b.n	8010d42 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	607b      	str	r3, [r7, #4]
 8010dd4:	e002      	b.n	8010ddc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	68db      	ldr	r3, [r3, #12]
 8010dda:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d1b3      	bne.n	8010d4a <tcp_fasttmr+0x1a>
    }
  }
}
 8010de2:	bf00      	nop
 8010de4:	bf00      	nop
 8010de6:	3708      	adds	r7, #8
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}
 8010dec:	2400cdca 	.word	0x2400cdca
 8010df0:	2400cdc0 	.word	0x2400cdc0
 8010df4:	2400cdc8 	.word	0x2400cdc8

08010df8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010df8:	b590      	push	{r4, r7, lr}
 8010dfa:	b085      	sub	sp, #20
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d109      	bne.n	8010e1a <tcp_process_refused_data+0x22>
 8010e06:	4b37      	ldr	r3, [pc, #220]	@ (8010ee4 <tcp_process_refused_data+0xec>)
 8010e08:	f240 6209 	movw	r2, #1545	@ 0x609
 8010e0c:	4936      	ldr	r1, [pc, #216]	@ (8010ee8 <tcp_process_refused_data+0xf0>)
 8010e0e:	4837      	ldr	r0, [pc, #220]	@ (8010eec <tcp_process_refused_data+0xf4>)
 8010e10:	f006 f8a4 	bl	8016f5c <iprintf>
 8010e14:	f06f 030f 	mvn.w	r3, #15
 8010e18:	e060      	b.n	8010edc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010e1e:	7b5b      	ldrb	r3, [r3, #13]
 8010e20:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010e26:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d00b      	beq.n	8010e50 <tcp_process_refused_data+0x58>
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	6918      	ldr	r0, [r3, #16]
 8010e42:	2300      	movs	r3, #0
 8010e44:	68ba      	ldr	r2, [r7, #8]
 8010e46:	6879      	ldr	r1, [r7, #4]
 8010e48:	47a0      	blx	r4
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	73fb      	strb	r3, [r7, #15]
 8010e4e:	e007      	b.n	8010e60 <tcp_process_refused_data+0x68>
 8010e50:	2300      	movs	r3, #0
 8010e52:	68ba      	ldr	r2, [r7, #8]
 8010e54:	6879      	ldr	r1, [r7, #4]
 8010e56:	2000      	movs	r0, #0
 8010e58:	f000 f8a4 	bl	8010fa4 <tcp_recv_null>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d12a      	bne.n	8010ebe <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010e68:	7bbb      	ldrb	r3, [r7, #14]
 8010e6a:	f003 0320 	and.w	r3, r3, #32
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d033      	beq.n	8010eda <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e76:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8010e7a:	d005      	beq.n	8010e88 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e80:	3301      	adds	r3, #1
 8010e82:	b29a      	uxth	r2, r3
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d00b      	beq.n	8010eaa <tcp_process_refused_data+0xb2>
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6918      	ldr	r0, [r3, #16]
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	6879      	ldr	r1, [r7, #4]
 8010ea2:	47a0      	blx	r4
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	73fb      	strb	r3, [r7, #15]
 8010ea8:	e001      	b.n	8010eae <tcp_process_refused_data+0xb6>
 8010eaa:	2300      	movs	r3, #0
 8010eac:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010eb2:	f113 0f0d 	cmn.w	r3, #13
 8010eb6:	d110      	bne.n	8010eda <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8010eb8:	f06f 030c 	mvn.w	r3, #12
 8010ebc:	e00e      	b.n	8010edc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8010ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ec2:	f113 0f0d 	cmn.w	r3, #13
 8010ec6:	d102      	bne.n	8010ece <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010ec8:	f06f 030c 	mvn.w	r3, #12
 8010ecc:	e006      	b.n	8010edc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	68ba      	ldr	r2, [r7, #8]
 8010ed2:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8010ed4:	f06f 0304 	mvn.w	r3, #4
 8010ed8:	e000      	b.n	8010edc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8010eda:	2300      	movs	r3, #0
}
 8010edc:	4618      	mov	r0, r3
 8010ede:	3714      	adds	r7, #20
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd90      	pop	{r4, r7, pc}
 8010ee4:	08019ec4 	.word	0x08019ec4
 8010ee8:	0801a408 	.word	0x0801a408
 8010eec:	08019f3c 	.word	0x08019f3c

08010ef0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b084      	sub	sp, #16
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010ef8:	e007      	b.n	8010f0a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010f00:	6878      	ldr	r0, [r7, #4]
 8010f02:	f000 f80a 	bl	8010f1a <tcp_seg_free>
    seg = next;
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d1f4      	bne.n	8010efa <tcp_segs_free+0xa>
  }
}
 8010f10:	bf00      	nop
 8010f12:	bf00      	nop
 8010f14:	3710      	adds	r7, #16
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd80      	pop	{r7, pc}

08010f1a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010f1a:	b580      	push	{r7, lr}
 8010f1c:	b082      	sub	sp, #8
 8010f1e:	af00      	add	r7, sp, #0
 8010f20:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d00c      	beq.n	8010f42 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	685b      	ldr	r3, [r3, #4]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d004      	beq.n	8010f3a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	685b      	ldr	r3, [r3, #4]
 8010f34:	4618      	mov	r0, r3
 8010f36:	f7fe f8c5 	bl	800f0c4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010f3a:	6879      	ldr	r1, [r7, #4]
 8010f3c:	2003      	movs	r0, #3
 8010f3e:	f7fd f9ff 	bl	800e340 <memp_free>
  }
}
 8010f42:	bf00      	nop
 8010f44:	3708      	adds	r7, #8
 8010f46:	46bd      	mov	sp, r7
 8010f48:	bd80      	pop	{r7, pc}
	...

08010f4c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b084      	sub	sp, #16
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d106      	bne.n	8010f68 <tcp_seg_copy+0x1c>
 8010f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8010f98 <tcp_seg_copy+0x4c>)
 8010f5c:	f240 6282 	movw	r2, #1666	@ 0x682
 8010f60:	490e      	ldr	r1, [pc, #56]	@ (8010f9c <tcp_seg_copy+0x50>)
 8010f62:	480f      	ldr	r0, [pc, #60]	@ (8010fa0 <tcp_seg_copy+0x54>)
 8010f64:	f005 fffa 	bl	8016f5c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010f68:	2003      	movs	r0, #3
 8010f6a:	f7fd f973 	bl	800e254 <memp_malloc>
 8010f6e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d101      	bne.n	8010f7a <tcp_seg_copy+0x2e>
    return NULL;
 8010f76:	2300      	movs	r3, #0
 8010f78:	e00a      	b.n	8010f90 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010f7a:	2210      	movs	r2, #16
 8010f7c:	6879      	ldr	r1, [r7, #4]
 8010f7e:	68f8      	ldr	r0, [r7, #12]
 8010f80:	f006 f969 	bl	8017256 <memcpy>
  pbuf_ref(cseg->p);
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	685b      	ldr	r3, [r3, #4]
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f7fe f941 	bl	800f210 <pbuf_ref>
  return cseg;
 8010f8e:	68fb      	ldr	r3, [r7, #12]
}
 8010f90:	4618      	mov	r0, r3
 8010f92:	3710      	adds	r7, #16
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd80      	pop	{r7, pc}
 8010f98:	08019ec4 	.word	0x08019ec4
 8010f9c:	0801a44c 	.word	0x0801a44c
 8010fa0:	08019f3c 	.word	0x08019f3c

08010fa4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b084      	sub	sp, #16
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	60f8      	str	r0, [r7, #12]
 8010fac:	60b9      	str	r1, [r7, #8]
 8010fae:	607a      	str	r2, [r7, #4]
 8010fb0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010fb2:	68bb      	ldr	r3, [r7, #8]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d109      	bne.n	8010fcc <tcp_recv_null+0x28>
 8010fb8:	4b12      	ldr	r3, [pc, #72]	@ (8011004 <tcp_recv_null+0x60>)
 8010fba:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8010fbe:	4912      	ldr	r1, [pc, #72]	@ (8011008 <tcp_recv_null+0x64>)
 8010fc0:	4812      	ldr	r0, [pc, #72]	@ (801100c <tcp_recv_null+0x68>)
 8010fc2:	f005 ffcb 	bl	8016f5c <iprintf>
 8010fc6:	f06f 030f 	mvn.w	r3, #15
 8010fca:	e016      	b.n	8010ffa <tcp_recv_null+0x56>

  if (p != NULL) {
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d009      	beq.n	8010fe6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	891b      	ldrh	r3, [r3, #8]
 8010fd6:	4619      	mov	r1, r3
 8010fd8:	68b8      	ldr	r0, [r7, #8]
 8010fda:	f7ff f9b9 	bl	8010350 <tcp_recved>
    pbuf_free(p);
 8010fde:	6878      	ldr	r0, [r7, #4]
 8010fe0:	f7fe f870 	bl	800f0c4 <pbuf_free>
 8010fe4:	e008      	b.n	8010ff8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010fe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d104      	bne.n	8010ff8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010fee:	68b8      	ldr	r0, [r7, #8]
 8010ff0:	f7fe ff6a 	bl	800fec8 <tcp_close>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	e000      	b.n	8010ffa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010ff8:	2300      	movs	r3, #0
}
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	3710      	adds	r7, #16
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}
 8011002:	bf00      	nop
 8011004:	08019ec4 	.word	0x08019ec4
 8011008:	0801a468 	.word	0x0801a468
 801100c:	08019f3c 	.word	0x08019f3c

08011010 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b086      	sub	sp, #24
 8011014:	af00      	add	r7, sp, #0
 8011016:	4603      	mov	r3, r0
 8011018:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801101e:	2b00      	cmp	r3, #0
 8011020:	db01      	blt.n	8011026 <tcp_kill_prio+0x16>
 8011022:	79fb      	ldrb	r3, [r7, #7]
 8011024:	e000      	b.n	8011028 <tcp_kill_prio+0x18>
 8011026:	237f      	movs	r3, #127	@ 0x7f
 8011028:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801102a:	7afb      	ldrb	r3, [r7, #11]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d034      	beq.n	801109a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011030:	7afb      	ldrb	r3, [r7, #11]
 8011032:	3b01      	subs	r3, #1
 8011034:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8011036:	2300      	movs	r3, #0
 8011038:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801103a:	2300      	movs	r3, #0
 801103c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801103e:	4b19      	ldr	r3, [pc, #100]	@ (80110a4 <tcp_kill_prio+0x94>)
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	617b      	str	r3, [r7, #20]
 8011044:	e01f      	b.n	8011086 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8011046:	697b      	ldr	r3, [r7, #20]
 8011048:	7d5b      	ldrb	r3, [r3, #21]
 801104a:	7afa      	ldrb	r2, [r7, #11]
 801104c:	429a      	cmp	r2, r3
 801104e:	d80c      	bhi.n	801106a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011050:	697b      	ldr	r3, [r7, #20]
 8011052:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8011054:	7afa      	ldrb	r2, [r7, #11]
 8011056:	429a      	cmp	r2, r3
 8011058:	d112      	bne.n	8011080 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801105a:	4b13      	ldr	r3, [pc, #76]	@ (80110a8 <tcp_kill_prio+0x98>)
 801105c:	681a      	ldr	r2, [r3, #0]
 801105e:	697b      	ldr	r3, [r7, #20]
 8011060:	6a1b      	ldr	r3, [r3, #32]
 8011062:	1ad3      	subs	r3, r2, r3
 8011064:	68fa      	ldr	r2, [r7, #12]
 8011066:	429a      	cmp	r2, r3
 8011068:	d80a      	bhi.n	8011080 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801106a:	4b0f      	ldr	r3, [pc, #60]	@ (80110a8 <tcp_kill_prio+0x98>)
 801106c:	681a      	ldr	r2, [r3, #0]
 801106e:	697b      	ldr	r3, [r7, #20]
 8011070:	6a1b      	ldr	r3, [r3, #32]
 8011072:	1ad3      	subs	r3, r2, r3
 8011074:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8011076:	697b      	ldr	r3, [r7, #20]
 8011078:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801107a:	697b      	ldr	r3, [r7, #20]
 801107c:	7d5b      	ldrb	r3, [r3, #21]
 801107e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011080:	697b      	ldr	r3, [r7, #20]
 8011082:	68db      	ldr	r3, [r3, #12]
 8011084:	617b      	str	r3, [r7, #20]
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d1dc      	bne.n	8011046 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801108c:	693b      	ldr	r3, [r7, #16]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d004      	beq.n	801109c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011092:	6938      	ldr	r0, [r7, #16]
 8011094:	f7ff f85e 	bl	8010154 <tcp_abort>
 8011098:	e000      	b.n	801109c <tcp_kill_prio+0x8c>
    return;
 801109a:	bf00      	nop
  }
}
 801109c:	3718      	adds	r7, #24
 801109e:	46bd      	mov	sp, r7
 80110a0:	bd80      	pop	{r7, pc}
 80110a2:	bf00      	nop
 80110a4:	2400cdc0 	.word	0x2400cdc0
 80110a8:	2400cdb4 	.word	0x2400cdb4

080110ac <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b086      	sub	sp, #24
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	4603      	mov	r3, r0
 80110b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80110b6:	79fb      	ldrb	r3, [r7, #7]
 80110b8:	2b08      	cmp	r3, #8
 80110ba:	d009      	beq.n	80110d0 <tcp_kill_state+0x24>
 80110bc:	79fb      	ldrb	r3, [r7, #7]
 80110be:	2b09      	cmp	r3, #9
 80110c0:	d006      	beq.n	80110d0 <tcp_kill_state+0x24>
 80110c2:	4b1a      	ldr	r3, [pc, #104]	@ (801112c <tcp_kill_state+0x80>)
 80110c4:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80110c8:	4919      	ldr	r1, [pc, #100]	@ (8011130 <tcp_kill_state+0x84>)
 80110ca:	481a      	ldr	r0, [pc, #104]	@ (8011134 <tcp_kill_state+0x88>)
 80110cc:	f005 ff46 	bl	8016f5c <iprintf>

  inactivity = 0;
 80110d0:	2300      	movs	r3, #0
 80110d2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80110d4:	2300      	movs	r3, #0
 80110d6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80110d8:	4b17      	ldr	r3, [pc, #92]	@ (8011138 <tcp_kill_state+0x8c>)
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	617b      	str	r3, [r7, #20]
 80110de:	e017      	b.n	8011110 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80110e0:	697b      	ldr	r3, [r7, #20]
 80110e2:	7d1b      	ldrb	r3, [r3, #20]
 80110e4:	79fa      	ldrb	r2, [r7, #7]
 80110e6:	429a      	cmp	r2, r3
 80110e8:	d10f      	bne.n	801110a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80110ea:	4b14      	ldr	r3, [pc, #80]	@ (801113c <tcp_kill_state+0x90>)
 80110ec:	681a      	ldr	r2, [r3, #0]
 80110ee:	697b      	ldr	r3, [r7, #20]
 80110f0:	6a1b      	ldr	r3, [r3, #32]
 80110f2:	1ad3      	subs	r3, r2, r3
 80110f4:	68fa      	ldr	r2, [r7, #12]
 80110f6:	429a      	cmp	r2, r3
 80110f8:	d807      	bhi.n	801110a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80110fa:	4b10      	ldr	r3, [pc, #64]	@ (801113c <tcp_kill_state+0x90>)
 80110fc:	681a      	ldr	r2, [r3, #0]
 80110fe:	697b      	ldr	r3, [r7, #20]
 8011100:	6a1b      	ldr	r3, [r3, #32]
 8011102:	1ad3      	subs	r3, r2, r3
 8011104:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011106:	697b      	ldr	r3, [r7, #20]
 8011108:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801110a:	697b      	ldr	r3, [r7, #20]
 801110c:	68db      	ldr	r3, [r3, #12]
 801110e:	617b      	str	r3, [r7, #20]
 8011110:	697b      	ldr	r3, [r7, #20]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d1e4      	bne.n	80110e0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011116:	693b      	ldr	r3, [r7, #16]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d003      	beq.n	8011124 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801111c:	2100      	movs	r1, #0
 801111e:	6938      	ldr	r0, [r7, #16]
 8011120:	f7fe ff5a 	bl	800ffd8 <tcp_abandon>
  }
}
 8011124:	bf00      	nop
 8011126:	3718      	adds	r7, #24
 8011128:	46bd      	mov	sp, r7
 801112a:	bd80      	pop	{r7, pc}
 801112c:	08019ec4 	.word	0x08019ec4
 8011130:	0801a484 	.word	0x0801a484
 8011134:	08019f3c 	.word	0x08019f3c
 8011138:	2400cdc0 	.word	0x2400cdc0
 801113c:	2400cdb4 	.word	0x2400cdb4

08011140 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b084      	sub	sp, #16
 8011144:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011146:	2300      	movs	r3, #0
 8011148:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801114a:	2300      	movs	r3, #0
 801114c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801114e:	4b12      	ldr	r3, [pc, #72]	@ (8011198 <tcp_kill_timewait+0x58>)
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	60fb      	str	r3, [r7, #12]
 8011154:	e012      	b.n	801117c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011156:	4b11      	ldr	r3, [pc, #68]	@ (801119c <tcp_kill_timewait+0x5c>)
 8011158:	681a      	ldr	r2, [r3, #0]
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	6a1b      	ldr	r3, [r3, #32]
 801115e:	1ad3      	subs	r3, r2, r3
 8011160:	687a      	ldr	r2, [r7, #4]
 8011162:	429a      	cmp	r2, r3
 8011164:	d807      	bhi.n	8011176 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8011166:	4b0d      	ldr	r3, [pc, #52]	@ (801119c <tcp_kill_timewait+0x5c>)
 8011168:	681a      	ldr	r2, [r3, #0]
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	6a1b      	ldr	r3, [r3, #32]
 801116e:	1ad3      	subs	r3, r2, r3
 8011170:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	68db      	ldr	r3, [r3, #12]
 801117a:	60fb      	str	r3, [r7, #12]
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d1e9      	bne.n	8011156 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8011182:	68bb      	ldr	r3, [r7, #8]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d002      	beq.n	801118e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011188:	68b8      	ldr	r0, [r7, #8]
 801118a:	f7fe ffe3 	bl	8010154 <tcp_abort>
  }
}
 801118e:	bf00      	nop
 8011190:	3710      	adds	r7, #16
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}
 8011196:	bf00      	nop
 8011198:	2400cdc4 	.word	0x2400cdc4
 801119c:	2400cdb4 	.word	0x2400cdb4

080111a0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b082      	sub	sp, #8
 80111a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80111a6:	4b10      	ldr	r3, [pc, #64]	@ (80111e8 <tcp_handle_closepend+0x48>)
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80111ac:	e014      	b.n	80111d8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	68db      	ldr	r3, [r3, #12]
 80111b2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	8b5b      	ldrh	r3, [r3, #26]
 80111b8:	f003 0308 	and.w	r3, r3, #8
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d009      	beq.n	80111d4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	8b5b      	ldrh	r3, [r3, #26]
 80111c4:	f023 0308 	bic.w	r3, r3, #8
 80111c8:	b29a      	uxth	r2, r3
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	f7fe fe10 	bl	800fdf4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80111d4:	683b      	ldr	r3, [r7, #0]
 80111d6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d1e7      	bne.n	80111ae <tcp_handle_closepend+0xe>
  }
}
 80111de:	bf00      	nop
 80111e0:	bf00      	nop
 80111e2:	3708      	adds	r7, #8
 80111e4:	46bd      	mov	sp, r7
 80111e6:	bd80      	pop	{r7, pc}
 80111e8:	2400cdc0 	.word	0x2400cdc0

080111ec <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b084      	sub	sp, #16
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	4603      	mov	r3, r0
 80111f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80111f6:	2001      	movs	r0, #1
 80111f8:	f7fd f82c 	bl	800e254 <memp_malloc>
 80111fc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d126      	bne.n	8011252 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011204:	f7ff ffcc 	bl	80111a0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011208:	f7ff ff9a 	bl	8011140 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801120c:	2001      	movs	r0, #1
 801120e:	f7fd f821 	bl	800e254 <memp_malloc>
 8011212:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d11b      	bne.n	8011252 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801121a:	2009      	movs	r0, #9
 801121c:	f7ff ff46 	bl	80110ac <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011220:	2001      	movs	r0, #1
 8011222:	f7fd f817 	bl	800e254 <memp_malloc>
 8011226:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d111      	bne.n	8011252 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801122e:	2008      	movs	r0, #8
 8011230:	f7ff ff3c 	bl	80110ac <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011234:	2001      	movs	r0, #1
 8011236:	f7fd f80d 	bl	800e254 <memp_malloc>
 801123a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d107      	bne.n	8011252 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011242:	79fb      	ldrb	r3, [r7, #7]
 8011244:	4618      	mov	r0, r3
 8011246:	f7ff fee3 	bl	8011010 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801124a:	2001      	movs	r0, #1
 801124c:	f7fd f802 	bl	800e254 <memp_malloc>
 8011250:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d03f      	beq.n	80112d8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011258:	229c      	movs	r2, #156	@ 0x9c
 801125a:	2100      	movs	r1, #0
 801125c:	68f8      	ldr	r0, [r7, #12]
 801125e:	f005 ff1e 	bl	801709e <memset>
    pcb->prio = prio;
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	79fa      	ldrb	r2, [r7, #7]
 8011266:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801126e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8011278:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	22ff      	movs	r2, #255	@ 0xff
 8011286:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801128e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	2206      	movs	r2, #6
 8011294:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	2206      	movs	r2, #6
 801129c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80112a4:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	2201      	movs	r2, #1
 80112aa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80112ae:	4b0d      	ldr	r3, [pc, #52]	@ (80112e4 <tcp_alloc+0xf8>)
 80112b0:	681a      	ldr	r2, [r3, #0]
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80112b6:	4b0c      	ldr	r3, [pc, #48]	@ (80112e8 <tcp_alloc+0xfc>)
 80112b8:	781a      	ldrb	r2, [r3, #0]
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80112c4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	4a08      	ldr	r2, [pc, #32]	@ (80112ec <tcp_alloc+0x100>)
 80112cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	4a07      	ldr	r2, [pc, #28]	@ (80112f0 <tcp_alloc+0x104>)
 80112d4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80112d8:	68fb      	ldr	r3, [r7, #12]
}
 80112da:	4618      	mov	r0, r3
 80112dc:	3710      	adds	r7, #16
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}
 80112e2:	bf00      	nop
 80112e4:	2400cdb4 	.word	0x2400cdb4
 80112e8:	2400cdca 	.word	0x2400cdca
 80112ec:	08010fa5 	.word	0x08010fa5
 80112f0:	006ddd00 	.word	0x006ddd00

080112f4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b084      	sub	sp, #16
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	4603      	mov	r3, r0
 80112fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80112fe:	2040      	movs	r0, #64	@ 0x40
 8011300:	f7ff ff74 	bl	80111ec <tcp_alloc>
 8011304:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8011306:	68fb      	ldr	r3, [r7, #12]
}
 8011308:	4618      	mov	r0, r3
 801130a:	3710      	adds	r7, #16
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}

08011310 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8011310:	b480      	push	{r7}
 8011312:	b083      	sub	sp, #12
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
 8011318:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d002      	beq.n	8011326 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	683a      	ldr	r2, [r7, #0]
 8011324:	611a      	str	r2, [r3, #16]
  }
}
 8011326:	bf00      	nop
 8011328:	370c      	adds	r7, #12
 801132a:	46bd      	mov	sp, r7
 801132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011330:	4770      	bx	lr
	...

08011334 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b082      	sub	sp, #8
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
 801133c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d00e      	beq.n	8011362 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	7d1b      	ldrb	r3, [r3, #20]
 8011348:	2b01      	cmp	r3, #1
 801134a:	d106      	bne.n	801135a <tcp_recv+0x26>
 801134c:	4b07      	ldr	r3, [pc, #28]	@ (801136c <tcp_recv+0x38>)
 801134e:	f240 72df 	movw	r2, #2015	@ 0x7df
 8011352:	4907      	ldr	r1, [pc, #28]	@ (8011370 <tcp_recv+0x3c>)
 8011354:	4807      	ldr	r0, [pc, #28]	@ (8011374 <tcp_recv+0x40>)
 8011356:	f005 fe01 	bl	8016f5c <iprintf>
    pcb->recv = recv;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	683a      	ldr	r2, [r7, #0]
 801135e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8011362:	bf00      	nop
 8011364:	3708      	adds	r7, #8
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}
 801136a:	bf00      	nop
 801136c:	08019ec4 	.word	0x08019ec4
 8011370:	0801a494 	.word	0x0801a494
 8011374:	08019f3c 	.word	0x08019f3c

08011378 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b082      	sub	sp, #8
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
 8011380:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d00e      	beq.n	80113a6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	7d1b      	ldrb	r3, [r3, #20]
 801138c:	2b01      	cmp	r3, #1
 801138e:	d106      	bne.n	801139e <tcp_sent+0x26>
 8011390:	4b07      	ldr	r3, [pc, #28]	@ (80113b0 <tcp_sent+0x38>)
 8011392:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8011396:	4907      	ldr	r1, [pc, #28]	@ (80113b4 <tcp_sent+0x3c>)
 8011398:	4807      	ldr	r0, [pc, #28]	@ (80113b8 <tcp_sent+0x40>)
 801139a:	f005 fddf 	bl	8016f5c <iprintf>
    pcb->sent = sent;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	683a      	ldr	r2, [r7, #0]
 80113a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 80113a6:	bf00      	nop
 80113a8:	3708      	adds	r7, #8
 80113aa:	46bd      	mov	sp, r7
 80113ac:	bd80      	pop	{r7, pc}
 80113ae:	bf00      	nop
 80113b0:	08019ec4 	.word	0x08019ec4
 80113b4:	0801a4bc 	.word	0x0801a4bc
 80113b8:	08019f3c 	.word	0x08019f3c

080113bc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b082      	sub	sp, #8
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
 80113c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d00e      	beq.n	80113ea <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	7d1b      	ldrb	r3, [r3, #20]
 80113d0:	2b01      	cmp	r3, #1
 80113d2:	d106      	bne.n	80113e2 <tcp_err+0x26>
 80113d4:	4b07      	ldr	r3, [pc, #28]	@ (80113f4 <tcp_err+0x38>)
 80113d6:	f640 020d 	movw	r2, #2061	@ 0x80d
 80113da:	4907      	ldr	r1, [pc, #28]	@ (80113f8 <tcp_err+0x3c>)
 80113dc:	4807      	ldr	r0, [pc, #28]	@ (80113fc <tcp_err+0x40>)
 80113de:	f005 fdbd 	bl	8016f5c <iprintf>
    pcb->errf = err;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	683a      	ldr	r2, [r7, #0]
 80113e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 80113ea:	bf00      	nop
 80113ec:	3708      	adds	r7, #8
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}
 80113f2:	bf00      	nop
 80113f4:	08019ec4 	.word	0x08019ec4
 80113f8:	0801a4e4 	.word	0x0801a4e4
 80113fc:	08019f3c 	.word	0x08019f3c

08011400 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8011400:	b480      	push	{r7}
 8011402:	b085      	sub	sp, #20
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
 8011408:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d008      	beq.n	8011422 <tcp_accept+0x22>
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	7d1b      	ldrb	r3, [r3, #20]
 8011414:	2b01      	cmp	r3, #1
 8011416:	d104      	bne.n	8011422 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	683a      	ldr	r2, [r7, #0]
 8011420:	619a      	str	r2, [r3, #24]
  }
}
 8011422:	bf00      	nop
 8011424:	3714      	adds	r7, #20
 8011426:	46bd      	mov	sp, r7
 8011428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142c:	4770      	bx	lr
	...

08011430 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b084      	sub	sp, #16
 8011434:	af00      	add	r7, sp, #0
 8011436:	60f8      	str	r0, [r7, #12]
 8011438:	60b9      	str	r1, [r7, #8]
 801143a:	4613      	mov	r3, r2
 801143c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d107      	bne.n	8011454 <tcp_poll+0x24>
 8011444:	4b0e      	ldr	r3, [pc, #56]	@ (8011480 <tcp_poll+0x50>)
 8011446:	f640 023d 	movw	r2, #2109	@ 0x83d
 801144a:	490e      	ldr	r1, [pc, #56]	@ (8011484 <tcp_poll+0x54>)
 801144c:	480e      	ldr	r0, [pc, #56]	@ (8011488 <tcp_poll+0x58>)
 801144e:	f005 fd85 	bl	8016f5c <iprintf>
 8011452:	e011      	b.n	8011478 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	7d1b      	ldrb	r3, [r3, #20]
 8011458:	2b01      	cmp	r3, #1
 801145a:	d106      	bne.n	801146a <tcp_poll+0x3a>
 801145c:	4b08      	ldr	r3, [pc, #32]	@ (8011480 <tcp_poll+0x50>)
 801145e:	f640 023e 	movw	r2, #2110	@ 0x83e
 8011462:	490a      	ldr	r1, [pc, #40]	@ (801148c <tcp_poll+0x5c>)
 8011464:	4808      	ldr	r0, [pc, #32]	@ (8011488 <tcp_poll+0x58>)
 8011466:	f005 fd79 	bl	8016f5c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	68ba      	ldr	r2, [r7, #8]
 801146e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	79fa      	ldrb	r2, [r7, #7]
 8011476:	775a      	strb	r2, [r3, #29]
}
 8011478:	3710      	adds	r7, #16
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}
 801147e:	bf00      	nop
 8011480:	08019ec4 	.word	0x08019ec4
 8011484:	0801a50c 	.word	0x0801a50c
 8011488:	08019f3c 	.word	0x08019f3c
 801148c:	0801a524 	.word	0x0801a524

08011490 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b082      	sub	sp, #8
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d107      	bne.n	80114ae <tcp_pcb_purge+0x1e>
 801149e:	4b21      	ldr	r3, [pc, #132]	@ (8011524 <tcp_pcb_purge+0x94>)
 80114a0:	f640 0251 	movw	r2, #2129	@ 0x851
 80114a4:	4920      	ldr	r1, [pc, #128]	@ (8011528 <tcp_pcb_purge+0x98>)
 80114a6:	4821      	ldr	r0, [pc, #132]	@ (801152c <tcp_pcb_purge+0x9c>)
 80114a8:	f005 fd58 	bl	8016f5c <iprintf>
 80114ac:	e037      	b.n	801151e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	7d1b      	ldrb	r3, [r3, #20]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d033      	beq.n	801151e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80114ba:	2b0a      	cmp	r3, #10
 80114bc:	d02f      	beq.n	801151e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80114c2:	2b01      	cmp	r3, #1
 80114c4:	d02b      	beq.n	801151e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d007      	beq.n	80114de <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80114d2:	4618      	mov	r0, r3
 80114d4:	f7fd fdf6 	bl	800f0c4 <pbuf_free>
      pcb->refused_data = NULL;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	2200      	movs	r2, #0
 80114dc:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d002      	beq.n	80114ec <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f000 f986 	bl	80117f8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80114f2:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80114f8:	4618      	mov	r0, r3
 80114fa:	f7ff fcf9 	bl	8010ef0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011502:	4618      	mov	r0, r3
 8011504:	f7ff fcf4 	bl	8010ef0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	2200      	movs	r2, #0
 801150c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	2200      	movs	r2, #0
 801151a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801151e:	3708      	adds	r7, #8
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}
 8011524:	08019ec4 	.word	0x08019ec4
 8011528:	0801a544 	.word	0x0801a544
 801152c:	08019f3c 	.word	0x08019f3c

08011530 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b084      	sub	sp, #16
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
 8011538:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801153a:	683b      	ldr	r3, [r7, #0]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d106      	bne.n	801154e <tcp_pcb_remove+0x1e>
 8011540:	4b3e      	ldr	r3, [pc, #248]	@ (801163c <tcp_pcb_remove+0x10c>)
 8011542:	f640 0283 	movw	r2, #2179	@ 0x883
 8011546:	493e      	ldr	r1, [pc, #248]	@ (8011640 <tcp_pcb_remove+0x110>)
 8011548:	483e      	ldr	r0, [pc, #248]	@ (8011644 <tcp_pcb_remove+0x114>)
 801154a:	f005 fd07 	bl	8016f5c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d106      	bne.n	8011562 <tcp_pcb_remove+0x32>
 8011554:	4b39      	ldr	r3, [pc, #228]	@ (801163c <tcp_pcb_remove+0x10c>)
 8011556:	f640 0284 	movw	r2, #2180	@ 0x884
 801155a:	493b      	ldr	r1, [pc, #236]	@ (8011648 <tcp_pcb_remove+0x118>)
 801155c:	4839      	ldr	r0, [pc, #228]	@ (8011644 <tcp_pcb_remove+0x114>)
 801155e:	f005 fcfd 	bl	8016f5c <iprintf>

  TCP_RMV(pcblist, pcb);
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	683a      	ldr	r2, [r7, #0]
 8011568:	429a      	cmp	r2, r3
 801156a:	d105      	bne.n	8011578 <tcp_pcb_remove+0x48>
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	68da      	ldr	r2, [r3, #12]
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	601a      	str	r2, [r3, #0]
 8011576:	e013      	b.n	80115a0 <tcp_pcb_remove+0x70>
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	60fb      	str	r3, [r7, #12]
 801157e:	e00c      	b.n	801159a <tcp_pcb_remove+0x6a>
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	68db      	ldr	r3, [r3, #12]
 8011584:	683a      	ldr	r2, [r7, #0]
 8011586:	429a      	cmp	r2, r3
 8011588:	d104      	bne.n	8011594 <tcp_pcb_remove+0x64>
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	68da      	ldr	r2, [r3, #12]
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	60da      	str	r2, [r3, #12]
 8011592:	e005      	b.n	80115a0 <tcp_pcb_remove+0x70>
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	68db      	ldr	r3, [r3, #12]
 8011598:	60fb      	str	r3, [r7, #12]
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d1ef      	bne.n	8011580 <tcp_pcb_remove+0x50>
 80115a0:	683b      	ldr	r3, [r7, #0]
 80115a2:	2200      	movs	r2, #0
 80115a4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80115a6:	6838      	ldr	r0, [r7, #0]
 80115a8:	f7ff ff72 	bl	8011490 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80115ac:	683b      	ldr	r3, [r7, #0]
 80115ae:	7d1b      	ldrb	r3, [r3, #20]
 80115b0:	2b0a      	cmp	r3, #10
 80115b2:	d013      	beq.n	80115dc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80115b4:	683b      	ldr	r3, [r7, #0]
 80115b6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80115b8:	2b01      	cmp	r3, #1
 80115ba:	d00f      	beq.n	80115dc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	8b5b      	ldrh	r3, [r3, #26]
 80115c0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d009      	beq.n	80115dc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	8b5b      	ldrh	r3, [r3, #26]
 80115cc:	f043 0302 	orr.w	r3, r3, #2
 80115d0:	b29a      	uxth	r2, r3
 80115d2:	683b      	ldr	r3, [r7, #0]
 80115d4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80115d6:	6838      	ldr	r0, [r7, #0]
 80115d8:	f003 fbc0 	bl	8014d5c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80115dc:	683b      	ldr	r3, [r7, #0]
 80115de:	7d1b      	ldrb	r3, [r3, #20]
 80115e0:	2b01      	cmp	r3, #1
 80115e2:	d020      	beq.n	8011626 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80115e4:	683b      	ldr	r3, [r7, #0]
 80115e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d006      	beq.n	80115fa <tcp_pcb_remove+0xca>
 80115ec:	4b13      	ldr	r3, [pc, #76]	@ (801163c <tcp_pcb_remove+0x10c>)
 80115ee:	f640 0293 	movw	r2, #2195	@ 0x893
 80115f2:	4916      	ldr	r1, [pc, #88]	@ (801164c <tcp_pcb_remove+0x11c>)
 80115f4:	4813      	ldr	r0, [pc, #76]	@ (8011644 <tcp_pcb_remove+0x114>)
 80115f6:	f005 fcb1 	bl	8016f5c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80115fa:	683b      	ldr	r3, [r7, #0]
 80115fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d006      	beq.n	8011610 <tcp_pcb_remove+0xe0>
 8011602:	4b0e      	ldr	r3, [pc, #56]	@ (801163c <tcp_pcb_remove+0x10c>)
 8011604:	f640 0294 	movw	r2, #2196	@ 0x894
 8011608:	4911      	ldr	r1, [pc, #68]	@ (8011650 <tcp_pcb_remove+0x120>)
 801160a:	480e      	ldr	r0, [pc, #56]	@ (8011644 <tcp_pcb_remove+0x114>)
 801160c:	f005 fca6 	bl	8016f5c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011614:	2b00      	cmp	r3, #0
 8011616:	d006      	beq.n	8011626 <tcp_pcb_remove+0xf6>
 8011618:	4b08      	ldr	r3, [pc, #32]	@ (801163c <tcp_pcb_remove+0x10c>)
 801161a:	f640 0296 	movw	r2, #2198	@ 0x896
 801161e:	490d      	ldr	r1, [pc, #52]	@ (8011654 <tcp_pcb_remove+0x124>)
 8011620:	4808      	ldr	r0, [pc, #32]	@ (8011644 <tcp_pcb_remove+0x114>)
 8011622:	f005 fc9b 	bl	8016f5c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	2200      	movs	r2, #0
 801162a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801162c:	683b      	ldr	r3, [r7, #0]
 801162e:	2200      	movs	r2, #0
 8011630:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011632:	bf00      	nop
 8011634:	3710      	adds	r7, #16
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}
 801163a:	bf00      	nop
 801163c:	08019ec4 	.word	0x08019ec4
 8011640:	0801a560 	.word	0x0801a560
 8011644:	08019f3c 	.word	0x08019f3c
 8011648:	0801a57c 	.word	0x0801a57c
 801164c:	0801a59c 	.word	0x0801a59c
 8011650:	0801a5b4 	.word	0x0801a5b4
 8011654:	0801a5d0 	.word	0x0801a5d0

08011658 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b082      	sub	sp, #8
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d106      	bne.n	8011674 <tcp_next_iss+0x1c>
 8011666:	4b0a      	ldr	r3, [pc, #40]	@ (8011690 <tcp_next_iss+0x38>)
 8011668:	f640 02af 	movw	r2, #2223	@ 0x8af
 801166c:	4909      	ldr	r1, [pc, #36]	@ (8011694 <tcp_next_iss+0x3c>)
 801166e:	480a      	ldr	r0, [pc, #40]	@ (8011698 <tcp_next_iss+0x40>)
 8011670:	f005 fc74 	bl	8016f5c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011674:	4b09      	ldr	r3, [pc, #36]	@ (801169c <tcp_next_iss+0x44>)
 8011676:	681a      	ldr	r2, [r3, #0]
 8011678:	4b09      	ldr	r3, [pc, #36]	@ (80116a0 <tcp_next_iss+0x48>)
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	4413      	add	r3, r2
 801167e:	4a07      	ldr	r2, [pc, #28]	@ (801169c <tcp_next_iss+0x44>)
 8011680:	6013      	str	r3, [r2, #0]
  return iss;
 8011682:	4b06      	ldr	r3, [pc, #24]	@ (801169c <tcp_next_iss+0x44>)
 8011684:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011686:	4618      	mov	r0, r3
 8011688:	3708      	adds	r7, #8
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}
 801168e:	bf00      	nop
 8011690:	08019ec4 	.word	0x08019ec4
 8011694:	0801a5e8 	.word	0x0801a5e8
 8011698:	08019f3c 	.word	0x08019f3c
 801169c:	2400002c 	.word	0x2400002c
 80116a0:	2400cdb4 	.word	0x2400cdb4

080116a4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b086      	sub	sp, #24
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	4603      	mov	r3, r0
 80116ac:	60b9      	str	r1, [r7, #8]
 80116ae:	607a      	str	r2, [r7, #4]
 80116b0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d106      	bne.n	80116c6 <tcp_eff_send_mss_netif+0x22>
 80116b8:	4b14      	ldr	r3, [pc, #80]	@ (801170c <tcp_eff_send_mss_netif+0x68>)
 80116ba:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80116be:	4914      	ldr	r1, [pc, #80]	@ (8011710 <tcp_eff_send_mss_netif+0x6c>)
 80116c0:	4814      	ldr	r0, [pc, #80]	@ (8011714 <tcp_eff_send_mss_netif+0x70>)
 80116c2:	f005 fc4b 	bl	8016f5c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80116c6:	68bb      	ldr	r3, [r7, #8]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d101      	bne.n	80116d0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80116cc:	89fb      	ldrh	r3, [r7, #14]
 80116ce:	e019      	b.n	8011704 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80116d0:	68bb      	ldr	r3, [r7, #8]
 80116d2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80116d4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80116d6:	8afb      	ldrh	r3, [r7, #22]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d012      	beq.n	8011702 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80116dc:	2328      	movs	r3, #40	@ 0x28
 80116de:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80116e0:	8afa      	ldrh	r2, [r7, #22]
 80116e2:	8abb      	ldrh	r3, [r7, #20]
 80116e4:	429a      	cmp	r2, r3
 80116e6:	d904      	bls.n	80116f2 <tcp_eff_send_mss_netif+0x4e>
 80116e8:	8afa      	ldrh	r2, [r7, #22]
 80116ea:	8abb      	ldrh	r3, [r7, #20]
 80116ec:	1ad3      	subs	r3, r2, r3
 80116ee:	b29b      	uxth	r3, r3
 80116f0:	e000      	b.n	80116f4 <tcp_eff_send_mss_netif+0x50>
 80116f2:	2300      	movs	r3, #0
 80116f4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80116f6:	8a7a      	ldrh	r2, [r7, #18]
 80116f8:	89fb      	ldrh	r3, [r7, #14]
 80116fa:	4293      	cmp	r3, r2
 80116fc:	bf28      	it	cs
 80116fe:	4613      	movcs	r3, r2
 8011700:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011702:	89fb      	ldrh	r3, [r7, #14]
}
 8011704:	4618      	mov	r0, r3
 8011706:	3718      	adds	r7, #24
 8011708:	46bd      	mov	sp, r7
 801170a:	bd80      	pop	{r7, pc}
 801170c:	08019ec4 	.word	0x08019ec4
 8011710:	0801a604 	.word	0x0801a604
 8011714:	08019f3c 	.word	0x08019f3c

08011718 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b084      	sub	sp, #16
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
 8011720:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d119      	bne.n	8011760 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801172c:	4b10      	ldr	r3, [pc, #64]	@ (8011770 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801172e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8011732:	4910      	ldr	r1, [pc, #64]	@ (8011774 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011734:	4810      	ldr	r0, [pc, #64]	@ (8011778 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8011736:	f005 fc11 	bl	8016f5c <iprintf>

  while (pcb != NULL) {
 801173a:	e011      	b.n	8011760 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	681a      	ldr	r2, [r3, #0]
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	429a      	cmp	r2, r3
 8011746:	d108      	bne.n	801175a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	68db      	ldr	r3, [r3, #12]
 801174c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801174e:	68f8      	ldr	r0, [r7, #12]
 8011750:	f7fe fd00 	bl	8010154 <tcp_abort>
      pcb = next;
 8011754:	68bb      	ldr	r3, [r7, #8]
 8011756:	60fb      	str	r3, [r7, #12]
 8011758:	e002      	b.n	8011760 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	68db      	ldr	r3, [r3, #12]
 801175e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d1ea      	bne.n	801173c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8011766:	bf00      	nop
 8011768:	bf00      	nop
 801176a:	3710      	adds	r7, #16
 801176c:	46bd      	mov	sp, r7
 801176e:	bd80      	pop	{r7, pc}
 8011770:	08019ec4 	.word	0x08019ec4
 8011774:	0801a62c 	.word	0x0801a62c
 8011778:	08019f3c 	.word	0x08019f3c

0801177c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b084      	sub	sp, #16
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
 8011784:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d02a      	beq.n	80117e2 <tcp_netif_ip_addr_changed+0x66>
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d026      	beq.n	80117e2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011794:	4b15      	ldr	r3, [pc, #84]	@ (80117ec <tcp_netif_ip_addr_changed+0x70>)
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	4619      	mov	r1, r3
 801179a:	6878      	ldr	r0, [r7, #4]
 801179c:	f7ff ffbc 	bl	8011718 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80117a0:	4b13      	ldr	r3, [pc, #76]	@ (80117f0 <tcp_netif_ip_addr_changed+0x74>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	4619      	mov	r1, r3
 80117a6:	6878      	ldr	r0, [r7, #4]
 80117a8:	f7ff ffb6 	bl	8011718 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d017      	beq.n	80117e2 <tcp_netif_ip_addr_changed+0x66>
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d013      	beq.n	80117e2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80117ba:	4b0e      	ldr	r3, [pc, #56]	@ (80117f4 <tcp_netif_ip_addr_changed+0x78>)
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	60fb      	str	r3, [r7, #12]
 80117c0:	e00c      	b.n	80117dc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	681a      	ldr	r2, [r3, #0]
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	429a      	cmp	r2, r3
 80117cc:	d103      	bne.n	80117d6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	681a      	ldr	r2, [r3, #0]
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	68db      	ldr	r3, [r3, #12]
 80117da:	60fb      	str	r3, [r7, #12]
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d1ef      	bne.n	80117c2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80117e2:	bf00      	nop
 80117e4:	3710      	adds	r7, #16
 80117e6:	46bd      	mov	sp, r7
 80117e8:	bd80      	pop	{r7, pc}
 80117ea:	bf00      	nop
 80117ec:	2400cdc0 	.word	0x2400cdc0
 80117f0:	2400cdb8 	.word	0x2400cdb8
 80117f4:	2400cdbc 	.word	0x2400cdbc

080117f8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b082      	sub	sp, #8
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011804:	2b00      	cmp	r3, #0
 8011806:	d007      	beq.n	8011818 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801180c:	4618      	mov	r0, r3
 801180e:	f7ff fb6f 	bl	8010ef0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	2200      	movs	r2, #0
 8011816:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011818:	bf00      	nop
 801181a:	3708      	adds	r7, #8
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}

08011820 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011820:	b590      	push	{r4, r7, lr}
 8011822:	b08d      	sub	sp, #52	@ 0x34
 8011824:	af04      	add	r7, sp, #16
 8011826:	6078      	str	r0, [r7, #4]
 8011828:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d105      	bne.n	801183c <tcp_input+0x1c>
 8011830:	4b9b      	ldr	r3, [pc, #620]	@ (8011aa0 <tcp_input+0x280>)
 8011832:	2283      	movs	r2, #131	@ 0x83
 8011834:	499b      	ldr	r1, [pc, #620]	@ (8011aa4 <tcp_input+0x284>)
 8011836:	489c      	ldr	r0, [pc, #624]	@ (8011aa8 <tcp_input+0x288>)
 8011838:	f005 fb90 	bl	8016f5c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	685b      	ldr	r3, [r3, #4]
 8011840:	4a9a      	ldr	r2, [pc, #616]	@ (8011aac <tcp_input+0x28c>)
 8011842:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	895b      	ldrh	r3, [r3, #10]
 8011848:	2b13      	cmp	r3, #19
 801184a:	f240 83d1 	bls.w	8011ff0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801184e:	4b98      	ldr	r3, [pc, #608]	@ (8011ab0 <tcp_input+0x290>)
 8011850:	695b      	ldr	r3, [r3, #20]
 8011852:	4a97      	ldr	r2, [pc, #604]	@ (8011ab0 <tcp_input+0x290>)
 8011854:	6812      	ldr	r2, [r2, #0]
 8011856:	4611      	mov	r1, r2
 8011858:	4618      	mov	r0, r3
 801185a:	f7fb f9ed 	bl	800cc38 <ip4_addr_isbroadcast_u32>
 801185e:	4603      	mov	r3, r0
 8011860:	2b00      	cmp	r3, #0
 8011862:	f040 83c7 	bne.w	8011ff4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011866:	4b92      	ldr	r3, [pc, #584]	@ (8011ab0 <tcp_input+0x290>)
 8011868:	695b      	ldr	r3, [r3, #20]
 801186a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801186e:	2be0      	cmp	r3, #224	@ 0xe0
 8011870:	f000 83c0 	beq.w	8011ff4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8011874:	4b8d      	ldr	r3, [pc, #564]	@ (8011aac <tcp_input+0x28c>)
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	899b      	ldrh	r3, [r3, #12]
 801187a:	b29b      	uxth	r3, r3
 801187c:	4618      	mov	r0, r3
 801187e:	f7f9 fc6b 	bl	800b158 <lwip_htons>
 8011882:	4603      	mov	r3, r0
 8011884:	0b1b      	lsrs	r3, r3, #12
 8011886:	b29b      	uxth	r3, r3
 8011888:	b2db      	uxtb	r3, r3
 801188a:	009b      	lsls	r3, r3, #2
 801188c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801188e:	7cbb      	ldrb	r3, [r7, #18]
 8011890:	2b13      	cmp	r3, #19
 8011892:	f240 83b1 	bls.w	8011ff8 <tcp_input+0x7d8>
 8011896:	7cbb      	ldrb	r3, [r7, #18]
 8011898:	b29a      	uxth	r2, r3
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	891b      	ldrh	r3, [r3, #8]
 801189e:	429a      	cmp	r2, r3
 80118a0:	f200 83aa 	bhi.w	8011ff8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80118a4:	7cbb      	ldrb	r3, [r7, #18]
 80118a6:	b29b      	uxth	r3, r3
 80118a8:	3b14      	subs	r3, #20
 80118aa:	b29a      	uxth	r2, r3
 80118ac:	4b81      	ldr	r3, [pc, #516]	@ (8011ab4 <tcp_input+0x294>)
 80118ae:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80118b0:	4b81      	ldr	r3, [pc, #516]	@ (8011ab8 <tcp_input+0x298>)
 80118b2:	2200      	movs	r2, #0
 80118b4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	895a      	ldrh	r2, [r3, #10]
 80118ba:	7cbb      	ldrb	r3, [r7, #18]
 80118bc:	b29b      	uxth	r3, r3
 80118be:	429a      	cmp	r2, r3
 80118c0:	d309      	bcc.n	80118d6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80118c2:	4b7c      	ldr	r3, [pc, #496]	@ (8011ab4 <tcp_input+0x294>)
 80118c4:	881a      	ldrh	r2, [r3, #0]
 80118c6:	4b7d      	ldr	r3, [pc, #500]	@ (8011abc <tcp_input+0x29c>)
 80118c8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80118ca:	7cbb      	ldrb	r3, [r7, #18]
 80118cc:	4619      	mov	r1, r3
 80118ce:	6878      	ldr	r0, [r7, #4]
 80118d0:	f7fd fb72 	bl	800efb8 <pbuf_remove_header>
 80118d4:	e04e      	b.n	8011974 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d105      	bne.n	80118ea <tcp_input+0xca>
 80118de:	4b70      	ldr	r3, [pc, #448]	@ (8011aa0 <tcp_input+0x280>)
 80118e0:	22c2      	movs	r2, #194	@ 0xc2
 80118e2:	4977      	ldr	r1, [pc, #476]	@ (8011ac0 <tcp_input+0x2a0>)
 80118e4:	4870      	ldr	r0, [pc, #448]	@ (8011aa8 <tcp_input+0x288>)
 80118e6:	f005 fb39 	bl	8016f5c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80118ea:	2114      	movs	r1, #20
 80118ec:	6878      	ldr	r0, [r7, #4]
 80118ee:	f7fd fb63 	bl	800efb8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	895a      	ldrh	r2, [r3, #10]
 80118f6:	4b71      	ldr	r3, [pc, #452]	@ (8011abc <tcp_input+0x29c>)
 80118f8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80118fa:	4b6e      	ldr	r3, [pc, #440]	@ (8011ab4 <tcp_input+0x294>)
 80118fc:	881a      	ldrh	r2, [r3, #0]
 80118fe:	4b6f      	ldr	r3, [pc, #444]	@ (8011abc <tcp_input+0x29c>)
 8011900:	881b      	ldrh	r3, [r3, #0]
 8011902:	1ad3      	subs	r3, r2, r3
 8011904:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8011906:	4b6d      	ldr	r3, [pc, #436]	@ (8011abc <tcp_input+0x29c>)
 8011908:	881b      	ldrh	r3, [r3, #0]
 801190a:	4619      	mov	r1, r3
 801190c:	6878      	ldr	r0, [r7, #4]
 801190e:	f7fd fb53 	bl	800efb8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	895b      	ldrh	r3, [r3, #10]
 8011918:	8a3a      	ldrh	r2, [r7, #16]
 801191a:	429a      	cmp	r2, r3
 801191c:	f200 836e 	bhi.w	8011ffc <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	685b      	ldr	r3, [r3, #4]
 8011926:	4a64      	ldr	r2, [pc, #400]	@ (8011ab8 <tcp_input+0x298>)
 8011928:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	8a3a      	ldrh	r2, [r7, #16]
 8011930:	4611      	mov	r1, r2
 8011932:	4618      	mov	r0, r3
 8011934:	f7fd fb40 	bl	800efb8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	891a      	ldrh	r2, [r3, #8]
 801193c:	8a3b      	ldrh	r3, [r7, #16]
 801193e:	1ad3      	subs	r3, r2, r3
 8011940:	b29a      	uxth	r2, r3
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	895b      	ldrh	r3, [r3, #10]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d005      	beq.n	801195a <tcp_input+0x13a>
 801194e:	4b54      	ldr	r3, [pc, #336]	@ (8011aa0 <tcp_input+0x280>)
 8011950:	22df      	movs	r2, #223	@ 0xdf
 8011952:	495c      	ldr	r1, [pc, #368]	@ (8011ac4 <tcp_input+0x2a4>)
 8011954:	4854      	ldr	r0, [pc, #336]	@ (8011aa8 <tcp_input+0x288>)
 8011956:	f005 fb01 	bl	8016f5c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	891a      	ldrh	r2, [r3, #8]
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	891b      	ldrh	r3, [r3, #8]
 8011964:	429a      	cmp	r2, r3
 8011966:	d005      	beq.n	8011974 <tcp_input+0x154>
 8011968:	4b4d      	ldr	r3, [pc, #308]	@ (8011aa0 <tcp_input+0x280>)
 801196a:	22e0      	movs	r2, #224	@ 0xe0
 801196c:	4956      	ldr	r1, [pc, #344]	@ (8011ac8 <tcp_input+0x2a8>)
 801196e:	484e      	ldr	r0, [pc, #312]	@ (8011aa8 <tcp_input+0x288>)
 8011970:	f005 faf4 	bl	8016f5c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8011974:	4b4d      	ldr	r3, [pc, #308]	@ (8011aac <tcp_input+0x28c>)
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	881b      	ldrh	r3, [r3, #0]
 801197a:	b29b      	uxth	r3, r3
 801197c:	4a4b      	ldr	r2, [pc, #300]	@ (8011aac <tcp_input+0x28c>)
 801197e:	6814      	ldr	r4, [r2, #0]
 8011980:	4618      	mov	r0, r3
 8011982:	f7f9 fbe9 	bl	800b158 <lwip_htons>
 8011986:	4603      	mov	r3, r0
 8011988:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801198a:	4b48      	ldr	r3, [pc, #288]	@ (8011aac <tcp_input+0x28c>)
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	885b      	ldrh	r3, [r3, #2]
 8011990:	b29b      	uxth	r3, r3
 8011992:	4a46      	ldr	r2, [pc, #280]	@ (8011aac <tcp_input+0x28c>)
 8011994:	6814      	ldr	r4, [r2, #0]
 8011996:	4618      	mov	r0, r3
 8011998:	f7f9 fbde 	bl	800b158 <lwip_htons>
 801199c:	4603      	mov	r3, r0
 801199e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80119a0:	4b42      	ldr	r3, [pc, #264]	@ (8011aac <tcp_input+0x28c>)
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	685b      	ldr	r3, [r3, #4]
 80119a6:	4a41      	ldr	r2, [pc, #260]	@ (8011aac <tcp_input+0x28c>)
 80119a8:	6814      	ldr	r4, [r2, #0]
 80119aa:	4618      	mov	r0, r3
 80119ac:	f7f9 fbea 	bl	800b184 <lwip_htonl>
 80119b0:	4603      	mov	r3, r0
 80119b2:	6063      	str	r3, [r4, #4]
 80119b4:	6863      	ldr	r3, [r4, #4]
 80119b6:	4a45      	ldr	r2, [pc, #276]	@ (8011acc <tcp_input+0x2ac>)
 80119b8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80119ba:	4b3c      	ldr	r3, [pc, #240]	@ (8011aac <tcp_input+0x28c>)
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	689b      	ldr	r3, [r3, #8]
 80119c0:	4a3a      	ldr	r2, [pc, #232]	@ (8011aac <tcp_input+0x28c>)
 80119c2:	6814      	ldr	r4, [r2, #0]
 80119c4:	4618      	mov	r0, r3
 80119c6:	f7f9 fbdd 	bl	800b184 <lwip_htonl>
 80119ca:	4603      	mov	r3, r0
 80119cc:	60a3      	str	r3, [r4, #8]
 80119ce:	68a3      	ldr	r3, [r4, #8]
 80119d0:	4a3f      	ldr	r2, [pc, #252]	@ (8011ad0 <tcp_input+0x2b0>)
 80119d2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80119d4:	4b35      	ldr	r3, [pc, #212]	@ (8011aac <tcp_input+0x28c>)
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	89db      	ldrh	r3, [r3, #14]
 80119da:	b29b      	uxth	r3, r3
 80119dc:	4a33      	ldr	r2, [pc, #204]	@ (8011aac <tcp_input+0x28c>)
 80119de:	6814      	ldr	r4, [r2, #0]
 80119e0:	4618      	mov	r0, r3
 80119e2:	f7f9 fbb9 	bl	800b158 <lwip_htons>
 80119e6:	4603      	mov	r3, r0
 80119e8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80119ea:	4b30      	ldr	r3, [pc, #192]	@ (8011aac <tcp_input+0x28c>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	899b      	ldrh	r3, [r3, #12]
 80119f0:	b29b      	uxth	r3, r3
 80119f2:	4618      	mov	r0, r3
 80119f4:	f7f9 fbb0 	bl	800b158 <lwip_htons>
 80119f8:	4603      	mov	r3, r0
 80119fa:	b2db      	uxtb	r3, r3
 80119fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011a00:	b2da      	uxtb	r2, r3
 8011a02:	4b34      	ldr	r3, [pc, #208]	@ (8011ad4 <tcp_input+0x2b4>)
 8011a04:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	891a      	ldrh	r2, [r3, #8]
 8011a0a:	4b33      	ldr	r3, [pc, #204]	@ (8011ad8 <tcp_input+0x2b8>)
 8011a0c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8011a0e:	4b31      	ldr	r3, [pc, #196]	@ (8011ad4 <tcp_input+0x2b4>)
 8011a10:	781b      	ldrb	r3, [r3, #0]
 8011a12:	f003 0303 	and.w	r3, r3, #3
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d00c      	beq.n	8011a34 <tcp_input+0x214>
    tcplen++;
 8011a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8011ad8 <tcp_input+0x2b8>)
 8011a1c:	881b      	ldrh	r3, [r3, #0]
 8011a1e:	3301      	adds	r3, #1
 8011a20:	b29a      	uxth	r2, r3
 8011a22:	4b2d      	ldr	r3, [pc, #180]	@ (8011ad8 <tcp_input+0x2b8>)
 8011a24:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	891a      	ldrh	r2, [r3, #8]
 8011a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8011ad8 <tcp_input+0x2b8>)
 8011a2c:	881b      	ldrh	r3, [r3, #0]
 8011a2e:	429a      	cmp	r2, r3
 8011a30:	f200 82e6 	bhi.w	8012000 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011a34:	2300      	movs	r3, #0
 8011a36:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a38:	4b28      	ldr	r3, [pc, #160]	@ (8011adc <tcp_input+0x2bc>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	61fb      	str	r3, [r7, #28]
 8011a3e:	e09d      	b.n	8011b7c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011a40:	69fb      	ldr	r3, [r7, #28]
 8011a42:	7d1b      	ldrb	r3, [r3, #20]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d105      	bne.n	8011a54 <tcp_input+0x234>
 8011a48:	4b15      	ldr	r3, [pc, #84]	@ (8011aa0 <tcp_input+0x280>)
 8011a4a:	22fb      	movs	r2, #251	@ 0xfb
 8011a4c:	4924      	ldr	r1, [pc, #144]	@ (8011ae0 <tcp_input+0x2c0>)
 8011a4e:	4816      	ldr	r0, [pc, #88]	@ (8011aa8 <tcp_input+0x288>)
 8011a50:	f005 fa84 	bl	8016f5c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011a54:	69fb      	ldr	r3, [r7, #28]
 8011a56:	7d1b      	ldrb	r3, [r3, #20]
 8011a58:	2b0a      	cmp	r3, #10
 8011a5a:	d105      	bne.n	8011a68 <tcp_input+0x248>
 8011a5c:	4b10      	ldr	r3, [pc, #64]	@ (8011aa0 <tcp_input+0x280>)
 8011a5e:	22fc      	movs	r2, #252	@ 0xfc
 8011a60:	4920      	ldr	r1, [pc, #128]	@ (8011ae4 <tcp_input+0x2c4>)
 8011a62:	4811      	ldr	r0, [pc, #68]	@ (8011aa8 <tcp_input+0x288>)
 8011a64:	f005 fa7a 	bl	8016f5c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011a68:	69fb      	ldr	r3, [r7, #28]
 8011a6a:	7d1b      	ldrb	r3, [r3, #20]
 8011a6c:	2b01      	cmp	r3, #1
 8011a6e:	d105      	bne.n	8011a7c <tcp_input+0x25c>
 8011a70:	4b0b      	ldr	r3, [pc, #44]	@ (8011aa0 <tcp_input+0x280>)
 8011a72:	22fd      	movs	r2, #253	@ 0xfd
 8011a74:	491c      	ldr	r1, [pc, #112]	@ (8011ae8 <tcp_input+0x2c8>)
 8011a76:	480c      	ldr	r0, [pc, #48]	@ (8011aa8 <tcp_input+0x288>)
 8011a78:	f005 fa70 	bl	8016f5c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011a7c:	69fb      	ldr	r3, [r7, #28]
 8011a7e:	7a1b      	ldrb	r3, [r3, #8]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d033      	beq.n	8011aec <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011a84:	69fb      	ldr	r3, [r7, #28]
 8011a86:	7a1a      	ldrb	r2, [r3, #8]
 8011a88:	4b09      	ldr	r3, [pc, #36]	@ (8011ab0 <tcp_input+0x290>)
 8011a8a:	685b      	ldr	r3, [r3, #4]
 8011a8c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011a90:	3301      	adds	r3, #1
 8011a92:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011a94:	429a      	cmp	r2, r3
 8011a96:	d029      	beq.n	8011aec <tcp_input+0x2cc>
      prev = pcb;
 8011a98:	69fb      	ldr	r3, [r7, #28]
 8011a9a:	61bb      	str	r3, [r7, #24]
      continue;
 8011a9c:	e06b      	b.n	8011b76 <tcp_input+0x356>
 8011a9e:	bf00      	nop
 8011aa0:	0801a660 	.word	0x0801a660
 8011aa4:	0801a6c4 	.word	0x0801a6c4
 8011aa8:	0801a6dc 	.word	0x0801a6dc
 8011aac:	2400cddc 	.word	0x2400cddc
 8011ab0:	24009ca4 	.word	0x24009ca4
 8011ab4:	2400cde0 	.word	0x2400cde0
 8011ab8:	2400cde4 	.word	0x2400cde4
 8011abc:	2400cde2 	.word	0x2400cde2
 8011ac0:	0801a704 	.word	0x0801a704
 8011ac4:	0801a714 	.word	0x0801a714
 8011ac8:	0801a720 	.word	0x0801a720
 8011acc:	2400cdec 	.word	0x2400cdec
 8011ad0:	2400cdf0 	.word	0x2400cdf0
 8011ad4:	2400cdf8 	.word	0x2400cdf8
 8011ad8:	2400cdf6 	.word	0x2400cdf6
 8011adc:	2400cdc0 	.word	0x2400cdc0
 8011ae0:	0801a740 	.word	0x0801a740
 8011ae4:	0801a768 	.word	0x0801a768
 8011ae8:	0801a794 	.word	0x0801a794
    }

    if (pcb->remote_port == tcphdr->src &&
 8011aec:	69fb      	ldr	r3, [r7, #28]
 8011aee:	8b1a      	ldrh	r2, [r3, #24]
 8011af0:	4b72      	ldr	r3, [pc, #456]	@ (8011cbc <tcp_input+0x49c>)
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	881b      	ldrh	r3, [r3, #0]
 8011af6:	b29b      	uxth	r3, r3
 8011af8:	429a      	cmp	r2, r3
 8011afa:	d13a      	bne.n	8011b72 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8011afc:	69fb      	ldr	r3, [r7, #28]
 8011afe:	8ada      	ldrh	r2, [r3, #22]
 8011b00:	4b6e      	ldr	r3, [pc, #440]	@ (8011cbc <tcp_input+0x49c>)
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	885b      	ldrh	r3, [r3, #2]
 8011b06:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d132      	bne.n	8011b72 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011b0c:	69fb      	ldr	r3, [r7, #28]
 8011b0e:	685a      	ldr	r2, [r3, #4]
 8011b10:	4b6b      	ldr	r3, [pc, #428]	@ (8011cc0 <tcp_input+0x4a0>)
 8011b12:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011b14:	429a      	cmp	r2, r3
 8011b16:	d12c      	bne.n	8011b72 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011b18:	69fb      	ldr	r3, [r7, #28]
 8011b1a:	681a      	ldr	r2, [r3, #0]
 8011b1c:	4b68      	ldr	r3, [pc, #416]	@ (8011cc0 <tcp_input+0x4a0>)
 8011b1e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011b20:	429a      	cmp	r2, r3
 8011b22:	d126      	bne.n	8011b72 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011b24:	69fb      	ldr	r3, [r7, #28]
 8011b26:	68db      	ldr	r3, [r3, #12]
 8011b28:	69fa      	ldr	r2, [r7, #28]
 8011b2a:	429a      	cmp	r2, r3
 8011b2c:	d106      	bne.n	8011b3c <tcp_input+0x31c>
 8011b2e:	4b65      	ldr	r3, [pc, #404]	@ (8011cc4 <tcp_input+0x4a4>)
 8011b30:	f240 120d 	movw	r2, #269	@ 0x10d
 8011b34:	4964      	ldr	r1, [pc, #400]	@ (8011cc8 <tcp_input+0x4a8>)
 8011b36:	4865      	ldr	r0, [pc, #404]	@ (8011ccc <tcp_input+0x4ac>)
 8011b38:	f005 fa10 	bl	8016f5c <iprintf>
      if (prev != NULL) {
 8011b3c:	69bb      	ldr	r3, [r7, #24]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d00a      	beq.n	8011b58 <tcp_input+0x338>
        prev->next = pcb->next;
 8011b42:	69fb      	ldr	r3, [r7, #28]
 8011b44:	68da      	ldr	r2, [r3, #12]
 8011b46:	69bb      	ldr	r3, [r7, #24]
 8011b48:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011b4a:	4b61      	ldr	r3, [pc, #388]	@ (8011cd0 <tcp_input+0x4b0>)
 8011b4c:	681a      	ldr	r2, [r3, #0]
 8011b4e:	69fb      	ldr	r3, [r7, #28]
 8011b50:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8011b52:	4a5f      	ldr	r2, [pc, #380]	@ (8011cd0 <tcp_input+0x4b0>)
 8011b54:	69fb      	ldr	r3, [r7, #28]
 8011b56:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011b58:	69fb      	ldr	r3, [r7, #28]
 8011b5a:	68db      	ldr	r3, [r3, #12]
 8011b5c:	69fa      	ldr	r2, [r7, #28]
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	d111      	bne.n	8011b86 <tcp_input+0x366>
 8011b62:	4b58      	ldr	r3, [pc, #352]	@ (8011cc4 <tcp_input+0x4a4>)
 8011b64:	f240 1215 	movw	r2, #277	@ 0x115
 8011b68:	495a      	ldr	r1, [pc, #360]	@ (8011cd4 <tcp_input+0x4b4>)
 8011b6a:	4858      	ldr	r0, [pc, #352]	@ (8011ccc <tcp_input+0x4ac>)
 8011b6c:	f005 f9f6 	bl	8016f5c <iprintf>
      break;
 8011b70:	e009      	b.n	8011b86 <tcp_input+0x366>
    }
    prev = pcb;
 8011b72:	69fb      	ldr	r3, [r7, #28]
 8011b74:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b76:	69fb      	ldr	r3, [r7, #28]
 8011b78:	68db      	ldr	r3, [r3, #12]
 8011b7a:	61fb      	str	r3, [r7, #28]
 8011b7c:	69fb      	ldr	r3, [r7, #28]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	f47f af5e 	bne.w	8011a40 <tcp_input+0x220>
 8011b84:	e000      	b.n	8011b88 <tcp_input+0x368>
      break;
 8011b86:	bf00      	nop
  }

  if (pcb == NULL) {
 8011b88:	69fb      	ldr	r3, [r7, #28]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	f040 80aa 	bne.w	8011ce4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b90:	4b51      	ldr	r3, [pc, #324]	@ (8011cd8 <tcp_input+0x4b8>)
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	61fb      	str	r3, [r7, #28]
 8011b96:	e03f      	b.n	8011c18 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011b98:	69fb      	ldr	r3, [r7, #28]
 8011b9a:	7d1b      	ldrb	r3, [r3, #20]
 8011b9c:	2b0a      	cmp	r3, #10
 8011b9e:	d006      	beq.n	8011bae <tcp_input+0x38e>
 8011ba0:	4b48      	ldr	r3, [pc, #288]	@ (8011cc4 <tcp_input+0x4a4>)
 8011ba2:	f240 121f 	movw	r2, #287	@ 0x11f
 8011ba6:	494d      	ldr	r1, [pc, #308]	@ (8011cdc <tcp_input+0x4bc>)
 8011ba8:	4848      	ldr	r0, [pc, #288]	@ (8011ccc <tcp_input+0x4ac>)
 8011baa:	f005 f9d7 	bl	8016f5c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011bae:	69fb      	ldr	r3, [r7, #28]
 8011bb0:	7a1b      	ldrb	r3, [r3, #8]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d009      	beq.n	8011bca <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011bb6:	69fb      	ldr	r3, [r7, #28]
 8011bb8:	7a1a      	ldrb	r2, [r3, #8]
 8011bba:	4b41      	ldr	r3, [pc, #260]	@ (8011cc0 <tcp_input+0x4a0>)
 8011bbc:	685b      	ldr	r3, [r3, #4]
 8011bbe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011bc2:	3301      	adds	r3, #1
 8011bc4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	d122      	bne.n	8011c10 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8011bca:	69fb      	ldr	r3, [r7, #28]
 8011bcc:	8b1a      	ldrh	r2, [r3, #24]
 8011bce:	4b3b      	ldr	r3, [pc, #236]	@ (8011cbc <tcp_input+0x49c>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	881b      	ldrh	r3, [r3, #0]
 8011bd4:	b29b      	uxth	r3, r3
 8011bd6:	429a      	cmp	r2, r3
 8011bd8:	d11b      	bne.n	8011c12 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8011bda:	69fb      	ldr	r3, [r7, #28]
 8011bdc:	8ada      	ldrh	r2, [r3, #22]
 8011bde:	4b37      	ldr	r3, [pc, #220]	@ (8011cbc <tcp_input+0x49c>)
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	885b      	ldrh	r3, [r3, #2]
 8011be4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011be6:	429a      	cmp	r2, r3
 8011be8:	d113      	bne.n	8011c12 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011bea:	69fb      	ldr	r3, [r7, #28]
 8011bec:	685a      	ldr	r2, [r3, #4]
 8011bee:	4b34      	ldr	r3, [pc, #208]	@ (8011cc0 <tcp_input+0x4a0>)
 8011bf0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011bf2:	429a      	cmp	r2, r3
 8011bf4:	d10d      	bne.n	8011c12 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011bf6:	69fb      	ldr	r3, [r7, #28]
 8011bf8:	681a      	ldr	r2, [r3, #0]
 8011bfa:	4b31      	ldr	r3, [pc, #196]	@ (8011cc0 <tcp_input+0x4a0>)
 8011bfc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d107      	bne.n	8011c12 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8011c02:	69f8      	ldr	r0, [r7, #28]
 8011c04:	f000 fb56 	bl	80122b4 <tcp_timewait_input>
        }
        pbuf_free(p);
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f7fd fa5b 	bl	800f0c4 <pbuf_free>
        return;
 8011c0e:	e1fd      	b.n	801200c <tcp_input+0x7ec>
        continue;
 8011c10:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c12:	69fb      	ldr	r3, [r7, #28]
 8011c14:	68db      	ldr	r3, [r3, #12]
 8011c16:	61fb      	str	r3, [r7, #28]
 8011c18:	69fb      	ldr	r3, [r7, #28]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d1bc      	bne.n	8011b98 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8011c1e:	2300      	movs	r3, #0
 8011c20:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011c22:	4b2f      	ldr	r3, [pc, #188]	@ (8011ce0 <tcp_input+0x4c0>)
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	617b      	str	r3, [r7, #20]
 8011c28:	e02a      	b.n	8011c80 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011c2a:	697b      	ldr	r3, [r7, #20]
 8011c2c:	7a1b      	ldrb	r3, [r3, #8]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d00c      	beq.n	8011c4c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011c32:	697b      	ldr	r3, [r7, #20]
 8011c34:	7a1a      	ldrb	r2, [r3, #8]
 8011c36:	4b22      	ldr	r3, [pc, #136]	@ (8011cc0 <tcp_input+0x4a0>)
 8011c38:	685b      	ldr	r3, [r3, #4]
 8011c3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011c3e:	3301      	adds	r3, #1
 8011c40:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011c42:	429a      	cmp	r2, r3
 8011c44:	d002      	beq.n	8011c4c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8011c46:	697b      	ldr	r3, [r7, #20]
 8011c48:	61bb      	str	r3, [r7, #24]
        continue;
 8011c4a:	e016      	b.n	8011c7a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8011c4c:	697b      	ldr	r3, [r7, #20]
 8011c4e:	8ada      	ldrh	r2, [r3, #22]
 8011c50:	4b1a      	ldr	r3, [pc, #104]	@ (8011cbc <tcp_input+0x49c>)
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	885b      	ldrh	r3, [r3, #2]
 8011c56:	b29b      	uxth	r3, r3
 8011c58:	429a      	cmp	r2, r3
 8011c5a:	d10c      	bne.n	8011c76 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011c5c:	697b      	ldr	r3, [r7, #20]
 8011c5e:	681a      	ldr	r2, [r3, #0]
 8011c60:	4b17      	ldr	r3, [pc, #92]	@ (8011cc0 <tcp_input+0x4a0>)
 8011c62:	695b      	ldr	r3, [r3, #20]
 8011c64:	429a      	cmp	r2, r3
 8011c66:	d00f      	beq.n	8011c88 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011c68:	697b      	ldr	r3, [r7, #20]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d00d      	beq.n	8011c8a <tcp_input+0x46a>
 8011c6e:	697b      	ldr	r3, [r7, #20]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d009      	beq.n	8011c8a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8011c76:	697b      	ldr	r3, [r7, #20]
 8011c78:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011c7a:	697b      	ldr	r3, [r7, #20]
 8011c7c:	68db      	ldr	r3, [r3, #12]
 8011c7e:	617b      	str	r3, [r7, #20]
 8011c80:	697b      	ldr	r3, [r7, #20]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d1d1      	bne.n	8011c2a <tcp_input+0x40a>
 8011c86:	e000      	b.n	8011c8a <tcp_input+0x46a>
            break;
 8011c88:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011c8a:	697b      	ldr	r3, [r7, #20]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d029      	beq.n	8011ce4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011c90:	69bb      	ldr	r3, [r7, #24]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d00a      	beq.n	8011cac <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011c96:	697b      	ldr	r3, [r7, #20]
 8011c98:	68da      	ldr	r2, [r3, #12]
 8011c9a:	69bb      	ldr	r3, [r7, #24]
 8011c9c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011c9e:	4b10      	ldr	r3, [pc, #64]	@ (8011ce0 <tcp_input+0x4c0>)
 8011ca0:	681a      	ldr	r2, [r3, #0]
 8011ca2:	697b      	ldr	r3, [r7, #20]
 8011ca4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011ca6:	4a0e      	ldr	r2, [pc, #56]	@ (8011ce0 <tcp_input+0x4c0>)
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011cac:	6978      	ldr	r0, [r7, #20]
 8011cae:	f000 fa03 	bl	80120b8 <tcp_listen_input>
      }
      pbuf_free(p);
 8011cb2:	6878      	ldr	r0, [r7, #4]
 8011cb4:	f7fd fa06 	bl	800f0c4 <pbuf_free>
      return;
 8011cb8:	e1a8      	b.n	801200c <tcp_input+0x7ec>
 8011cba:	bf00      	nop
 8011cbc:	2400cddc 	.word	0x2400cddc
 8011cc0:	24009ca4 	.word	0x24009ca4
 8011cc4:	0801a660 	.word	0x0801a660
 8011cc8:	0801a7bc 	.word	0x0801a7bc
 8011ccc:	0801a6dc 	.word	0x0801a6dc
 8011cd0:	2400cdc0 	.word	0x2400cdc0
 8011cd4:	0801a7e8 	.word	0x0801a7e8
 8011cd8:	2400cdc4 	.word	0x2400cdc4
 8011cdc:	0801a814 	.word	0x0801a814
 8011ce0:	2400cdbc 	.word	0x2400cdbc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011ce4:	69fb      	ldr	r3, [r7, #28]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	f000 8158 	beq.w	8011f9c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8011cec:	4b95      	ldr	r3, [pc, #596]	@ (8011f44 <tcp_input+0x724>)
 8011cee:	2200      	movs	r2, #0
 8011cf0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	891a      	ldrh	r2, [r3, #8]
 8011cf6:	4b93      	ldr	r3, [pc, #588]	@ (8011f44 <tcp_input+0x724>)
 8011cf8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8011cfa:	4a92      	ldr	r2, [pc, #584]	@ (8011f44 <tcp_input+0x724>)
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011d00:	4b91      	ldr	r3, [pc, #580]	@ (8011f48 <tcp_input+0x728>)
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	4a8f      	ldr	r2, [pc, #572]	@ (8011f44 <tcp_input+0x724>)
 8011d06:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8011d08:	4b90      	ldr	r3, [pc, #576]	@ (8011f4c <tcp_input+0x72c>)
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011d0e:	4b90      	ldr	r3, [pc, #576]	@ (8011f50 <tcp_input+0x730>)
 8011d10:	2200      	movs	r2, #0
 8011d12:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011d14:	4b8f      	ldr	r3, [pc, #572]	@ (8011f54 <tcp_input+0x734>)
 8011d16:	2200      	movs	r2, #0
 8011d18:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8011d1a:	4b8f      	ldr	r3, [pc, #572]	@ (8011f58 <tcp_input+0x738>)
 8011d1c:	781b      	ldrb	r3, [r3, #0]
 8011d1e:	f003 0308 	and.w	r3, r3, #8
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d006      	beq.n	8011d34 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	7b5b      	ldrb	r3, [r3, #13]
 8011d2a:	f043 0301 	orr.w	r3, r3, #1
 8011d2e:	b2da      	uxtb	r2, r3
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011d34:	69fb      	ldr	r3, [r7, #28]
 8011d36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d017      	beq.n	8011d6c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011d3c:	69f8      	ldr	r0, [r7, #28]
 8011d3e:	f7ff f85b 	bl	8010df8 <tcp_process_refused_data>
 8011d42:	4603      	mov	r3, r0
 8011d44:	f113 0f0d 	cmn.w	r3, #13
 8011d48:	d007      	beq.n	8011d5a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011d4a:	69fb      	ldr	r3, [r7, #28]
 8011d4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d00c      	beq.n	8011d6c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011d52:	4b82      	ldr	r3, [pc, #520]	@ (8011f5c <tcp_input+0x73c>)
 8011d54:	881b      	ldrh	r3, [r3, #0]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d008      	beq.n	8011d6c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8011d5a:	69fb      	ldr	r3, [r7, #28]
 8011d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	f040 80e3 	bne.w	8011f2a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011d64:	69f8      	ldr	r0, [r7, #28]
 8011d66:	f003 fdff 	bl	8015968 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8011d6a:	e0de      	b.n	8011f2a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8011d6c:	4a7c      	ldr	r2, [pc, #496]	@ (8011f60 <tcp_input+0x740>)
 8011d6e:	69fb      	ldr	r3, [r7, #28]
 8011d70:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011d72:	69f8      	ldr	r0, [r7, #28]
 8011d74:	f000 fb18 	bl	80123a8 <tcp_process>
 8011d78:	4603      	mov	r3, r0
 8011d7a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011d7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011d80:	f113 0f0d 	cmn.w	r3, #13
 8011d84:	f000 80d3 	beq.w	8011f2e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8011d88:	4b71      	ldr	r3, [pc, #452]	@ (8011f50 <tcp_input+0x730>)
 8011d8a:	781b      	ldrb	r3, [r3, #0]
 8011d8c:	f003 0308 	and.w	r3, r3, #8
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d015      	beq.n	8011dc0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011d94:	69fb      	ldr	r3, [r7, #28]
 8011d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d008      	beq.n	8011db0 <tcp_input+0x590>
 8011d9e:	69fb      	ldr	r3, [r7, #28]
 8011da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011da4:	69fa      	ldr	r2, [r7, #28]
 8011da6:	6912      	ldr	r2, [r2, #16]
 8011da8:	f06f 010d 	mvn.w	r1, #13
 8011dac:	4610      	mov	r0, r2
 8011dae:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011db0:	69f9      	ldr	r1, [r7, #28]
 8011db2:	486c      	ldr	r0, [pc, #432]	@ (8011f64 <tcp_input+0x744>)
 8011db4:	f7ff fbbc 	bl	8011530 <tcp_pcb_remove>
        tcp_free(pcb);
 8011db8:	69f8      	ldr	r0, [r7, #28]
 8011dba:	f7fd fe87 	bl	800facc <tcp_free>
 8011dbe:	e0da      	b.n	8011f76 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011dc4:	4b63      	ldr	r3, [pc, #396]	@ (8011f54 <tcp_input+0x734>)
 8011dc6:	881b      	ldrh	r3, [r3, #0]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d01d      	beq.n	8011e08 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011dcc:	4b61      	ldr	r3, [pc, #388]	@ (8011f54 <tcp_input+0x734>)
 8011dce:	881b      	ldrh	r3, [r3, #0]
 8011dd0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011dd2:	69fb      	ldr	r3, [r7, #28]
 8011dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d00a      	beq.n	8011df2 <tcp_input+0x5d2>
 8011ddc:	69fb      	ldr	r3, [r7, #28]
 8011dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011de2:	69fa      	ldr	r2, [r7, #28]
 8011de4:	6910      	ldr	r0, [r2, #16]
 8011de6:	89fa      	ldrh	r2, [r7, #14]
 8011de8:	69f9      	ldr	r1, [r7, #28]
 8011dea:	4798      	blx	r3
 8011dec:	4603      	mov	r3, r0
 8011dee:	74fb      	strb	r3, [r7, #19]
 8011df0:	e001      	b.n	8011df6 <tcp_input+0x5d6>
 8011df2:	2300      	movs	r3, #0
 8011df4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011df6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011dfa:	f113 0f0d 	cmn.w	r3, #13
 8011dfe:	f000 8098 	beq.w	8011f32 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011e02:	4b54      	ldr	r3, [pc, #336]	@ (8011f54 <tcp_input+0x734>)
 8011e04:	2200      	movs	r2, #0
 8011e06:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011e08:	69f8      	ldr	r0, [r7, #28]
 8011e0a:	f000 f915 	bl	8012038 <tcp_input_delayed_close>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	f040 8090 	bne.w	8011f36 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011e16:	4b4d      	ldr	r3, [pc, #308]	@ (8011f4c <tcp_input+0x72c>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d041      	beq.n	8011ea2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011e1e:	69fb      	ldr	r3, [r7, #28]
 8011e20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d006      	beq.n	8011e34 <tcp_input+0x614>
 8011e26:	4b50      	ldr	r3, [pc, #320]	@ (8011f68 <tcp_input+0x748>)
 8011e28:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8011e2c:	494f      	ldr	r1, [pc, #316]	@ (8011f6c <tcp_input+0x74c>)
 8011e2e:	4850      	ldr	r0, [pc, #320]	@ (8011f70 <tcp_input+0x750>)
 8011e30:	f005 f894 	bl	8016f5c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011e34:	69fb      	ldr	r3, [r7, #28]
 8011e36:	8b5b      	ldrh	r3, [r3, #26]
 8011e38:	f003 0310 	and.w	r3, r3, #16
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d008      	beq.n	8011e52 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011e40:	4b42      	ldr	r3, [pc, #264]	@ (8011f4c <tcp_input+0x72c>)
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	4618      	mov	r0, r3
 8011e46:	f7fd f93d 	bl	800f0c4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8011e4a:	69f8      	ldr	r0, [r7, #28]
 8011e4c:	f7fe f982 	bl	8010154 <tcp_abort>
            goto aborted;
 8011e50:	e091      	b.n	8011f76 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011e52:	69fb      	ldr	r3, [r7, #28]
 8011e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d00c      	beq.n	8011e76 <tcp_input+0x656>
 8011e5c:	69fb      	ldr	r3, [r7, #28]
 8011e5e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011e62:	69fb      	ldr	r3, [r7, #28]
 8011e64:	6918      	ldr	r0, [r3, #16]
 8011e66:	4b39      	ldr	r3, [pc, #228]	@ (8011f4c <tcp_input+0x72c>)
 8011e68:	681a      	ldr	r2, [r3, #0]
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	69f9      	ldr	r1, [r7, #28]
 8011e6e:	47a0      	blx	r4
 8011e70:	4603      	mov	r3, r0
 8011e72:	74fb      	strb	r3, [r7, #19]
 8011e74:	e008      	b.n	8011e88 <tcp_input+0x668>
 8011e76:	4b35      	ldr	r3, [pc, #212]	@ (8011f4c <tcp_input+0x72c>)
 8011e78:	681a      	ldr	r2, [r3, #0]
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	69f9      	ldr	r1, [r7, #28]
 8011e7e:	2000      	movs	r0, #0
 8011e80:	f7ff f890 	bl	8010fa4 <tcp_recv_null>
 8011e84:	4603      	mov	r3, r0
 8011e86:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011e88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011e8c:	f113 0f0d 	cmn.w	r3, #13
 8011e90:	d053      	beq.n	8011f3a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011e92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d003      	beq.n	8011ea2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8011e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8011f4c <tcp_input+0x72c>)
 8011e9c:	681a      	ldr	r2, [r3, #0]
 8011e9e:	69fb      	ldr	r3, [r7, #28]
 8011ea0:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011ea2:	4b2b      	ldr	r3, [pc, #172]	@ (8011f50 <tcp_input+0x730>)
 8011ea4:	781b      	ldrb	r3, [r3, #0]
 8011ea6:	f003 0320 	and.w	r3, r3, #32
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d030      	beq.n	8011f10 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8011eae:	69fb      	ldr	r3, [r7, #28]
 8011eb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d009      	beq.n	8011eca <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011eb6:	69fb      	ldr	r3, [r7, #28]
 8011eb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011eba:	7b5a      	ldrb	r2, [r3, #13]
 8011ebc:	69fb      	ldr	r3, [r7, #28]
 8011ebe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011ec0:	f042 0220 	orr.w	r2, r2, #32
 8011ec4:	b2d2      	uxtb	r2, r2
 8011ec6:	735a      	strb	r2, [r3, #13]
 8011ec8:	e022      	b.n	8011f10 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011eca:	69fb      	ldr	r3, [r7, #28]
 8011ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011ece:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8011ed2:	d005      	beq.n	8011ee0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8011ed4:	69fb      	ldr	r3, [r7, #28]
 8011ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011ed8:	3301      	adds	r3, #1
 8011eda:	b29a      	uxth	r2, r3
 8011edc:	69fb      	ldr	r3, [r7, #28]
 8011ede:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011ee0:	69fb      	ldr	r3, [r7, #28]
 8011ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d00b      	beq.n	8011f02 <tcp_input+0x6e2>
 8011eea:	69fb      	ldr	r3, [r7, #28]
 8011eec:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011ef0:	69fb      	ldr	r3, [r7, #28]
 8011ef2:	6918      	ldr	r0, [r3, #16]
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	69f9      	ldr	r1, [r7, #28]
 8011efa:	47a0      	blx	r4
 8011efc:	4603      	mov	r3, r0
 8011efe:	74fb      	strb	r3, [r7, #19]
 8011f00:	e001      	b.n	8011f06 <tcp_input+0x6e6>
 8011f02:	2300      	movs	r3, #0
 8011f04:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011f06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011f0a:	f113 0f0d 	cmn.w	r3, #13
 8011f0e:	d016      	beq.n	8011f3e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011f10:	4b13      	ldr	r3, [pc, #76]	@ (8011f60 <tcp_input+0x740>)
 8011f12:	2200      	movs	r2, #0
 8011f14:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011f16:	69f8      	ldr	r0, [r7, #28]
 8011f18:	f000 f88e 	bl	8012038 <tcp_input_delayed_close>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d128      	bne.n	8011f74 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011f22:	69f8      	ldr	r0, [r7, #28]
 8011f24:	f002 ff1a 	bl	8014d5c <tcp_output>
 8011f28:	e025      	b.n	8011f76 <tcp_input+0x756>
        goto aborted;
 8011f2a:	bf00      	nop
 8011f2c:	e023      	b.n	8011f76 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011f2e:	bf00      	nop
 8011f30:	e021      	b.n	8011f76 <tcp_input+0x756>
              goto aborted;
 8011f32:	bf00      	nop
 8011f34:	e01f      	b.n	8011f76 <tcp_input+0x756>
          goto aborted;
 8011f36:	bf00      	nop
 8011f38:	e01d      	b.n	8011f76 <tcp_input+0x756>
            goto aborted;
 8011f3a:	bf00      	nop
 8011f3c:	e01b      	b.n	8011f76 <tcp_input+0x756>
              goto aborted;
 8011f3e:	bf00      	nop
 8011f40:	e019      	b.n	8011f76 <tcp_input+0x756>
 8011f42:	bf00      	nop
 8011f44:	2400cdcc 	.word	0x2400cdcc
 8011f48:	2400cddc 	.word	0x2400cddc
 8011f4c:	2400cdfc 	.word	0x2400cdfc
 8011f50:	2400cdf9 	.word	0x2400cdf9
 8011f54:	2400cdf4 	.word	0x2400cdf4
 8011f58:	2400cdf8 	.word	0x2400cdf8
 8011f5c:	2400cdf6 	.word	0x2400cdf6
 8011f60:	2400ce00 	.word	0x2400ce00
 8011f64:	2400cdc0 	.word	0x2400cdc0
 8011f68:	0801a660 	.word	0x0801a660
 8011f6c:	0801a844 	.word	0x0801a844
 8011f70:	0801a6dc 	.word	0x0801a6dc
          goto aborted;
 8011f74:	bf00      	nop
    tcp_input_pcb = NULL;
 8011f76:	4b27      	ldr	r3, [pc, #156]	@ (8012014 <tcp_input+0x7f4>)
 8011f78:	2200      	movs	r2, #0
 8011f7a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011f7c:	4b26      	ldr	r3, [pc, #152]	@ (8012018 <tcp_input+0x7f8>)
 8011f7e:	2200      	movs	r2, #0
 8011f80:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011f82:	4b26      	ldr	r3, [pc, #152]	@ (801201c <tcp_input+0x7fc>)
 8011f84:	685b      	ldr	r3, [r3, #4]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d03f      	beq.n	801200a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8011f8a:	4b24      	ldr	r3, [pc, #144]	@ (801201c <tcp_input+0x7fc>)
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f7fd f898 	bl	800f0c4 <pbuf_free>
      inseg.p = NULL;
 8011f94:	4b21      	ldr	r3, [pc, #132]	@ (801201c <tcp_input+0x7fc>)
 8011f96:	2200      	movs	r2, #0
 8011f98:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011f9a:	e036      	b.n	801200a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011f9c:	4b20      	ldr	r3, [pc, #128]	@ (8012020 <tcp_input+0x800>)
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	899b      	ldrh	r3, [r3, #12]
 8011fa2:	b29b      	uxth	r3, r3
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f7f9 f8d7 	bl	800b158 <lwip_htons>
 8011faa:	4603      	mov	r3, r0
 8011fac:	b2db      	uxtb	r3, r3
 8011fae:	f003 0304 	and.w	r3, r3, #4
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d118      	bne.n	8011fe8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8012024 <tcp_input+0x804>)
 8011fb8:	6819      	ldr	r1, [r3, #0]
 8011fba:	4b1b      	ldr	r3, [pc, #108]	@ (8012028 <tcp_input+0x808>)
 8011fbc:	881b      	ldrh	r3, [r3, #0]
 8011fbe:	461a      	mov	r2, r3
 8011fc0:	4b1a      	ldr	r3, [pc, #104]	@ (801202c <tcp_input+0x80c>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011fc6:	4b16      	ldr	r3, [pc, #88]	@ (8012020 <tcp_input+0x800>)
 8011fc8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011fca:	885b      	ldrh	r3, [r3, #2]
 8011fcc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011fce:	4a14      	ldr	r2, [pc, #80]	@ (8012020 <tcp_input+0x800>)
 8011fd0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011fd2:	8812      	ldrh	r2, [r2, #0]
 8011fd4:	b292      	uxth	r2, r2
 8011fd6:	9202      	str	r2, [sp, #8]
 8011fd8:	9301      	str	r3, [sp, #4]
 8011fda:	4b15      	ldr	r3, [pc, #84]	@ (8012030 <tcp_input+0x810>)
 8011fdc:	9300      	str	r3, [sp, #0]
 8011fde:	4b15      	ldr	r3, [pc, #84]	@ (8012034 <tcp_input+0x814>)
 8011fe0:	4602      	mov	r2, r0
 8011fe2:	2000      	movs	r0, #0
 8011fe4:	f003 fc6e 	bl	80158c4 <tcp_rst>
    pbuf_free(p);
 8011fe8:	6878      	ldr	r0, [r7, #4]
 8011fea:	f7fd f86b 	bl	800f0c4 <pbuf_free>
  return;
 8011fee:	e00c      	b.n	801200a <tcp_input+0x7ea>
    goto dropped;
 8011ff0:	bf00      	nop
 8011ff2:	e006      	b.n	8012002 <tcp_input+0x7e2>
    goto dropped;
 8011ff4:	bf00      	nop
 8011ff6:	e004      	b.n	8012002 <tcp_input+0x7e2>
    goto dropped;
 8011ff8:	bf00      	nop
 8011ffa:	e002      	b.n	8012002 <tcp_input+0x7e2>
      goto dropped;
 8011ffc:	bf00      	nop
 8011ffe:	e000      	b.n	8012002 <tcp_input+0x7e2>
      goto dropped;
 8012000:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f7fd f85e 	bl	800f0c4 <pbuf_free>
 8012008:	e000      	b.n	801200c <tcp_input+0x7ec>
  return;
 801200a:	bf00      	nop
}
 801200c:	3724      	adds	r7, #36	@ 0x24
 801200e:	46bd      	mov	sp, r7
 8012010:	bd90      	pop	{r4, r7, pc}
 8012012:	bf00      	nop
 8012014:	2400ce00 	.word	0x2400ce00
 8012018:	2400cdfc 	.word	0x2400cdfc
 801201c:	2400cdcc 	.word	0x2400cdcc
 8012020:	2400cddc 	.word	0x2400cddc
 8012024:	2400cdf0 	.word	0x2400cdf0
 8012028:	2400cdf6 	.word	0x2400cdf6
 801202c:	2400cdec 	.word	0x2400cdec
 8012030:	24009cb4 	.word	0x24009cb4
 8012034:	24009cb8 	.word	0x24009cb8

08012038 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012038:	b580      	push	{r7, lr}
 801203a:	b082      	sub	sp, #8
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d106      	bne.n	8012054 <tcp_input_delayed_close+0x1c>
 8012046:	4b17      	ldr	r3, [pc, #92]	@ (80120a4 <tcp_input_delayed_close+0x6c>)
 8012048:	f240 225a 	movw	r2, #602	@ 0x25a
 801204c:	4916      	ldr	r1, [pc, #88]	@ (80120a8 <tcp_input_delayed_close+0x70>)
 801204e:	4817      	ldr	r0, [pc, #92]	@ (80120ac <tcp_input_delayed_close+0x74>)
 8012050:	f004 ff84 	bl	8016f5c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012054:	4b16      	ldr	r3, [pc, #88]	@ (80120b0 <tcp_input_delayed_close+0x78>)
 8012056:	781b      	ldrb	r3, [r3, #0]
 8012058:	f003 0310 	and.w	r3, r3, #16
 801205c:	2b00      	cmp	r3, #0
 801205e:	d01c      	beq.n	801209a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	8b5b      	ldrh	r3, [r3, #26]
 8012064:	f003 0310 	and.w	r3, r3, #16
 8012068:	2b00      	cmp	r3, #0
 801206a:	d10d      	bne.n	8012088 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012072:	2b00      	cmp	r3, #0
 8012074:	d008      	beq.n	8012088 <tcp_input_delayed_close+0x50>
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801207c:	687a      	ldr	r2, [r7, #4]
 801207e:	6912      	ldr	r2, [r2, #16]
 8012080:	f06f 010e 	mvn.w	r1, #14
 8012084:	4610      	mov	r0, r2
 8012086:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012088:	6879      	ldr	r1, [r7, #4]
 801208a:	480a      	ldr	r0, [pc, #40]	@ (80120b4 <tcp_input_delayed_close+0x7c>)
 801208c:	f7ff fa50 	bl	8011530 <tcp_pcb_remove>
    tcp_free(pcb);
 8012090:	6878      	ldr	r0, [r7, #4]
 8012092:	f7fd fd1b 	bl	800facc <tcp_free>
    return 1;
 8012096:	2301      	movs	r3, #1
 8012098:	e000      	b.n	801209c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801209a:	2300      	movs	r3, #0
}
 801209c:	4618      	mov	r0, r3
 801209e:	3708      	adds	r7, #8
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}
 80120a4:	0801a660 	.word	0x0801a660
 80120a8:	0801a860 	.word	0x0801a860
 80120ac:	0801a6dc 	.word	0x0801a6dc
 80120b0:	2400cdf9 	.word	0x2400cdf9
 80120b4:	2400cdc0 	.word	0x2400cdc0

080120b8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80120b8:	b590      	push	{r4, r7, lr}
 80120ba:	b08b      	sub	sp, #44	@ 0x2c
 80120bc:	af04      	add	r7, sp, #16
 80120be:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80120c0:	4b6f      	ldr	r3, [pc, #444]	@ (8012280 <tcp_listen_input+0x1c8>)
 80120c2:	781b      	ldrb	r3, [r3, #0]
 80120c4:	f003 0304 	and.w	r3, r3, #4
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	f040 80d2 	bne.w	8012272 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d106      	bne.n	80120e2 <tcp_listen_input+0x2a>
 80120d4:	4b6b      	ldr	r3, [pc, #428]	@ (8012284 <tcp_listen_input+0x1cc>)
 80120d6:	f240 2281 	movw	r2, #641	@ 0x281
 80120da:	496b      	ldr	r1, [pc, #428]	@ (8012288 <tcp_listen_input+0x1d0>)
 80120dc:	486b      	ldr	r0, [pc, #428]	@ (801228c <tcp_listen_input+0x1d4>)
 80120de:	f004 ff3d 	bl	8016f5c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80120e2:	4b67      	ldr	r3, [pc, #412]	@ (8012280 <tcp_listen_input+0x1c8>)
 80120e4:	781b      	ldrb	r3, [r3, #0]
 80120e6:	f003 0310 	and.w	r3, r3, #16
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d019      	beq.n	8012122 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80120ee:	4b68      	ldr	r3, [pc, #416]	@ (8012290 <tcp_listen_input+0x1d8>)
 80120f0:	6819      	ldr	r1, [r3, #0]
 80120f2:	4b68      	ldr	r3, [pc, #416]	@ (8012294 <tcp_listen_input+0x1dc>)
 80120f4:	881b      	ldrh	r3, [r3, #0]
 80120f6:	461a      	mov	r2, r3
 80120f8:	4b67      	ldr	r3, [pc, #412]	@ (8012298 <tcp_listen_input+0x1e0>)
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80120fe:	4b67      	ldr	r3, [pc, #412]	@ (801229c <tcp_listen_input+0x1e4>)
 8012100:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012102:	885b      	ldrh	r3, [r3, #2]
 8012104:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012106:	4a65      	ldr	r2, [pc, #404]	@ (801229c <tcp_listen_input+0x1e4>)
 8012108:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801210a:	8812      	ldrh	r2, [r2, #0]
 801210c:	b292      	uxth	r2, r2
 801210e:	9202      	str	r2, [sp, #8]
 8012110:	9301      	str	r3, [sp, #4]
 8012112:	4b63      	ldr	r3, [pc, #396]	@ (80122a0 <tcp_listen_input+0x1e8>)
 8012114:	9300      	str	r3, [sp, #0]
 8012116:	4b63      	ldr	r3, [pc, #396]	@ (80122a4 <tcp_listen_input+0x1ec>)
 8012118:	4602      	mov	r2, r0
 801211a:	6878      	ldr	r0, [r7, #4]
 801211c:	f003 fbd2 	bl	80158c4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012120:	e0a9      	b.n	8012276 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8012122:	4b57      	ldr	r3, [pc, #348]	@ (8012280 <tcp_listen_input+0x1c8>)
 8012124:	781b      	ldrb	r3, [r3, #0]
 8012126:	f003 0302 	and.w	r3, r3, #2
 801212a:	2b00      	cmp	r3, #0
 801212c:	f000 80a3 	beq.w	8012276 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	7d5b      	ldrb	r3, [r3, #21]
 8012134:	4618      	mov	r0, r3
 8012136:	f7ff f859 	bl	80111ec <tcp_alloc>
 801213a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801213c:	697b      	ldr	r3, [r7, #20]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d111      	bne.n	8012166 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	699b      	ldr	r3, [r3, #24]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d00a      	beq.n	8012160 <tcp_listen_input+0xa8>
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	699b      	ldr	r3, [r3, #24]
 801214e:	687a      	ldr	r2, [r7, #4]
 8012150:	6910      	ldr	r0, [r2, #16]
 8012152:	f04f 32ff 	mov.w	r2, #4294967295
 8012156:	2100      	movs	r1, #0
 8012158:	4798      	blx	r3
 801215a:	4603      	mov	r3, r0
 801215c:	73bb      	strb	r3, [r7, #14]
      return;
 801215e:	e08b      	b.n	8012278 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012160:	23f0      	movs	r3, #240	@ 0xf0
 8012162:	73bb      	strb	r3, [r7, #14]
      return;
 8012164:	e088      	b.n	8012278 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012166:	4b50      	ldr	r3, [pc, #320]	@ (80122a8 <tcp_listen_input+0x1f0>)
 8012168:	695a      	ldr	r2, [r3, #20]
 801216a:	697b      	ldr	r3, [r7, #20]
 801216c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801216e:	4b4e      	ldr	r3, [pc, #312]	@ (80122a8 <tcp_listen_input+0x1f0>)
 8012170:	691a      	ldr	r2, [r3, #16]
 8012172:	697b      	ldr	r3, [r7, #20]
 8012174:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	8ada      	ldrh	r2, [r3, #22]
 801217a:	697b      	ldr	r3, [r7, #20]
 801217c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801217e:	4b47      	ldr	r3, [pc, #284]	@ (801229c <tcp_listen_input+0x1e4>)
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	881b      	ldrh	r3, [r3, #0]
 8012184:	b29a      	uxth	r2, r3
 8012186:	697b      	ldr	r3, [r7, #20]
 8012188:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801218a:	697b      	ldr	r3, [r7, #20]
 801218c:	2203      	movs	r2, #3
 801218e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012190:	4b41      	ldr	r3, [pc, #260]	@ (8012298 <tcp_listen_input+0x1e0>)
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	1c5a      	adds	r2, r3, #1
 8012196:	697b      	ldr	r3, [r7, #20]
 8012198:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801219a:	697b      	ldr	r3, [r7, #20]
 801219c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801219e:	697b      	ldr	r3, [r7, #20]
 80121a0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80121a2:	6978      	ldr	r0, [r7, #20]
 80121a4:	f7ff fa58 	bl	8011658 <tcp_next_iss>
 80121a8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80121aa:	697b      	ldr	r3, [r7, #20]
 80121ac:	693a      	ldr	r2, [r7, #16]
 80121ae:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80121b0:	697b      	ldr	r3, [r7, #20]
 80121b2:	693a      	ldr	r2, [r7, #16]
 80121b4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80121b6:	697b      	ldr	r3, [r7, #20]
 80121b8:	693a      	ldr	r2, [r7, #16]
 80121ba:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80121bc:	697b      	ldr	r3, [r7, #20]
 80121be:	693a      	ldr	r2, [r7, #16]
 80121c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80121c2:	4b35      	ldr	r3, [pc, #212]	@ (8012298 <tcp_listen_input+0x1e0>)
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	1e5a      	subs	r2, r3, #1
 80121c8:	697b      	ldr	r3, [r7, #20]
 80121ca:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	691a      	ldr	r2, [r3, #16]
 80121d0:	697b      	ldr	r3, [r7, #20]
 80121d2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	687a      	ldr	r2, [r7, #4]
 80121d8:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	7a5b      	ldrb	r3, [r3, #9]
 80121de:	f003 030c 	and.w	r3, r3, #12
 80121e2:	b2da      	uxtb	r2, r3
 80121e4:	697b      	ldr	r3, [r7, #20]
 80121e6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	7a1a      	ldrb	r2, [r3, #8]
 80121ec:	697b      	ldr	r3, [r7, #20]
 80121ee:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80121f0:	4b2e      	ldr	r3, [pc, #184]	@ (80122ac <tcp_listen_input+0x1f4>)
 80121f2:	681a      	ldr	r2, [r3, #0]
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	60da      	str	r2, [r3, #12]
 80121f8:	4a2c      	ldr	r2, [pc, #176]	@ (80122ac <tcp_listen_input+0x1f4>)
 80121fa:	697b      	ldr	r3, [r7, #20]
 80121fc:	6013      	str	r3, [r2, #0]
 80121fe:	f003 fedb 	bl	8015fb8 <tcp_timer_needed>
 8012202:	4b2b      	ldr	r3, [pc, #172]	@ (80122b0 <tcp_listen_input+0x1f8>)
 8012204:	2201      	movs	r2, #1
 8012206:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012208:	6978      	ldr	r0, [r7, #20]
 801220a:	f001 fd8b 	bl	8013d24 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801220e:	4b23      	ldr	r3, [pc, #140]	@ (801229c <tcp_listen_input+0x1e4>)
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	89db      	ldrh	r3, [r3, #14]
 8012214:	b29a      	uxth	r2, r3
 8012216:	697b      	ldr	r3, [r7, #20]
 8012218:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801221c:	697b      	ldr	r3, [r7, #20]
 801221e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012222:	697b      	ldr	r3, [r7, #20]
 8012224:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012228:	697b      	ldr	r3, [r7, #20]
 801222a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801222c:	697b      	ldr	r3, [r7, #20]
 801222e:	3304      	adds	r3, #4
 8012230:	4618      	mov	r0, r3
 8012232:	f7fa fa6b 	bl	800c70c <ip4_route>
 8012236:	4601      	mov	r1, r0
 8012238:	697b      	ldr	r3, [r7, #20]
 801223a:	3304      	adds	r3, #4
 801223c:	461a      	mov	r2, r3
 801223e:	4620      	mov	r0, r4
 8012240:	f7ff fa30 	bl	80116a4 <tcp_eff_send_mss_netif>
 8012244:	4603      	mov	r3, r0
 8012246:	461a      	mov	r2, r3
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801224c:	2112      	movs	r1, #18
 801224e:	6978      	ldr	r0, [r7, #20]
 8012250:	f002 fc96 	bl	8014b80 <tcp_enqueue_flags>
 8012254:	4603      	mov	r3, r0
 8012256:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012258:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d004      	beq.n	801226a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8012260:	2100      	movs	r1, #0
 8012262:	6978      	ldr	r0, [r7, #20]
 8012264:	f7fd feb8 	bl	800ffd8 <tcp_abandon>
      return;
 8012268:	e006      	b.n	8012278 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801226a:	6978      	ldr	r0, [r7, #20]
 801226c:	f002 fd76 	bl	8014d5c <tcp_output>
  return;
 8012270:	e001      	b.n	8012276 <tcp_listen_input+0x1be>
    return;
 8012272:	bf00      	nop
 8012274:	e000      	b.n	8012278 <tcp_listen_input+0x1c0>
  return;
 8012276:	bf00      	nop
}
 8012278:	371c      	adds	r7, #28
 801227a:	46bd      	mov	sp, r7
 801227c:	bd90      	pop	{r4, r7, pc}
 801227e:	bf00      	nop
 8012280:	2400cdf8 	.word	0x2400cdf8
 8012284:	0801a660 	.word	0x0801a660
 8012288:	0801a888 	.word	0x0801a888
 801228c:	0801a6dc 	.word	0x0801a6dc
 8012290:	2400cdf0 	.word	0x2400cdf0
 8012294:	2400cdf6 	.word	0x2400cdf6
 8012298:	2400cdec 	.word	0x2400cdec
 801229c:	2400cddc 	.word	0x2400cddc
 80122a0:	24009cb4 	.word	0x24009cb4
 80122a4:	24009cb8 	.word	0x24009cb8
 80122a8:	24009ca4 	.word	0x24009ca4
 80122ac:	2400cdc0 	.word	0x2400cdc0
 80122b0:	2400cdc8 	.word	0x2400cdc8

080122b4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b086      	sub	sp, #24
 80122b8:	af04      	add	r7, sp, #16
 80122ba:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80122bc:	4b2f      	ldr	r3, [pc, #188]	@ (801237c <tcp_timewait_input+0xc8>)
 80122be:	781b      	ldrb	r3, [r3, #0]
 80122c0:	f003 0304 	and.w	r3, r3, #4
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d153      	bne.n	8012370 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d106      	bne.n	80122dc <tcp_timewait_input+0x28>
 80122ce:	4b2c      	ldr	r3, [pc, #176]	@ (8012380 <tcp_timewait_input+0xcc>)
 80122d0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80122d4:	492b      	ldr	r1, [pc, #172]	@ (8012384 <tcp_timewait_input+0xd0>)
 80122d6:	482c      	ldr	r0, [pc, #176]	@ (8012388 <tcp_timewait_input+0xd4>)
 80122d8:	f004 fe40 	bl	8016f5c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80122dc:	4b27      	ldr	r3, [pc, #156]	@ (801237c <tcp_timewait_input+0xc8>)
 80122de:	781b      	ldrb	r3, [r3, #0]
 80122e0:	f003 0302 	and.w	r3, r3, #2
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d02a      	beq.n	801233e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80122e8:	4b28      	ldr	r3, [pc, #160]	@ (801238c <tcp_timewait_input+0xd8>)
 80122ea:	681a      	ldr	r2, [r3, #0]
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122f0:	1ad3      	subs	r3, r2, r3
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	db2d      	blt.n	8012352 <tcp_timewait_input+0x9e>
 80122f6:	4b25      	ldr	r3, [pc, #148]	@ (801238c <tcp_timewait_input+0xd8>)
 80122f8:	681a      	ldr	r2, [r3, #0]
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122fe:	6879      	ldr	r1, [r7, #4]
 8012300:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012302:	440b      	add	r3, r1
 8012304:	1ad3      	subs	r3, r2, r3
 8012306:	2b00      	cmp	r3, #0
 8012308:	dc23      	bgt.n	8012352 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801230a:	4b21      	ldr	r3, [pc, #132]	@ (8012390 <tcp_timewait_input+0xdc>)
 801230c:	6819      	ldr	r1, [r3, #0]
 801230e:	4b21      	ldr	r3, [pc, #132]	@ (8012394 <tcp_timewait_input+0xe0>)
 8012310:	881b      	ldrh	r3, [r3, #0]
 8012312:	461a      	mov	r2, r3
 8012314:	4b1d      	ldr	r3, [pc, #116]	@ (801238c <tcp_timewait_input+0xd8>)
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801231a:	4b1f      	ldr	r3, [pc, #124]	@ (8012398 <tcp_timewait_input+0xe4>)
 801231c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801231e:	885b      	ldrh	r3, [r3, #2]
 8012320:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012322:	4a1d      	ldr	r2, [pc, #116]	@ (8012398 <tcp_timewait_input+0xe4>)
 8012324:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012326:	8812      	ldrh	r2, [r2, #0]
 8012328:	b292      	uxth	r2, r2
 801232a:	9202      	str	r2, [sp, #8]
 801232c:	9301      	str	r3, [sp, #4]
 801232e:	4b1b      	ldr	r3, [pc, #108]	@ (801239c <tcp_timewait_input+0xe8>)
 8012330:	9300      	str	r3, [sp, #0]
 8012332:	4b1b      	ldr	r3, [pc, #108]	@ (80123a0 <tcp_timewait_input+0xec>)
 8012334:	4602      	mov	r2, r0
 8012336:	6878      	ldr	r0, [r7, #4]
 8012338:	f003 fac4 	bl	80158c4 <tcp_rst>
      return;
 801233c:	e01b      	b.n	8012376 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801233e:	4b0f      	ldr	r3, [pc, #60]	@ (801237c <tcp_timewait_input+0xc8>)
 8012340:	781b      	ldrb	r3, [r3, #0]
 8012342:	f003 0301 	and.w	r3, r3, #1
 8012346:	2b00      	cmp	r3, #0
 8012348:	d003      	beq.n	8012352 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801234a:	4b16      	ldr	r3, [pc, #88]	@ (80123a4 <tcp_timewait_input+0xf0>)
 801234c:	681a      	ldr	r2, [r3, #0]
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012352:	4b10      	ldr	r3, [pc, #64]	@ (8012394 <tcp_timewait_input+0xe0>)
 8012354:	881b      	ldrh	r3, [r3, #0]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d00c      	beq.n	8012374 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	8b5b      	ldrh	r3, [r3, #26]
 801235e:	f043 0302 	orr.w	r3, r3, #2
 8012362:	b29a      	uxth	r2, r3
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012368:	6878      	ldr	r0, [r7, #4]
 801236a:	f002 fcf7 	bl	8014d5c <tcp_output>
  }
  return;
 801236e:	e001      	b.n	8012374 <tcp_timewait_input+0xc0>
    return;
 8012370:	bf00      	nop
 8012372:	e000      	b.n	8012376 <tcp_timewait_input+0xc2>
  return;
 8012374:	bf00      	nop
}
 8012376:	3708      	adds	r7, #8
 8012378:	46bd      	mov	sp, r7
 801237a:	bd80      	pop	{r7, pc}
 801237c:	2400cdf8 	.word	0x2400cdf8
 8012380:	0801a660 	.word	0x0801a660
 8012384:	0801a8a8 	.word	0x0801a8a8
 8012388:	0801a6dc 	.word	0x0801a6dc
 801238c:	2400cdec 	.word	0x2400cdec
 8012390:	2400cdf0 	.word	0x2400cdf0
 8012394:	2400cdf6 	.word	0x2400cdf6
 8012398:	2400cddc 	.word	0x2400cddc
 801239c:	24009cb4 	.word	0x24009cb4
 80123a0:	24009cb8 	.word	0x24009cb8
 80123a4:	2400cdb4 	.word	0x2400cdb4

080123a8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80123a8:	b590      	push	{r4, r7, lr}
 80123aa:	b08d      	sub	sp, #52	@ 0x34
 80123ac:	af04      	add	r7, sp, #16
 80123ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80123b0:	2300      	movs	r3, #0
 80123b2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80123b4:	2300      	movs	r3, #0
 80123b6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d106      	bne.n	80123cc <tcp_process+0x24>
 80123be:	4b9d      	ldr	r3, [pc, #628]	@ (8012634 <tcp_process+0x28c>)
 80123c0:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80123c4:	499c      	ldr	r1, [pc, #624]	@ (8012638 <tcp_process+0x290>)
 80123c6:	489d      	ldr	r0, [pc, #628]	@ (801263c <tcp_process+0x294>)
 80123c8:	f004 fdc8 	bl	8016f5c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80123cc:	4b9c      	ldr	r3, [pc, #624]	@ (8012640 <tcp_process+0x298>)
 80123ce:	781b      	ldrb	r3, [r3, #0]
 80123d0:	f003 0304 	and.w	r3, r3, #4
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d04e      	beq.n	8012476 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	7d1b      	ldrb	r3, [r3, #20]
 80123dc:	2b02      	cmp	r3, #2
 80123de:	d108      	bne.n	80123f2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80123e4:	4b97      	ldr	r3, [pc, #604]	@ (8012644 <tcp_process+0x29c>)
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	429a      	cmp	r2, r3
 80123ea:	d123      	bne.n	8012434 <tcp_process+0x8c>
        acceptable = 1;
 80123ec:	2301      	movs	r3, #1
 80123ee:	76fb      	strb	r3, [r7, #27]
 80123f0:	e020      	b.n	8012434 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80123f6:	4b94      	ldr	r3, [pc, #592]	@ (8012648 <tcp_process+0x2a0>)
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	429a      	cmp	r2, r3
 80123fc:	d102      	bne.n	8012404 <tcp_process+0x5c>
        acceptable = 1;
 80123fe:	2301      	movs	r3, #1
 8012400:	76fb      	strb	r3, [r7, #27]
 8012402:	e017      	b.n	8012434 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012404:	4b90      	ldr	r3, [pc, #576]	@ (8012648 <tcp_process+0x2a0>)
 8012406:	681a      	ldr	r2, [r3, #0]
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801240c:	1ad3      	subs	r3, r2, r3
 801240e:	2b00      	cmp	r3, #0
 8012410:	db10      	blt.n	8012434 <tcp_process+0x8c>
 8012412:	4b8d      	ldr	r3, [pc, #564]	@ (8012648 <tcp_process+0x2a0>)
 8012414:	681a      	ldr	r2, [r3, #0]
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801241a:	6879      	ldr	r1, [r7, #4]
 801241c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801241e:	440b      	add	r3, r1
 8012420:	1ad3      	subs	r3, r2, r3
 8012422:	2b00      	cmp	r3, #0
 8012424:	dc06      	bgt.n	8012434 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	8b5b      	ldrh	r3, [r3, #26]
 801242a:	f043 0302 	orr.w	r3, r3, #2
 801242e:	b29a      	uxth	r2, r3
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8012434:	7efb      	ldrb	r3, [r7, #27]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d01b      	beq.n	8012472 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	7d1b      	ldrb	r3, [r3, #20]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d106      	bne.n	8012450 <tcp_process+0xa8>
 8012442:	4b7c      	ldr	r3, [pc, #496]	@ (8012634 <tcp_process+0x28c>)
 8012444:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8012448:	4980      	ldr	r1, [pc, #512]	@ (801264c <tcp_process+0x2a4>)
 801244a:	487c      	ldr	r0, [pc, #496]	@ (801263c <tcp_process+0x294>)
 801244c:	f004 fd86 	bl	8016f5c <iprintf>
      recv_flags |= TF_RESET;
 8012450:	4b7f      	ldr	r3, [pc, #508]	@ (8012650 <tcp_process+0x2a8>)
 8012452:	781b      	ldrb	r3, [r3, #0]
 8012454:	f043 0308 	orr.w	r3, r3, #8
 8012458:	b2da      	uxtb	r2, r3
 801245a:	4b7d      	ldr	r3, [pc, #500]	@ (8012650 <tcp_process+0x2a8>)
 801245c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	8b5b      	ldrh	r3, [r3, #26]
 8012462:	f023 0301 	bic.w	r3, r3, #1
 8012466:	b29a      	uxth	r2, r3
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801246c:	f06f 030d 	mvn.w	r3, #13
 8012470:	e37a      	b.n	8012b68 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8012472:	2300      	movs	r3, #0
 8012474:	e378      	b.n	8012b68 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012476:	4b72      	ldr	r3, [pc, #456]	@ (8012640 <tcp_process+0x298>)
 8012478:	781b      	ldrb	r3, [r3, #0]
 801247a:	f003 0302 	and.w	r3, r3, #2
 801247e:	2b00      	cmp	r3, #0
 8012480:	d010      	beq.n	80124a4 <tcp_process+0xfc>
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	7d1b      	ldrb	r3, [r3, #20]
 8012486:	2b02      	cmp	r3, #2
 8012488:	d00c      	beq.n	80124a4 <tcp_process+0xfc>
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	7d1b      	ldrb	r3, [r3, #20]
 801248e:	2b03      	cmp	r3, #3
 8012490:	d008      	beq.n	80124a4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	8b5b      	ldrh	r3, [r3, #26]
 8012496:	f043 0302 	orr.w	r3, r3, #2
 801249a:	b29a      	uxth	r2, r3
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80124a0:	2300      	movs	r3, #0
 80124a2:	e361      	b.n	8012b68 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	8b5b      	ldrh	r3, [r3, #26]
 80124a8:	f003 0310 	and.w	r3, r3, #16
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d103      	bne.n	80124b8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80124b0:	4b68      	ldr	r3, [pc, #416]	@ (8012654 <tcp_process+0x2ac>)
 80124b2:	681a      	ldr	r2, [r3, #0]
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2200      	movs	r2, #0
 80124bc:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	2200      	movs	r2, #0
 80124c4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80124c8:	6878      	ldr	r0, [r7, #4]
 80124ca:	f001 fc2b 	bl	8013d24 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	7d1b      	ldrb	r3, [r3, #20]
 80124d2:	3b02      	subs	r3, #2
 80124d4:	2b07      	cmp	r3, #7
 80124d6:	f200 8337 	bhi.w	8012b48 <tcp_process+0x7a0>
 80124da:	a201      	add	r2, pc, #4	@ (adr r2, 80124e0 <tcp_process+0x138>)
 80124dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124e0:	08012501 	.word	0x08012501
 80124e4:	08012731 	.word	0x08012731
 80124e8:	080128a9 	.word	0x080128a9
 80124ec:	080128d3 	.word	0x080128d3
 80124f0:	080129f7 	.word	0x080129f7
 80124f4:	080128a9 	.word	0x080128a9
 80124f8:	08012a83 	.word	0x08012a83
 80124fc:	08012b13 	.word	0x08012b13
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012500:	4b4f      	ldr	r3, [pc, #316]	@ (8012640 <tcp_process+0x298>)
 8012502:	781b      	ldrb	r3, [r3, #0]
 8012504:	f003 0310 	and.w	r3, r3, #16
 8012508:	2b00      	cmp	r3, #0
 801250a:	f000 80e4 	beq.w	80126d6 <tcp_process+0x32e>
 801250e:	4b4c      	ldr	r3, [pc, #304]	@ (8012640 <tcp_process+0x298>)
 8012510:	781b      	ldrb	r3, [r3, #0]
 8012512:	f003 0302 	and.w	r3, r3, #2
 8012516:	2b00      	cmp	r3, #0
 8012518:	f000 80dd 	beq.w	80126d6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012520:	1c5a      	adds	r2, r3, #1
 8012522:	4b48      	ldr	r3, [pc, #288]	@ (8012644 <tcp_process+0x29c>)
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	429a      	cmp	r2, r3
 8012528:	f040 80d5 	bne.w	80126d6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801252c:	4b46      	ldr	r3, [pc, #280]	@ (8012648 <tcp_process+0x2a0>)
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	1c5a      	adds	r2, r3, #1
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801253e:	4b41      	ldr	r3, [pc, #260]	@ (8012644 <tcp_process+0x29c>)
 8012540:	681a      	ldr	r2, [r3, #0]
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8012546:	4b44      	ldr	r3, [pc, #272]	@ (8012658 <tcp_process+0x2b0>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	89db      	ldrh	r3, [r3, #14]
 801254c:	b29a      	uxth	r2, r3
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012560:	4b39      	ldr	r3, [pc, #228]	@ (8012648 <tcp_process+0x2a0>)
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	1e5a      	subs	r2, r3, #1
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	2204      	movs	r2, #4
 801256e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	3304      	adds	r3, #4
 8012578:	4618      	mov	r0, r3
 801257a:	f7fa f8c7 	bl	800c70c <ip4_route>
 801257e:	4601      	mov	r1, r0
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	3304      	adds	r3, #4
 8012584:	461a      	mov	r2, r3
 8012586:	4620      	mov	r0, r4
 8012588:	f7ff f88c 	bl	80116a4 <tcp_eff_send_mss_netif>
 801258c:	4603      	mov	r3, r0
 801258e:	461a      	mov	r2, r3
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012598:	009a      	lsls	r2, r3, #2
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801259e:	005b      	lsls	r3, r3, #1
 80125a0:	f241 111c 	movw	r1, #4380	@ 0x111c
 80125a4:	428b      	cmp	r3, r1
 80125a6:	bf38      	it	cc
 80125a8:	460b      	movcc	r3, r1
 80125aa:	429a      	cmp	r2, r3
 80125ac:	d204      	bcs.n	80125b8 <tcp_process+0x210>
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80125b2:	009b      	lsls	r3, r3, #2
 80125b4:	b29b      	uxth	r3, r3
 80125b6:	e00d      	b.n	80125d4 <tcp_process+0x22c>
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80125bc:	005b      	lsls	r3, r3, #1
 80125be:	f241 121c 	movw	r2, #4380	@ 0x111c
 80125c2:	4293      	cmp	r3, r2
 80125c4:	d904      	bls.n	80125d0 <tcp_process+0x228>
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80125ca:	005b      	lsls	r3, r3, #1
 80125cc:	b29b      	uxth	r3, r3
 80125ce:	e001      	b.n	80125d4 <tcp_process+0x22c>
 80125d0:	f241 131c 	movw	r3, #4380	@ 0x111c
 80125d4:	687a      	ldr	r2, [r7, #4]
 80125d6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d106      	bne.n	80125f2 <tcp_process+0x24a>
 80125e4:	4b13      	ldr	r3, [pc, #76]	@ (8012634 <tcp_process+0x28c>)
 80125e6:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80125ea:	491c      	ldr	r1, [pc, #112]	@ (801265c <tcp_process+0x2b4>)
 80125ec:	4813      	ldr	r0, [pc, #76]	@ (801263c <tcp_process+0x294>)
 80125ee:	f004 fcb5 	bl	8016f5c <iprintf>
        --pcb->snd_queuelen;
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80125f8:	3b01      	subs	r3, #1
 80125fa:	b29a      	uxth	r2, r3
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012606:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012608:	69fb      	ldr	r3, [r7, #28]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d12a      	bne.n	8012664 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012612:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012614:	69fb      	ldr	r3, [r7, #28]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d106      	bne.n	8012628 <tcp_process+0x280>
 801261a:	4b06      	ldr	r3, [pc, #24]	@ (8012634 <tcp_process+0x28c>)
 801261c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8012620:	490f      	ldr	r1, [pc, #60]	@ (8012660 <tcp_process+0x2b8>)
 8012622:	4806      	ldr	r0, [pc, #24]	@ (801263c <tcp_process+0x294>)
 8012624:	f004 fc9a 	bl	8016f5c <iprintf>
          pcb->unsent = rseg->next;
 8012628:	69fb      	ldr	r3, [r7, #28]
 801262a:	681a      	ldr	r2, [r3, #0]
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8012630:	e01c      	b.n	801266c <tcp_process+0x2c4>
 8012632:	bf00      	nop
 8012634:	0801a660 	.word	0x0801a660
 8012638:	0801a8c8 	.word	0x0801a8c8
 801263c:	0801a6dc 	.word	0x0801a6dc
 8012640:	2400cdf8 	.word	0x2400cdf8
 8012644:	2400cdf0 	.word	0x2400cdf0
 8012648:	2400cdec 	.word	0x2400cdec
 801264c:	0801a8e4 	.word	0x0801a8e4
 8012650:	2400cdf9 	.word	0x2400cdf9
 8012654:	2400cdb4 	.word	0x2400cdb4
 8012658:	2400cddc 	.word	0x2400cddc
 801265c:	0801a904 	.word	0x0801a904
 8012660:	0801a91c 	.word	0x0801a91c
        } else {
          pcb->unacked = rseg->next;
 8012664:	69fb      	ldr	r3, [r7, #28]
 8012666:	681a      	ldr	r2, [r3, #0]
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 801266c:	69f8      	ldr	r0, [r7, #28]
 801266e:	f7fe fc54 	bl	8010f1a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012676:	2b00      	cmp	r3, #0
 8012678:	d104      	bne.n	8012684 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012680:	861a      	strh	r2, [r3, #48]	@ 0x30
 8012682:	e006      	b.n	8012692 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	2200      	movs	r2, #0
 8012688:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	2200      	movs	r2, #0
 801268e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012698:	2b00      	cmp	r3, #0
 801269a:	d00a      	beq.n	80126b2 <tcp_process+0x30a>
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80126a2:	687a      	ldr	r2, [r7, #4]
 80126a4:	6910      	ldr	r0, [r2, #16]
 80126a6:	2200      	movs	r2, #0
 80126a8:	6879      	ldr	r1, [r7, #4]
 80126aa:	4798      	blx	r3
 80126ac:	4603      	mov	r3, r0
 80126ae:	76bb      	strb	r3, [r7, #26]
 80126b0:	e001      	b.n	80126b6 <tcp_process+0x30e>
 80126b2:	2300      	movs	r3, #0
 80126b4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80126b6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80126ba:	f113 0f0d 	cmn.w	r3, #13
 80126be:	d102      	bne.n	80126c6 <tcp_process+0x31e>
          return ERR_ABRT;
 80126c0:	f06f 030c 	mvn.w	r3, #12
 80126c4:	e250      	b.n	8012b68 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	8b5b      	ldrh	r3, [r3, #26]
 80126ca:	f043 0302 	orr.w	r3, r3, #2
 80126ce:	b29a      	uxth	r2, r3
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80126d4:	e23a      	b.n	8012b4c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80126d6:	4b98      	ldr	r3, [pc, #608]	@ (8012938 <tcp_process+0x590>)
 80126d8:	781b      	ldrb	r3, [r3, #0]
 80126da:	f003 0310 	and.w	r3, r3, #16
 80126de:	2b00      	cmp	r3, #0
 80126e0:	f000 8234 	beq.w	8012b4c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80126e4:	4b95      	ldr	r3, [pc, #596]	@ (801293c <tcp_process+0x594>)
 80126e6:	6819      	ldr	r1, [r3, #0]
 80126e8:	4b95      	ldr	r3, [pc, #596]	@ (8012940 <tcp_process+0x598>)
 80126ea:	881b      	ldrh	r3, [r3, #0]
 80126ec:	461a      	mov	r2, r3
 80126ee:	4b95      	ldr	r3, [pc, #596]	@ (8012944 <tcp_process+0x59c>)
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80126f4:	4b94      	ldr	r3, [pc, #592]	@ (8012948 <tcp_process+0x5a0>)
 80126f6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80126f8:	885b      	ldrh	r3, [r3, #2]
 80126fa:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80126fc:	4a92      	ldr	r2, [pc, #584]	@ (8012948 <tcp_process+0x5a0>)
 80126fe:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012700:	8812      	ldrh	r2, [r2, #0]
 8012702:	b292      	uxth	r2, r2
 8012704:	9202      	str	r2, [sp, #8]
 8012706:	9301      	str	r3, [sp, #4]
 8012708:	4b90      	ldr	r3, [pc, #576]	@ (801294c <tcp_process+0x5a4>)
 801270a:	9300      	str	r3, [sp, #0]
 801270c:	4b90      	ldr	r3, [pc, #576]	@ (8012950 <tcp_process+0x5a8>)
 801270e:	4602      	mov	r2, r0
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	f003 f8d7 	bl	80158c4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801271c:	2b05      	cmp	r3, #5
 801271e:	f200 8215 	bhi.w	8012b4c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	2200      	movs	r2, #0
 8012726:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8012728:	6878      	ldr	r0, [r7, #4]
 801272a:	f002 fea3 	bl	8015474 <tcp_rexmit_rto>
      break;
 801272e:	e20d      	b.n	8012b4c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012730:	4b81      	ldr	r3, [pc, #516]	@ (8012938 <tcp_process+0x590>)
 8012732:	781b      	ldrb	r3, [r3, #0]
 8012734:	f003 0310 	and.w	r3, r3, #16
 8012738:	2b00      	cmp	r3, #0
 801273a:	f000 80a1 	beq.w	8012880 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801273e:	4b7f      	ldr	r3, [pc, #508]	@ (801293c <tcp_process+0x594>)
 8012740:	681a      	ldr	r2, [r3, #0]
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012746:	1ad3      	subs	r3, r2, r3
 8012748:	3b01      	subs	r3, #1
 801274a:	2b00      	cmp	r3, #0
 801274c:	db7e      	blt.n	801284c <tcp_process+0x4a4>
 801274e:	4b7b      	ldr	r3, [pc, #492]	@ (801293c <tcp_process+0x594>)
 8012750:	681a      	ldr	r2, [r3, #0]
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012756:	1ad3      	subs	r3, r2, r3
 8012758:	2b00      	cmp	r3, #0
 801275a:	dc77      	bgt.n	801284c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	2204      	movs	r2, #4
 8012760:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012766:	2b00      	cmp	r3, #0
 8012768:	d102      	bne.n	8012770 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801276a:	23fa      	movs	r3, #250	@ 0xfa
 801276c:	76bb      	strb	r3, [r7, #26]
 801276e:	e01d      	b.n	80127ac <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012774:	699b      	ldr	r3, [r3, #24]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d106      	bne.n	8012788 <tcp_process+0x3e0>
 801277a:	4b76      	ldr	r3, [pc, #472]	@ (8012954 <tcp_process+0x5ac>)
 801277c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8012780:	4975      	ldr	r1, [pc, #468]	@ (8012958 <tcp_process+0x5b0>)
 8012782:	4876      	ldr	r0, [pc, #472]	@ (801295c <tcp_process+0x5b4>)
 8012784:	f004 fbea 	bl	8016f5c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801278c:	699b      	ldr	r3, [r3, #24]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d00a      	beq.n	80127a8 <tcp_process+0x400>
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012796:	699b      	ldr	r3, [r3, #24]
 8012798:	687a      	ldr	r2, [r7, #4]
 801279a:	6910      	ldr	r0, [r2, #16]
 801279c:	2200      	movs	r2, #0
 801279e:	6879      	ldr	r1, [r7, #4]
 80127a0:	4798      	blx	r3
 80127a2:	4603      	mov	r3, r0
 80127a4:	76bb      	strb	r3, [r7, #26]
 80127a6:	e001      	b.n	80127ac <tcp_process+0x404>
 80127a8:	23f0      	movs	r3, #240	@ 0xf0
 80127aa:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80127ac:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d00a      	beq.n	80127ca <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80127b4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80127b8:	f113 0f0d 	cmn.w	r3, #13
 80127bc:	d002      	beq.n	80127c4 <tcp_process+0x41c>
              tcp_abort(pcb);
 80127be:	6878      	ldr	r0, [r7, #4]
 80127c0:	f7fd fcc8 	bl	8010154 <tcp_abort>
            }
            return ERR_ABRT;
 80127c4:	f06f 030c 	mvn.w	r3, #12
 80127c8:	e1ce      	b.n	8012b68 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80127ca:	6878      	ldr	r0, [r7, #4]
 80127cc:	f000 fae0 	bl	8012d90 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80127d0:	4b63      	ldr	r3, [pc, #396]	@ (8012960 <tcp_process+0x5b8>)
 80127d2:	881b      	ldrh	r3, [r3, #0]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d005      	beq.n	80127e4 <tcp_process+0x43c>
            recv_acked--;
 80127d8:	4b61      	ldr	r3, [pc, #388]	@ (8012960 <tcp_process+0x5b8>)
 80127da:	881b      	ldrh	r3, [r3, #0]
 80127dc:	3b01      	subs	r3, #1
 80127de:	b29a      	uxth	r2, r3
 80127e0:	4b5f      	ldr	r3, [pc, #380]	@ (8012960 <tcp_process+0x5b8>)
 80127e2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80127e8:	009a      	lsls	r2, r3, #2
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80127ee:	005b      	lsls	r3, r3, #1
 80127f0:	f241 111c 	movw	r1, #4380	@ 0x111c
 80127f4:	428b      	cmp	r3, r1
 80127f6:	bf38      	it	cc
 80127f8:	460b      	movcc	r3, r1
 80127fa:	429a      	cmp	r2, r3
 80127fc:	d204      	bcs.n	8012808 <tcp_process+0x460>
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012802:	009b      	lsls	r3, r3, #2
 8012804:	b29b      	uxth	r3, r3
 8012806:	e00d      	b.n	8012824 <tcp_process+0x47c>
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801280c:	005b      	lsls	r3, r3, #1
 801280e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8012812:	4293      	cmp	r3, r2
 8012814:	d904      	bls.n	8012820 <tcp_process+0x478>
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801281a:	005b      	lsls	r3, r3, #1
 801281c:	b29b      	uxth	r3, r3
 801281e:	e001      	b.n	8012824 <tcp_process+0x47c>
 8012820:	f241 131c 	movw	r3, #4380	@ 0x111c
 8012824:	687a      	ldr	r2, [r7, #4]
 8012826:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801282a:	4b4e      	ldr	r3, [pc, #312]	@ (8012964 <tcp_process+0x5bc>)
 801282c:	781b      	ldrb	r3, [r3, #0]
 801282e:	f003 0320 	and.w	r3, r3, #32
 8012832:	2b00      	cmp	r3, #0
 8012834:	d037      	beq.n	80128a6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	8b5b      	ldrh	r3, [r3, #26]
 801283a:	f043 0302 	orr.w	r3, r3, #2
 801283e:	b29a      	uxth	r2, r3
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	2207      	movs	r2, #7
 8012848:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801284a:	e02c      	b.n	80128a6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801284c:	4b3b      	ldr	r3, [pc, #236]	@ (801293c <tcp_process+0x594>)
 801284e:	6819      	ldr	r1, [r3, #0]
 8012850:	4b3b      	ldr	r3, [pc, #236]	@ (8012940 <tcp_process+0x598>)
 8012852:	881b      	ldrh	r3, [r3, #0]
 8012854:	461a      	mov	r2, r3
 8012856:	4b3b      	ldr	r3, [pc, #236]	@ (8012944 <tcp_process+0x59c>)
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801285c:	4b3a      	ldr	r3, [pc, #232]	@ (8012948 <tcp_process+0x5a0>)
 801285e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012860:	885b      	ldrh	r3, [r3, #2]
 8012862:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012864:	4a38      	ldr	r2, [pc, #224]	@ (8012948 <tcp_process+0x5a0>)
 8012866:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012868:	8812      	ldrh	r2, [r2, #0]
 801286a:	b292      	uxth	r2, r2
 801286c:	9202      	str	r2, [sp, #8]
 801286e:	9301      	str	r3, [sp, #4]
 8012870:	4b36      	ldr	r3, [pc, #216]	@ (801294c <tcp_process+0x5a4>)
 8012872:	9300      	str	r3, [sp, #0]
 8012874:	4b36      	ldr	r3, [pc, #216]	@ (8012950 <tcp_process+0x5a8>)
 8012876:	4602      	mov	r2, r0
 8012878:	6878      	ldr	r0, [r7, #4]
 801287a:	f003 f823 	bl	80158c4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801287e:	e167      	b.n	8012b50 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012880:	4b2d      	ldr	r3, [pc, #180]	@ (8012938 <tcp_process+0x590>)
 8012882:	781b      	ldrb	r3, [r3, #0]
 8012884:	f003 0302 	and.w	r3, r3, #2
 8012888:	2b00      	cmp	r3, #0
 801288a:	f000 8161 	beq.w	8012b50 <tcp_process+0x7a8>
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012892:	1e5a      	subs	r2, r3, #1
 8012894:	4b2b      	ldr	r3, [pc, #172]	@ (8012944 <tcp_process+0x59c>)
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	429a      	cmp	r2, r3
 801289a:	f040 8159 	bne.w	8012b50 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801289e:	6878      	ldr	r0, [r7, #4]
 80128a0:	f002 fe0a 	bl	80154b8 <tcp_rexmit>
      break;
 80128a4:	e154      	b.n	8012b50 <tcp_process+0x7a8>
 80128a6:	e153      	b.n	8012b50 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80128a8:	6878      	ldr	r0, [r7, #4]
 80128aa:	f000 fa71 	bl	8012d90 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80128ae:	4b2d      	ldr	r3, [pc, #180]	@ (8012964 <tcp_process+0x5bc>)
 80128b0:	781b      	ldrb	r3, [r3, #0]
 80128b2:	f003 0320 	and.w	r3, r3, #32
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	f000 814c 	beq.w	8012b54 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	8b5b      	ldrh	r3, [r3, #26]
 80128c0:	f043 0302 	orr.w	r3, r3, #2
 80128c4:	b29a      	uxth	r2, r3
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	2207      	movs	r2, #7
 80128ce:	751a      	strb	r2, [r3, #20]
      }
      break;
 80128d0:	e140      	b.n	8012b54 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80128d2:	6878      	ldr	r0, [r7, #4]
 80128d4:	f000 fa5c 	bl	8012d90 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80128d8:	4b22      	ldr	r3, [pc, #136]	@ (8012964 <tcp_process+0x5bc>)
 80128da:	781b      	ldrb	r3, [r3, #0]
 80128dc:	f003 0320 	and.w	r3, r3, #32
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d071      	beq.n	80129c8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80128e4:	4b14      	ldr	r3, [pc, #80]	@ (8012938 <tcp_process+0x590>)
 80128e6:	781b      	ldrb	r3, [r3, #0]
 80128e8:	f003 0310 	and.w	r3, r3, #16
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d060      	beq.n	80129b2 <tcp_process+0x60a>
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80128f4:	4b11      	ldr	r3, [pc, #68]	@ (801293c <tcp_process+0x594>)
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d15a      	bne.n	80129b2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012900:	2b00      	cmp	r3, #0
 8012902:	d156      	bne.n	80129b2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	8b5b      	ldrh	r3, [r3, #26]
 8012908:	f043 0302 	orr.w	r3, r3, #2
 801290c:	b29a      	uxth	r2, r3
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8012912:	6878      	ldr	r0, [r7, #4]
 8012914:	f7fe fdbc 	bl	8011490 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8012918:	4b13      	ldr	r3, [pc, #76]	@ (8012968 <tcp_process+0x5c0>)
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	687a      	ldr	r2, [r7, #4]
 801291e:	429a      	cmp	r2, r3
 8012920:	d105      	bne.n	801292e <tcp_process+0x586>
 8012922:	4b11      	ldr	r3, [pc, #68]	@ (8012968 <tcp_process+0x5c0>)
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	68db      	ldr	r3, [r3, #12]
 8012928:	4a0f      	ldr	r2, [pc, #60]	@ (8012968 <tcp_process+0x5c0>)
 801292a:	6013      	str	r3, [r2, #0]
 801292c:	e02e      	b.n	801298c <tcp_process+0x5e4>
 801292e:	4b0e      	ldr	r3, [pc, #56]	@ (8012968 <tcp_process+0x5c0>)
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	617b      	str	r3, [r7, #20]
 8012934:	e027      	b.n	8012986 <tcp_process+0x5de>
 8012936:	bf00      	nop
 8012938:	2400cdf8 	.word	0x2400cdf8
 801293c:	2400cdf0 	.word	0x2400cdf0
 8012940:	2400cdf6 	.word	0x2400cdf6
 8012944:	2400cdec 	.word	0x2400cdec
 8012948:	2400cddc 	.word	0x2400cddc
 801294c:	24009cb4 	.word	0x24009cb4
 8012950:	24009cb8 	.word	0x24009cb8
 8012954:	0801a660 	.word	0x0801a660
 8012958:	0801a930 	.word	0x0801a930
 801295c:	0801a6dc 	.word	0x0801a6dc
 8012960:	2400cdf4 	.word	0x2400cdf4
 8012964:	2400cdf9 	.word	0x2400cdf9
 8012968:	2400cdc0 	.word	0x2400cdc0
 801296c:	697b      	ldr	r3, [r7, #20]
 801296e:	68db      	ldr	r3, [r3, #12]
 8012970:	687a      	ldr	r2, [r7, #4]
 8012972:	429a      	cmp	r2, r3
 8012974:	d104      	bne.n	8012980 <tcp_process+0x5d8>
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	68da      	ldr	r2, [r3, #12]
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	60da      	str	r2, [r3, #12]
 801297e:	e005      	b.n	801298c <tcp_process+0x5e4>
 8012980:	697b      	ldr	r3, [r7, #20]
 8012982:	68db      	ldr	r3, [r3, #12]
 8012984:	617b      	str	r3, [r7, #20]
 8012986:	697b      	ldr	r3, [r7, #20]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d1ef      	bne.n	801296c <tcp_process+0x5c4>
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	2200      	movs	r2, #0
 8012990:	60da      	str	r2, [r3, #12]
 8012992:	4b77      	ldr	r3, [pc, #476]	@ (8012b70 <tcp_process+0x7c8>)
 8012994:	2201      	movs	r2, #1
 8012996:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	220a      	movs	r2, #10
 801299c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801299e:	4b75      	ldr	r3, [pc, #468]	@ (8012b74 <tcp_process+0x7cc>)
 80129a0:	681a      	ldr	r2, [r3, #0]
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	60da      	str	r2, [r3, #12]
 80129a6:	4a73      	ldr	r2, [pc, #460]	@ (8012b74 <tcp_process+0x7cc>)
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	6013      	str	r3, [r2, #0]
 80129ac:	f003 fb04 	bl	8015fb8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80129b0:	e0d2      	b.n	8012b58 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	8b5b      	ldrh	r3, [r3, #26]
 80129b6:	f043 0302 	orr.w	r3, r3, #2
 80129ba:	b29a      	uxth	r2, r3
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	2208      	movs	r2, #8
 80129c4:	751a      	strb	r2, [r3, #20]
      break;
 80129c6:	e0c7      	b.n	8012b58 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80129c8:	4b6b      	ldr	r3, [pc, #428]	@ (8012b78 <tcp_process+0x7d0>)
 80129ca:	781b      	ldrb	r3, [r3, #0]
 80129cc:	f003 0310 	and.w	r3, r3, #16
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	f000 80c1 	beq.w	8012b58 <tcp_process+0x7b0>
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80129da:	4b68      	ldr	r3, [pc, #416]	@ (8012b7c <tcp_process+0x7d4>)
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	429a      	cmp	r2, r3
 80129e0:	f040 80ba 	bne.w	8012b58 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	f040 80b5 	bne.w	8012b58 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	2206      	movs	r2, #6
 80129f2:	751a      	strb	r2, [r3, #20]
      break;
 80129f4:	e0b0      	b.n	8012b58 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80129f6:	6878      	ldr	r0, [r7, #4]
 80129f8:	f000 f9ca 	bl	8012d90 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80129fc:	4b60      	ldr	r3, [pc, #384]	@ (8012b80 <tcp_process+0x7d8>)
 80129fe:	781b      	ldrb	r3, [r3, #0]
 8012a00:	f003 0320 	and.w	r3, r3, #32
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	f000 80a9 	beq.w	8012b5c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	8b5b      	ldrh	r3, [r3, #26]
 8012a0e:	f043 0302 	orr.w	r3, r3, #2
 8012a12:	b29a      	uxth	r2, r3
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	f7fe fd39 	bl	8011490 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012a1e:	4b59      	ldr	r3, [pc, #356]	@ (8012b84 <tcp_process+0x7dc>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	687a      	ldr	r2, [r7, #4]
 8012a24:	429a      	cmp	r2, r3
 8012a26:	d105      	bne.n	8012a34 <tcp_process+0x68c>
 8012a28:	4b56      	ldr	r3, [pc, #344]	@ (8012b84 <tcp_process+0x7dc>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	68db      	ldr	r3, [r3, #12]
 8012a2e:	4a55      	ldr	r2, [pc, #340]	@ (8012b84 <tcp_process+0x7dc>)
 8012a30:	6013      	str	r3, [r2, #0]
 8012a32:	e013      	b.n	8012a5c <tcp_process+0x6b4>
 8012a34:	4b53      	ldr	r3, [pc, #332]	@ (8012b84 <tcp_process+0x7dc>)
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	613b      	str	r3, [r7, #16]
 8012a3a:	e00c      	b.n	8012a56 <tcp_process+0x6ae>
 8012a3c:	693b      	ldr	r3, [r7, #16]
 8012a3e:	68db      	ldr	r3, [r3, #12]
 8012a40:	687a      	ldr	r2, [r7, #4]
 8012a42:	429a      	cmp	r2, r3
 8012a44:	d104      	bne.n	8012a50 <tcp_process+0x6a8>
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	68da      	ldr	r2, [r3, #12]
 8012a4a:	693b      	ldr	r3, [r7, #16]
 8012a4c:	60da      	str	r2, [r3, #12]
 8012a4e:	e005      	b.n	8012a5c <tcp_process+0x6b4>
 8012a50:	693b      	ldr	r3, [r7, #16]
 8012a52:	68db      	ldr	r3, [r3, #12]
 8012a54:	613b      	str	r3, [r7, #16]
 8012a56:	693b      	ldr	r3, [r7, #16]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d1ef      	bne.n	8012a3c <tcp_process+0x694>
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	2200      	movs	r2, #0
 8012a60:	60da      	str	r2, [r3, #12]
 8012a62:	4b43      	ldr	r3, [pc, #268]	@ (8012b70 <tcp_process+0x7c8>)
 8012a64:	2201      	movs	r2, #1
 8012a66:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	220a      	movs	r2, #10
 8012a6c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012a6e:	4b41      	ldr	r3, [pc, #260]	@ (8012b74 <tcp_process+0x7cc>)
 8012a70:	681a      	ldr	r2, [r3, #0]
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	60da      	str	r2, [r3, #12]
 8012a76:	4a3f      	ldr	r2, [pc, #252]	@ (8012b74 <tcp_process+0x7cc>)
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	6013      	str	r3, [r2, #0]
 8012a7c:	f003 fa9c 	bl	8015fb8 <tcp_timer_needed>
      }
      break;
 8012a80:	e06c      	b.n	8012b5c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8012a82:	6878      	ldr	r0, [r7, #4]
 8012a84:	f000 f984 	bl	8012d90 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012a88:	4b3b      	ldr	r3, [pc, #236]	@ (8012b78 <tcp_process+0x7d0>)
 8012a8a:	781b      	ldrb	r3, [r3, #0]
 8012a8c:	f003 0310 	and.w	r3, r3, #16
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d065      	beq.n	8012b60 <tcp_process+0x7b8>
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012a98:	4b38      	ldr	r3, [pc, #224]	@ (8012b7c <tcp_process+0x7d4>)
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	429a      	cmp	r2, r3
 8012a9e:	d15f      	bne.n	8012b60 <tcp_process+0x7b8>
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d15b      	bne.n	8012b60 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8012aa8:	6878      	ldr	r0, [r7, #4]
 8012aaa:	f7fe fcf1 	bl	8011490 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012aae:	4b35      	ldr	r3, [pc, #212]	@ (8012b84 <tcp_process+0x7dc>)
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	687a      	ldr	r2, [r7, #4]
 8012ab4:	429a      	cmp	r2, r3
 8012ab6:	d105      	bne.n	8012ac4 <tcp_process+0x71c>
 8012ab8:	4b32      	ldr	r3, [pc, #200]	@ (8012b84 <tcp_process+0x7dc>)
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	68db      	ldr	r3, [r3, #12]
 8012abe:	4a31      	ldr	r2, [pc, #196]	@ (8012b84 <tcp_process+0x7dc>)
 8012ac0:	6013      	str	r3, [r2, #0]
 8012ac2:	e013      	b.n	8012aec <tcp_process+0x744>
 8012ac4:	4b2f      	ldr	r3, [pc, #188]	@ (8012b84 <tcp_process+0x7dc>)
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	60fb      	str	r3, [r7, #12]
 8012aca:	e00c      	b.n	8012ae6 <tcp_process+0x73e>
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	68db      	ldr	r3, [r3, #12]
 8012ad0:	687a      	ldr	r2, [r7, #4]
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	d104      	bne.n	8012ae0 <tcp_process+0x738>
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	68da      	ldr	r2, [r3, #12]
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	60da      	str	r2, [r3, #12]
 8012ade:	e005      	b.n	8012aec <tcp_process+0x744>
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	68db      	ldr	r3, [r3, #12]
 8012ae4:	60fb      	str	r3, [r7, #12]
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d1ef      	bne.n	8012acc <tcp_process+0x724>
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	2200      	movs	r2, #0
 8012af0:	60da      	str	r2, [r3, #12]
 8012af2:	4b1f      	ldr	r3, [pc, #124]	@ (8012b70 <tcp_process+0x7c8>)
 8012af4:	2201      	movs	r2, #1
 8012af6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	220a      	movs	r2, #10
 8012afc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012afe:	4b1d      	ldr	r3, [pc, #116]	@ (8012b74 <tcp_process+0x7cc>)
 8012b00:	681a      	ldr	r2, [r3, #0]
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	60da      	str	r2, [r3, #12]
 8012b06:	4a1b      	ldr	r2, [pc, #108]	@ (8012b74 <tcp_process+0x7cc>)
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	6013      	str	r3, [r2, #0]
 8012b0c:	f003 fa54 	bl	8015fb8 <tcp_timer_needed>
      }
      break;
 8012b10:	e026      	b.n	8012b60 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8012b12:	6878      	ldr	r0, [r7, #4]
 8012b14:	f000 f93c 	bl	8012d90 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012b18:	4b17      	ldr	r3, [pc, #92]	@ (8012b78 <tcp_process+0x7d0>)
 8012b1a:	781b      	ldrb	r3, [r3, #0]
 8012b1c:	f003 0310 	and.w	r3, r3, #16
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d01f      	beq.n	8012b64 <tcp_process+0x7bc>
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012b28:	4b14      	ldr	r3, [pc, #80]	@ (8012b7c <tcp_process+0x7d4>)
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	429a      	cmp	r2, r3
 8012b2e:	d119      	bne.n	8012b64 <tcp_process+0x7bc>
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d115      	bne.n	8012b64 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8012b38:	4b11      	ldr	r3, [pc, #68]	@ (8012b80 <tcp_process+0x7d8>)
 8012b3a:	781b      	ldrb	r3, [r3, #0]
 8012b3c:	f043 0310 	orr.w	r3, r3, #16
 8012b40:	b2da      	uxtb	r2, r3
 8012b42:	4b0f      	ldr	r3, [pc, #60]	@ (8012b80 <tcp_process+0x7d8>)
 8012b44:	701a      	strb	r2, [r3, #0]
      }
      break;
 8012b46:	e00d      	b.n	8012b64 <tcp_process+0x7bc>
    default:
      break;
 8012b48:	bf00      	nop
 8012b4a:	e00c      	b.n	8012b66 <tcp_process+0x7be>
      break;
 8012b4c:	bf00      	nop
 8012b4e:	e00a      	b.n	8012b66 <tcp_process+0x7be>
      break;
 8012b50:	bf00      	nop
 8012b52:	e008      	b.n	8012b66 <tcp_process+0x7be>
      break;
 8012b54:	bf00      	nop
 8012b56:	e006      	b.n	8012b66 <tcp_process+0x7be>
      break;
 8012b58:	bf00      	nop
 8012b5a:	e004      	b.n	8012b66 <tcp_process+0x7be>
      break;
 8012b5c:	bf00      	nop
 8012b5e:	e002      	b.n	8012b66 <tcp_process+0x7be>
      break;
 8012b60:	bf00      	nop
 8012b62:	e000      	b.n	8012b66 <tcp_process+0x7be>
      break;
 8012b64:	bf00      	nop
  }
  return ERR_OK;
 8012b66:	2300      	movs	r3, #0
}
 8012b68:	4618      	mov	r0, r3
 8012b6a:	3724      	adds	r7, #36	@ 0x24
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	bd90      	pop	{r4, r7, pc}
 8012b70:	2400cdc8 	.word	0x2400cdc8
 8012b74:	2400cdc4 	.word	0x2400cdc4
 8012b78:	2400cdf8 	.word	0x2400cdf8
 8012b7c:	2400cdf0 	.word	0x2400cdf0
 8012b80:	2400cdf9 	.word	0x2400cdf9
 8012b84:	2400cdc0 	.word	0x2400cdc0

08012b88 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012b88:	b590      	push	{r4, r7, lr}
 8012b8a:	b085      	sub	sp, #20
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
 8012b90:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d106      	bne.n	8012ba6 <tcp_oos_insert_segment+0x1e>
 8012b98:	4b3b      	ldr	r3, [pc, #236]	@ (8012c88 <tcp_oos_insert_segment+0x100>)
 8012b9a:	f240 421f 	movw	r2, #1055	@ 0x41f
 8012b9e:	493b      	ldr	r1, [pc, #236]	@ (8012c8c <tcp_oos_insert_segment+0x104>)
 8012ba0:	483b      	ldr	r0, [pc, #236]	@ (8012c90 <tcp_oos_insert_segment+0x108>)
 8012ba2:	f004 f9db 	bl	8016f5c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	68db      	ldr	r3, [r3, #12]
 8012baa:	899b      	ldrh	r3, [r3, #12]
 8012bac:	b29b      	uxth	r3, r3
 8012bae:	4618      	mov	r0, r3
 8012bb0:	f7f8 fad2 	bl	800b158 <lwip_htons>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	b2db      	uxtb	r3, r3
 8012bb8:	f003 0301 	and.w	r3, r3, #1
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d028      	beq.n	8012c12 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012bc0:	6838      	ldr	r0, [r7, #0]
 8012bc2:	f7fe f995 	bl	8010ef0 <tcp_segs_free>
    next = NULL;
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	603b      	str	r3, [r7, #0]
 8012bca:	e056      	b.n	8012c7a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012bcc:	683b      	ldr	r3, [r7, #0]
 8012bce:	68db      	ldr	r3, [r3, #12]
 8012bd0:	899b      	ldrh	r3, [r3, #12]
 8012bd2:	b29b      	uxth	r3, r3
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f7f8 fabf 	bl	800b158 <lwip_htons>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	b2db      	uxtb	r3, r3
 8012bde:	f003 0301 	and.w	r3, r3, #1
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d00d      	beq.n	8012c02 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	68db      	ldr	r3, [r3, #12]
 8012bea:	899b      	ldrh	r3, [r3, #12]
 8012bec:	b29c      	uxth	r4, r3
 8012bee:	2001      	movs	r0, #1
 8012bf0:	f7f8 fab2 	bl	800b158 <lwip_htons>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	461a      	mov	r2, r3
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	68db      	ldr	r3, [r3, #12]
 8012bfc:	4322      	orrs	r2, r4
 8012bfe:	b292      	uxth	r2, r2
 8012c00:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012c02:	683b      	ldr	r3, [r7, #0]
 8012c04:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8012c06:	683b      	ldr	r3, [r7, #0]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012c0c:	68f8      	ldr	r0, [r7, #12]
 8012c0e:	f7fe f984 	bl	8010f1a <tcp_seg_free>
    while (next &&
 8012c12:	683b      	ldr	r3, [r7, #0]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d00e      	beq.n	8012c36 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	891b      	ldrh	r3, [r3, #8]
 8012c1c:	461a      	mov	r2, r3
 8012c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8012c94 <tcp_oos_insert_segment+0x10c>)
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	441a      	add	r2, r3
 8012c24:	683b      	ldr	r3, [r7, #0]
 8012c26:	68db      	ldr	r3, [r3, #12]
 8012c28:	685b      	ldr	r3, [r3, #4]
 8012c2a:	6839      	ldr	r1, [r7, #0]
 8012c2c:	8909      	ldrh	r1, [r1, #8]
 8012c2e:	440b      	add	r3, r1
 8012c30:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	daca      	bge.n	8012bcc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d01e      	beq.n	8012c7a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	891b      	ldrh	r3, [r3, #8]
 8012c40:	461a      	mov	r2, r3
 8012c42:	4b14      	ldr	r3, [pc, #80]	@ (8012c94 <tcp_oos_insert_segment+0x10c>)
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	441a      	add	r2, r3
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	68db      	ldr	r3, [r3, #12]
 8012c4c:	685b      	ldr	r3, [r3, #4]
 8012c4e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	dd12      	ble.n	8012c7a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012c54:	683b      	ldr	r3, [r7, #0]
 8012c56:	68db      	ldr	r3, [r3, #12]
 8012c58:	685b      	ldr	r3, [r3, #4]
 8012c5a:	b29a      	uxth	r2, r3
 8012c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8012c94 <tcp_oos_insert_segment+0x10c>)
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	b29b      	uxth	r3, r3
 8012c62:	1ad3      	subs	r3, r2, r3
 8012c64:	b29a      	uxth	r2, r3
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	685a      	ldr	r2, [r3, #4]
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	891b      	ldrh	r3, [r3, #8]
 8012c72:	4619      	mov	r1, r3
 8012c74:	4610      	mov	r0, r2
 8012c76:	f7fc f89f 	bl	800edb8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	683a      	ldr	r2, [r7, #0]
 8012c7e:	601a      	str	r2, [r3, #0]
}
 8012c80:	bf00      	nop
 8012c82:	3714      	adds	r7, #20
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd90      	pop	{r4, r7, pc}
 8012c88:	0801a660 	.word	0x0801a660
 8012c8c:	0801a950 	.word	0x0801a950
 8012c90:	0801a6dc 	.word	0x0801a6dc
 8012c94:	2400cdec 	.word	0x2400cdec

08012c98 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8012c98:	b5b0      	push	{r4, r5, r7, lr}
 8012c9a:	b086      	sub	sp, #24
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	60f8      	str	r0, [r7, #12]
 8012ca0:	60b9      	str	r1, [r7, #8]
 8012ca2:	607a      	str	r2, [r7, #4]
 8012ca4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8012ca6:	e03e      	b.n	8012d26 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8012ca8:	68bb      	ldr	r3, [r7, #8]
 8012caa:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8012cac:	68bb      	ldr	r3, [r7, #8]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8012cb2:	697b      	ldr	r3, [r7, #20]
 8012cb4:	685b      	ldr	r3, [r3, #4]
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f7fc fa92 	bl	800f1e0 <pbuf_clen>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012cc6:	8a7a      	ldrh	r2, [r7, #18]
 8012cc8:	429a      	cmp	r2, r3
 8012cca:	d906      	bls.n	8012cda <tcp_free_acked_segments+0x42>
 8012ccc:	4b2a      	ldr	r3, [pc, #168]	@ (8012d78 <tcp_free_acked_segments+0xe0>)
 8012cce:	f240 4257 	movw	r2, #1111	@ 0x457
 8012cd2:	492a      	ldr	r1, [pc, #168]	@ (8012d7c <tcp_free_acked_segments+0xe4>)
 8012cd4:	482a      	ldr	r0, [pc, #168]	@ (8012d80 <tcp_free_acked_segments+0xe8>)
 8012cd6:	f004 f941 	bl	8016f5c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8012ce0:	8a7b      	ldrh	r3, [r7, #18]
 8012ce2:	1ad3      	subs	r3, r2, r3
 8012ce4:	b29a      	uxth	r2, r3
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012cec:	697b      	ldr	r3, [r7, #20]
 8012cee:	891a      	ldrh	r2, [r3, #8]
 8012cf0:	4b24      	ldr	r3, [pc, #144]	@ (8012d84 <tcp_free_acked_segments+0xec>)
 8012cf2:	881b      	ldrh	r3, [r3, #0]
 8012cf4:	4413      	add	r3, r2
 8012cf6:	b29a      	uxth	r2, r3
 8012cf8:	4b22      	ldr	r3, [pc, #136]	@ (8012d84 <tcp_free_acked_segments+0xec>)
 8012cfa:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8012cfc:	6978      	ldr	r0, [r7, #20]
 8012cfe:	f7fe f90c 	bl	8010f1a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d00c      	beq.n	8012d26 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012d0c:	68bb      	ldr	r3, [r7, #8]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d109      	bne.n	8012d26 <tcp_free_acked_segments+0x8e>
 8012d12:	683b      	ldr	r3, [r7, #0]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d106      	bne.n	8012d26 <tcp_free_acked_segments+0x8e>
 8012d18:	4b17      	ldr	r3, [pc, #92]	@ (8012d78 <tcp_free_acked_segments+0xe0>)
 8012d1a:	f240 4261 	movw	r2, #1121	@ 0x461
 8012d1e:	491a      	ldr	r1, [pc, #104]	@ (8012d88 <tcp_free_acked_segments+0xf0>)
 8012d20:	4817      	ldr	r0, [pc, #92]	@ (8012d80 <tcp_free_acked_segments+0xe8>)
 8012d22:	f004 f91b 	bl	8016f5c <iprintf>
  while (seg_list != NULL &&
 8012d26:	68bb      	ldr	r3, [r7, #8]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d020      	beq.n	8012d6e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012d2c:	68bb      	ldr	r3, [r7, #8]
 8012d2e:	68db      	ldr	r3, [r3, #12]
 8012d30:	685b      	ldr	r3, [r3, #4]
 8012d32:	4618      	mov	r0, r3
 8012d34:	f7f8 fa26 	bl	800b184 <lwip_htonl>
 8012d38:	4604      	mov	r4, r0
 8012d3a:	68bb      	ldr	r3, [r7, #8]
 8012d3c:	891b      	ldrh	r3, [r3, #8]
 8012d3e:	461d      	mov	r5, r3
 8012d40:	68bb      	ldr	r3, [r7, #8]
 8012d42:	68db      	ldr	r3, [r3, #12]
 8012d44:	899b      	ldrh	r3, [r3, #12]
 8012d46:	b29b      	uxth	r3, r3
 8012d48:	4618      	mov	r0, r3
 8012d4a:	f7f8 fa05 	bl	800b158 <lwip_htons>
 8012d4e:	4603      	mov	r3, r0
 8012d50:	b2db      	uxtb	r3, r3
 8012d52:	f003 0303 	and.w	r3, r3, #3
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d001      	beq.n	8012d5e <tcp_free_acked_segments+0xc6>
 8012d5a:	2301      	movs	r3, #1
 8012d5c:	e000      	b.n	8012d60 <tcp_free_acked_segments+0xc8>
 8012d5e:	2300      	movs	r3, #0
 8012d60:	442b      	add	r3, r5
 8012d62:	18e2      	adds	r2, r4, r3
 8012d64:	4b09      	ldr	r3, [pc, #36]	@ (8012d8c <tcp_free_acked_segments+0xf4>)
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	dd9c      	ble.n	8012ca8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012d6e:	68bb      	ldr	r3, [r7, #8]
}
 8012d70:	4618      	mov	r0, r3
 8012d72:	3718      	adds	r7, #24
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bdb0      	pop	{r4, r5, r7, pc}
 8012d78:	0801a660 	.word	0x0801a660
 8012d7c:	0801a978 	.word	0x0801a978
 8012d80:	0801a6dc 	.word	0x0801a6dc
 8012d84:	2400cdf4 	.word	0x2400cdf4
 8012d88:	0801a9a0 	.word	0x0801a9a0
 8012d8c:	2400cdf0 	.word	0x2400cdf0

08012d90 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012d90:	b5b0      	push	{r4, r5, r7, lr}
 8012d92:	b094      	sub	sp, #80	@ 0x50
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8012d98:	2300      	movs	r3, #0
 8012d9a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d106      	bne.n	8012db0 <tcp_receive+0x20>
 8012da2:	4b91      	ldr	r3, [pc, #580]	@ (8012fe8 <tcp_receive+0x258>)
 8012da4:	f240 427b 	movw	r2, #1147	@ 0x47b
 8012da8:	4990      	ldr	r1, [pc, #576]	@ (8012fec <tcp_receive+0x25c>)
 8012daa:	4891      	ldr	r0, [pc, #580]	@ (8012ff0 <tcp_receive+0x260>)
 8012dac:	f004 f8d6 	bl	8016f5c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	7d1b      	ldrb	r3, [r3, #20]
 8012db4:	2b03      	cmp	r3, #3
 8012db6:	d806      	bhi.n	8012dc6 <tcp_receive+0x36>
 8012db8:	4b8b      	ldr	r3, [pc, #556]	@ (8012fe8 <tcp_receive+0x258>)
 8012dba:	f240 427c 	movw	r2, #1148	@ 0x47c
 8012dbe:	498d      	ldr	r1, [pc, #564]	@ (8012ff4 <tcp_receive+0x264>)
 8012dc0:	488b      	ldr	r0, [pc, #556]	@ (8012ff0 <tcp_receive+0x260>)
 8012dc2:	f004 f8cb 	bl	8016f5c <iprintf>

  if (flags & TCP_ACK) {
 8012dc6:	4b8c      	ldr	r3, [pc, #560]	@ (8012ff8 <tcp_receive+0x268>)
 8012dc8:	781b      	ldrb	r3, [r3, #0]
 8012dca:	f003 0310 	and.w	r3, r3, #16
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	f000 8264 	beq.w	801329c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012dda:	461a      	mov	r2, r3
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012de0:	4413      	add	r3, r2
 8012de2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012de8:	4b84      	ldr	r3, [pc, #528]	@ (8012ffc <tcp_receive+0x26c>)
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	1ad3      	subs	r3, r2, r3
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	db1b      	blt.n	8012e2a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012df6:	4b81      	ldr	r3, [pc, #516]	@ (8012ffc <tcp_receive+0x26c>)
 8012df8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	d106      	bne.n	8012e0c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012e02:	4b7f      	ldr	r3, [pc, #508]	@ (8013000 <tcp_receive+0x270>)
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	1ad3      	subs	r3, r2, r3
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	db0e      	blt.n	8012e2a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012e10:	4b7b      	ldr	r3, [pc, #492]	@ (8013000 <tcp_receive+0x270>)
 8012e12:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012e14:	429a      	cmp	r2, r3
 8012e16:	d125      	bne.n	8012e64 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012e18:	4b7a      	ldr	r3, [pc, #488]	@ (8013004 <tcp_receive+0x274>)
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	89db      	ldrh	r3, [r3, #14]
 8012e1e:	b29a      	uxth	r2, r3
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012e26:	429a      	cmp	r2, r3
 8012e28:	d91c      	bls.n	8012e64 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012e2a:	4b76      	ldr	r3, [pc, #472]	@ (8013004 <tcp_receive+0x274>)
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	89db      	ldrh	r3, [r3, #14]
 8012e30:	b29a      	uxth	r2, r3
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012e44:	429a      	cmp	r2, r3
 8012e46:	d205      	bcs.n	8012e54 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8012e54:	4b69      	ldr	r3, [pc, #420]	@ (8012ffc <tcp_receive+0x26c>)
 8012e56:	681a      	ldr	r2, [r3, #0]
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8012e5c:	4b68      	ldr	r3, [pc, #416]	@ (8013000 <tcp_receive+0x270>)
 8012e5e:	681a      	ldr	r2, [r3, #0]
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012e64:	4b66      	ldr	r3, [pc, #408]	@ (8013000 <tcp_receive+0x270>)
 8012e66:	681a      	ldr	r2, [r3, #0]
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e6c:	1ad3      	subs	r3, r2, r3
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	dc58      	bgt.n	8012f24 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012e72:	4b65      	ldr	r3, [pc, #404]	@ (8013008 <tcp_receive+0x278>)
 8012e74:	881b      	ldrh	r3, [r3, #0]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d14b      	bne.n	8012f12 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012e7e:	687a      	ldr	r2, [r7, #4]
 8012e80:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8012e84:	4413      	add	r3, r2
 8012e86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	d142      	bne.n	8012f12 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	db3d      	blt.n	8012f12 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012e9a:	4b59      	ldr	r3, [pc, #356]	@ (8013000 <tcp_receive+0x270>)
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	429a      	cmp	r2, r3
 8012ea0:	d137      	bne.n	8012f12 <tcp_receive+0x182>
              found_dupack = 1;
 8012ea2:	2301      	movs	r3, #1
 8012ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012eac:	2bff      	cmp	r3, #255	@ 0xff
 8012eae:	d007      	beq.n	8012ec0 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012eb6:	3301      	adds	r3, #1
 8012eb8:	b2da      	uxtb	r2, r3
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012ec6:	2b03      	cmp	r3, #3
 8012ec8:	d91b      	bls.n	8012f02 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012ed4:	4413      	add	r3, r2
 8012ed6:	b29a      	uxth	r2, r3
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012ede:	429a      	cmp	r2, r3
 8012ee0:	d30a      	bcc.n	8012ef8 <tcp_receive+0x168>
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012eec:	4413      	add	r3, r2
 8012eee:	b29a      	uxth	r2, r3
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012ef6:	e004      	b.n	8012f02 <tcp_receive+0x172>
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012efe:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012f08:	2b02      	cmp	r3, #2
 8012f0a:	d902      	bls.n	8012f12 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012f0c:	6878      	ldr	r0, [r7, #4]
 8012f0e:	f002 fb3f 	bl	8015590 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012f12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	f040 8161 	bne.w	80131dc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012f22:	e15b      	b.n	80131dc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012f24:	4b36      	ldr	r3, [pc, #216]	@ (8013000 <tcp_receive+0x270>)
 8012f26:	681a      	ldr	r2, [r3, #0]
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012f2c:	1ad3      	subs	r3, r2, r3
 8012f2e:	3b01      	subs	r3, #1
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	f2c0 814e 	blt.w	80131d2 <tcp_receive+0x442>
 8012f36:	4b32      	ldr	r3, [pc, #200]	@ (8013000 <tcp_receive+0x270>)
 8012f38:	681a      	ldr	r2, [r3, #0]
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012f3e:	1ad3      	subs	r3, r2, r3
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	f300 8146 	bgt.w	80131d2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	8b5b      	ldrh	r3, [r3, #26]
 8012f4a:	f003 0304 	and.w	r3, r3, #4
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d010      	beq.n	8012f74 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	8b5b      	ldrh	r3, [r3, #26]
 8012f56:	f023 0304 	bic.w	r3, r3, #4
 8012f5a:	b29a      	uxth	r2, r3
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	2200      	movs	r2, #0
 8012f70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	2200      	movs	r2, #0
 8012f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012f82:	10db      	asrs	r3, r3, #3
 8012f84:	b21b      	sxth	r3, r3
 8012f86:	b29a      	uxth	r2, r3
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012f8e:	b29b      	uxth	r3, r3
 8012f90:	4413      	add	r3, r2
 8012f92:	b29b      	uxth	r3, r3
 8012f94:	b21a      	sxth	r2, r3
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012f9c:	4b18      	ldr	r3, [pc, #96]	@ (8013000 <tcp_receive+0x270>)
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	b29a      	uxth	r2, r3
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012fa6:	b29b      	uxth	r3, r3
 8012fa8:	1ad3      	subs	r3, r2, r3
 8012faa:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	2200      	movs	r2, #0
 8012fb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8012fb4:	4b12      	ldr	r3, [pc, #72]	@ (8013000 <tcp_receive+0x270>)
 8012fb6:	681a      	ldr	r2, [r3, #0]
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	7d1b      	ldrb	r3, [r3, #20]
 8012fc0:	2b03      	cmp	r3, #3
 8012fc2:	f240 8097 	bls.w	80130f4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012fd2:	429a      	cmp	r2, r3
 8012fd4:	d245      	bcs.n	8013062 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	8b5b      	ldrh	r3, [r3, #26]
 8012fda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d014      	beq.n	801300c <tcp_receive+0x27c>
 8012fe2:	2301      	movs	r3, #1
 8012fe4:	e013      	b.n	801300e <tcp_receive+0x27e>
 8012fe6:	bf00      	nop
 8012fe8:	0801a660 	.word	0x0801a660
 8012fec:	0801a9c0 	.word	0x0801a9c0
 8012ff0:	0801a6dc 	.word	0x0801a6dc
 8012ff4:	0801a9dc 	.word	0x0801a9dc
 8012ff8:	2400cdf8 	.word	0x2400cdf8
 8012ffc:	2400cdec 	.word	0x2400cdec
 8013000:	2400cdf0 	.word	0x2400cdf0
 8013004:	2400cddc 	.word	0x2400cddc
 8013008:	2400cdf6 	.word	0x2400cdf6
 801300c:	2302      	movs	r3, #2
 801300e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013012:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8013016:	b29a      	uxth	r2, r3
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801301c:	fb12 f303 	smulbb	r3, r2, r3
 8013020:	b29b      	uxth	r3, r3
 8013022:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013024:	4293      	cmp	r3, r2
 8013026:	bf28      	it	cs
 8013028:	4613      	movcs	r3, r2
 801302a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013032:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013034:	4413      	add	r3, r2
 8013036:	b29a      	uxth	r2, r3
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801303e:	429a      	cmp	r2, r3
 8013040:	d309      	bcc.n	8013056 <tcp_receive+0x2c6>
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013048:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801304a:	4413      	add	r3, r2
 801304c:	b29a      	uxth	r2, r3
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013054:	e04e      	b.n	80130f4 <tcp_receive+0x364>
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801305c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013060:	e048      	b.n	80130f4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013068:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801306a:	4413      	add	r3, r2
 801306c:	b29a      	uxth	r2, r3
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8013074:	429a      	cmp	r2, r3
 8013076:	d309      	bcc.n	801308c <tcp_receive+0x2fc>
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801307e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013080:	4413      	add	r3, r2
 8013082:	b29a      	uxth	r2, r3
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801308a:	e004      	b.n	8013096 <tcp_receive+0x306>
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013092:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80130a2:	429a      	cmp	r2, r3
 80130a4:	d326      	bcc.n	80130f4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80130b2:	1ad3      	subs	r3, r2, r3
 80130b4:	b29a      	uxth	r2, r3
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80130c6:	4413      	add	r3, r2
 80130c8:	b29a      	uxth	r2, r3
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80130d0:	429a      	cmp	r2, r3
 80130d2:	d30a      	bcc.n	80130ea <tcp_receive+0x35a>
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80130de:	4413      	add	r3, r2
 80130e0:	b29a      	uxth	r2, r3
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80130e8:	e004      	b.n	80130f4 <tcp_receive+0x364>
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80130f0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80130fc:	4a98      	ldr	r2, [pc, #608]	@ (8013360 <tcp_receive+0x5d0>)
 80130fe:	6878      	ldr	r0, [r7, #4]
 8013100:	f7ff fdca 	bl	8012c98 <tcp_free_acked_segments>
 8013104:	4602      	mov	r2, r0
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013112:	4a94      	ldr	r2, [pc, #592]	@ (8013364 <tcp_receive+0x5d4>)
 8013114:	6878      	ldr	r0, [r7, #4]
 8013116:	f7ff fdbf 	bl	8012c98 <tcp_free_acked_segments>
 801311a:	4602      	mov	r2, r0
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013124:	2b00      	cmp	r3, #0
 8013126:	d104      	bne.n	8013132 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801312e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8013130:	e002      	b.n	8013138 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	2200      	movs	r2, #0
 8013136:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	2200      	movs	r2, #0
 801313c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013142:	2b00      	cmp	r3, #0
 8013144:	d103      	bne.n	801314e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	2200      	movs	r2, #0
 801314a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8013154:	4b84      	ldr	r3, [pc, #528]	@ (8013368 <tcp_receive+0x5d8>)
 8013156:	881b      	ldrh	r3, [r3, #0]
 8013158:	4413      	add	r3, r2
 801315a:	b29a      	uxth	r2, r3
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	8b5b      	ldrh	r3, [r3, #26]
 8013166:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801316a:	2b00      	cmp	r3, #0
 801316c:	d035      	beq.n	80131da <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013172:	2b00      	cmp	r3, #0
 8013174:	d118      	bne.n	80131a8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801317a:	2b00      	cmp	r3, #0
 801317c:	d00c      	beq.n	8013198 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013186:	68db      	ldr	r3, [r3, #12]
 8013188:	685b      	ldr	r3, [r3, #4]
 801318a:	4618      	mov	r0, r3
 801318c:	f7f7 fffa 	bl	800b184 <lwip_htonl>
 8013190:	4603      	mov	r3, r0
 8013192:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013194:	2b00      	cmp	r3, #0
 8013196:	dc20      	bgt.n	80131da <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	8b5b      	ldrh	r3, [r3, #26]
 801319c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80131a0:	b29a      	uxth	r2, r3
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80131a6:	e018      	b.n	80131da <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80131b0:	68db      	ldr	r3, [r3, #12]
 80131b2:	685b      	ldr	r3, [r3, #4]
 80131b4:	4618      	mov	r0, r3
 80131b6:	f7f7 ffe5 	bl	800b184 <lwip_htonl>
 80131ba:	4603      	mov	r3, r0
 80131bc:	1ae3      	subs	r3, r4, r3
 80131be:	2b00      	cmp	r3, #0
 80131c0:	dc0b      	bgt.n	80131da <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	8b5b      	ldrh	r3, [r3, #26]
 80131c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80131ca:	b29a      	uxth	r2, r3
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80131d0:	e003      	b.n	80131da <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80131d2:	6878      	ldr	r0, [r7, #4]
 80131d4:	f002 fbc8 	bl	8015968 <tcp_send_empty_ack>
 80131d8:	e000      	b.n	80131dc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80131da:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d05b      	beq.n	801329c <tcp_receive+0x50c>
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80131e8:	4b60      	ldr	r3, [pc, #384]	@ (801336c <tcp_receive+0x5dc>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	1ad3      	subs	r3, r2, r3
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	da54      	bge.n	801329c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80131f2:	4b5f      	ldr	r3, [pc, #380]	@ (8013370 <tcp_receive+0x5e0>)
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	b29a      	uxth	r2, r3
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80131fc:	b29b      	uxth	r3, r3
 80131fe:	1ad3      	subs	r3, r2, r3
 8013200:	b29b      	uxth	r3, r3
 8013202:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013206:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013210:	10db      	asrs	r3, r3, #3
 8013212:	b21b      	sxth	r3, r3
 8013214:	b29b      	uxth	r3, r3
 8013216:	1ad3      	subs	r3, r2, r3
 8013218:	b29b      	uxth	r3, r3
 801321a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013224:	b29a      	uxth	r2, r3
 8013226:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801322a:	4413      	add	r3, r2
 801322c:	b29b      	uxth	r3, r3
 801322e:	b21a      	sxth	r2, r3
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8013234:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8013238:	2b00      	cmp	r3, #0
 801323a:	da05      	bge.n	8013248 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801323c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8013240:	425b      	negs	r3, r3
 8013242:	b29b      	uxth	r3, r3
 8013244:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8013248:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013252:	109b      	asrs	r3, r3, #2
 8013254:	b21b      	sxth	r3, r3
 8013256:	b29b      	uxth	r3, r3
 8013258:	1ad3      	subs	r3, r2, r3
 801325a:	b29b      	uxth	r3, r3
 801325c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013266:	b29a      	uxth	r2, r3
 8013268:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801326c:	4413      	add	r3, r2
 801326e:	b29b      	uxth	r3, r3
 8013270:	b21a      	sxth	r2, r3
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801327c:	10db      	asrs	r3, r3, #3
 801327e:	b21b      	sxth	r3, r3
 8013280:	b29a      	uxth	r2, r3
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013288:	b29b      	uxth	r3, r3
 801328a:	4413      	add	r3, r2
 801328c:	b29b      	uxth	r3, r3
 801328e:	b21a      	sxth	r2, r3
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	2200      	movs	r2, #0
 801329a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801329c:	4b35      	ldr	r3, [pc, #212]	@ (8013374 <tcp_receive+0x5e4>)
 801329e:	881b      	ldrh	r3, [r3, #0]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	f000 84df 	beq.w	8013c64 <tcp_receive+0xed4>
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	7d1b      	ldrb	r3, [r3, #20]
 80132aa:	2b06      	cmp	r3, #6
 80132ac:	f200 84da 	bhi.w	8013c64 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80132b4:	4b30      	ldr	r3, [pc, #192]	@ (8013378 <tcp_receive+0x5e8>)
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	1ad3      	subs	r3, r2, r3
 80132ba:	3b01      	subs	r3, #1
 80132bc:	2b00      	cmp	r3, #0
 80132be:	f2c0 808f 	blt.w	80133e0 <tcp_receive+0x650>
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80132c6:	4b2b      	ldr	r3, [pc, #172]	@ (8013374 <tcp_receive+0x5e4>)
 80132c8:	881b      	ldrh	r3, [r3, #0]
 80132ca:	4619      	mov	r1, r3
 80132cc:	4b2a      	ldr	r3, [pc, #168]	@ (8013378 <tcp_receive+0x5e8>)
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	440b      	add	r3, r1
 80132d2:	1ad3      	subs	r3, r2, r3
 80132d4:	3301      	adds	r3, #1
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	f300 8082 	bgt.w	80133e0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80132dc:	4b27      	ldr	r3, [pc, #156]	@ (801337c <tcp_receive+0x5ec>)
 80132de:	685b      	ldr	r3, [r3, #4]
 80132e0:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80132e6:	4b24      	ldr	r3, [pc, #144]	@ (8013378 <tcp_receive+0x5e8>)
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	1ad3      	subs	r3, r2, r3
 80132ec:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80132ee:	4b23      	ldr	r3, [pc, #140]	@ (801337c <tcp_receive+0x5ec>)
 80132f0:	685b      	ldr	r3, [r3, #4]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d106      	bne.n	8013304 <tcp_receive+0x574>
 80132f6:	4b22      	ldr	r3, [pc, #136]	@ (8013380 <tcp_receive+0x5f0>)
 80132f8:	f240 5294 	movw	r2, #1428	@ 0x594
 80132fc:	4921      	ldr	r1, [pc, #132]	@ (8013384 <tcp_receive+0x5f4>)
 80132fe:	4822      	ldr	r0, [pc, #136]	@ (8013388 <tcp_receive+0x5f8>)
 8013300:	f003 fe2c 	bl	8016f5c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013306:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801330a:	4293      	cmp	r3, r2
 801330c:	d906      	bls.n	801331c <tcp_receive+0x58c>
 801330e:	4b1c      	ldr	r3, [pc, #112]	@ (8013380 <tcp_receive+0x5f0>)
 8013310:	f240 5295 	movw	r2, #1429	@ 0x595
 8013314:	491d      	ldr	r1, [pc, #116]	@ (801338c <tcp_receive+0x5fc>)
 8013316:	481c      	ldr	r0, [pc, #112]	@ (8013388 <tcp_receive+0x5f8>)
 8013318:	f003 fe20 	bl	8016f5c <iprintf>
      off = (u16_t)off32;
 801331c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801331e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013322:	4b16      	ldr	r3, [pc, #88]	@ (801337c <tcp_receive+0x5ec>)
 8013324:	685b      	ldr	r3, [r3, #4]
 8013326:	891b      	ldrh	r3, [r3, #8]
 8013328:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801332c:	429a      	cmp	r2, r3
 801332e:	d906      	bls.n	801333e <tcp_receive+0x5ae>
 8013330:	4b13      	ldr	r3, [pc, #76]	@ (8013380 <tcp_receive+0x5f0>)
 8013332:	f240 5297 	movw	r2, #1431	@ 0x597
 8013336:	4916      	ldr	r1, [pc, #88]	@ (8013390 <tcp_receive+0x600>)
 8013338:	4813      	ldr	r0, [pc, #76]	@ (8013388 <tcp_receive+0x5f8>)
 801333a:	f003 fe0f 	bl	8016f5c <iprintf>
      inseg.len -= off;
 801333e:	4b0f      	ldr	r3, [pc, #60]	@ (801337c <tcp_receive+0x5ec>)
 8013340:	891a      	ldrh	r2, [r3, #8]
 8013342:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013346:	1ad3      	subs	r3, r2, r3
 8013348:	b29a      	uxth	r2, r3
 801334a:	4b0c      	ldr	r3, [pc, #48]	@ (801337c <tcp_receive+0x5ec>)
 801334c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801334e:	4b0b      	ldr	r3, [pc, #44]	@ (801337c <tcp_receive+0x5ec>)
 8013350:	685b      	ldr	r3, [r3, #4]
 8013352:	891a      	ldrh	r2, [r3, #8]
 8013354:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013358:	1ad3      	subs	r3, r2, r3
 801335a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 801335c:	e02a      	b.n	80133b4 <tcp_receive+0x624>
 801335e:	bf00      	nop
 8013360:	0801a9f8 	.word	0x0801a9f8
 8013364:	0801aa00 	.word	0x0801aa00
 8013368:	2400cdf4 	.word	0x2400cdf4
 801336c:	2400cdf0 	.word	0x2400cdf0
 8013370:	2400cdb4 	.word	0x2400cdb4
 8013374:	2400cdf6 	.word	0x2400cdf6
 8013378:	2400cdec 	.word	0x2400cdec
 801337c:	2400cdcc 	.word	0x2400cdcc
 8013380:	0801a660 	.word	0x0801a660
 8013384:	0801aa08 	.word	0x0801aa08
 8013388:	0801a6dc 	.word	0x0801a6dc
 801338c:	0801aa18 	.word	0x0801aa18
 8013390:	0801aa28 	.word	0x0801aa28
        off -= p->len;
 8013394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013396:	895b      	ldrh	r3, [r3, #10]
 8013398:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801339c:	1ad3      	subs	r3, r2, r3
 801339e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80133a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80133a4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80133a6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80133a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80133aa:	2200      	movs	r2, #0
 80133ac:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80133ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80133b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80133b6:	895b      	ldrh	r3, [r3, #10]
 80133b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80133bc:	429a      	cmp	r2, r3
 80133be:	d8e9      	bhi.n	8013394 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80133c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80133c4:	4619      	mov	r1, r3
 80133c6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80133c8:	f7fb fdf6 	bl	800efb8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133d0:	4a90      	ldr	r2, [pc, #576]	@ (8013614 <tcp_receive+0x884>)
 80133d2:	6013      	str	r3, [r2, #0]
 80133d4:	4b90      	ldr	r3, [pc, #576]	@ (8013618 <tcp_receive+0x888>)
 80133d6:	68db      	ldr	r3, [r3, #12]
 80133d8:	4a8e      	ldr	r2, [pc, #568]	@ (8013614 <tcp_receive+0x884>)
 80133da:	6812      	ldr	r2, [r2, #0]
 80133dc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80133de:	e00d      	b.n	80133fc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80133e0:	4b8c      	ldr	r3, [pc, #560]	@ (8013614 <tcp_receive+0x884>)
 80133e2:	681a      	ldr	r2, [r3, #0]
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133e8:	1ad3      	subs	r3, r2, r3
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	da06      	bge.n	80133fc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	8b5b      	ldrh	r3, [r3, #26]
 80133f2:	f043 0302 	orr.w	r3, r3, #2
 80133f6:	b29a      	uxth	r2, r3
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80133fc:	4b85      	ldr	r3, [pc, #532]	@ (8013614 <tcp_receive+0x884>)
 80133fe:	681a      	ldr	r2, [r3, #0]
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013404:	1ad3      	subs	r3, r2, r3
 8013406:	2b00      	cmp	r3, #0
 8013408:	f2c0 8427 	blt.w	8013c5a <tcp_receive+0xeca>
 801340c:	4b81      	ldr	r3, [pc, #516]	@ (8013614 <tcp_receive+0x884>)
 801340e:	681a      	ldr	r2, [r3, #0]
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013414:	6879      	ldr	r1, [r7, #4]
 8013416:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013418:	440b      	add	r3, r1
 801341a:	1ad3      	subs	r3, r2, r3
 801341c:	3301      	adds	r3, #1
 801341e:	2b00      	cmp	r3, #0
 8013420:	f300 841b 	bgt.w	8013c5a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013428:	4b7a      	ldr	r3, [pc, #488]	@ (8013614 <tcp_receive+0x884>)
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	429a      	cmp	r2, r3
 801342e:	f040 8298 	bne.w	8013962 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8013432:	4b79      	ldr	r3, [pc, #484]	@ (8013618 <tcp_receive+0x888>)
 8013434:	891c      	ldrh	r4, [r3, #8]
 8013436:	4b78      	ldr	r3, [pc, #480]	@ (8013618 <tcp_receive+0x888>)
 8013438:	68db      	ldr	r3, [r3, #12]
 801343a:	899b      	ldrh	r3, [r3, #12]
 801343c:	b29b      	uxth	r3, r3
 801343e:	4618      	mov	r0, r3
 8013440:	f7f7 fe8a 	bl	800b158 <lwip_htons>
 8013444:	4603      	mov	r3, r0
 8013446:	b2db      	uxtb	r3, r3
 8013448:	f003 0303 	and.w	r3, r3, #3
 801344c:	2b00      	cmp	r3, #0
 801344e:	d001      	beq.n	8013454 <tcp_receive+0x6c4>
 8013450:	2301      	movs	r3, #1
 8013452:	e000      	b.n	8013456 <tcp_receive+0x6c6>
 8013454:	2300      	movs	r3, #0
 8013456:	4423      	add	r3, r4
 8013458:	b29a      	uxth	r2, r3
 801345a:	4b70      	ldr	r3, [pc, #448]	@ (801361c <tcp_receive+0x88c>)
 801345c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013462:	4b6e      	ldr	r3, [pc, #440]	@ (801361c <tcp_receive+0x88c>)
 8013464:	881b      	ldrh	r3, [r3, #0]
 8013466:	429a      	cmp	r2, r3
 8013468:	d274      	bcs.n	8013554 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801346a:	4b6b      	ldr	r3, [pc, #428]	@ (8013618 <tcp_receive+0x888>)
 801346c:	68db      	ldr	r3, [r3, #12]
 801346e:	899b      	ldrh	r3, [r3, #12]
 8013470:	b29b      	uxth	r3, r3
 8013472:	4618      	mov	r0, r3
 8013474:	f7f7 fe70 	bl	800b158 <lwip_htons>
 8013478:	4603      	mov	r3, r0
 801347a:	b2db      	uxtb	r3, r3
 801347c:	f003 0301 	and.w	r3, r3, #1
 8013480:	2b00      	cmp	r3, #0
 8013482:	d01e      	beq.n	80134c2 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013484:	4b64      	ldr	r3, [pc, #400]	@ (8013618 <tcp_receive+0x888>)
 8013486:	68db      	ldr	r3, [r3, #12]
 8013488:	899b      	ldrh	r3, [r3, #12]
 801348a:	b29b      	uxth	r3, r3
 801348c:	b21b      	sxth	r3, r3
 801348e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013492:	b21c      	sxth	r4, r3
 8013494:	4b60      	ldr	r3, [pc, #384]	@ (8013618 <tcp_receive+0x888>)
 8013496:	68db      	ldr	r3, [r3, #12]
 8013498:	899b      	ldrh	r3, [r3, #12]
 801349a:	b29b      	uxth	r3, r3
 801349c:	4618      	mov	r0, r3
 801349e:	f7f7 fe5b 	bl	800b158 <lwip_htons>
 80134a2:	4603      	mov	r3, r0
 80134a4:	b2db      	uxtb	r3, r3
 80134a6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80134aa:	b29b      	uxth	r3, r3
 80134ac:	4618      	mov	r0, r3
 80134ae:	f7f7 fe53 	bl	800b158 <lwip_htons>
 80134b2:	4603      	mov	r3, r0
 80134b4:	b21b      	sxth	r3, r3
 80134b6:	4323      	orrs	r3, r4
 80134b8:	b21a      	sxth	r2, r3
 80134ba:	4b57      	ldr	r3, [pc, #348]	@ (8013618 <tcp_receive+0x888>)
 80134bc:	68db      	ldr	r3, [r3, #12]
 80134be:	b292      	uxth	r2, r2
 80134c0:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80134c6:	4b54      	ldr	r3, [pc, #336]	@ (8013618 <tcp_receive+0x888>)
 80134c8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80134ca:	4b53      	ldr	r3, [pc, #332]	@ (8013618 <tcp_receive+0x888>)
 80134cc:	68db      	ldr	r3, [r3, #12]
 80134ce:	899b      	ldrh	r3, [r3, #12]
 80134d0:	b29b      	uxth	r3, r3
 80134d2:	4618      	mov	r0, r3
 80134d4:	f7f7 fe40 	bl	800b158 <lwip_htons>
 80134d8:	4603      	mov	r3, r0
 80134da:	b2db      	uxtb	r3, r3
 80134dc:	f003 0302 	and.w	r3, r3, #2
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d005      	beq.n	80134f0 <tcp_receive+0x760>
            inseg.len -= 1;
 80134e4:	4b4c      	ldr	r3, [pc, #304]	@ (8013618 <tcp_receive+0x888>)
 80134e6:	891b      	ldrh	r3, [r3, #8]
 80134e8:	3b01      	subs	r3, #1
 80134ea:	b29a      	uxth	r2, r3
 80134ec:	4b4a      	ldr	r3, [pc, #296]	@ (8013618 <tcp_receive+0x888>)
 80134ee:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80134f0:	4b49      	ldr	r3, [pc, #292]	@ (8013618 <tcp_receive+0x888>)
 80134f2:	685b      	ldr	r3, [r3, #4]
 80134f4:	4a48      	ldr	r2, [pc, #288]	@ (8013618 <tcp_receive+0x888>)
 80134f6:	8912      	ldrh	r2, [r2, #8]
 80134f8:	4611      	mov	r1, r2
 80134fa:	4618      	mov	r0, r3
 80134fc:	f7fb fc5c 	bl	800edb8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013500:	4b45      	ldr	r3, [pc, #276]	@ (8013618 <tcp_receive+0x888>)
 8013502:	891c      	ldrh	r4, [r3, #8]
 8013504:	4b44      	ldr	r3, [pc, #272]	@ (8013618 <tcp_receive+0x888>)
 8013506:	68db      	ldr	r3, [r3, #12]
 8013508:	899b      	ldrh	r3, [r3, #12]
 801350a:	b29b      	uxth	r3, r3
 801350c:	4618      	mov	r0, r3
 801350e:	f7f7 fe23 	bl	800b158 <lwip_htons>
 8013512:	4603      	mov	r3, r0
 8013514:	b2db      	uxtb	r3, r3
 8013516:	f003 0303 	and.w	r3, r3, #3
 801351a:	2b00      	cmp	r3, #0
 801351c:	d001      	beq.n	8013522 <tcp_receive+0x792>
 801351e:	2301      	movs	r3, #1
 8013520:	e000      	b.n	8013524 <tcp_receive+0x794>
 8013522:	2300      	movs	r3, #0
 8013524:	4423      	add	r3, r4
 8013526:	b29a      	uxth	r2, r3
 8013528:	4b3c      	ldr	r3, [pc, #240]	@ (801361c <tcp_receive+0x88c>)
 801352a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801352c:	4b3b      	ldr	r3, [pc, #236]	@ (801361c <tcp_receive+0x88c>)
 801352e:	881b      	ldrh	r3, [r3, #0]
 8013530:	461a      	mov	r2, r3
 8013532:	4b38      	ldr	r3, [pc, #224]	@ (8013614 <tcp_receive+0x884>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	441a      	add	r2, r3
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801353c:	6879      	ldr	r1, [r7, #4]
 801353e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013540:	440b      	add	r3, r1
 8013542:	429a      	cmp	r2, r3
 8013544:	d006      	beq.n	8013554 <tcp_receive+0x7c4>
 8013546:	4b36      	ldr	r3, [pc, #216]	@ (8013620 <tcp_receive+0x890>)
 8013548:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 801354c:	4935      	ldr	r1, [pc, #212]	@ (8013624 <tcp_receive+0x894>)
 801354e:	4836      	ldr	r0, [pc, #216]	@ (8013628 <tcp_receive+0x898>)
 8013550:	f003 fd04 	bl	8016f5c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013558:	2b00      	cmp	r3, #0
 801355a:	f000 80e6 	beq.w	801372a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801355e:	4b2e      	ldr	r3, [pc, #184]	@ (8013618 <tcp_receive+0x888>)
 8013560:	68db      	ldr	r3, [r3, #12]
 8013562:	899b      	ldrh	r3, [r3, #12]
 8013564:	b29b      	uxth	r3, r3
 8013566:	4618      	mov	r0, r3
 8013568:	f7f7 fdf6 	bl	800b158 <lwip_htons>
 801356c:	4603      	mov	r3, r0
 801356e:	b2db      	uxtb	r3, r3
 8013570:	f003 0301 	and.w	r3, r3, #1
 8013574:	2b00      	cmp	r3, #0
 8013576:	d010      	beq.n	801359a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013578:	e00a      	b.n	8013590 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801357e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013584:	681a      	ldr	r2, [r3, #0]
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801358a:	68f8      	ldr	r0, [r7, #12]
 801358c:	f7fd fcc5 	bl	8010f1a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013594:	2b00      	cmp	r3, #0
 8013596:	d1f0      	bne.n	801357a <tcp_receive+0x7ea>
 8013598:	e0c7      	b.n	801372a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801359e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80135a0:	e051      	b.n	8013646 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80135a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80135a4:	68db      	ldr	r3, [r3, #12]
 80135a6:	899b      	ldrh	r3, [r3, #12]
 80135a8:	b29b      	uxth	r3, r3
 80135aa:	4618      	mov	r0, r3
 80135ac:	f7f7 fdd4 	bl	800b158 <lwip_htons>
 80135b0:	4603      	mov	r3, r0
 80135b2:	b2db      	uxtb	r3, r3
 80135b4:	f003 0301 	and.w	r3, r3, #1
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d03c      	beq.n	8013636 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80135bc:	4b16      	ldr	r3, [pc, #88]	@ (8013618 <tcp_receive+0x888>)
 80135be:	68db      	ldr	r3, [r3, #12]
 80135c0:	899b      	ldrh	r3, [r3, #12]
 80135c2:	b29b      	uxth	r3, r3
 80135c4:	4618      	mov	r0, r3
 80135c6:	f7f7 fdc7 	bl	800b158 <lwip_htons>
 80135ca:	4603      	mov	r3, r0
 80135cc:	b2db      	uxtb	r3, r3
 80135ce:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d12f      	bne.n	8013636 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80135d6:	4b10      	ldr	r3, [pc, #64]	@ (8013618 <tcp_receive+0x888>)
 80135d8:	68db      	ldr	r3, [r3, #12]
 80135da:	899b      	ldrh	r3, [r3, #12]
 80135dc:	b29c      	uxth	r4, r3
 80135de:	2001      	movs	r0, #1
 80135e0:	f7f7 fdba 	bl	800b158 <lwip_htons>
 80135e4:	4603      	mov	r3, r0
 80135e6:	461a      	mov	r2, r3
 80135e8:	4b0b      	ldr	r3, [pc, #44]	@ (8013618 <tcp_receive+0x888>)
 80135ea:	68db      	ldr	r3, [r3, #12]
 80135ec:	4322      	orrs	r2, r4
 80135ee:	b292      	uxth	r2, r2
 80135f0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80135f2:	4b09      	ldr	r3, [pc, #36]	@ (8013618 <tcp_receive+0x888>)
 80135f4:	891c      	ldrh	r4, [r3, #8]
 80135f6:	4b08      	ldr	r3, [pc, #32]	@ (8013618 <tcp_receive+0x888>)
 80135f8:	68db      	ldr	r3, [r3, #12]
 80135fa:	899b      	ldrh	r3, [r3, #12]
 80135fc:	b29b      	uxth	r3, r3
 80135fe:	4618      	mov	r0, r3
 8013600:	f7f7 fdaa 	bl	800b158 <lwip_htons>
 8013604:	4603      	mov	r3, r0
 8013606:	b2db      	uxtb	r3, r3
 8013608:	f003 0303 	and.w	r3, r3, #3
 801360c:	2b00      	cmp	r3, #0
 801360e:	d00d      	beq.n	801362c <tcp_receive+0x89c>
 8013610:	2301      	movs	r3, #1
 8013612:	e00c      	b.n	801362e <tcp_receive+0x89e>
 8013614:	2400cdec 	.word	0x2400cdec
 8013618:	2400cdcc 	.word	0x2400cdcc
 801361c:	2400cdf6 	.word	0x2400cdf6
 8013620:	0801a660 	.word	0x0801a660
 8013624:	0801aa38 	.word	0x0801aa38
 8013628:	0801a6dc 	.word	0x0801a6dc
 801362c:	2300      	movs	r3, #0
 801362e:	4423      	add	r3, r4
 8013630:	b29a      	uxth	r2, r3
 8013632:	4b98      	ldr	r3, [pc, #608]	@ (8013894 <tcp_receive+0xb04>)
 8013634:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8013636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013638:	613b      	str	r3, [r7, #16]
              next = next->next;
 801363a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8013640:	6938      	ldr	r0, [r7, #16]
 8013642:	f7fd fc6a 	bl	8010f1a <tcp_seg_free>
            while (next &&
 8013646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013648:	2b00      	cmp	r3, #0
 801364a:	d00e      	beq.n	801366a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801364c:	4b91      	ldr	r3, [pc, #580]	@ (8013894 <tcp_receive+0xb04>)
 801364e:	881b      	ldrh	r3, [r3, #0]
 8013650:	461a      	mov	r2, r3
 8013652:	4b91      	ldr	r3, [pc, #580]	@ (8013898 <tcp_receive+0xb08>)
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	441a      	add	r2, r3
 8013658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801365a:	68db      	ldr	r3, [r3, #12]
 801365c:	685b      	ldr	r3, [r3, #4]
 801365e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013660:	8909      	ldrh	r1, [r1, #8]
 8013662:	440b      	add	r3, r1
 8013664:	1ad3      	subs	r3, r2, r3
            while (next &&
 8013666:	2b00      	cmp	r3, #0
 8013668:	da9b      	bge.n	80135a2 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801366a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801366c:	2b00      	cmp	r3, #0
 801366e:	d059      	beq.n	8013724 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8013670:	4b88      	ldr	r3, [pc, #544]	@ (8013894 <tcp_receive+0xb04>)
 8013672:	881b      	ldrh	r3, [r3, #0]
 8013674:	461a      	mov	r2, r3
 8013676:	4b88      	ldr	r3, [pc, #544]	@ (8013898 <tcp_receive+0xb08>)
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	441a      	add	r2, r3
 801367c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801367e:	68db      	ldr	r3, [r3, #12]
 8013680:	685b      	ldr	r3, [r3, #4]
 8013682:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013684:	2b00      	cmp	r3, #0
 8013686:	dd4d      	ble.n	8013724 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801368a:	68db      	ldr	r3, [r3, #12]
 801368c:	685b      	ldr	r3, [r3, #4]
 801368e:	b29a      	uxth	r2, r3
 8013690:	4b81      	ldr	r3, [pc, #516]	@ (8013898 <tcp_receive+0xb08>)
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	b29b      	uxth	r3, r3
 8013696:	1ad3      	subs	r3, r2, r3
 8013698:	b29a      	uxth	r2, r3
 801369a:	4b80      	ldr	r3, [pc, #512]	@ (801389c <tcp_receive+0xb0c>)
 801369c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801369e:	4b7f      	ldr	r3, [pc, #508]	@ (801389c <tcp_receive+0xb0c>)
 80136a0:	68db      	ldr	r3, [r3, #12]
 80136a2:	899b      	ldrh	r3, [r3, #12]
 80136a4:	b29b      	uxth	r3, r3
 80136a6:	4618      	mov	r0, r3
 80136a8:	f7f7 fd56 	bl	800b158 <lwip_htons>
 80136ac:	4603      	mov	r3, r0
 80136ae:	b2db      	uxtb	r3, r3
 80136b0:	f003 0302 	and.w	r3, r3, #2
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d005      	beq.n	80136c4 <tcp_receive+0x934>
                inseg.len -= 1;
 80136b8:	4b78      	ldr	r3, [pc, #480]	@ (801389c <tcp_receive+0xb0c>)
 80136ba:	891b      	ldrh	r3, [r3, #8]
 80136bc:	3b01      	subs	r3, #1
 80136be:	b29a      	uxth	r2, r3
 80136c0:	4b76      	ldr	r3, [pc, #472]	@ (801389c <tcp_receive+0xb0c>)
 80136c2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80136c4:	4b75      	ldr	r3, [pc, #468]	@ (801389c <tcp_receive+0xb0c>)
 80136c6:	685b      	ldr	r3, [r3, #4]
 80136c8:	4a74      	ldr	r2, [pc, #464]	@ (801389c <tcp_receive+0xb0c>)
 80136ca:	8912      	ldrh	r2, [r2, #8]
 80136cc:	4611      	mov	r1, r2
 80136ce:	4618      	mov	r0, r3
 80136d0:	f7fb fb72 	bl	800edb8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80136d4:	4b71      	ldr	r3, [pc, #452]	@ (801389c <tcp_receive+0xb0c>)
 80136d6:	891c      	ldrh	r4, [r3, #8]
 80136d8:	4b70      	ldr	r3, [pc, #448]	@ (801389c <tcp_receive+0xb0c>)
 80136da:	68db      	ldr	r3, [r3, #12]
 80136dc:	899b      	ldrh	r3, [r3, #12]
 80136de:	b29b      	uxth	r3, r3
 80136e0:	4618      	mov	r0, r3
 80136e2:	f7f7 fd39 	bl	800b158 <lwip_htons>
 80136e6:	4603      	mov	r3, r0
 80136e8:	b2db      	uxtb	r3, r3
 80136ea:	f003 0303 	and.w	r3, r3, #3
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d001      	beq.n	80136f6 <tcp_receive+0x966>
 80136f2:	2301      	movs	r3, #1
 80136f4:	e000      	b.n	80136f8 <tcp_receive+0x968>
 80136f6:	2300      	movs	r3, #0
 80136f8:	4423      	add	r3, r4
 80136fa:	b29a      	uxth	r2, r3
 80136fc:	4b65      	ldr	r3, [pc, #404]	@ (8013894 <tcp_receive+0xb04>)
 80136fe:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013700:	4b64      	ldr	r3, [pc, #400]	@ (8013894 <tcp_receive+0xb04>)
 8013702:	881b      	ldrh	r3, [r3, #0]
 8013704:	461a      	mov	r2, r3
 8013706:	4b64      	ldr	r3, [pc, #400]	@ (8013898 <tcp_receive+0xb08>)
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	441a      	add	r2, r3
 801370c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801370e:	68db      	ldr	r3, [r3, #12]
 8013710:	685b      	ldr	r3, [r3, #4]
 8013712:	429a      	cmp	r2, r3
 8013714:	d006      	beq.n	8013724 <tcp_receive+0x994>
 8013716:	4b62      	ldr	r3, [pc, #392]	@ (80138a0 <tcp_receive+0xb10>)
 8013718:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 801371c:	4961      	ldr	r1, [pc, #388]	@ (80138a4 <tcp_receive+0xb14>)
 801371e:	4862      	ldr	r0, [pc, #392]	@ (80138a8 <tcp_receive+0xb18>)
 8013720:	f003 fc1c 	bl	8016f5c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013728:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801372a:	4b5a      	ldr	r3, [pc, #360]	@ (8013894 <tcp_receive+0xb04>)
 801372c:	881b      	ldrh	r3, [r3, #0]
 801372e:	461a      	mov	r2, r3
 8013730:	4b59      	ldr	r3, [pc, #356]	@ (8013898 <tcp_receive+0xb08>)
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	441a      	add	r2, r3
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801373e:	4b55      	ldr	r3, [pc, #340]	@ (8013894 <tcp_receive+0xb04>)
 8013740:	881b      	ldrh	r3, [r3, #0]
 8013742:	429a      	cmp	r2, r3
 8013744:	d206      	bcs.n	8013754 <tcp_receive+0x9c4>
 8013746:	4b56      	ldr	r3, [pc, #344]	@ (80138a0 <tcp_receive+0xb10>)
 8013748:	f240 6207 	movw	r2, #1543	@ 0x607
 801374c:	4957      	ldr	r1, [pc, #348]	@ (80138ac <tcp_receive+0xb1c>)
 801374e:	4856      	ldr	r0, [pc, #344]	@ (80138a8 <tcp_receive+0xb18>)
 8013750:	f003 fc04 	bl	8016f5c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013758:	4b4e      	ldr	r3, [pc, #312]	@ (8013894 <tcp_receive+0xb04>)
 801375a:	881b      	ldrh	r3, [r3, #0]
 801375c:	1ad3      	subs	r3, r2, r3
 801375e:	b29a      	uxth	r2, r3
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013764:	6878      	ldr	r0, [r7, #4]
 8013766:	f7fc fd99 	bl	801029c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801376a:	4b4c      	ldr	r3, [pc, #304]	@ (801389c <tcp_receive+0xb0c>)
 801376c:	685b      	ldr	r3, [r3, #4]
 801376e:	891b      	ldrh	r3, [r3, #8]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d006      	beq.n	8013782 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8013774:	4b49      	ldr	r3, [pc, #292]	@ (801389c <tcp_receive+0xb0c>)
 8013776:	685b      	ldr	r3, [r3, #4]
 8013778:	4a4d      	ldr	r2, [pc, #308]	@ (80138b0 <tcp_receive+0xb20>)
 801377a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801377c:	4b47      	ldr	r3, [pc, #284]	@ (801389c <tcp_receive+0xb0c>)
 801377e:	2200      	movs	r2, #0
 8013780:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013782:	4b46      	ldr	r3, [pc, #280]	@ (801389c <tcp_receive+0xb0c>)
 8013784:	68db      	ldr	r3, [r3, #12]
 8013786:	899b      	ldrh	r3, [r3, #12]
 8013788:	b29b      	uxth	r3, r3
 801378a:	4618      	mov	r0, r3
 801378c:	f7f7 fce4 	bl	800b158 <lwip_htons>
 8013790:	4603      	mov	r3, r0
 8013792:	b2db      	uxtb	r3, r3
 8013794:	f003 0301 	and.w	r3, r3, #1
 8013798:	2b00      	cmp	r3, #0
 801379a:	f000 80b8 	beq.w	801390e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801379e:	4b45      	ldr	r3, [pc, #276]	@ (80138b4 <tcp_receive+0xb24>)
 80137a0:	781b      	ldrb	r3, [r3, #0]
 80137a2:	f043 0320 	orr.w	r3, r3, #32
 80137a6:	b2da      	uxtb	r2, r3
 80137a8:	4b42      	ldr	r3, [pc, #264]	@ (80138b4 <tcp_receive+0xb24>)
 80137aa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80137ac:	e0af      	b.n	801390e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80137b2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80137b8:	68db      	ldr	r3, [r3, #12]
 80137ba:	685b      	ldr	r3, [r3, #4]
 80137bc:	4a36      	ldr	r2, [pc, #216]	@ (8013898 <tcp_receive+0xb08>)
 80137be:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	891b      	ldrh	r3, [r3, #8]
 80137c4:	461c      	mov	r4, r3
 80137c6:	68bb      	ldr	r3, [r7, #8]
 80137c8:	68db      	ldr	r3, [r3, #12]
 80137ca:	899b      	ldrh	r3, [r3, #12]
 80137cc:	b29b      	uxth	r3, r3
 80137ce:	4618      	mov	r0, r3
 80137d0:	f7f7 fcc2 	bl	800b158 <lwip_htons>
 80137d4:	4603      	mov	r3, r0
 80137d6:	b2db      	uxtb	r3, r3
 80137d8:	f003 0303 	and.w	r3, r3, #3
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d001      	beq.n	80137e4 <tcp_receive+0xa54>
 80137e0:	2301      	movs	r3, #1
 80137e2:	e000      	b.n	80137e6 <tcp_receive+0xa56>
 80137e4:	2300      	movs	r3, #0
 80137e6:	191a      	adds	r2, r3, r4
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80137ec:	441a      	add	r2, r3
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80137f6:	461c      	mov	r4, r3
 80137f8:	68bb      	ldr	r3, [r7, #8]
 80137fa:	891b      	ldrh	r3, [r3, #8]
 80137fc:	461d      	mov	r5, r3
 80137fe:	68bb      	ldr	r3, [r7, #8]
 8013800:	68db      	ldr	r3, [r3, #12]
 8013802:	899b      	ldrh	r3, [r3, #12]
 8013804:	b29b      	uxth	r3, r3
 8013806:	4618      	mov	r0, r3
 8013808:	f7f7 fca6 	bl	800b158 <lwip_htons>
 801380c:	4603      	mov	r3, r0
 801380e:	b2db      	uxtb	r3, r3
 8013810:	f003 0303 	and.w	r3, r3, #3
 8013814:	2b00      	cmp	r3, #0
 8013816:	d001      	beq.n	801381c <tcp_receive+0xa8c>
 8013818:	2301      	movs	r3, #1
 801381a:	e000      	b.n	801381e <tcp_receive+0xa8e>
 801381c:	2300      	movs	r3, #0
 801381e:	442b      	add	r3, r5
 8013820:	429c      	cmp	r4, r3
 8013822:	d206      	bcs.n	8013832 <tcp_receive+0xaa2>
 8013824:	4b1e      	ldr	r3, [pc, #120]	@ (80138a0 <tcp_receive+0xb10>)
 8013826:	f240 622b 	movw	r2, #1579	@ 0x62b
 801382a:	4923      	ldr	r1, [pc, #140]	@ (80138b8 <tcp_receive+0xb28>)
 801382c:	481e      	ldr	r0, [pc, #120]	@ (80138a8 <tcp_receive+0xb18>)
 801382e:	f003 fb95 	bl	8016f5c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8013832:	68bb      	ldr	r3, [r7, #8]
 8013834:	891b      	ldrh	r3, [r3, #8]
 8013836:	461c      	mov	r4, r3
 8013838:	68bb      	ldr	r3, [r7, #8]
 801383a:	68db      	ldr	r3, [r3, #12]
 801383c:	899b      	ldrh	r3, [r3, #12]
 801383e:	b29b      	uxth	r3, r3
 8013840:	4618      	mov	r0, r3
 8013842:	f7f7 fc89 	bl	800b158 <lwip_htons>
 8013846:	4603      	mov	r3, r0
 8013848:	b2db      	uxtb	r3, r3
 801384a:	f003 0303 	and.w	r3, r3, #3
 801384e:	2b00      	cmp	r3, #0
 8013850:	d001      	beq.n	8013856 <tcp_receive+0xac6>
 8013852:	2301      	movs	r3, #1
 8013854:	e000      	b.n	8013858 <tcp_receive+0xac8>
 8013856:	2300      	movs	r3, #0
 8013858:	1919      	adds	r1, r3, r4
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801385e:	b28b      	uxth	r3, r1
 8013860:	1ad3      	subs	r3, r2, r3
 8013862:	b29a      	uxth	r2, r3
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013868:	6878      	ldr	r0, [r7, #4]
 801386a:	f7fc fd17 	bl	801029c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801386e:	68bb      	ldr	r3, [r7, #8]
 8013870:	685b      	ldr	r3, [r3, #4]
 8013872:	891b      	ldrh	r3, [r3, #8]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d028      	beq.n	80138ca <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013878:	4b0d      	ldr	r3, [pc, #52]	@ (80138b0 <tcp_receive+0xb20>)
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d01d      	beq.n	80138bc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8013880:	4b0b      	ldr	r3, [pc, #44]	@ (80138b0 <tcp_receive+0xb20>)
 8013882:	681a      	ldr	r2, [r3, #0]
 8013884:	68bb      	ldr	r3, [r7, #8]
 8013886:	685b      	ldr	r3, [r3, #4]
 8013888:	4619      	mov	r1, r3
 801388a:	4610      	mov	r0, r2
 801388c:	f7fb fce8 	bl	800f260 <pbuf_cat>
 8013890:	e018      	b.n	80138c4 <tcp_receive+0xb34>
 8013892:	bf00      	nop
 8013894:	2400cdf6 	.word	0x2400cdf6
 8013898:	2400cdec 	.word	0x2400cdec
 801389c:	2400cdcc 	.word	0x2400cdcc
 80138a0:	0801a660 	.word	0x0801a660
 80138a4:	0801aa70 	.word	0x0801aa70
 80138a8:	0801a6dc 	.word	0x0801a6dc
 80138ac:	0801aaac 	.word	0x0801aaac
 80138b0:	2400cdfc 	.word	0x2400cdfc
 80138b4:	2400cdf9 	.word	0x2400cdf9
 80138b8:	0801aacc 	.word	0x0801aacc
            } else {
              recv_data = cseg->p;
 80138bc:	68bb      	ldr	r3, [r7, #8]
 80138be:	685b      	ldr	r3, [r3, #4]
 80138c0:	4a70      	ldr	r2, [pc, #448]	@ (8013a84 <tcp_receive+0xcf4>)
 80138c2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	2200      	movs	r2, #0
 80138c8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80138ca:	68bb      	ldr	r3, [r7, #8]
 80138cc:	68db      	ldr	r3, [r3, #12]
 80138ce:	899b      	ldrh	r3, [r3, #12]
 80138d0:	b29b      	uxth	r3, r3
 80138d2:	4618      	mov	r0, r3
 80138d4:	f7f7 fc40 	bl	800b158 <lwip_htons>
 80138d8:	4603      	mov	r3, r0
 80138da:	b2db      	uxtb	r3, r3
 80138dc:	f003 0301 	and.w	r3, r3, #1
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d00d      	beq.n	8013900 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80138e4:	4b68      	ldr	r3, [pc, #416]	@ (8013a88 <tcp_receive+0xcf8>)
 80138e6:	781b      	ldrb	r3, [r3, #0]
 80138e8:	f043 0320 	orr.w	r3, r3, #32
 80138ec:	b2da      	uxtb	r2, r3
 80138ee:	4b66      	ldr	r3, [pc, #408]	@ (8013a88 <tcp_receive+0xcf8>)
 80138f0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	7d1b      	ldrb	r3, [r3, #20]
 80138f6:	2b04      	cmp	r3, #4
 80138f8:	d102      	bne.n	8013900 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	2207      	movs	r2, #7
 80138fe:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013900:	68bb      	ldr	r3, [r7, #8]
 8013902:	681a      	ldr	r2, [r3, #0]
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8013908:	68b8      	ldr	r0, [r7, #8]
 801390a:	f7fd fb06 	bl	8010f1a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013912:	2b00      	cmp	r3, #0
 8013914:	d008      	beq.n	8013928 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801391a:	68db      	ldr	r3, [r3, #12]
 801391c:	685a      	ldr	r2, [r3, #4]
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8013922:	429a      	cmp	r2, r3
 8013924:	f43f af43 	beq.w	80137ae <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	8b5b      	ldrh	r3, [r3, #26]
 801392c:	f003 0301 	and.w	r3, r3, #1
 8013930:	2b00      	cmp	r3, #0
 8013932:	d00e      	beq.n	8013952 <tcp_receive+0xbc2>
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	8b5b      	ldrh	r3, [r3, #26]
 8013938:	f023 0301 	bic.w	r3, r3, #1
 801393c:	b29a      	uxth	r2, r3
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	835a      	strh	r2, [r3, #26]
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	8b5b      	ldrh	r3, [r3, #26]
 8013946:	f043 0302 	orr.w	r3, r3, #2
 801394a:	b29a      	uxth	r2, r3
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013950:	e187      	b.n	8013c62 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	8b5b      	ldrh	r3, [r3, #26]
 8013956:	f043 0301 	orr.w	r3, r3, #1
 801395a:	b29a      	uxth	r2, r3
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013960:	e17f      	b.n	8013c62 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013966:	2b00      	cmp	r3, #0
 8013968:	d106      	bne.n	8013978 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801396a:	4848      	ldr	r0, [pc, #288]	@ (8013a8c <tcp_receive+0xcfc>)
 801396c:	f7fd faee 	bl	8010f4c <tcp_seg_copy>
 8013970:	4602      	mov	r2, r0
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	675a      	str	r2, [r3, #116]	@ 0x74
 8013976:	e16c      	b.n	8013c52 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8013978:	2300      	movs	r3, #0
 801397a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013980:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013982:	e156      	b.n	8013c32 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8013984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013986:	68db      	ldr	r3, [r3, #12]
 8013988:	685a      	ldr	r2, [r3, #4]
 801398a:	4b41      	ldr	r3, [pc, #260]	@ (8013a90 <tcp_receive+0xd00>)
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	429a      	cmp	r2, r3
 8013990:	d11d      	bne.n	80139ce <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8013992:	4b3e      	ldr	r3, [pc, #248]	@ (8013a8c <tcp_receive+0xcfc>)
 8013994:	891a      	ldrh	r2, [r3, #8]
 8013996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013998:	891b      	ldrh	r3, [r3, #8]
 801399a:	429a      	cmp	r2, r3
 801399c:	f240 814e 	bls.w	8013c3c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80139a0:	483a      	ldr	r0, [pc, #232]	@ (8013a8c <tcp_receive+0xcfc>)
 80139a2:	f7fd fad3 	bl	8010f4c <tcp_seg_copy>
 80139a6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80139a8:	697b      	ldr	r3, [r7, #20]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	f000 8148 	beq.w	8013c40 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80139b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d003      	beq.n	80139be <tcp_receive+0xc2e>
                    prev->next = cseg;
 80139b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139b8:	697a      	ldr	r2, [r7, #20]
 80139ba:	601a      	str	r2, [r3, #0]
 80139bc:	e002      	b.n	80139c4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	697a      	ldr	r2, [r7, #20]
 80139c2:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80139c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80139c6:	6978      	ldr	r0, [r7, #20]
 80139c8:	f7ff f8de 	bl	8012b88 <tcp_oos_insert_segment>
                }
                break;
 80139cc:	e138      	b.n	8013c40 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80139ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d117      	bne.n	8013a04 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80139d4:	4b2e      	ldr	r3, [pc, #184]	@ (8013a90 <tcp_receive+0xd00>)
 80139d6:	681a      	ldr	r2, [r3, #0]
 80139d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139da:	68db      	ldr	r3, [r3, #12]
 80139dc:	685b      	ldr	r3, [r3, #4]
 80139de:	1ad3      	subs	r3, r2, r3
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	da57      	bge.n	8013a94 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80139e4:	4829      	ldr	r0, [pc, #164]	@ (8013a8c <tcp_receive+0xcfc>)
 80139e6:	f7fd fab1 	bl	8010f4c <tcp_seg_copy>
 80139ea:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80139ec:	69bb      	ldr	r3, [r7, #24]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	f000 8128 	beq.w	8013c44 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	69ba      	ldr	r2, [r7, #24]
 80139f8:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80139fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80139fc:	69b8      	ldr	r0, [r7, #24]
 80139fe:	f7ff f8c3 	bl	8012b88 <tcp_oos_insert_segment>
                  }
                  break;
 8013a02:	e11f      	b.n	8013c44 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013a04:	4b22      	ldr	r3, [pc, #136]	@ (8013a90 <tcp_receive+0xd00>)
 8013a06:	681a      	ldr	r2, [r3, #0]
 8013a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a0a:	68db      	ldr	r3, [r3, #12]
 8013a0c:	685b      	ldr	r3, [r3, #4]
 8013a0e:	1ad3      	subs	r3, r2, r3
 8013a10:	3b01      	subs	r3, #1
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	db3e      	blt.n	8013a94 <tcp_receive+0xd04>
 8013a16:	4b1e      	ldr	r3, [pc, #120]	@ (8013a90 <tcp_receive+0xd00>)
 8013a18:	681a      	ldr	r2, [r3, #0]
 8013a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a1c:	68db      	ldr	r3, [r3, #12]
 8013a1e:	685b      	ldr	r3, [r3, #4]
 8013a20:	1ad3      	subs	r3, r2, r3
 8013a22:	3301      	adds	r3, #1
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	dc35      	bgt.n	8013a94 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013a28:	4818      	ldr	r0, [pc, #96]	@ (8013a8c <tcp_receive+0xcfc>)
 8013a2a:	f7fd fa8f 	bl	8010f4c <tcp_seg_copy>
 8013a2e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8013a30:	69fb      	ldr	r3, [r7, #28]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	f000 8108 	beq.w	8013c48 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a3a:	68db      	ldr	r3, [r3, #12]
 8013a3c:	685b      	ldr	r3, [r3, #4]
 8013a3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013a40:	8912      	ldrh	r2, [r2, #8]
 8013a42:	441a      	add	r2, r3
 8013a44:	4b12      	ldr	r3, [pc, #72]	@ (8013a90 <tcp_receive+0xd00>)
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	1ad3      	subs	r3, r2, r3
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	dd12      	ble.n	8013a74 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8013a4e:	4b10      	ldr	r3, [pc, #64]	@ (8013a90 <tcp_receive+0xd00>)
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	b29a      	uxth	r2, r3
 8013a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a56:	68db      	ldr	r3, [r3, #12]
 8013a58:	685b      	ldr	r3, [r3, #4]
 8013a5a:	b29b      	uxth	r3, r3
 8013a5c:	1ad3      	subs	r3, r2, r3
 8013a5e:	b29a      	uxth	r2, r3
 8013a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a62:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a66:	685a      	ldr	r2, [r3, #4]
 8013a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a6a:	891b      	ldrh	r3, [r3, #8]
 8013a6c:	4619      	mov	r1, r3
 8013a6e:	4610      	mov	r0, r2
 8013a70:	f7fb f9a2 	bl	800edb8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a76:	69fa      	ldr	r2, [r7, #28]
 8013a78:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8013a7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013a7c:	69f8      	ldr	r0, [r7, #28]
 8013a7e:	f7ff f883 	bl	8012b88 <tcp_oos_insert_segment>
                  }
                  break;
 8013a82:	e0e1      	b.n	8013c48 <tcp_receive+0xeb8>
 8013a84:	2400cdfc 	.word	0x2400cdfc
 8013a88:	2400cdf9 	.word	0x2400cdf9
 8013a8c:	2400cdcc 	.word	0x2400cdcc
 8013a90:	2400cdec 	.word	0x2400cdec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8013a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a96:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	f040 80c5 	bne.w	8013c2c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8013aa2:	4b7f      	ldr	r3, [pc, #508]	@ (8013ca0 <tcp_receive+0xf10>)
 8013aa4:	681a      	ldr	r2, [r3, #0]
 8013aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013aa8:	68db      	ldr	r3, [r3, #12]
 8013aaa:	685b      	ldr	r3, [r3, #4]
 8013aac:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	f340 80bc 	ble.w	8013c2c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ab6:	68db      	ldr	r3, [r3, #12]
 8013ab8:	899b      	ldrh	r3, [r3, #12]
 8013aba:	b29b      	uxth	r3, r3
 8013abc:	4618      	mov	r0, r3
 8013abe:	f7f7 fb4b 	bl	800b158 <lwip_htons>
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	b2db      	uxtb	r3, r3
 8013ac6:	f003 0301 	and.w	r3, r3, #1
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	f040 80be 	bne.w	8013c4c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013ad0:	4874      	ldr	r0, [pc, #464]	@ (8013ca4 <tcp_receive+0xf14>)
 8013ad2:	f7fd fa3b 	bl	8010f4c <tcp_seg_copy>
 8013ad6:	4602      	mov	r2, r0
 8013ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ada:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8013adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	f000 80b5 	beq.w	8013c50 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8013ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ae8:	68db      	ldr	r3, [r3, #12]
 8013aea:	685b      	ldr	r3, [r3, #4]
 8013aec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013aee:	8912      	ldrh	r2, [r2, #8]
 8013af0:	441a      	add	r2, r3
 8013af2:	4b6b      	ldr	r3, [pc, #428]	@ (8013ca0 <tcp_receive+0xf10>)
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	1ad3      	subs	r3, r2, r3
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	dd12      	ble.n	8013b22 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8013afc:	4b68      	ldr	r3, [pc, #416]	@ (8013ca0 <tcp_receive+0xf10>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	b29a      	uxth	r2, r3
 8013b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b04:	68db      	ldr	r3, [r3, #12]
 8013b06:	685b      	ldr	r3, [r3, #4]
 8013b08:	b29b      	uxth	r3, r3
 8013b0a:	1ad3      	subs	r3, r2, r3
 8013b0c:	b29a      	uxth	r2, r3
 8013b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b10:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8013b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b14:	685a      	ldr	r2, [r3, #4]
 8013b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b18:	891b      	ldrh	r3, [r3, #8]
 8013b1a:	4619      	mov	r1, r3
 8013b1c:	4610      	mov	r0, r2
 8013b1e:	f7fb f94b 	bl	800edb8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8013b22:	4b61      	ldr	r3, [pc, #388]	@ (8013ca8 <tcp_receive+0xf18>)
 8013b24:	881b      	ldrh	r3, [r3, #0]
 8013b26:	461a      	mov	r2, r3
 8013b28:	4b5d      	ldr	r3, [pc, #372]	@ (8013ca0 <tcp_receive+0xf10>)
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	441a      	add	r2, r3
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b32:	6879      	ldr	r1, [r7, #4]
 8013b34:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013b36:	440b      	add	r3, r1
 8013b38:	1ad3      	subs	r3, r2, r3
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	f340 8088 	ble.w	8013c50 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	68db      	ldr	r3, [r3, #12]
 8013b46:	899b      	ldrh	r3, [r3, #12]
 8013b48:	b29b      	uxth	r3, r3
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f7f7 fb04 	bl	800b158 <lwip_htons>
 8013b50:	4603      	mov	r3, r0
 8013b52:	b2db      	uxtb	r3, r3
 8013b54:	f003 0301 	and.w	r3, r3, #1
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d021      	beq.n	8013ba0 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	68db      	ldr	r3, [r3, #12]
 8013b62:	899b      	ldrh	r3, [r3, #12]
 8013b64:	b29b      	uxth	r3, r3
 8013b66:	b21b      	sxth	r3, r3
 8013b68:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013b6c:	b21c      	sxth	r4, r3
 8013b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	68db      	ldr	r3, [r3, #12]
 8013b74:	899b      	ldrh	r3, [r3, #12]
 8013b76:	b29b      	uxth	r3, r3
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f7f7 faed 	bl	800b158 <lwip_htons>
 8013b7e:	4603      	mov	r3, r0
 8013b80:	b2db      	uxtb	r3, r3
 8013b82:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8013b86:	b29b      	uxth	r3, r3
 8013b88:	4618      	mov	r0, r3
 8013b8a:	f7f7 fae5 	bl	800b158 <lwip_htons>
 8013b8e:	4603      	mov	r3, r0
 8013b90:	b21b      	sxth	r3, r3
 8013b92:	4323      	orrs	r3, r4
 8013b94:	b21a      	sxth	r2, r3
 8013b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	68db      	ldr	r3, [r3, #12]
 8013b9c:	b292      	uxth	r2, r2
 8013b9e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ba4:	b29a      	uxth	r2, r3
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013baa:	4413      	add	r3, r2
 8013bac:	b299      	uxth	r1, r3
 8013bae:	4b3c      	ldr	r3, [pc, #240]	@ (8013ca0 <tcp_receive+0xf10>)
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	b29a      	uxth	r2, r3
 8013bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	1a8a      	subs	r2, r1, r2
 8013bba:	b292      	uxth	r2, r2
 8013bbc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8013bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	685a      	ldr	r2, [r3, #4]
 8013bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	891b      	ldrh	r3, [r3, #8]
 8013bca:	4619      	mov	r1, r3
 8013bcc:	4610      	mov	r0, r2
 8013bce:	f7fb f8f3 	bl	800edb8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	891c      	ldrh	r4, [r3, #8]
 8013bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	68db      	ldr	r3, [r3, #12]
 8013bde:	899b      	ldrh	r3, [r3, #12]
 8013be0:	b29b      	uxth	r3, r3
 8013be2:	4618      	mov	r0, r3
 8013be4:	f7f7 fab8 	bl	800b158 <lwip_htons>
 8013be8:	4603      	mov	r3, r0
 8013bea:	b2db      	uxtb	r3, r3
 8013bec:	f003 0303 	and.w	r3, r3, #3
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d001      	beq.n	8013bf8 <tcp_receive+0xe68>
 8013bf4:	2301      	movs	r3, #1
 8013bf6:	e000      	b.n	8013bfa <tcp_receive+0xe6a>
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	4423      	add	r3, r4
 8013bfc:	b29a      	uxth	r2, r3
 8013bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8013ca8 <tcp_receive+0xf18>)
 8013c00:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013c02:	4b29      	ldr	r3, [pc, #164]	@ (8013ca8 <tcp_receive+0xf18>)
 8013c04:	881b      	ldrh	r3, [r3, #0]
 8013c06:	461a      	mov	r2, r3
 8013c08:	4b25      	ldr	r3, [pc, #148]	@ (8013ca0 <tcp_receive+0xf10>)
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	441a      	add	r2, r3
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c12:	6879      	ldr	r1, [r7, #4]
 8013c14:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013c16:	440b      	add	r3, r1
 8013c18:	429a      	cmp	r2, r3
 8013c1a:	d019      	beq.n	8013c50 <tcp_receive+0xec0>
 8013c1c:	4b23      	ldr	r3, [pc, #140]	@ (8013cac <tcp_receive+0xf1c>)
 8013c1e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8013c22:	4923      	ldr	r1, [pc, #140]	@ (8013cb0 <tcp_receive+0xf20>)
 8013c24:	4823      	ldr	r0, [pc, #140]	@ (8013cb4 <tcp_receive+0xf24>)
 8013c26:	f003 f999 	bl	8016f5c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013c2a:	e011      	b.n	8013c50 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	f47f aea5 	bne.w	8013984 <tcp_receive+0xbf4>
 8013c3a:	e00a      	b.n	8013c52 <tcp_receive+0xec2>
                break;
 8013c3c:	bf00      	nop
 8013c3e:	e008      	b.n	8013c52 <tcp_receive+0xec2>
                break;
 8013c40:	bf00      	nop
 8013c42:	e006      	b.n	8013c52 <tcp_receive+0xec2>
                  break;
 8013c44:	bf00      	nop
 8013c46:	e004      	b.n	8013c52 <tcp_receive+0xec2>
                  break;
 8013c48:	bf00      	nop
 8013c4a:	e002      	b.n	8013c52 <tcp_receive+0xec2>
                  break;
 8013c4c:	bf00      	nop
 8013c4e:	e000      	b.n	8013c52 <tcp_receive+0xec2>
                break;
 8013c50:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8013c52:	6878      	ldr	r0, [r7, #4]
 8013c54:	f001 fe88 	bl	8015968 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013c58:	e003      	b.n	8013c62 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013c5a:	6878      	ldr	r0, [r7, #4]
 8013c5c:	f001 fe84 	bl	8015968 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013c60:	e01a      	b.n	8013c98 <tcp_receive+0xf08>
 8013c62:	e019      	b.n	8013c98 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8013c64:	4b0e      	ldr	r3, [pc, #56]	@ (8013ca0 <tcp_receive+0xf10>)
 8013c66:	681a      	ldr	r2, [r3, #0]
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c6c:	1ad3      	subs	r3, r2, r3
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	db0a      	blt.n	8013c88 <tcp_receive+0xef8>
 8013c72:	4b0b      	ldr	r3, [pc, #44]	@ (8013ca0 <tcp_receive+0xf10>)
 8013c74:	681a      	ldr	r2, [r3, #0]
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c7a:	6879      	ldr	r1, [r7, #4]
 8013c7c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013c7e:	440b      	add	r3, r1
 8013c80:	1ad3      	subs	r3, r2, r3
 8013c82:	3301      	adds	r3, #1
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	dd07      	ble.n	8013c98 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	8b5b      	ldrh	r3, [r3, #26]
 8013c8c:	f043 0302 	orr.w	r3, r3, #2
 8013c90:	b29a      	uxth	r2, r3
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8013c96:	e7ff      	b.n	8013c98 <tcp_receive+0xf08>
 8013c98:	bf00      	nop
 8013c9a:	3750      	adds	r7, #80	@ 0x50
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	bdb0      	pop	{r4, r5, r7, pc}
 8013ca0:	2400cdec 	.word	0x2400cdec
 8013ca4:	2400cdcc 	.word	0x2400cdcc
 8013ca8:	2400cdf6 	.word	0x2400cdf6
 8013cac:	0801a660 	.word	0x0801a660
 8013cb0:	0801aa38 	.word	0x0801aa38
 8013cb4:	0801a6dc 	.word	0x0801a6dc

08013cb8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013cb8:	b480      	push	{r7}
 8013cba:	b083      	sub	sp, #12
 8013cbc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8013cbe:	4b15      	ldr	r3, [pc, #84]	@ (8013d14 <tcp_get_next_optbyte+0x5c>)
 8013cc0:	881b      	ldrh	r3, [r3, #0]
 8013cc2:	1c5a      	adds	r2, r3, #1
 8013cc4:	b291      	uxth	r1, r2
 8013cc6:	4a13      	ldr	r2, [pc, #76]	@ (8013d14 <tcp_get_next_optbyte+0x5c>)
 8013cc8:	8011      	strh	r1, [r2, #0]
 8013cca:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8013ccc:	4b12      	ldr	r3, [pc, #72]	@ (8013d18 <tcp_get_next_optbyte+0x60>)
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d004      	beq.n	8013cde <tcp_get_next_optbyte+0x26>
 8013cd4:	4b11      	ldr	r3, [pc, #68]	@ (8013d1c <tcp_get_next_optbyte+0x64>)
 8013cd6:	881b      	ldrh	r3, [r3, #0]
 8013cd8:	88fa      	ldrh	r2, [r7, #6]
 8013cda:	429a      	cmp	r2, r3
 8013cdc:	d208      	bcs.n	8013cf0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8013cde:	4b10      	ldr	r3, [pc, #64]	@ (8013d20 <tcp_get_next_optbyte+0x68>)
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	3314      	adds	r3, #20
 8013ce4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013ce6:	88fb      	ldrh	r3, [r7, #6]
 8013ce8:	683a      	ldr	r2, [r7, #0]
 8013cea:	4413      	add	r3, r2
 8013cec:	781b      	ldrb	r3, [r3, #0]
 8013cee:	e00b      	b.n	8013d08 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8013cf0:	88fb      	ldrh	r3, [r7, #6]
 8013cf2:	b2da      	uxtb	r2, r3
 8013cf4:	4b09      	ldr	r3, [pc, #36]	@ (8013d1c <tcp_get_next_optbyte+0x64>)
 8013cf6:	881b      	ldrh	r3, [r3, #0]
 8013cf8:	b2db      	uxtb	r3, r3
 8013cfa:	1ad3      	subs	r3, r2, r3
 8013cfc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8013cfe:	4b06      	ldr	r3, [pc, #24]	@ (8013d18 <tcp_get_next_optbyte+0x60>)
 8013d00:	681a      	ldr	r2, [r3, #0]
 8013d02:	797b      	ldrb	r3, [r7, #5]
 8013d04:	4413      	add	r3, r2
 8013d06:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013d08:	4618      	mov	r0, r3
 8013d0a:	370c      	adds	r7, #12
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d12:	4770      	bx	lr
 8013d14:	2400cde8 	.word	0x2400cde8
 8013d18:	2400cde4 	.word	0x2400cde4
 8013d1c:	2400cde2 	.word	0x2400cde2
 8013d20:	2400cddc 	.word	0x2400cddc

08013d24 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b084      	sub	sp, #16
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d106      	bne.n	8013d40 <tcp_parseopt+0x1c>
 8013d32:	4b32      	ldr	r3, [pc, #200]	@ (8013dfc <tcp_parseopt+0xd8>)
 8013d34:	f240 727d 	movw	r2, #1917	@ 0x77d
 8013d38:	4931      	ldr	r1, [pc, #196]	@ (8013e00 <tcp_parseopt+0xdc>)
 8013d3a:	4832      	ldr	r0, [pc, #200]	@ (8013e04 <tcp_parseopt+0xe0>)
 8013d3c:	f003 f90e 	bl	8016f5c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013d40:	4b31      	ldr	r3, [pc, #196]	@ (8013e08 <tcp_parseopt+0xe4>)
 8013d42:	881b      	ldrh	r3, [r3, #0]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d056      	beq.n	8013df6 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013d48:	4b30      	ldr	r3, [pc, #192]	@ (8013e0c <tcp_parseopt+0xe8>)
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	801a      	strh	r2, [r3, #0]
 8013d4e:	e046      	b.n	8013dde <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8013d50:	f7ff ffb2 	bl	8013cb8 <tcp_get_next_optbyte>
 8013d54:	4603      	mov	r3, r0
 8013d56:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013d58:	7bfb      	ldrb	r3, [r7, #15]
 8013d5a:	2b02      	cmp	r3, #2
 8013d5c:	d006      	beq.n	8013d6c <tcp_parseopt+0x48>
 8013d5e:	2b02      	cmp	r3, #2
 8013d60:	dc2a      	bgt.n	8013db8 <tcp_parseopt+0x94>
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d042      	beq.n	8013dec <tcp_parseopt+0xc8>
 8013d66:	2b01      	cmp	r3, #1
 8013d68:	d038      	beq.n	8013ddc <tcp_parseopt+0xb8>
 8013d6a:	e025      	b.n	8013db8 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013d6c:	f7ff ffa4 	bl	8013cb8 <tcp_get_next_optbyte>
 8013d70:	4603      	mov	r3, r0
 8013d72:	2b04      	cmp	r3, #4
 8013d74:	d13c      	bne.n	8013df0 <tcp_parseopt+0xcc>
 8013d76:	4b25      	ldr	r3, [pc, #148]	@ (8013e0c <tcp_parseopt+0xe8>)
 8013d78:	881b      	ldrh	r3, [r3, #0]
 8013d7a:	3301      	adds	r3, #1
 8013d7c:	4a22      	ldr	r2, [pc, #136]	@ (8013e08 <tcp_parseopt+0xe4>)
 8013d7e:	8812      	ldrh	r2, [r2, #0]
 8013d80:	4293      	cmp	r3, r2
 8013d82:	da35      	bge.n	8013df0 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013d84:	f7ff ff98 	bl	8013cb8 <tcp_get_next_optbyte>
 8013d88:	4603      	mov	r3, r0
 8013d8a:	021b      	lsls	r3, r3, #8
 8013d8c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8013d8e:	f7ff ff93 	bl	8013cb8 <tcp_get_next_optbyte>
 8013d92:	4603      	mov	r3, r0
 8013d94:	461a      	mov	r2, r3
 8013d96:	89bb      	ldrh	r3, [r7, #12]
 8013d98:	4313      	orrs	r3, r2
 8013d9a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013d9c:	89bb      	ldrh	r3, [r7, #12]
 8013d9e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8013da2:	d804      	bhi.n	8013dae <tcp_parseopt+0x8a>
 8013da4:	89bb      	ldrh	r3, [r7, #12]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d001      	beq.n	8013dae <tcp_parseopt+0x8a>
 8013daa:	89ba      	ldrh	r2, [r7, #12]
 8013dac:	e001      	b.n	8013db2 <tcp_parseopt+0x8e>
 8013dae:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8013db6:	e012      	b.n	8013dde <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013db8:	f7ff ff7e 	bl	8013cb8 <tcp_get_next_optbyte>
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8013dc0:	7afb      	ldrb	r3, [r7, #11]
 8013dc2:	2b01      	cmp	r3, #1
 8013dc4:	d916      	bls.n	8013df4 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013dc6:	7afb      	ldrb	r3, [r7, #11]
 8013dc8:	b29a      	uxth	r2, r3
 8013dca:	4b10      	ldr	r3, [pc, #64]	@ (8013e0c <tcp_parseopt+0xe8>)
 8013dcc:	881b      	ldrh	r3, [r3, #0]
 8013dce:	4413      	add	r3, r2
 8013dd0:	b29b      	uxth	r3, r3
 8013dd2:	3b02      	subs	r3, #2
 8013dd4:	b29a      	uxth	r2, r3
 8013dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8013e0c <tcp_parseopt+0xe8>)
 8013dd8:	801a      	strh	r2, [r3, #0]
 8013dda:	e000      	b.n	8013dde <tcp_parseopt+0xba>
          break;
 8013ddc:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013dde:	4b0b      	ldr	r3, [pc, #44]	@ (8013e0c <tcp_parseopt+0xe8>)
 8013de0:	881a      	ldrh	r2, [r3, #0]
 8013de2:	4b09      	ldr	r3, [pc, #36]	@ (8013e08 <tcp_parseopt+0xe4>)
 8013de4:	881b      	ldrh	r3, [r3, #0]
 8013de6:	429a      	cmp	r2, r3
 8013de8:	d3b2      	bcc.n	8013d50 <tcp_parseopt+0x2c>
 8013dea:	e004      	b.n	8013df6 <tcp_parseopt+0xd2>
          return;
 8013dec:	bf00      	nop
 8013dee:	e002      	b.n	8013df6 <tcp_parseopt+0xd2>
            return;
 8013df0:	bf00      	nop
 8013df2:	e000      	b.n	8013df6 <tcp_parseopt+0xd2>
            return;
 8013df4:	bf00      	nop
      }
    }
  }
}
 8013df6:	3710      	adds	r7, #16
 8013df8:	46bd      	mov	sp, r7
 8013dfa:	bd80      	pop	{r7, pc}
 8013dfc:	0801a660 	.word	0x0801a660
 8013e00:	0801aaf4 	.word	0x0801aaf4
 8013e04:	0801a6dc 	.word	0x0801a6dc
 8013e08:	2400cde0 	.word	0x2400cde0
 8013e0c:	2400cde8 	.word	0x2400cde8

08013e10 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8013e10:	b480      	push	{r7}
 8013e12:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013e14:	4b05      	ldr	r3, [pc, #20]	@ (8013e2c <tcp_trigger_input_pcb_close+0x1c>)
 8013e16:	781b      	ldrb	r3, [r3, #0]
 8013e18:	f043 0310 	orr.w	r3, r3, #16
 8013e1c:	b2da      	uxtb	r2, r3
 8013e1e:	4b03      	ldr	r3, [pc, #12]	@ (8013e2c <tcp_trigger_input_pcb_close+0x1c>)
 8013e20:	701a      	strb	r2, [r3, #0]
}
 8013e22:	bf00      	nop
 8013e24:	46bd      	mov	sp, r7
 8013e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2a:	4770      	bx	lr
 8013e2c:	2400cdf9 	.word	0x2400cdf9

08013e30 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b084      	sub	sp, #16
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	60f8      	str	r0, [r7, #12]
 8013e38:	60b9      	str	r1, [r7, #8]
 8013e3a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d00a      	beq.n	8013e58 <tcp_route+0x28>
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	7a1b      	ldrb	r3, [r3, #8]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d006      	beq.n	8013e58 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	7a1b      	ldrb	r3, [r3, #8]
 8013e4e:	4618      	mov	r0, r3
 8013e50:	f7fa fdaa 	bl	800e9a8 <netif_get_by_index>
 8013e54:	4603      	mov	r3, r0
 8013e56:	e003      	b.n	8013e60 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013e58:	6878      	ldr	r0, [r7, #4]
 8013e5a:	f7f8 fc57 	bl	800c70c <ip4_route>
 8013e5e:	4603      	mov	r3, r0
  }
}
 8013e60:	4618      	mov	r0, r3
 8013e62:	3710      	adds	r7, #16
 8013e64:	46bd      	mov	sp, r7
 8013e66:	bd80      	pop	{r7, pc}

08013e68 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013e68:	b590      	push	{r4, r7, lr}
 8013e6a:	b087      	sub	sp, #28
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	60f8      	str	r0, [r7, #12]
 8013e70:	60b9      	str	r1, [r7, #8]
 8013e72:	603b      	str	r3, [r7, #0]
 8013e74:	4613      	mov	r3, r2
 8013e76:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d105      	bne.n	8013e8a <tcp_create_segment+0x22>
 8013e7e:	4b43      	ldr	r3, [pc, #268]	@ (8013f8c <tcp_create_segment+0x124>)
 8013e80:	22a3      	movs	r2, #163	@ 0xa3
 8013e82:	4943      	ldr	r1, [pc, #268]	@ (8013f90 <tcp_create_segment+0x128>)
 8013e84:	4843      	ldr	r0, [pc, #268]	@ (8013f94 <tcp_create_segment+0x12c>)
 8013e86:	f003 f869 	bl	8016f5c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013e8a:	68bb      	ldr	r3, [r7, #8]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d105      	bne.n	8013e9c <tcp_create_segment+0x34>
 8013e90:	4b3e      	ldr	r3, [pc, #248]	@ (8013f8c <tcp_create_segment+0x124>)
 8013e92:	22a4      	movs	r2, #164	@ 0xa4
 8013e94:	4940      	ldr	r1, [pc, #256]	@ (8013f98 <tcp_create_segment+0x130>)
 8013e96:	483f      	ldr	r0, [pc, #252]	@ (8013f94 <tcp_create_segment+0x12c>)
 8013e98:	f003 f860 	bl	8016f5c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013e9c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013ea0:	009b      	lsls	r3, r3, #2
 8013ea2:	b2db      	uxtb	r3, r3
 8013ea4:	f003 0304 	and.w	r3, r3, #4
 8013ea8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013eaa:	2003      	movs	r0, #3
 8013eac:	f7fa f9d2 	bl	800e254 <memp_malloc>
 8013eb0:	6138      	str	r0, [r7, #16]
 8013eb2:	693b      	ldr	r3, [r7, #16]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d104      	bne.n	8013ec2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013eb8:	68b8      	ldr	r0, [r7, #8]
 8013eba:	f7fb f903 	bl	800f0c4 <pbuf_free>
    return NULL;
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	e060      	b.n	8013f84 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8013ec2:	693b      	ldr	r3, [r7, #16]
 8013ec4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8013ec8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013eca:	693b      	ldr	r3, [r7, #16]
 8013ecc:	2200      	movs	r2, #0
 8013ece:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013ed0:	693b      	ldr	r3, [r7, #16]
 8013ed2:	68ba      	ldr	r2, [r7, #8]
 8013ed4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013ed6:	68bb      	ldr	r3, [r7, #8]
 8013ed8:	891a      	ldrh	r2, [r3, #8]
 8013eda:	7dfb      	ldrb	r3, [r7, #23]
 8013edc:	b29b      	uxth	r3, r3
 8013ede:	429a      	cmp	r2, r3
 8013ee0:	d205      	bcs.n	8013eee <tcp_create_segment+0x86>
 8013ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8013f8c <tcp_create_segment+0x124>)
 8013ee4:	22b0      	movs	r2, #176	@ 0xb0
 8013ee6:	492d      	ldr	r1, [pc, #180]	@ (8013f9c <tcp_create_segment+0x134>)
 8013ee8:	482a      	ldr	r0, [pc, #168]	@ (8013f94 <tcp_create_segment+0x12c>)
 8013eea:	f003 f837 	bl	8016f5c <iprintf>
  seg->len = p->tot_len - optlen;
 8013eee:	68bb      	ldr	r3, [r7, #8]
 8013ef0:	891a      	ldrh	r2, [r3, #8]
 8013ef2:	7dfb      	ldrb	r3, [r7, #23]
 8013ef4:	b29b      	uxth	r3, r3
 8013ef6:	1ad3      	subs	r3, r2, r3
 8013ef8:	b29a      	uxth	r2, r3
 8013efa:	693b      	ldr	r3, [r7, #16]
 8013efc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8013efe:	2114      	movs	r1, #20
 8013f00:	68b8      	ldr	r0, [r7, #8]
 8013f02:	f7fb f849 	bl	800ef98 <pbuf_add_header>
 8013f06:	4603      	mov	r3, r0
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d004      	beq.n	8013f16 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013f0c:	6938      	ldr	r0, [r7, #16]
 8013f0e:	f7fd f804 	bl	8010f1a <tcp_seg_free>
    return NULL;
 8013f12:	2300      	movs	r3, #0
 8013f14:	e036      	b.n	8013f84 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013f16:	693b      	ldr	r3, [r7, #16]
 8013f18:	685b      	ldr	r3, [r3, #4]
 8013f1a:	685a      	ldr	r2, [r3, #4]
 8013f1c:	693b      	ldr	r3, [r7, #16]
 8013f1e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	8ada      	ldrh	r2, [r3, #22]
 8013f24:	693b      	ldr	r3, [r7, #16]
 8013f26:	68dc      	ldr	r4, [r3, #12]
 8013f28:	4610      	mov	r0, r2
 8013f2a:	f7f7 f915 	bl	800b158 <lwip_htons>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	8b1a      	ldrh	r2, [r3, #24]
 8013f36:	693b      	ldr	r3, [r7, #16]
 8013f38:	68dc      	ldr	r4, [r3, #12]
 8013f3a:	4610      	mov	r0, r2
 8013f3c:	f7f7 f90c 	bl	800b158 <lwip_htons>
 8013f40:	4603      	mov	r3, r0
 8013f42:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013f44:	693b      	ldr	r3, [r7, #16]
 8013f46:	68dc      	ldr	r4, [r3, #12]
 8013f48:	6838      	ldr	r0, [r7, #0]
 8013f4a:	f7f7 f91b 	bl	800b184 <lwip_htonl>
 8013f4e:	4603      	mov	r3, r0
 8013f50:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013f52:	7dfb      	ldrb	r3, [r7, #23]
 8013f54:	089b      	lsrs	r3, r3, #2
 8013f56:	b2db      	uxtb	r3, r3
 8013f58:	3305      	adds	r3, #5
 8013f5a:	b29b      	uxth	r3, r3
 8013f5c:	031b      	lsls	r3, r3, #12
 8013f5e:	b29a      	uxth	r2, r3
 8013f60:	79fb      	ldrb	r3, [r7, #7]
 8013f62:	b29b      	uxth	r3, r3
 8013f64:	4313      	orrs	r3, r2
 8013f66:	b29a      	uxth	r2, r3
 8013f68:	693b      	ldr	r3, [r7, #16]
 8013f6a:	68dc      	ldr	r4, [r3, #12]
 8013f6c:	4610      	mov	r0, r2
 8013f6e:	f7f7 f8f3 	bl	800b158 <lwip_htons>
 8013f72:	4603      	mov	r3, r0
 8013f74:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013f76:	693b      	ldr	r3, [r7, #16]
 8013f78:	68db      	ldr	r3, [r3, #12]
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	749a      	strb	r2, [r3, #18]
 8013f7e:	2200      	movs	r2, #0
 8013f80:	74da      	strb	r2, [r3, #19]
  return seg;
 8013f82:	693b      	ldr	r3, [r7, #16]
}
 8013f84:	4618      	mov	r0, r3
 8013f86:	371c      	adds	r7, #28
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	bd90      	pop	{r4, r7, pc}
 8013f8c:	0801ab10 	.word	0x0801ab10
 8013f90:	0801ab78 	.word	0x0801ab78
 8013f94:	0801ab98 	.word	0x0801ab98
 8013f98:	0801abc0 	.word	0x0801abc0
 8013f9c:	0801abe4 	.word	0x0801abe4

08013fa0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b086      	sub	sp, #24
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	607b      	str	r3, [r7, #4]
 8013fa8:	4603      	mov	r3, r0
 8013faa:	73fb      	strb	r3, [r7, #15]
 8013fac:	460b      	mov	r3, r1
 8013fae:	81bb      	strh	r3, [r7, #12]
 8013fb0:	4613      	mov	r3, r2
 8013fb2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013fb4:	89bb      	ldrh	r3, [r7, #12]
 8013fb6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d105      	bne.n	8013fca <tcp_pbuf_prealloc+0x2a>
 8013fbe:	4b30      	ldr	r3, [pc, #192]	@ (8014080 <tcp_pbuf_prealloc+0xe0>)
 8013fc0:	22e8      	movs	r2, #232	@ 0xe8
 8013fc2:	4930      	ldr	r1, [pc, #192]	@ (8014084 <tcp_pbuf_prealloc+0xe4>)
 8013fc4:	4830      	ldr	r0, [pc, #192]	@ (8014088 <tcp_pbuf_prealloc+0xe8>)
 8013fc6:	f002 ffc9 	bl	8016f5c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8013fca:	6a3b      	ldr	r3, [r7, #32]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d105      	bne.n	8013fdc <tcp_pbuf_prealloc+0x3c>
 8013fd0:	4b2b      	ldr	r3, [pc, #172]	@ (8014080 <tcp_pbuf_prealloc+0xe0>)
 8013fd2:	22e9      	movs	r2, #233	@ 0xe9
 8013fd4:	492d      	ldr	r1, [pc, #180]	@ (801408c <tcp_pbuf_prealloc+0xec>)
 8013fd6:	482c      	ldr	r0, [pc, #176]	@ (8014088 <tcp_pbuf_prealloc+0xe8>)
 8013fd8:	f002 ffc0 	bl	8016f5c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8013fdc:	89ba      	ldrh	r2, [r7, #12]
 8013fde:	897b      	ldrh	r3, [r7, #10]
 8013fe0:	429a      	cmp	r2, r3
 8013fe2:	d221      	bcs.n	8014028 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013fe4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013fe8:	f003 0302 	and.w	r3, r3, #2
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d111      	bne.n	8014014 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8013ff0:	6a3b      	ldr	r3, [r7, #32]
 8013ff2:	8b5b      	ldrh	r3, [r3, #26]
 8013ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d115      	bne.n	8014028 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8013ffc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014000:	2b00      	cmp	r3, #0
 8014002:	d007      	beq.n	8014014 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8014004:	6a3b      	ldr	r3, [r7, #32]
 8014006:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8014008:	2b00      	cmp	r3, #0
 801400a:	d103      	bne.n	8014014 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801400c:	6a3b      	ldr	r3, [r7, #32]
 801400e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8014010:	2b00      	cmp	r3, #0
 8014012:	d009      	beq.n	8014028 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8014014:	89bb      	ldrh	r3, [r7, #12]
 8014016:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 801401a:	f023 0203 	bic.w	r2, r3, #3
 801401e:	897b      	ldrh	r3, [r7, #10]
 8014020:	4293      	cmp	r3, r2
 8014022:	bf28      	it	cs
 8014024:	4613      	movcs	r3, r2
 8014026:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8014028:	8af9      	ldrh	r1, [r7, #22]
 801402a:	7bfb      	ldrb	r3, [r7, #15]
 801402c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014030:	4618      	mov	r0, r3
 8014032:	f7fa fd63 	bl	800eafc <pbuf_alloc>
 8014036:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014038:	693b      	ldr	r3, [r7, #16]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d101      	bne.n	8014042 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801403e:	2300      	movs	r3, #0
 8014040:	e019      	b.n	8014076 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8014042:	693b      	ldr	r3, [r7, #16]
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d006      	beq.n	8014058 <tcp_pbuf_prealloc+0xb8>
 801404a:	4b0d      	ldr	r3, [pc, #52]	@ (8014080 <tcp_pbuf_prealloc+0xe0>)
 801404c:	f240 120b 	movw	r2, #267	@ 0x10b
 8014050:	490f      	ldr	r1, [pc, #60]	@ (8014090 <tcp_pbuf_prealloc+0xf0>)
 8014052:	480d      	ldr	r0, [pc, #52]	@ (8014088 <tcp_pbuf_prealloc+0xe8>)
 8014054:	f002 ff82 	bl	8016f5c <iprintf>
  *oversize = p->len - length;
 8014058:	693b      	ldr	r3, [r7, #16]
 801405a:	895a      	ldrh	r2, [r3, #10]
 801405c:	89bb      	ldrh	r3, [r7, #12]
 801405e:	1ad3      	subs	r3, r2, r3
 8014060:	b29a      	uxth	r2, r3
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8014066:	693b      	ldr	r3, [r7, #16]
 8014068:	89ba      	ldrh	r2, [r7, #12]
 801406a:	811a      	strh	r2, [r3, #8]
 801406c:	693b      	ldr	r3, [r7, #16]
 801406e:	891a      	ldrh	r2, [r3, #8]
 8014070:	693b      	ldr	r3, [r7, #16]
 8014072:	815a      	strh	r2, [r3, #10]
  return p;
 8014074:	693b      	ldr	r3, [r7, #16]
}
 8014076:	4618      	mov	r0, r3
 8014078:	3718      	adds	r7, #24
 801407a:	46bd      	mov	sp, r7
 801407c:	bd80      	pop	{r7, pc}
 801407e:	bf00      	nop
 8014080:	0801ab10 	.word	0x0801ab10
 8014084:	0801abfc 	.word	0x0801abfc
 8014088:	0801ab98 	.word	0x0801ab98
 801408c:	0801ac20 	.word	0x0801ac20
 8014090:	0801ac40 	.word	0x0801ac40

08014094 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8014094:	b580      	push	{r7, lr}
 8014096:	b082      	sub	sp, #8
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
 801409c:	460b      	mov	r3, r1
 801409e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d106      	bne.n	80140b4 <tcp_write_checks+0x20>
 80140a6:	4b33      	ldr	r3, [pc, #204]	@ (8014174 <tcp_write_checks+0xe0>)
 80140a8:	f240 1233 	movw	r2, #307	@ 0x133
 80140ac:	4932      	ldr	r1, [pc, #200]	@ (8014178 <tcp_write_checks+0xe4>)
 80140ae:	4833      	ldr	r0, [pc, #204]	@ (801417c <tcp_write_checks+0xe8>)
 80140b0:	f002 ff54 	bl	8016f5c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	7d1b      	ldrb	r3, [r3, #20]
 80140b8:	2b04      	cmp	r3, #4
 80140ba:	d00e      	beq.n	80140da <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80140c0:	2b07      	cmp	r3, #7
 80140c2:	d00a      	beq.n	80140da <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80140c8:	2b02      	cmp	r3, #2
 80140ca:	d006      	beq.n	80140da <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80140d0:	2b03      	cmp	r3, #3
 80140d2:	d002      	beq.n	80140da <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80140d4:	f06f 030a 	mvn.w	r3, #10
 80140d8:	e048      	b.n	801416c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80140da:	887b      	ldrh	r3, [r7, #2]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d101      	bne.n	80140e4 <tcp_write_checks+0x50>
    return ERR_OK;
 80140e0:	2300      	movs	r3, #0
 80140e2:	e043      	b.n	801416c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80140ea:	887a      	ldrh	r2, [r7, #2]
 80140ec:	429a      	cmp	r2, r3
 80140ee:	d909      	bls.n	8014104 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	8b5b      	ldrh	r3, [r3, #26]
 80140f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80140f8:	b29a      	uxth	r2, r3
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80140fe:	f04f 33ff 	mov.w	r3, #4294967295
 8014102:	e033      	b.n	801416c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801410a:	2b08      	cmp	r3, #8
 801410c:	d909      	bls.n	8014122 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	8b5b      	ldrh	r3, [r3, #26]
 8014112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014116:	b29a      	uxth	r2, r3
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801411c:	f04f 33ff 	mov.w	r3, #4294967295
 8014120:	e024      	b.n	801416c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014128:	2b00      	cmp	r3, #0
 801412a:	d00f      	beq.n	801414c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014130:	2b00      	cmp	r3, #0
 8014132:	d11a      	bne.n	801416a <tcp_write_checks+0xd6>
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014138:	2b00      	cmp	r3, #0
 801413a:	d116      	bne.n	801416a <tcp_write_checks+0xd6>
 801413c:	4b0d      	ldr	r3, [pc, #52]	@ (8014174 <tcp_write_checks+0xe0>)
 801413e:	f240 1255 	movw	r2, #341	@ 0x155
 8014142:	490f      	ldr	r1, [pc, #60]	@ (8014180 <tcp_write_checks+0xec>)
 8014144:	480d      	ldr	r0, [pc, #52]	@ (801417c <tcp_write_checks+0xe8>)
 8014146:	f002 ff09 	bl	8016f5c <iprintf>
 801414a:	e00e      	b.n	801416a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014150:	2b00      	cmp	r3, #0
 8014152:	d103      	bne.n	801415c <tcp_write_checks+0xc8>
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014158:	2b00      	cmp	r3, #0
 801415a:	d006      	beq.n	801416a <tcp_write_checks+0xd6>
 801415c:	4b05      	ldr	r3, [pc, #20]	@ (8014174 <tcp_write_checks+0xe0>)
 801415e:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8014162:	4908      	ldr	r1, [pc, #32]	@ (8014184 <tcp_write_checks+0xf0>)
 8014164:	4805      	ldr	r0, [pc, #20]	@ (801417c <tcp_write_checks+0xe8>)
 8014166:	f002 fef9 	bl	8016f5c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801416a:	2300      	movs	r3, #0
}
 801416c:	4618      	mov	r0, r3
 801416e:	3708      	adds	r7, #8
 8014170:	46bd      	mov	sp, r7
 8014172:	bd80      	pop	{r7, pc}
 8014174:	0801ab10 	.word	0x0801ab10
 8014178:	0801ac54 	.word	0x0801ac54
 801417c:	0801ab98 	.word	0x0801ab98
 8014180:	0801ac74 	.word	0x0801ac74
 8014184:	0801acb0 	.word	0x0801acb0

08014188 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8014188:	b590      	push	{r4, r7, lr}
 801418a:	b09b      	sub	sp, #108	@ 0x6c
 801418c:	af04      	add	r7, sp, #16
 801418e:	60f8      	str	r0, [r7, #12]
 8014190:	60b9      	str	r1, [r7, #8]
 8014192:	4611      	mov	r1, r2
 8014194:	461a      	mov	r2, r3
 8014196:	460b      	mov	r3, r1
 8014198:	80fb      	strh	r3, [r7, #6]
 801419a:	4613      	mov	r3, r2
 801419c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801419e:	2300      	movs	r3, #0
 80141a0:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80141a2:	2300      	movs	r3, #0
 80141a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80141a6:	2300      	movs	r3, #0
 80141a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80141aa:	2300      	movs	r3, #0
 80141ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80141ae:	2300      	movs	r3, #0
 80141b0:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80141b2:	2300      	movs	r3, #0
 80141b4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80141b8:	2300      	movs	r3, #0
 80141ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80141be:	2300      	movs	r3, #0
 80141c0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80141c2:	2300      	movs	r3, #0
 80141c4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80141c6:	2300      	movs	r3, #0
 80141c8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d109      	bne.n	80141e4 <tcp_write+0x5c>
 80141d0:	4ba4      	ldr	r3, [pc, #656]	@ (8014464 <tcp_write+0x2dc>)
 80141d2:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80141d6:	49a4      	ldr	r1, [pc, #656]	@ (8014468 <tcp_write+0x2e0>)
 80141d8:	48a4      	ldr	r0, [pc, #656]	@ (801446c <tcp_write+0x2e4>)
 80141da:	f002 febf 	bl	8016f5c <iprintf>
 80141de:	f06f 030f 	mvn.w	r3, #15
 80141e2:	e32a      	b.n	801483a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80141ea:	085b      	lsrs	r3, r3, #1
 80141ec:	b29a      	uxth	r2, r3
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80141f2:	4293      	cmp	r3, r2
 80141f4:	bf28      	it	cs
 80141f6:	4613      	movcs	r3, r2
 80141f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80141fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d102      	bne.n	8014206 <tcp_write+0x7e>
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014204:	e000      	b.n	8014208 <tcp_write+0x80>
 8014206:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014208:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801420a:	68bb      	ldr	r3, [r7, #8]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d109      	bne.n	8014224 <tcp_write+0x9c>
 8014210:	4b94      	ldr	r3, [pc, #592]	@ (8014464 <tcp_write+0x2dc>)
 8014212:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8014216:	4996      	ldr	r1, [pc, #600]	@ (8014470 <tcp_write+0x2e8>)
 8014218:	4894      	ldr	r0, [pc, #592]	@ (801446c <tcp_write+0x2e4>)
 801421a:	f002 fe9f 	bl	8016f5c <iprintf>
 801421e:	f06f 030f 	mvn.w	r3, #15
 8014222:	e30a      	b.n	801483a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8014224:	88fb      	ldrh	r3, [r7, #6]
 8014226:	4619      	mov	r1, r3
 8014228:	68f8      	ldr	r0, [r7, #12]
 801422a:	f7ff ff33 	bl	8014094 <tcp_write_checks>
 801422e:	4603      	mov	r3, r0
 8014230:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8014234:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8014238:	2b00      	cmp	r3, #0
 801423a:	d002      	beq.n	8014242 <tcp_write+0xba>
    return err;
 801423c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8014240:	e2fb      	b.n	801483a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014248:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801424c:	2300      	movs	r3, #0
 801424e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014256:	2b00      	cmp	r3, #0
 8014258:	f000 80f6 	beq.w	8014448 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014260:	653b      	str	r3, [r7, #80]	@ 0x50
 8014262:	e002      	b.n	801426a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8014264:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801426a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d1f8      	bne.n	8014264 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8014272:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014274:	7a9b      	ldrb	r3, [r3, #10]
 8014276:	009b      	lsls	r3, r3, #2
 8014278:	b29b      	uxth	r3, r3
 801427a:	f003 0304 	and.w	r3, r3, #4
 801427e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8014280:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014282:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014284:	891b      	ldrh	r3, [r3, #8]
 8014286:	4619      	mov	r1, r3
 8014288:	8c3b      	ldrh	r3, [r7, #32]
 801428a:	440b      	add	r3, r1
 801428c:	429a      	cmp	r2, r3
 801428e:	da06      	bge.n	801429e <tcp_write+0x116>
 8014290:	4b74      	ldr	r3, [pc, #464]	@ (8014464 <tcp_write+0x2dc>)
 8014292:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8014296:	4977      	ldr	r1, [pc, #476]	@ (8014474 <tcp_write+0x2ec>)
 8014298:	4874      	ldr	r0, [pc, #464]	@ (801446c <tcp_write+0x2e4>)
 801429a:	f002 fe5f 	bl	8016f5c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801429e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142a0:	891a      	ldrh	r2, [r3, #8]
 80142a2:	8c3b      	ldrh	r3, [r7, #32]
 80142a4:	4413      	add	r3, r2
 80142a6:	b29b      	uxth	r3, r3
 80142a8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80142aa:	1ad3      	subs	r3, r2, r3
 80142ac:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80142b4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80142b6:	8a7b      	ldrh	r3, [r7, #18]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d026      	beq.n	801430a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80142bc:	8a7b      	ldrh	r3, [r7, #18]
 80142be:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80142c0:	429a      	cmp	r2, r3
 80142c2:	d206      	bcs.n	80142d2 <tcp_write+0x14a>
 80142c4:	4b67      	ldr	r3, [pc, #412]	@ (8014464 <tcp_write+0x2dc>)
 80142c6:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 80142ca:	496b      	ldr	r1, [pc, #428]	@ (8014478 <tcp_write+0x2f0>)
 80142cc:	4867      	ldr	r0, [pc, #412]	@ (801446c <tcp_write+0x2e4>)
 80142ce:	f002 fe45 	bl	8016f5c <iprintf>
      seg = last_unsent;
 80142d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80142d6:	8a7b      	ldrh	r3, [r7, #18]
 80142d8:	88fa      	ldrh	r2, [r7, #6]
 80142da:	4293      	cmp	r3, r2
 80142dc:	bf28      	it	cs
 80142de:	4613      	movcs	r3, r2
 80142e0:	b29b      	uxth	r3, r3
 80142e2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80142e4:	4293      	cmp	r3, r2
 80142e6:	bf28      	it	cs
 80142e8:	4613      	movcs	r3, r2
 80142ea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 80142ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80142f0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80142f2:	4413      	add	r3, r2
 80142f4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 80142f8:	8a7a      	ldrh	r2, [r7, #18]
 80142fa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80142fc:	1ad3      	subs	r3, r2, r3
 80142fe:	b29b      	uxth	r3, r3
 8014300:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8014302:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014304:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014306:	1ad3      	subs	r3, r2, r3
 8014308:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801430a:	8a7b      	ldrh	r3, [r7, #18]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d00b      	beq.n	8014328 <tcp_write+0x1a0>
 8014310:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014314:	88fb      	ldrh	r3, [r7, #6]
 8014316:	429a      	cmp	r2, r3
 8014318:	d006      	beq.n	8014328 <tcp_write+0x1a0>
 801431a:	4b52      	ldr	r3, [pc, #328]	@ (8014464 <tcp_write+0x2dc>)
 801431c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014320:	4956      	ldr	r1, [pc, #344]	@ (801447c <tcp_write+0x2f4>)
 8014322:	4852      	ldr	r0, [pc, #328]	@ (801446c <tcp_write+0x2e4>)
 8014324:	f002 fe1a 	bl	8016f5c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8014328:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801432c:	88fb      	ldrh	r3, [r7, #6]
 801432e:	429a      	cmp	r2, r3
 8014330:	f080 8167 	bcs.w	8014602 <tcp_write+0x47a>
 8014334:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014336:	2b00      	cmp	r3, #0
 8014338:	f000 8163 	beq.w	8014602 <tcp_write+0x47a>
 801433c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801433e:	891b      	ldrh	r3, [r3, #8]
 8014340:	2b00      	cmp	r3, #0
 8014342:	f000 815e 	beq.w	8014602 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8014346:	88fa      	ldrh	r2, [r7, #6]
 8014348:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801434c:	1ad2      	subs	r2, r2, r3
 801434e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014350:	4293      	cmp	r3, r2
 8014352:	bfa8      	it	ge
 8014354:	4613      	movge	r3, r2
 8014356:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8014358:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801435a:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801435c:	797b      	ldrb	r3, [r7, #5]
 801435e:	f003 0301 	and.w	r3, r3, #1
 8014362:	2b00      	cmp	r3, #0
 8014364:	d027      	beq.n	80143b6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8014366:	f107 0012 	add.w	r0, r7, #18
 801436a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801436c:	8bf9      	ldrh	r1, [r7, #30]
 801436e:	2301      	movs	r3, #1
 8014370:	9302      	str	r3, [sp, #8]
 8014372:	797b      	ldrb	r3, [r7, #5]
 8014374:	9301      	str	r3, [sp, #4]
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	9300      	str	r3, [sp, #0]
 801437a:	4603      	mov	r3, r0
 801437c:	2000      	movs	r0, #0
 801437e:	f7ff fe0f 	bl	8013fa0 <tcp_pbuf_prealloc>
 8014382:	6578      	str	r0, [r7, #84]	@ 0x54
 8014384:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014386:	2b00      	cmp	r3, #0
 8014388:	f000 8225 	beq.w	80147d6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801438c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801438e:	6858      	ldr	r0, [r3, #4]
 8014390:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014394:	68ba      	ldr	r2, [r7, #8]
 8014396:	4413      	add	r3, r2
 8014398:	8bfa      	ldrh	r2, [r7, #30]
 801439a:	4619      	mov	r1, r3
 801439c:	f002 ff5b 	bl	8017256 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80143a0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80143a2:	f7fa ff1d 	bl	800f1e0 <pbuf_clen>
 80143a6:	4603      	mov	r3, r0
 80143a8:	461a      	mov	r2, r3
 80143aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80143ae:	4413      	add	r3, r2
 80143b0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80143b4:	e041      	b.n	801443a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80143b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80143b8:	685b      	ldr	r3, [r3, #4]
 80143ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80143bc:	e002      	b.n	80143c4 <tcp_write+0x23c>
 80143be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80143c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d1f8      	bne.n	80143be <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80143cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143ce:	7b1b      	ldrb	r3, [r3, #12]
 80143d0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d115      	bne.n	8014404 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80143d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143da:	685b      	ldr	r3, [r3, #4]
 80143dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80143de:	8952      	ldrh	r2, [r2, #10]
 80143e0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80143e2:	68ba      	ldr	r2, [r7, #8]
 80143e4:	429a      	cmp	r2, r3
 80143e6:	d10d      	bne.n	8014404 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80143e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d006      	beq.n	80143fe <tcp_write+0x276>
 80143f0:	4b1c      	ldr	r3, [pc, #112]	@ (8014464 <tcp_write+0x2dc>)
 80143f2:	f240 2231 	movw	r2, #561	@ 0x231
 80143f6:	4922      	ldr	r1, [pc, #136]	@ (8014480 <tcp_write+0x2f8>)
 80143f8:	481c      	ldr	r0, [pc, #112]	@ (801446c <tcp_write+0x2e4>)
 80143fa:	f002 fdaf 	bl	8016f5c <iprintf>
          extendlen = seglen;
 80143fe:	8bfb      	ldrh	r3, [r7, #30]
 8014400:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8014402:	e01a      	b.n	801443a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8014404:	8bfb      	ldrh	r3, [r7, #30]
 8014406:	2201      	movs	r2, #1
 8014408:	4619      	mov	r1, r3
 801440a:	2000      	movs	r0, #0
 801440c:	f7fa fb76 	bl	800eafc <pbuf_alloc>
 8014410:	6578      	str	r0, [r7, #84]	@ 0x54
 8014412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014414:	2b00      	cmp	r3, #0
 8014416:	f000 81e0 	beq.w	80147da <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801441a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801441e:	68ba      	ldr	r2, [r7, #8]
 8014420:	441a      	add	r2, r3
 8014422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014424:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8014426:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8014428:	f7fa feda 	bl	800f1e0 <pbuf_clen>
 801442c:	4603      	mov	r3, r0
 801442e:	461a      	mov	r2, r3
 8014430:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8014434:	4413      	add	r3, r2
 8014436:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801443a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801443e:	8bfb      	ldrh	r3, [r7, #30]
 8014440:	4413      	add	r3, r2
 8014442:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8014446:	e0dc      	b.n	8014602 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801444e:	2b00      	cmp	r3, #0
 8014450:	f000 80d7 	beq.w	8014602 <tcp_write+0x47a>
 8014454:	4b03      	ldr	r3, [pc, #12]	@ (8014464 <tcp_write+0x2dc>)
 8014456:	f240 224a 	movw	r2, #586	@ 0x24a
 801445a:	490a      	ldr	r1, [pc, #40]	@ (8014484 <tcp_write+0x2fc>)
 801445c:	4803      	ldr	r0, [pc, #12]	@ (801446c <tcp_write+0x2e4>)
 801445e:	f002 fd7d 	bl	8016f5c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8014462:	e0ce      	b.n	8014602 <tcp_write+0x47a>
 8014464:	0801ab10 	.word	0x0801ab10
 8014468:	0801ace4 	.word	0x0801ace4
 801446c:	0801ab98 	.word	0x0801ab98
 8014470:	0801acfc 	.word	0x0801acfc
 8014474:	0801ad30 	.word	0x0801ad30
 8014478:	0801ad48 	.word	0x0801ad48
 801447c:	0801ad68 	.word	0x0801ad68
 8014480:	0801ad88 	.word	0x0801ad88
 8014484:	0801adb4 	.word	0x0801adb4
    struct pbuf *p;
    u16_t left = len - pos;
 8014488:	88fa      	ldrh	r2, [r7, #6]
 801448a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801448e:	1ad3      	subs	r3, r2, r3
 8014490:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8014492:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8014496:	b29b      	uxth	r3, r3
 8014498:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801449a:	1ad3      	subs	r3, r2, r3
 801449c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801449e:	8b7a      	ldrh	r2, [r7, #26]
 80144a0:	8bbb      	ldrh	r3, [r7, #28]
 80144a2:	4293      	cmp	r3, r2
 80144a4:	bf28      	it	cs
 80144a6:	4613      	movcs	r3, r2
 80144a8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80144aa:	797b      	ldrb	r3, [r7, #5]
 80144ac:	f003 0301 	and.w	r3, r3, #1
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d036      	beq.n	8014522 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80144b4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80144b8:	b29a      	uxth	r2, r3
 80144ba:	8b3b      	ldrh	r3, [r7, #24]
 80144bc:	4413      	add	r3, r2
 80144be:	b299      	uxth	r1, r3
 80144c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	bf0c      	ite	eq
 80144c6:	2301      	moveq	r3, #1
 80144c8:	2300      	movne	r3, #0
 80144ca:	b2db      	uxtb	r3, r3
 80144cc:	f107 0012 	add.w	r0, r7, #18
 80144d0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80144d2:	9302      	str	r3, [sp, #8]
 80144d4:	797b      	ldrb	r3, [r7, #5]
 80144d6:	9301      	str	r3, [sp, #4]
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	9300      	str	r3, [sp, #0]
 80144dc:	4603      	mov	r3, r0
 80144de:	2036      	movs	r0, #54	@ 0x36
 80144e0:	f7ff fd5e 	bl	8013fa0 <tcp_pbuf_prealloc>
 80144e4:	6338      	str	r0, [r7, #48]	@ 0x30
 80144e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	f000 8178 	beq.w	80147de <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80144ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144f0:	895b      	ldrh	r3, [r3, #10]
 80144f2:	8b3a      	ldrh	r2, [r7, #24]
 80144f4:	429a      	cmp	r2, r3
 80144f6:	d906      	bls.n	8014506 <tcp_write+0x37e>
 80144f8:	4b8c      	ldr	r3, [pc, #560]	@ (801472c <tcp_write+0x5a4>)
 80144fa:	f240 2266 	movw	r2, #614	@ 0x266
 80144fe:	498c      	ldr	r1, [pc, #560]	@ (8014730 <tcp_write+0x5a8>)
 8014500:	488c      	ldr	r0, [pc, #560]	@ (8014734 <tcp_write+0x5ac>)
 8014502:	f002 fd2b 	bl	8016f5c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8014506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014508:	685a      	ldr	r2, [r3, #4]
 801450a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801450e:	18d0      	adds	r0, r2, r3
 8014510:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014514:	68ba      	ldr	r2, [r7, #8]
 8014516:	4413      	add	r3, r2
 8014518:	8b3a      	ldrh	r2, [r7, #24]
 801451a:	4619      	mov	r1, r3
 801451c:	f002 fe9b 	bl	8017256 <memcpy>
 8014520:	e02f      	b.n	8014582 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8014522:	8a7b      	ldrh	r3, [r7, #18]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d006      	beq.n	8014536 <tcp_write+0x3ae>
 8014528:	4b80      	ldr	r3, [pc, #512]	@ (801472c <tcp_write+0x5a4>)
 801452a:	f240 2271 	movw	r2, #625	@ 0x271
 801452e:	4982      	ldr	r1, [pc, #520]	@ (8014738 <tcp_write+0x5b0>)
 8014530:	4880      	ldr	r0, [pc, #512]	@ (8014734 <tcp_write+0x5ac>)
 8014532:	f002 fd13 	bl	8016f5c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8014536:	8b3b      	ldrh	r3, [r7, #24]
 8014538:	2201      	movs	r2, #1
 801453a:	4619      	mov	r1, r3
 801453c:	2036      	movs	r0, #54	@ 0x36
 801453e:	f7fa fadd 	bl	800eafc <pbuf_alloc>
 8014542:	6178      	str	r0, [r7, #20]
 8014544:	697b      	ldr	r3, [r7, #20]
 8014546:	2b00      	cmp	r3, #0
 8014548:	f000 814b 	beq.w	80147e2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801454c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014550:	68ba      	ldr	r2, [r7, #8]
 8014552:	441a      	add	r2, r3
 8014554:	697b      	ldr	r3, [r7, #20]
 8014556:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014558:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801455c:	b29b      	uxth	r3, r3
 801455e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014562:	4619      	mov	r1, r3
 8014564:	2036      	movs	r0, #54	@ 0x36
 8014566:	f7fa fac9 	bl	800eafc <pbuf_alloc>
 801456a:	6338      	str	r0, [r7, #48]	@ 0x30
 801456c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801456e:	2b00      	cmp	r3, #0
 8014570:	d103      	bne.n	801457a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8014572:	6978      	ldr	r0, [r7, #20]
 8014574:	f7fa fda6 	bl	800f0c4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8014578:	e136      	b.n	80147e8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801457a:	6979      	ldr	r1, [r7, #20]
 801457c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801457e:	f7fa fe6f 	bl	800f260 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8014582:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014584:	f7fa fe2c 	bl	800f1e0 <pbuf_clen>
 8014588:	4603      	mov	r3, r0
 801458a:	461a      	mov	r2, r3
 801458c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8014590:	4413      	add	r3, r2
 8014592:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8014596:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801459a:	2b09      	cmp	r3, #9
 801459c:	d903      	bls.n	80145a6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801459e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80145a0:	f7fa fd90 	bl	800f0c4 <pbuf_free>
      goto memerr;
 80145a4:	e120      	b.n	80147e8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80145aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80145ae:	441a      	add	r2, r3
 80145b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80145b4:	9300      	str	r3, [sp, #0]
 80145b6:	4613      	mov	r3, r2
 80145b8:	2200      	movs	r2, #0
 80145ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80145bc:	68f8      	ldr	r0, [r7, #12]
 80145be:	f7ff fc53 	bl	8013e68 <tcp_create_segment>
 80145c2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80145c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	f000 810d 	beq.w	80147e6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80145cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d102      	bne.n	80145d8 <tcp_write+0x450>
      queue = seg;
 80145d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80145d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80145d6:	e00c      	b.n	80145f2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80145d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d106      	bne.n	80145ec <tcp_write+0x464>
 80145de:	4b53      	ldr	r3, [pc, #332]	@ (801472c <tcp_write+0x5a4>)
 80145e0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80145e4:	4955      	ldr	r1, [pc, #340]	@ (801473c <tcp_write+0x5b4>)
 80145e6:	4853      	ldr	r0, [pc, #332]	@ (8014734 <tcp_write+0x5ac>)
 80145e8:	f002 fcb8 	bl	8016f5c <iprintf>
      prev_seg->next = seg;
 80145ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80145ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80145f0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80145f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80145f4:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80145f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80145fa:	8b3b      	ldrh	r3, [r7, #24]
 80145fc:	4413      	add	r3, r2
 80145fe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8014602:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014606:	88fb      	ldrh	r3, [r7, #6]
 8014608:	429a      	cmp	r2, r3
 801460a:	f4ff af3d 	bcc.w	8014488 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801460e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014610:	2b00      	cmp	r3, #0
 8014612:	d02c      	beq.n	801466e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8014614:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014616:	685b      	ldr	r3, [r3, #4]
 8014618:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801461a:	e01e      	b.n	801465a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801461c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801461e:	891a      	ldrh	r2, [r3, #8]
 8014620:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014622:	4413      	add	r3, r2
 8014624:	b29a      	uxth	r2, r3
 8014626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014628:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801462a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d110      	bne.n	8014654 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8014632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014634:	685b      	ldr	r3, [r3, #4]
 8014636:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014638:	8952      	ldrh	r2, [r2, #10]
 801463a:	4413      	add	r3, r2
 801463c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801463e:	68b9      	ldr	r1, [r7, #8]
 8014640:	4618      	mov	r0, r3
 8014642:	f002 fe08 	bl	8017256 <memcpy>
        p->len += oversize_used;
 8014646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014648:	895a      	ldrh	r2, [r3, #10]
 801464a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801464c:	4413      	add	r3, r2
 801464e:	b29a      	uxth	r2, r3
 8014650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014652:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8014654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801465a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801465c:	2b00      	cmp	r3, #0
 801465e:	d1dd      	bne.n	801461c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8014660:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014662:	891a      	ldrh	r2, [r3, #8]
 8014664:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014666:	4413      	add	r3, r2
 8014668:	b29a      	uxth	r2, r3
 801466a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801466c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801466e:	8a7a      	ldrh	r2, [r7, #18]
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8014676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014678:	2b00      	cmp	r3, #0
 801467a:	d018      	beq.n	80146ae <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801467c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801467e:	2b00      	cmp	r3, #0
 8014680:	d106      	bne.n	8014690 <tcp_write+0x508>
 8014682:	4b2a      	ldr	r3, [pc, #168]	@ (801472c <tcp_write+0x5a4>)
 8014684:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8014688:	492d      	ldr	r1, [pc, #180]	@ (8014740 <tcp_write+0x5b8>)
 801468a:	482a      	ldr	r0, [pc, #168]	@ (8014734 <tcp_write+0x5ac>)
 801468c:	f002 fc66 	bl	8016f5c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8014690:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014692:	685b      	ldr	r3, [r3, #4]
 8014694:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014696:	4618      	mov	r0, r3
 8014698:	f7fa fde2 	bl	800f260 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801469c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801469e:	891a      	ldrh	r2, [r3, #8]
 80146a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146a2:	891b      	ldrh	r3, [r3, #8]
 80146a4:	4413      	add	r3, r2
 80146a6:	b29a      	uxth	r2, r3
 80146a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146aa:	811a      	strh	r2, [r3, #8]
 80146ac:	e037      	b.n	801471e <tcp_write+0x596>
  } else if (extendlen > 0) {
 80146ae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d034      	beq.n	801471e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80146b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d003      	beq.n	80146c2 <tcp_write+0x53a>
 80146ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146bc:	685b      	ldr	r3, [r3, #4]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d106      	bne.n	80146d0 <tcp_write+0x548>
 80146c2:	4b1a      	ldr	r3, [pc, #104]	@ (801472c <tcp_write+0x5a4>)
 80146c4:	f240 22e6 	movw	r2, #742	@ 0x2e6
 80146c8:	491e      	ldr	r1, [pc, #120]	@ (8014744 <tcp_write+0x5bc>)
 80146ca:	481a      	ldr	r0, [pc, #104]	@ (8014734 <tcp_write+0x5ac>)
 80146cc:	f002 fc46 	bl	8016f5c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80146d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146d2:	685b      	ldr	r3, [r3, #4]
 80146d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80146d6:	e009      	b.n	80146ec <tcp_write+0x564>
      p->tot_len += extendlen;
 80146d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146da:	891a      	ldrh	r2, [r3, #8]
 80146dc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80146de:	4413      	add	r3, r2
 80146e0:	b29a      	uxth	r2, r3
 80146e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146e4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80146e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80146ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d1f1      	bne.n	80146d8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80146f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146f6:	891a      	ldrh	r2, [r3, #8]
 80146f8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80146fa:	4413      	add	r3, r2
 80146fc:	b29a      	uxth	r2, r3
 80146fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014700:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8014702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014704:	895a      	ldrh	r2, [r3, #10]
 8014706:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014708:	4413      	add	r3, r2
 801470a:	b29a      	uxth	r2, r3
 801470c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801470e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8014710:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014712:	891a      	ldrh	r2, [r3, #8]
 8014714:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014716:	4413      	add	r3, r2
 8014718:	b29a      	uxth	r2, r3
 801471a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801471c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801471e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014720:	2b00      	cmp	r3, #0
 8014722:	d111      	bne.n	8014748 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014728:	66da      	str	r2, [r3, #108]	@ 0x6c
 801472a:	e010      	b.n	801474e <tcp_write+0x5c6>
 801472c:	0801ab10 	.word	0x0801ab10
 8014730:	0801ade4 	.word	0x0801ade4
 8014734:	0801ab98 	.word	0x0801ab98
 8014738:	0801ae24 	.word	0x0801ae24
 801473c:	0801ae34 	.word	0x0801ae34
 8014740:	0801ae48 	.word	0x0801ae48
 8014744:	0801ae80 	.word	0x0801ae80
  } else {
    last_unsent->next = queue;
 8014748:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801474a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801474c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014752:	88fb      	ldrh	r3, [r7, #6]
 8014754:	441a      	add	r2, r3
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8014760:	88fb      	ldrh	r3, [r7, #6]
 8014762:	1ad3      	subs	r3, r2, r3
 8014764:	b29a      	uxth	r2, r3
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8014772:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801477c:	2b00      	cmp	r3, #0
 801477e:	d00e      	beq.n	801479e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014784:	2b00      	cmp	r3, #0
 8014786:	d10a      	bne.n	801479e <tcp_write+0x616>
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801478c:	2b00      	cmp	r3, #0
 801478e:	d106      	bne.n	801479e <tcp_write+0x616>
 8014790:	4b2c      	ldr	r3, [pc, #176]	@ (8014844 <tcp_write+0x6bc>)
 8014792:	f240 3212 	movw	r2, #786	@ 0x312
 8014796:	492c      	ldr	r1, [pc, #176]	@ (8014848 <tcp_write+0x6c0>)
 8014798:	482c      	ldr	r0, [pc, #176]	@ (801484c <tcp_write+0x6c4>)
 801479a:	f002 fbdf 	bl	8016f5c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801479e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d016      	beq.n	80147d2 <tcp_write+0x64a>
 80147a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80147a6:	68db      	ldr	r3, [r3, #12]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d012      	beq.n	80147d2 <tcp_write+0x64a>
 80147ac:	797b      	ldrb	r3, [r7, #5]
 80147ae:	f003 0302 	and.w	r3, r3, #2
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d10d      	bne.n	80147d2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80147b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80147b8:	68db      	ldr	r3, [r3, #12]
 80147ba:	899b      	ldrh	r3, [r3, #12]
 80147bc:	b29c      	uxth	r4, r3
 80147be:	2008      	movs	r0, #8
 80147c0:	f7f6 fcca 	bl	800b158 <lwip_htons>
 80147c4:	4603      	mov	r3, r0
 80147c6:	461a      	mov	r2, r3
 80147c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80147ca:	68db      	ldr	r3, [r3, #12]
 80147cc:	4322      	orrs	r2, r4
 80147ce:	b292      	uxth	r2, r2
 80147d0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80147d2:	2300      	movs	r3, #0
 80147d4:	e031      	b.n	801483a <tcp_write+0x6b2>
          goto memerr;
 80147d6:	bf00      	nop
 80147d8:	e006      	b.n	80147e8 <tcp_write+0x660>
            goto memerr;
 80147da:	bf00      	nop
 80147dc:	e004      	b.n	80147e8 <tcp_write+0x660>
        goto memerr;
 80147de:	bf00      	nop
 80147e0:	e002      	b.n	80147e8 <tcp_write+0x660>
        goto memerr;
 80147e2:	bf00      	nop
 80147e4:	e000      	b.n	80147e8 <tcp_write+0x660>
      goto memerr;
 80147e6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	8b5b      	ldrh	r3, [r3, #26]
 80147ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80147f0:	b29a      	uxth	r2, r3
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80147f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d002      	beq.n	8014802 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80147fc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80147fe:	f7fa fc61 	bl	800f0c4 <pbuf_free>
  }
  if (queue != NULL) {
 8014802:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014804:	2b00      	cmp	r3, #0
 8014806:	d002      	beq.n	801480e <tcp_write+0x686>
    tcp_segs_free(queue);
 8014808:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801480a:	f7fc fb71 	bl	8010ef0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014814:	2b00      	cmp	r3, #0
 8014816:	d00e      	beq.n	8014836 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801481c:	2b00      	cmp	r3, #0
 801481e:	d10a      	bne.n	8014836 <tcp_write+0x6ae>
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014824:	2b00      	cmp	r3, #0
 8014826:	d106      	bne.n	8014836 <tcp_write+0x6ae>
 8014828:	4b06      	ldr	r3, [pc, #24]	@ (8014844 <tcp_write+0x6bc>)
 801482a:	f240 3227 	movw	r2, #807	@ 0x327
 801482e:	4906      	ldr	r1, [pc, #24]	@ (8014848 <tcp_write+0x6c0>)
 8014830:	4806      	ldr	r0, [pc, #24]	@ (801484c <tcp_write+0x6c4>)
 8014832:	f002 fb93 	bl	8016f5c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8014836:	f04f 33ff 	mov.w	r3, #4294967295
}
 801483a:	4618      	mov	r0, r3
 801483c:	375c      	adds	r7, #92	@ 0x5c
 801483e:	46bd      	mov	sp, r7
 8014840:	bd90      	pop	{r4, r7, pc}
 8014842:	bf00      	nop
 8014844:	0801ab10 	.word	0x0801ab10
 8014848:	0801aeb8 	.word	0x0801aeb8
 801484c:	0801ab98 	.word	0x0801ab98

08014850 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014850:	b590      	push	{r4, r7, lr}
 8014852:	b08b      	sub	sp, #44	@ 0x2c
 8014854:	af02      	add	r7, sp, #8
 8014856:	6078      	str	r0, [r7, #4]
 8014858:	460b      	mov	r3, r1
 801485a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801485c:	2300      	movs	r3, #0
 801485e:	61fb      	str	r3, [r7, #28]
 8014860:	2300      	movs	r3, #0
 8014862:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014864:	2300      	movs	r3, #0
 8014866:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d106      	bne.n	801487c <tcp_split_unsent_seg+0x2c>
 801486e:	4b95      	ldr	r3, [pc, #596]	@ (8014ac4 <tcp_split_unsent_seg+0x274>)
 8014870:	f240 324b 	movw	r2, #843	@ 0x34b
 8014874:	4994      	ldr	r1, [pc, #592]	@ (8014ac8 <tcp_split_unsent_seg+0x278>)
 8014876:	4895      	ldr	r0, [pc, #596]	@ (8014acc <tcp_split_unsent_seg+0x27c>)
 8014878:	f002 fb70 	bl	8016f5c <iprintf>

  useg = pcb->unsent;
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014880:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8014882:	697b      	ldr	r3, [r7, #20]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d102      	bne.n	801488e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014888:	f04f 33ff 	mov.w	r3, #4294967295
 801488c:	e116      	b.n	8014abc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801488e:	887b      	ldrh	r3, [r7, #2]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d109      	bne.n	80148a8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014894:	4b8b      	ldr	r3, [pc, #556]	@ (8014ac4 <tcp_split_unsent_seg+0x274>)
 8014896:	f240 3253 	movw	r2, #851	@ 0x353
 801489a:	498d      	ldr	r1, [pc, #564]	@ (8014ad0 <tcp_split_unsent_seg+0x280>)
 801489c:	488b      	ldr	r0, [pc, #556]	@ (8014acc <tcp_split_unsent_seg+0x27c>)
 801489e:	f002 fb5d 	bl	8016f5c <iprintf>
    return ERR_VAL;
 80148a2:	f06f 0305 	mvn.w	r3, #5
 80148a6:	e109      	b.n	8014abc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80148a8:	697b      	ldr	r3, [r7, #20]
 80148aa:	891b      	ldrh	r3, [r3, #8]
 80148ac:	887a      	ldrh	r2, [r7, #2]
 80148ae:	429a      	cmp	r2, r3
 80148b0:	d301      	bcc.n	80148b6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80148b2:	2300      	movs	r3, #0
 80148b4:	e102      	b.n	8014abc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80148ba:	887a      	ldrh	r2, [r7, #2]
 80148bc:	429a      	cmp	r2, r3
 80148be:	d906      	bls.n	80148ce <tcp_split_unsent_seg+0x7e>
 80148c0:	4b80      	ldr	r3, [pc, #512]	@ (8014ac4 <tcp_split_unsent_seg+0x274>)
 80148c2:	f240 325b 	movw	r2, #859	@ 0x35b
 80148c6:	4983      	ldr	r1, [pc, #524]	@ (8014ad4 <tcp_split_unsent_seg+0x284>)
 80148c8:	4880      	ldr	r0, [pc, #512]	@ (8014acc <tcp_split_unsent_seg+0x27c>)
 80148ca:	f002 fb47 	bl	8016f5c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80148ce:	697b      	ldr	r3, [r7, #20]
 80148d0:	891b      	ldrh	r3, [r3, #8]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d106      	bne.n	80148e4 <tcp_split_unsent_seg+0x94>
 80148d6:	4b7b      	ldr	r3, [pc, #492]	@ (8014ac4 <tcp_split_unsent_seg+0x274>)
 80148d8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80148dc:	497e      	ldr	r1, [pc, #504]	@ (8014ad8 <tcp_split_unsent_seg+0x288>)
 80148de:	487b      	ldr	r0, [pc, #492]	@ (8014acc <tcp_split_unsent_seg+0x27c>)
 80148e0:	f002 fb3c 	bl	8016f5c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80148e4:	697b      	ldr	r3, [r7, #20]
 80148e6:	7a9b      	ldrb	r3, [r3, #10]
 80148e8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80148ea:	7bfb      	ldrb	r3, [r7, #15]
 80148ec:	009b      	lsls	r3, r3, #2
 80148ee:	b2db      	uxtb	r3, r3
 80148f0:	f003 0304 	and.w	r3, r3, #4
 80148f4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80148f6:	697b      	ldr	r3, [r7, #20]
 80148f8:	891a      	ldrh	r2, [r3, #8]
 80148fa:	887b      	ldrh	r3, [r7, #2]
 80148fc:	1ad3      	subs	r3, r2, r3
 80148fe:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014900:	7bbb      	ldrb	r3, [r7, #14]
 8014902:	b29a      	uxth	r2, r3
 8014904:	89bb      	ldrh	r3, [r7, #12]
 8014906:	4413      	add	r3, r2
 8014908:	b29b      	uxth	r3, r3
 801490a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801490e:	4619      	mov	r1, r3
 8014910:	2036      	movs	r0, #54	@ 0x36
 8014912:	f7fa f8f3 	bl	800eafc <pbuf_alloc>
 8014916:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014918:	693b      	ldr	r3, [r7, #16]
 801491a:	2b00      	cmp	r3, #0
 801491c:	f000 80b7 	beq.w	8014a8e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014920:	697b      	ldr	r3, [r7, #20]
 8014922:	685b      	ldr	r3, [r3, #4]
 8014924:	891a      	ldrh	r2, [r3, #8]
 8014926:	697b      	ldr	r3, [r7, #20]
 8014928:	891b      	ldrh	r3, [r3, #8]
 801492a:	1ad3      	subs	r3, r2, r3
 801492c:	b29a      	uxth	r2, r3
 801492e:	887b      	ldrh	r3, [r7, #2]
 8014930:	4413      	add	r3, r2
 8014932:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014934:	697b      	ldr	r3, [r7, #20]
 8014936:	6858      	ldr	r0, [r3, #4]
 8014938:	693b      	ldr	r3, [r7, #16]
 801493a:	685a      	ldr	r2, [r3, #4]
 801493c:	7bbb      	ldrb	r3, [r7, #14]
 801493e:	18d1      	adds	r1, r2, r3
 8014940:	897b      	ldrh	r3, [r7, #10]
 8014942:	89ba      	ldrh	r2, [r7, #12]
 8014944:	f7fa fdc4 	bl	800f4d0 <pbuf_copy_partial>
 8014948:	4603      	mov	r3, r0
 801494a:	461a      	mov	r2, r3
 801494c:	89bb      	ldrh	r3, [r7, #12]
 801494e:	4293      	cmp	r3, r2
 8014950:	f040 809f 	bne.w	8014a92 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014954:	697b      	ldr	r3, [r7, #20]
 8014956:	68db      	ldr	r3, [r3, #12]
 8014958:	899b      	ldrh	r3, [r3, #12]
 801495a:	b29b      	uxth	r3, r3
 801495c:	4618      	mov	r0, r3
 801495e:	f7f6 fbfb 	bl	800b158 <lwip_htons>
 8014962:	4603      	mov	r3, r0
 8014964:	b2db      	uxtb	r3, r3
 8014966:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801496a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801496c:	2300      	movs	r3, #0
 801496e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014970:	7efb      	ldrb	r3, [r7, #27]
 8014972:	f003 0308 	and.w	r3, r3, #8
 8014976:	2b00      	cmp	r3, #0
 8014978:	d007      	beq.n	801498a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801497a:	7efb      	ldrb	r3, [r7, #27]
 801497c:	f023 0308 	bic.w	r3, r3, #8
 8014980:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014982:	7ebb      	ldrb	r3, [r7, #26]
 8014984:	f043 0308 	orr.w	r3, r3, #8
 8014988:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801498a:	7efb      	ldrb	r3, [r7, #27]
 801498c:	f003 0301 	and.w	r3, r3, #1
 8014990:	2b00      	cmp	r3, #0
 8014992:	d007      	beq.n	80149a4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014994:	7efb      	ldrb	r3, [r7, #27]
 8014996:	f023 0301 	bic.w	r3, r3, #1
 801499a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801499c:	7ebb      	ldrb	r3, [r7, #26]
 801499e:	f043 0301 	orr.w	r3, r3, #1
 80149a2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80149a4:	697b      	ldr	r3, [r7, #20]
 80149a6:	68db      	ldr	r3, [r3, #12]
 80149a8:	685b      	ldr	r3, [r3, #4]
 80149aa:	4618      	mov	r0, r3
 80149ac:	f7f6 fbea 	bl	800b184 <lwip_htonl>
 80149b0:	4602      	mov	r2, r0
 80149b2:	887b      	ldrh	r3, [r7, #2]
 80149b4:	18d1      	adds	r1, r2, r3
 80149b6:	7eba      	ldrb	r2, [r7, #26]
 80149b8:	7bfb      	ldrb	r3, [r7, #15]
 80149ba:	9300      	str	r3, [sp, #0]
 80149bc:	460b      	mov	r3, r1
 80149be:	6939      	ldr	r1, [r7, #16]
 80149c0:	6878      	ldr	r0, [r7, #4]
 80149c2:	f7ff fa51 	bl	8013e68 <tcp_create_segment>
 80149c6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80149c8:	69fb      	ldr	r3, [r7, #28]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d063      	beq.n	8014a96 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80149ce:	697b      	ldr	r3, [r7, #20]
 80149d0:	685b      	ldr	r3, [r3, #4]
 80149d2:	4618      	mov	r0, r3
 80149d4:	f7fa fc04 	bl	800f1e0 <pbuf_clen>
 80149d8:	4603      	mov	r3, r0
 80149da:	461a      	mov	r2, r3
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80149e2:	1a9b      	subs	r3, r3, r2
 80149e4:	b29a      	uxth	r2, r3
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80149ec:	697b      	ldr	r3, [r7, #20]
 80149ee:	6858      	ldr	r0, [r3, #4]
 80149f0:	697b      	ldr	r3, [r7, #20]
 80149f2:	685b      	ldr	r3, [r3, #4]
 80149f4:	891a      	ldrh	r2, [r3, #8]
 80149f6:	89bb      	ldrh	r3, [r7, #12]
 80149f8:	1ad3      	subs	r3, r2, r3
 80149fa:	b29b      	uxth	r3, r3
 80149fc:	4619      	mov	r1, r3
 80149fe:	f7fa f9db 	bl	800edb8 <pbuf_realloc>
  useg->len -= remainder;
 8014a02:	697b      	ldr	r3, [r7, #20]
 8014a04:	891a      	ldrh	r2, [r3, #8]
 8014a06:	89bb      	ldrh	r3, [r7, #12]
 8014a08:	1ad3      	subs	r3, r2, r3
 8014a0a:	b29a      	uxth	r2, r3
 8014a0c:	697b      	ldr	r3, [r7, #20]
 8014a0e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014a10:	697b      	ldr	r3, [r7, #20]
 8014a12:	68db      	ldr	r3, [r3, #12]
 8014a14:	899b      	ldrh	r3, [r3, #12]
 8014a16:	b29c      	uxth	r4, r3
 8014a18:	7efb      	ldrb	r3, [r7, #27]
 8014a1a:	b29b      	uxth	r3, r3
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	f7f6 fb9b 	bl	800b158 <lwip_htons>
 8014a22:	4603      	mov	r3, r0
 8014a24:	461a      	mov	r2, r3
 8014a26:	697b      	ldr	r3, [r7, #20]
 8014a28:	68db      	ldr	r3, [r3, #12]
 8014a2a:	4322      	orrs	r2, r4
 8014a2c:	b292      	uxth	r2, r2
 8014a2e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014a30:	697b      	ldr	r3, [r7, #20]
 8014a32:	685b      	ldr	r3, [r3, #4]
 8014a34:	4618      	mov	r0, r3
 8014a36:	f7fa fbd3 	bl	800f1e0 <pbuf_clen>
 8014a3a:	4603      	mov	r3, r0
 8014a3c:	461a      	mov	r2, r3
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014a44:	4413      	add	r3, r2
 8014a46:	b29a      	uxth	r2, r3
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014a4e:	69fb      	ldr	r3, [r7, #28]
 8014a50:	685b      	ldr	r3, [r3, #4]
 8014a52:	4618      	mov	r0, r3
 8014a54:	f7fa fbc4 	bl	800f1e0 <pbuf_clen>
 8014a58:	4603      	mov	r3, r0
 8014a5a:	461a      	mov	r2, r3
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014a62:	4413      	add	r3, r2
 8014a64:	b29a      	uxth	r2, r3
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014a6c:	697b      	ldr	r3, [r7, #20]
 8014a6e:	681a      	ldr	r2, [r3, #0]
 8014a70:	69fb      	ldr	r3, [r7, #28]
 8014a72:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014a74:	697b      	ldr	r3, [r7, #20]
 8014a76:	69fa      	ldr	r2, [r7, #28]
 8014a78:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8014a7a:	69fb      	ldr	r3, [r7, #28]
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d103      	bne.n	8014a8a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	2200      	movs	r2, #0
 8014a86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	e016      	b.n	8014abc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8014a8e:	bf00      	nop
 8014a90:	e002      	b.n	8014a98 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014a92:	bf00      	nop
 8014a94:	e000      	b.n	8014a98 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014a96:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014a98:	69fb      	ldr	r3, [r7, #28]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d006      	beq.n	8014aac <tcp_split_unsent_seg+0x25c>
 8014a9e:	4b09      	ldr	r3, [pc, #36]	@ (8014ac4 <tcp_split_unsent_seg+0x274>)
 8014aa0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8014aa4:	490d      	ldr	r1, [pc, #52]	@ (8014adc <tcp_split_unsent_seg+0x28c>)
 8014aa6:	4809      	ldr	r0, [pc, #36]	@ (8014acc <tcp_split_unsent_seg+0x27c>)
 8014aa8:	f002 fa58 	bl	8016f5c <iprintf>
  if (p != NULL) {
 8014aac:	693b      	ldr	r3, [r7, #16]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d002      	beq.n	8014ab8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8014ab2:	6938      	ldr	r0, [r7, #16]
 8014ab4:	f7fa fb06 	bl	800f0c4 <pbuf_free>
  }

  return ERR_MEM;
 8014ab8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014abc:	4618      	mov	r0, r3
 8014abe:	3724      	adds	r7, #36	@ 0x24
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	bd90      	pop	{r4, r7, pc}
 8014ac4:	0801ab10 	.word	0x0801ab10
 8014ac8:	0801aed8 	.word	0x0801aed8
 8014acc:	0801ab98 	.word	0x0801ab98
 8014ad0:	0801aefc 	.word	0x0801aefc
 8014ad4:	0801af20 	.word	0x0801af20
 8014ad8:	0801af30 	.word	0x0801af30
 8014adc:	0801af40 	.word	0x0801af40

08014ae0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014ae0:	b590      	push	{r4, r7, lr}
 8014ae2:	b085      	sub	sp, #20
 8014ae4:	af00      	add	r7, sp, #0
 8014ae6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d106      	bne.n	8014afc <tcp_send_fin+0x1c>
 8014aee:	4b21      	ldr	r3, [pc, #132]	@ (8014b74 <tcp_send_fin+0x94>)
 8014af0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8014af4:	4920      	ldr	r1, [pc, #128]	@ (8014b78 <tcp_send_fin+0x98>)
 8014af6:	4821      	ldr	r0, [pc, #132]	@ (8014b7c <tcp_send_fin+0x9c>)
 8014af8:	f002 fa30 	bl	8016f5c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d02e      	beq.n	8014b62 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014b08:	60fb      	str	r3, [r7, #12]
 8014b0a:	e002      	b.n	8014b12 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d1f8      	bne.n	8014b0c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	68db      	ldr	r3, [r3, #12]
 8014b1e:	899b      	ldrh	r3, [r3, #12]
 8014b20:	b29b      	uxth	r3, r3
 8014b22:	4618      	mov	r0, r3
 8014b24:	f7f6 fb18 	bl	800b158 <lwip_htons>
 8014b28:	4603      	mov	r3, r0
 8014b2a:	b2db      	uxtb	r3, r3
 8014b2c:	f003 0307 	and.w	r3, r3, #7
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d116      	bne.n	8014b62 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	68db      	ldr	r3, [r3, #12]
 8014b38:	899b      	ldrh	r3, [r3, #12]
 8014b3a:	b29c      	uxth	r4, r3
 8014b3c:	2001      	movs	r0, #1
 8014b3e:	f7f6 fb0b 	bl	800b158 <lwip_htons>
 8014b42:	4603      	mov	r3, r0
 8014b44:	461a      	mov	r2, r3
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	68db      	ldr	r3, [r3, #12]
 8014b4a:	4322      	orrs	r2, r4
 8014b4c:	b292      	uxth	r2, r2
 8014b4e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	8b5b      	ldrh	r3, [r3, #26]
 8014b54:	f043 0320 	orr.w	r3, r3, #32
 8014b58:	b29a      	uxth	r2, r3
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8014b5e:	2300      	movs	r3, #0
 8014b60:	e004      	b.n	8014b6c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014b62:	2101      	movs	r1, #1
 8014b64:	6878      	ldr	r0, [r7, #4]
 8014b66:	f000 f80b 	bl	8014b80 <tcp_enqueue_flags>
 8014b6a:	4603      	mov	r3, r0
}
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	3714      	adds	r7, #20
 8014b70:	46bd      	mov	sp, r7
 8014b72:	bd90      	pop	{r4, r7, pc}
 8014b74:	0801ab10 	.word	0x0801ab10
 8014b78:	0801af4c 	.word	0x0801af4c
 8014b7c:	0801ab98 	.word	0x0801ab98

08014b80 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b08a      	sub	sp, #40	@ 0x28
 8014b84:	af02      	add	r7, sp, #8
 8014b86:	6078      	str	r0, [r7, #4]
 8014b88:	460b      	mov	r3, r1
 8014b8a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014b90:	2300      	movs	r3, #0
 8014b92:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014b94:	78fb      	ldrb	r3, [r7, #3]
 8014b96:	f003 0303 	and.w	r3, r3, #3
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d106      	bne.n	8014bac <tcp_enqueue_flags+0x2c>
 8014b9e:	4b67      	ldr	r3, [pc, #412]	@ (8014d3c <tcp_enqueue_flags+0x1bc>)
 8014ba0:	f240 4211 	movw	r2, #1041	@ 0x411
 8014ba4:	4966      	ldr	r1, [pc, #408]	@ (8014d40 <tcp_enqueue_flags+0x1c0>)
 8014ba6:	4867      	ldr	r0, [pc, #412]	@ (8014d44 <tcp_enqueue_flags+0x1c4>)
 8014ba8:	f002 f9d8 	bl	8016f5c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d106      	bne.n	8014bc0 <tcp_enqueue_flags+0x40>
 8014bb2:	4b62      	ldr	r3, [pc, #392]	@ (8014d3c <tcp_enqueue_flags+0x1bc>)
 8014bb4:	f240 4213 	movw	r2, #1043	@ 0x413
 8014bb8:	4963      	ldr	r1, [pc, #396]	@ (8014d48 <tcp_enqueue_flags+0x1c8>)
 8014bba:	4862      	ldr	r0, [pc, #392]	@ (8014d44 <tcp_enqueue_flags+0x1c4>)
 8014bbc:	f002 f9ce 	bl	8016f5c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014bc0:	78fb      	ldrb	r3, [r7, #3]
 8014bc2:	f003 0302 	and.w	r3, r3, #2
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d001      	beq.n	8014bce <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8014bca:	2301      	movs	r3, #1
 8014bcc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014bce:	7ffb      	ldrb	r3, [r7, #31]
 8014bd0:	009b      	lsls	r3, r3, #2
 8014bd2:	b2db      	uxtb	r3, r3
 8014bd4:	f003 0304 	and.w	r3, r3, #4
 8014bd8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014bda:	7dfb      	ldrb	r3, [r7, #23]
 8014bdc:	b29b      	uxth	r3, r3
 8014bde:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014be2:	4619      	mov	r1, r3
 8014be4:	2036      	movs	r0, #54	@ 0x36
 8014be6:	f7f9 ff89 	bl	800eafc <pbuf_alloc>
 8014bea:	6138      	str	r0, [r7, #16]
 8014bec:	693b      	ldr	r3, [r7, #16]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d109      	bne.n	8014c06 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	8b5b      	ldrh	r3, [r3, #26]
 8014bf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014bfa:	b29a      	uxth	r2, r3
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014c00:	f04f 33ff 	mov.w	r3, #4294967295
 8014c04:	e095      	b.n	8014d32 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014c06:	693b      	ldr	r3, [r7, #16]
 8014c08:	895a      	ldrh	r2, [r3, #10]
 8014c0a:	7dfb      	ldrb	r3, [r7, #23]
 8014c0c:	b29b      	uxth	r3, r3
 8014c0e:	429a      	cmp	r2, r3
 8014c10:	d206      	bcs.n	8014c20 <tcp_enqueue_flags+0xa0>
 8014c12:	4b4a      	ldr	r3, [pc, #296]	@ (8014d3c <tcp_enqueue_flags+0x1bc>)
 8014c14:	f240 4239 	movw	r2, #1081	@ 0x439
 8014c18:	494c      	ldr	r1, [pc, #304]	@ (8014d4c <tcp_enqueue_flags+0x1cc>)
 8014c1a:	484a      	ldr	r0, [pc, #296]	@ (8014d44 <tcp_enqueue_flags+0x1c4>)
 8014c1c:	f002 f99e 	bl	8016f5c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8014c24:	78fa      	ldrb	r2, [r7, #3]
 8014c26:	7ffb      	ldrb	r3, [r7, #31]
 8014c28:	9300      	str	r3, [sp, #0]
 8014c2a:	460b      	mov	r3, r1
 8014c2c:	6939      	ldr	r1, [r7, #16]
 8014c2e:	6878      	ldr	r0, [r7, #4]
 8014c30:	f7ff f91a 	bl	8013e68 <tcp_create_segment>
 8014c34:	60f8      	str	r0, [r7, #12]
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d109      	bne.n	8014c50 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	8b5b      	ldrh	r3, [r3, #26]
 8014c40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014c44:	b29a      	uxth	r2, r3
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8014c4e:	e070      	b.n	8014d32 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	68db      	ldr	r3, [r3, #12]
 8014c54:	f003 0303 	and.w	r3, r3, #3
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d006      	beq.n	8014c6a <tcp_enqueue_flags+0xea>
 8014c5c:	4b37      	ldr	r3, [pc, #220]	@ (8014d3c <tcp_enqueue_flags+0x1bc>)
 8014c5e:	f240 4242 	movw	r2, #1090	@ 0x442
 8014c62:	493b      	ldr	r1, [pc, #236]	@ (8014d50 <tcp_enqueue_flags+0x1d0>)
 8014c64:	4837      	ldr	r0, [pc, #220]	@ (8014d44 <tcp_enqueue_flags+0x1c4>)
 8014c66:	f002 f979 	bl	8016f5c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	891b      	ldrh	r3, [r3, #8]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d006      	beq.n	8014c80 <tcp_enqueue_flags+0x100>
 8014c72:	4b32      	ldr	r3, [pc, #200]	@ (8014d3c <tcp_enqueue_flags+0x1bc>)
 8014c74:	f240 4243 	movw	r2, #1091	@ 0x443
 8014c78:	4936      	ldr	r1, [pc, #216]	@ (8014d54 <tcp_enqueue_flags+0x1d4>)
 8014c7a:	4832      	ldr	r0, [pc, #200]	@ (8014d44 <tcp_enqueue_flags+0x1c4>)
 8014c7c:	f002 f96e 	bl	8016f5c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d103      	bne.n	8014c90 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	68fa      	ldr	r2, [r7, #12]
 8014c8c:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014c8e:	e00d      	b.n	8014cac <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014c94:	61bb      	str	r3, [r7, #24]
 8014c96:	e002      	b.n	8014c9e <tcp_enqueue_flags+0x11e>
 8014c98:	69bb      	ldr	r3, [r7, #24]
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	61bb      	str	r3, [r7, #24]
 8014c9e:	69bb      	ldr	r3, [r7, #24]
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d1f8      	bne.n	8014c98 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014ca6:	69bb      	ldr	r3, [r7, #24]
 8014ca8:	68fa      	ldr	r2, [r7, #12]
 8014caa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	2200      	movs	r2, #0
 8014cb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014cb4:	78fb      	ldrb	r3, [r7, #3]
 8014cb6:	f003 0302 	and.w	r3, r3, #2
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d104      	bne.n	8014cc8 <tcp_enqueue_flags+0x148>
 8014cbe:	78fb      	ldrb	r3, [r7, #3]
 8014cc0:	f003 0301 	and.w	r3, r3, #1
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d004      	beq.n	8014cd2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014ccc:	1c5a      	adds	r2, r3, #1
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014cd2:	78fb      	ldrb	r3, [r7, #3]
 8014cd4:	f003 0301 	and.w	r3, r3, #1
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d006      	beq.n	8014cea <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	8b5b      	ldrh	r3, [r3, #26]
 8014ce0:	f043 0320 	orr.w	r3, r3, #32
 8014ce4:	b29a      	uxth	r2, r3
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	685b      	ldr	r3, [r3, #4]
 8014cee:	4618      	mov	r0, r3
 8014cf0:	f7fa fa76 	bl	800f1e0 <pbuf_clen>
 8014cf4:	4603      	mov	r3, r0
 8014cf6:	461a      	mov	r2, r3
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014cfe:	4413      	add	r3, r2
 8014d00:	b29a      	uxth	r2, r3
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d00e      	beq.n	8014d30 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d10a      	bne.n	8014d30 <tcp_enqueue_flags+0x1b0>
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d106      	bne.n	8014d30 <tcp_enqueue_flags+0x1b0>
 8014d22:	4b06      	ldr	r3, [pc, #24]	@ (8014d3c <tcp_enqueue_flags+0x1bc>)
 8014d24:	f240 4265 	movw	r2, #1125	@ 0x465
 8014d28:	490b      	ldr	r1, [pc, #44]	@ (8014d58 <tcp_enqueue_flags+0x1d8>)
 8014d2a:	4806      	ldr	r0, [pc, #24]	@ (8014d44 <tcp_enqueue_flags+0x1c4>)
 8014d2c:	f002 f916 	bl	8016f5c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014d30:	2300      	movs	r3, #0
}
 8014d32:	4618      	mov	r0, r3
 8014d34:	3720      	adds	r7, #32
 8014d36:	46bd      	mov	sp, r7
 8014d38:	bd80      	pop	{r7, pc}
 8014d3a:	bf00      	nop
 8014d3c:	0801ab10 	.word	0x0801ab10
 8014d40:	0801af68 	.word	0x0801af68
 8014d44:	0801ab98 	.word	0x0801ab98
 8014d48:	0801afc0 	.word	0x0801afc0
 8014d4c:	0801afe0 	.word	0x0801afe0
 8014d50:	0801b01c 	.word	0x0801b01c
 8014d54:	0801b034 	.word	0x0801b034
 8014d58:	0801b060 	.word	0x0801b060

08014d5c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014d5c:	b5b0      	push	{r4, r5, r7, lr}
 8014d5e:	b08a      	sub	sp, #40	@ 0x28
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d106      	bne.n	8014d78 <tcp_output+0x1c>
 8014d6a:	4b8a      	ldr	r3, [pc, #552]	@ (8014f94 <tcp_output+0x238>)
 8014d6c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8014d70:	4989      	ldr	r1, [pc, #548]	@ (8014f98 <tcp_output+0x23c>)
 8014d72:	488a      	ldr	r0, [pc, #552]	@ (8014f9c <tcp_output+0x240>)
 8014d74:	f002 f8f2 	bl	8016f5c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	7d1b      	ldrb	r3, [r3, #20]
 8014d7c:	2b01      	cmp	r3, #1
 8014d7e:	d106      	bne.n	8014d8e <tcp_output+0x32>
 8014d80:	4b84      	ldr	r3, [pc, #528]	@ (8014f94 <tcp_output+0x238>)
 8014d82:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8014d86:	4986      	ldr	r1, [pc, #536]	@ (8014fa0 <tcp_output+0x244>)
 8014d88:	4884      	ldr	r0, [pc, #528]	@ (8014f9c <tcp_output+0x240>)
 8014d8a:	f002 f8e7 	bl	8016f5c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8014d8e:	4b85      	ldr	r3, [pc, #532]	@ (8014fa4 <tcp_output+0x248>)
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	687a      	ldr	r2, [r7, #4]
 8014d94:	429a      	cmp	r2, r3
 8014d96:	d101      	bne.n	8014d9c <tcp_output+0x40>
    return ERR_OK;
 8014d98:	2300      	movs	r3, #0
 8014d9a:	e1ce      	b.n	801513a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014da8:	4293      	cmp	r3, r2
 8014daa:	bf28      	it	cs
 8014dac:	4613      	movcs	r3, r2
 8014dae:	b29b      	uxth	r3, r3
 8014db0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014db6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8014db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d10b      	bne.n	8014dd6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	8b5b      	ldrh	r3, [r3, #26]
 8014dc2:	f003 0302 	and.w	r3, r3, #2
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	f000 81aa 	beq.w	8015120 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8014dcc:	6878      	ldr	r0, [r7, #4]
 8014dce:	f000 fdcb 	bl	8015968 <tcp_send_empty_ack>
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	e1b1      	b.n	801513a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014dd6:	6879      	ldr	r1, [r7, #4]
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	3304      	adds	r3, #4
 8014ddc:	461a      	mov	r2, r3
 8014dde:	6878      	ldr	r0, [r7, #4]
 8014de0:	f7ff f826 	bl	8013e30 <tcp_route>
 8014de4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014de6:	697b      	ldr	r3, [r7, #20]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d102      	bne.n	8014df2 <tcp_output+0x96>
    return ERR_RTE;
 8014dec:	f06f 0303 	mvn.w	r3, #3
 8014df0:	e1a3      	b.n	801513a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d003      	beq.n	8014e00 <tcp_output+0xa4>
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d111      	bne.n	8014e24 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014e00:	697b      	ldr	r3, [r7, #20]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d002      	beq.n	8014e0c <tcp_output+0xb0>
 8014e06:	697b      	ldr	r3, [r7, #20]
 8014e08:	3304      	adds	r3, #4
 8014e0a:	e000      	b.n	8014e0e <tcp_output+0xb2>
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014e10:	693b      	ldr	r3, [r7, #16]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d102      	bne.n	8014e1c <tcp_output+0xc0>
      return ERR_RTE;
 8014e16:	f06f 0303 	mvn.w	r3, #3
 8014e1a:	e18e      	b.n	801513a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014e1c:	693b      	ldr	r3, [r7, #16]
 8014e1e:	681a      	ldr	r2, [r3, #0]
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e26:	68db      	ldr	r3, [r3, #12]
 8014e28:	685b      	ldr	r3, [r3, #4]
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	f7f6 f9aa 	bl	800b184 <lwip_htonl>
 8014e30:	4602      	mov	r2, r0
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014e36:	1ad3      	subs	r3, r2, r3
 8014e38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014e3a:	8912      	ldrh	r2, [r2, #8]
 8014e3c:	4413      	add	r3, r2
 8014e3e:	69ba      	ldr	r2, [r7, #24]
 8014e40:	429a      	cmp	r2, r3
 8014e42:	d227      	bcs.n	8014e94 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014e4a:	461a      	mov	r2, r3
 8014e4c:	69bb      	ldr	r3, [r7, #24]
 8014e4e:	4293      	cmp	r3, r2
 8014e50:	d114      	bne.n	8014e7c <tcp_output+0x120>
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d110      	bne.n	8014e7c <tcp_output+0x120>
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d10b      	bne.n	8014e7c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	2200      	movs	r2, #0
 8014e68:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	2201      	movs	r2, #1
 8014e70:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	2200      	movs	r2, #0
 8014e78:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	8b5b      	ldrh	r3, [r3, #26]
 8014e80:	f003 0302 	and.w	r3, r3, #2
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	f000 814d 	beq.w	8015124 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8014e8a:	6878      	ldr	r0, [r7, #4]
 8014e8c:	f000 fd6c 	bl	8015968 <tcp_send_empty_ack>
 8014e90:	4603      	mov	r3, r0
 8014e92:	e152      	b.n	801513a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	2200      	movs	r2, #0
 8014e98:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014ea0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014ea2:	6a3b      	ldr	r3, [r7, #32]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	f000 811c 	beq.w	80150e2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8014eaa:	e002      	b.n	8014eb2 <tcp_output+0x156>
 8014eac:	6a3b      	ldr	r3, [r7, #32]
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	623b      	str	r3, [r7, #32]
 8014eb2:	6a3b      	ldr	r3, [r7, #32]
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d1f8      	bne.n	8014eac <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8014eba:	e112      	b.n	80150e2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ebe:	68db      	ldr	r3, [r3, #12]
 8014ec0:	899b      	ldrh	r3, [r3, #12]
 8014ec2:	b29b      	uxth	r3, r3
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	f7f6 f947 	bl	800b158 <lwip_htons>
 8014eca:	4603      	mov	r3, r0
 8014ecc:	b2db      	uxtb	r3, r3
 8014ece:	f003 0304 	and.w	r3, r3, #4
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d006      	beq.n	8014ee4 <tcp_output+0x188>
 8014ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8014f94 <tcp_output+0x238>)
 8014ed8:	f240 5236 	movw	r2, #1334	@ 0x536
 8014edc:	4932      	ldr	r1, [pc, #200]	@ (8014fa8 <tcp_output+0x24c>)
 8014ede:	482f      	ldr	r0, [pc, #188]	@ (8014f9c <tcp_output+0x240>)
 8014ee0:	f002 f83c 	bl	8016f5c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d01f      	beq.n	8014f2c <tcp_output+0x1d0>
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	8b5b      	ldrh	r3, [r3, #26]
 8014ef0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d119      	bne.n	8014f2c <tcp_output+0x1d0>
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d00b      	beq.n	8014f18 <tcp_output+0x1bc>
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d110      	bne.n	8014f2c <tcp_output+0x1d0>
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f0e:	891a      	ldrh	r2, [r3, #8]
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014f14:	429a      	cmp	r2, r3
 8014f16:	d209      	bcs.n	8014f2c <tcp_output+0x1d0>
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d004      	beq.n	8014f2c <tcp_output+0x1d0>
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014f28:	2b08      	cmp	r3, #8
 8014f2a:	d901      	bls.n	8014f30 <tcp_output+0x1d4>
 8014f2c:	2301      	movs	r3, #1
 8014f2e:	e000      	b.n	8014f32 <tcp_output+0x1d6>
 8014f30:	2300      	movs	r3, #0
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d106      	bne.n	8014f44 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	8b5b      	ldrh	r3, [r3, #26]
 8014f3a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	f000 80e4 	beq.w	801510c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	7d1b      	ldrb	r3, [r3, #20]
 8014f48:	2b02      	cmp	r3, #2
 8014f4a:	d00d      	beq.n	8014f68 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f4e:	68db      	ldr	r3, [r3, #12]
 8014f50:	899b      	ldrh	r3, [r3, #12]
 8014f52:	b29c      	uxth	r4, r3
 8014f54:	2010      	movs	r0, #16
 8014f56:	f7f6 f8ff 	bl	800b158 <lwip_htons>
 8014f5a:	4603      	mov	r3, r0
 8014f5c:	461a      	mov	r2, r3
 8014f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f60:	68db      	ldr	r3, [r3, #12]
 8014f62:	4322      	orrs	r2, r4
 8014f64:	b292      	uxth	r2, r2
 8014f66:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014f68:	697a      	ldr	r2, [r7, #20]
 8014f6a:	6879      	ldr	r1, [r7, #4]
 8014f6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014f6e:	f000 f909 	bl	8015184 <tcp_output_segment>
 8014f72:	4603      	mov	r3, r0
 8014f74:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d016      	beq.n	8014fac <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	8b5b      	ldrh	r3, [r3, #26]
 8014f82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014f86:	b29a      	uxth	r2, r3
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	835a      	strh	r2, [r3, #26]
      return err;
 8014f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f90:	e0d3      	b.n	801513a <tcp_output+0x3de>
 8014f92:	bf00      	nop
 8014f94:	0801ab10 	.word	0x0801ab10
 8014f98:	0801b088 	.word	0x0801b088
 8014f9c:	0801ab98 	.word	0x0801ab98
 8014fa0:	0801b0a0 	.word	0x0801b0a0
 8014fa4:	2400ce00 	.word	0x2400ce00
 8014fa8:	0801b0c8 	.word	0x0801b0c8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fae:	681a      	ldr	r2, [r3, #0]
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	7d1b      	ldrb	r3, [r3, #20]
 8014fb8:	2b02      	cmp	r3, #2
 8014fba:	d006      	beq.n	8014fca <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	8b5b      	ldrh	r3, [r3, #26]
 8014fc0:	f023 0303 	bic.w	r3, r3, #3
 8014fc4:	b29a      	uxth	r2, r3
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fcc:	68db      	ldr	r3, [r3, #12]
 8014fce:	685b      	ldr	r3, [r3, #4]
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	f7f6 f8d7 	bl	800b184 <lwip_htonl>
 8014fd6:	4604      	mov	r4, r0
 8014fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fda:	891b      	ldrh	r3, [r3, #8]
 8014fdc:	461d      	mov	r5, r3
 8014fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fe0:	68db      	ldr	r3, [r3, #12]
 8014fe2:	899b      	ldrh	r3, [r3, #12]
 8014fe4:	b29b      	uxth	r3, r3
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	f7f6 f8b6 	bl	800b158 <lwip_htons>
 8014fec:	4603      	mov	r3, r0
 8014fee:	b2db      	uxtb	r3, r3
 8014ff0:	f003 0303 	and.w	r3, r3, #3
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d001      	beq.n	8014ffc <tcp_output+0x2a0>
 8014ff8:	2301      	movs	r3, #1
 8014ffa:	e000      	b.n	8014ffe <tcp_output+0x2a2>
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	442b      	add	r3, r5
 8015000:	4423      	add	r3, r4
 8015002:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015008:	68bb      	ldr	r3, [r7, #8]
 801500a:	1ad3      	subs	r3, r2, r3
 801500c:	2b00      	cmp	r3, #0
 801500e:	da02      	bge.n	8015016 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	68ba      	ldr	r2, [r7, #8]
 8015014:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015018:	891b      	ldrh	r3, [r3, #8]
 801501a:	461c      	mov	r4, r3
 801501c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801501e:	68db      	ldr	r3, [r3, #12]
 8015020:	899b      	ldrh	r3, [r3, #12]
 8015022:	b29b      	uxth	r3, r3
 8015024:	4618      	mov	r0, r3
 8015026:	f7f6 f897 	bl	800b158 <lwip_htons>
 801502a:	4603      	mov	r3, r0
 801502c:	b2db      	uxtb	r3, r3
 801502e:	f003 0303 	and.w	r3, r3, #3
 8015032:	2b00      	cmp	r3, #0
 8015034:	d001      	beq.n	801503a <tcp_output+0x2de>
 8015036:	2301      	movs	r3, #1
 8015038:	e000      	b.n	801503c <tcp_output+0x2e0>
 801503a:	2300      	movs	r3, #0
 801503c:	4423      	add	r3, r4
 801503e:	2b00      	cmp	r3, #0
 8015040:	d049      	beq.n	80150d6 <tcp_output+0x37a>
      seg->next = NULL;
 8015042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015044:	2200      	movs	r2, #0
 8015046:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801504c:	2b00      	cmp	r3, #0
 801504e:	d105      	bne.n	801505c <tcp_output+0x300>
        pcb->unacked = seg;
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015054:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8015056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015058:	623b      	str	r3, [r7, #32]
 801505a:	e03f      	b.n	80150dc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801505c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801505e:	68db      	ldr	r3, [r3, #12]
 8015060:	685b      	ldr	r3, [r3, #4]
 8015062:	4618      	mov	r0, r3
 8015064:	f7f6 f88e 	bl	800b184 <lwip_htonl>
 8015068:	4604      	mov	r4, r0
 801506a:	6a3b      	ldr	r3, [r7, #32]
 801506c:	68db      	ldr	r3, [r3, #12]
 801506e:	685b      	ldr	r3, [r3, #4]
 8015070:	4618      	mov	r0, r3
 8015072:	f7f6 f887 	bl	800b184 <lwip_htonl>
 8015076:	4603      	mov	r3, r0
 8015078:	1ae3      	subs	r3, r4, r3
 801507a:	2b00      	cmp	r3, #0
 801507c:	da24      	bge.n	80150c8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	3370      	adds	r3, #112	@ 0x70
 8015082:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015084:	e002      	b.n	801508c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015086:	69fb      	ldr	r3, [r7, #28]
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801508c:	69fb      	ldr	r3, [r7, #28]
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d011      	beq.n	80150b8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015094:	69fb      	ldr	r3, [r7, #28]
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	68db      	ldr	r3, [r3, #12]
 801509a:	685b      	ldr	r3, [r3, #4]
 801509c:	4618      	mov	r0, r3
 801509e:	f7f6 f871 	bl	800b184 <lwip_htonl>
 80150a2:	4604      	mov	r4, r0
 80150a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150a6:	68db      	ldr	r3, [r3, #12]
 80150a8:	685b      	ldr	r3, [r3, #4]
 80150aa:	4618      	mov	r0, r3
 80150ac:	f7f6 f86a 	bl	800b184 <lwip_htonl>
 80150b0:	4603      	mov	r3, r0
 80150b2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	dbe6      	blt.n	8015086 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80150b8:	69fb      	ldr	r3, [r7, #28]
 80150ba:	681a      	ldr	r2, [r3, #0]
 80150bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150be:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80150c0:	69fb      	ldr	r3, [r7, #28]
 80150c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80150c4:	601a      	str	r2, [r3, #0]
 80150c6:	e009      	b.n	80150dc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80150c8:	6a3b      	ldr	r3, [r7, #32]
 80150ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80150cc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80150ce:	6a3b      	ldr	r3, [r7, #32]
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	623b      	str	r3, [r7, #32]
 80150d4:	e002      	b.n	80150dc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80150d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80150d8:	f7fb ff1f 	bl	8010f1a <tcp_seg_free>
    }
    seg = pcb->unsent;
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80150e0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80150e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d012      	beq.n	801510e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80150e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150ea:	68db      	ldr	r3, [r3, #12]
 80150ec:	685b      	ldr	r3, [r3, #4]
 80150ee:	4618      	mov	r0, r3
 80150f0:	f7f6 f848 	bl	800b184 <lwip_htonl>
 80150f4:	4602      	mov	r2, r0
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80150fa:	1ad3      	subs	r3, r2, r3
 80150fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80150fe:	8912      	ldrh	r2, [r2, #8]
 8015100:	4413      	add	r3, r2
  while (seg != NULL &&
 8015102:	69ba      	ldr	r2, [r7, #24]
 8015104:	429a      	cmp	r2, r3
 8015106:	f4bf aed9 	bcs.w	8014ebc <tcp_output+0x160>
 801510a:	e000      	b.n	801510e <tcp_output+0x3b2>
      break;
 801510c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015112:	2b00      	cmp	r3, #0
 8015114:	d108      	bne.n	8015128 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	2200      	movs	r2, #0
 801511a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801511e:	e004      	b.n	801512a <tcp_output+0x3ce>
    goto output_done;
 8015120:	bf00      	nop
 8015122:	e002      	b.n	801512a <tcp_output+0x3ce>
    goto output_done;
 8015124:	bf00      	nop
 8015126:	e000      	b.n	801512a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015128:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	8b5b      	ldrh	r3, [r3, #26]
 801512e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015132:	b29a      	uxth	r2, r3
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015138:	2300      	movs	r3, #0
}
 801513a:	4618      	mov	r0, r3
 801513c:	3728      	adds	r7, #40	@ 0x28
 801513e:	46bd      	mov	sp, r7
 8015140:	bdb0      	pop	{r4, r5, r7, pc}
 8015142:	bf00      	nop

08015144 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015144:	b580      	push	{r7, lr}
 8015146:	b082      	sub	sp, #8
 8015148:	af00      	add	r7, sp, #0
 801514a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d106      	bne.n	8015160 <tcp_output_segment_busy+0x1c>
 8015152:	4b09      	ldr	r3, [pc, #36]	@ (8015178 <tcp_output_segment_busy+0x34>)
 8015154:	f240 529a 	movw	r2, #1434	@ 0x59a
 8015158:	4908      	ldr	r1, [pc, #32]	@ (801517c <tcp_output_segment_busy+0x38>)
 801515a:	4809      	ldr	r0, [pc, #36]	@ (8015180 <tcp_output_segment_busy+0x3c>)
 801515c:	f001 fefe 	bl	8016f5c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	685b      	ldr	r3, [r3, #4]
 8015164:	7b9b      	ldrb	r3, [r3, #14]
 8015166:	2b01      	cmp	r3, #1
 8015168:	d001      	beq.n	801516e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801516a:	2301      	movs	r3, #1
 801516c:	e000      	b.n	8015170 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801516e:	2300      	movs	r3, #0
}
 8015170:	4618      	mov	r0, r3
 8015172:	3708      	adds	r7, #8
 8015174:	46bd      	mov	sp, r7
 8015176:	bd80      	pop	{r7, pc}
 8015178:	0801ab10 	.word	0x0801ab10
 801517c:	0801b0e0 	.word	0x0801b0e0
 8015180:	0801ab98 	.word	0x0801ab98

08015184 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015184:	b5b0      	push	{r4, r5, r7, lr}
 8015186:	b08c      	sub	sp, #48	@ 0x30
 8015188:	af04      	add	r7, sp, #16
 801518a:	60f8      	str	r0, [r7, #12]
 801518c:	60b9      	str	r1, [r7, #8]
 801518e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d106      	bne.n	80151a4 <tcp_output_segment+0x20>
 8015196:	4b64      	ldr	r3, [pc, #400]	@ (8015328 <tcp_output_segment+0x1a4>)
 8015198:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801519c:	4963      	ldr	r1, [pc, #396]	@ (801532c <tcp_output_segment+0x1a8>)
 801519e:	4864      	ldr	r0, [pc, #400]	@ (8015330 <tcp_output_segment+0x1ac>)
 80151a0:	f001 fedc 	bl	8016f5c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80151a4:	68bb      	ldr	r3, [r7, #8]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d106      	bne.n	80151b8 <tcp_output_segment+0x34>
 80151aa:	4b5f      	ldr	r3, [pc, #380]	@ (8015328 <tcp_output_segment+0x1a4>)
 80151ac:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80151b0:	4960      	ldr	r1, [pc, #384]	@ (8015334 <tcp_output_segment+0x1b0>)
 80151b2:	485f      	ldr	r0, [pc, #380]	@ (8015330 <tcp_output_segment+0x1ac>)
 80151b4:	f001 fed2 	bl	8016f5c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d106      	bne.n	80151cc <tcp_output_segment+0x48>
 80151be:	4b5a      	ldr	r3, [pc, #360]	@ (8015328 <tcp_output_segment+0x1a4>)
 80151c0:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80151c4:	495c      	ldr	r1, [pc, #368]	@ (8015338 <tcp_output_segment+0x1b4>)
 80151c6:	485a      	ldr	r0, [pc, #360]	@ (8015330 <tcp_output_segment+0x1ac>)
 80151c8:	f001 fec8 	bl	8016f5c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80151cc:	68f8      	ldr	r0, [r7, #12]
 80151ce:	f7ff ffb9 	bl	8015144 <tcp_output_segment_busy>
 80151d2:	4603      	mov	r3, r0
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d001      	beq.n	80151dc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80151d8:	2300      	movs	r3, #0
 80151da:	e0a1      	b.n	8015320 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80151dc:	68bb      	ldr	r3, [r7, #8]
 80151de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	68dc      	ldr	r4, [r3, #12]
 80151e4:	4610      	mov	r0, r2
 80151e6:	f7f5 ffcd 	bl	800b184 <lwip_htonl>
 80151ea:	4603      	mov	r3, r0
 80151ec:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80151ee:	68bb      	ldr	r3, [r7, #8]
 80151f0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	68dc      	ldr	r4, [r3, #12]
 80151f6:	4610      	mov	r0, r2
 80151f8:	f7f5 ffae 	bl	800b158 <lwip_htons>
 80151fc:	4603      	mov	r3, r0
 80151fe:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015200:	68bb      	ldr	r3, [r7, #8]
 8015202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015204:	68ba      	ldr	r2, [r7, #8]
 8015206:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8015208:	441a      	add	r2, r3
 801520a:	68bb      	ldr	r3, [r7, #8]
 801520c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	68db      	ldr	r3, [r3, #12]
 8015212:	3314      	adds	r3, #20
 8015214:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	7a9b      	ldrb	r3, [r3, #10]
 801521a:	f003 0301 	and.w	r3, r3, #1
 801521e:	2b00      	cmp	r3, #0
 8015220:	d015      	beq.n	801524e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015222:	68bb      	ldr	r3, [r7, #8]
 8015224:	3304      	adds	r3, #4
 8015226:	461a      	mov	r2, r3
 8015228:	6879      	ldr	r1, [r7, #4]
 801522a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801522e:	f7fc fa39 	bl	80116a4 <tcp_eff_send_mss_netif>
 8015232:	4603      	mov	r3, r0
 8015234:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015236:	8b7b      	ldrh	r3, [r7, #26]
 8015238:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801523c:	4618      	mov	r0, r3
 801523e:	f7f5 ffa1 	bl	800b184 <lwip_htonl>
 8015242:	4602      	mov	r2, r0
 8015244:	69fb      	ldr	r3, [r7, #28]
 8015246:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015248:	69fb      	ldr	r3, [r7, #28]
 801524a:	3304      	adds	r3, #4
 801524c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801524e:	68bb      	ldr	r3, [r7, #8]
 8015250:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015254:	2b00      	cmp	r3, #0
 8015256:	da02      	bge.n	801525e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015258:	68bb      	ldr	r3, [r7, #8]
 801525a:	2200      	movs	r2, #0
 801525c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801525e:	68bb      	ldr	r3, [r7, #8]
 8015260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015262:	2b00      	cmp	r3, #0
 8015264:	d10c      	bne.n	8015280 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015266:	4b35      	ldr	r3, [pc, #212]	@ (801533c <tcp_output_segment+0x1b8>)
 8015268:	681a      	ldr	r2, [r3, #0]
 801526a:	68bb      	ldr	r3, [r7, #8]
 801526c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	68db      	ldr	r3, [r3, #12]
 8015272:	685b      	ldr	r3, [r3, #4]
 8015274:	4618      	mov	r0, r3
 8015276:	f7f5 ff85 	bl	800b184 <lwip_htonl>
 801527a:	4602      	mov	r2, r0
 801527c:	68bb      	ldr	r3, [r7, #8]
 801527e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	68da      	ldr	r2, [r3, #12]
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	685b      	ldr	r3, [r3, #4]
 8015288:	685b      	ldr	r3, [r3, #4]
 801528a:	1ad3      	subs	r3, r2, r3
 801528c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	685b      	ldr	r3, [r3, #4]
 8015292:	8959      	ldrh	r1, [r3, #10]
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	685b      	ldr	r3, [r3, #4]
 8015298:	8b3a      	ldrh	r2, [r7, #24]
 801529a:	1a8a      	subs	r2, r1, r2
 801529c:	b292      	uxth	r2, r2
 801529e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	685b      	ldr	r3, [r3, #4]
 80152a4:	8919      	ldrh	r1, [r3, #8]
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	685b      	ldr	r3, [r3, #4]
 80152aa:	8b3a      	ldrh	r2, [r7, #24]
 80152ac:	1a8a      	subs	r2, r1, r2
 80152ae:	b292      	uxth	r2, r2
 80152b0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	685b      	ldr	r3, [r3, #4]
 80152b6:	68fa      	ldr	r2, [r7, #12]
 80152b8:	68d2      	ldr	r2, [r2, #12]
 80152ba:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	68db      	ldr	r3, [r3, #12]
 80152c0:	2200      	movs	r2, #0
 80152c2:	741a      	strb	r2, [r3, #16]
 80152c4:	2200      	movs	r2, #0
 80152c6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	68da      	ldr	r2, [r3, #12]
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	7a9b      	ldrb	r3, [r3, #10]
 80152d0:	f003 0301 	and.w	r3, r3, #1
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d001      	beq.n	80152dc <tcp_output_segment+0x158>
 80152d8:	2318      	movs	r3, #24
 80152da:	e000      	b.n	80152de <tcp_output_segment+0x15a>
 80152dc:	2314      	movs	r3, #20
 80152de:	4413      	add	r3, r2
 80152e0:	69fa      	ldr	r2, [r7, #28]
 80152e2:	429a      	cmp	r2, r3
 80152e4:	d006      	beq.n	80152f4 <tcp_output_segment+0x170>
 80152e6:	4b10      	ldr	r3, [pc, #64]	@ (8015328 <tcp_output_segment+0x1a4>)
 80152e8:	f240 621c 	movw	r2, #1564	@ 0x61c
 80152ec:	4914      	ldr	r1, [pc, #80]	@ (8015340 <tcp_output_segment+0x1bc>)
 80152ee:	4810      	ldr	r0, [pc, #64]	@ (8015330 <tcp_output_segment+0x1ac>)
 80152f0:	f001 fe34 	bl	8016f5c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	6858      	ldr	r0, [r3, #4]
 80152f8:	68b9      	ldr	r1, [r7, #8]
 80152fa:	68bb      	ldr	r3, [r7, #8]
 80152fc:	1d1c      	adds	r4, r3, #4
 80152fe:	68bb      	ldr	r3, [r7, #8]
 8015300:	7add      	ldrb	r5, [r3, #11]
 8015302:	68bb      	ldr	r3, [r7, #8]
 8015304:	7a9b      	ldrb	r3, [r3, #10]
 8015306:	687a      	ldr	r2, [r7, #4]
 8015308:	9202      	str	r2, [sp, #8]
 801530a:	2206      	movs	r2, #6
 801530c:	9201      	str	r2, [sp, #4]
 801530e:	9300      	str	r3, [sp, #0]
 8015310:	462b      	mov	r3, r5
 8015312:	4622      	mov	r2, r4
 8015314:	f7f7 fbb8 	bl	800ca88 <ip4_output_if>
 8015318:	4603      	mov	r3, r0
 801531a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801531c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015320:	4618      	mov	r0, r3
 8015322:	3720      	adds	r7, #32
 8015324:	46bd      	mov	sp, r7
 8015326:	bdb0      	pop	{r4, r5, r7, pc}
 8015328:	0801ab10 	.word	0x0801ab10
 801532c:	0801b108 	.word	0x0801b108
 8015330:	0801ab98 	.word	0x0801ab98
 8015334:	0801b128 	.word	0x0801b128
 8015338:	0801b148 	.word	0x0801b148
 801533c:	2400cdb4 	.word	0x2400cdb4
 8015340:	0801b16c 	.word	0x0801b16c

08015344 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015344:	b5b0      	push	{r4, r5, r7, lr}
 8015346:	b084      	sub	sp, #16
 8015348:	af00      	add	r7, sp, #0
 801534a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d106      	bne.n	8015360 <tcp_rexmit_rto_prepare+0x1c>
 8015352:	4b31      	ldr	r3, [pc, #196]	@ (8015418 <tcp_rexmit_rto_prepare+0xd4>)
 8015354:	f240 6263 	movw	r2, #1635	@ 0x663
 8015358:	4930      	ldr	r1, [pc, #192]	@ (801541c <tcp_rexmit_rto_prepare+0xd8>)
 801535a:	4831      	ldr	r0, [pc, #196]	@ (8015420 <tcp_rexmit_rto_prepare+0xdc>)
 801535c:	f001 fdfe 	bl	8016f5c <iprintf>

  if (pcb->unacked == NULL) {
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015364:	2b00      	cmp	r3, #0
 8015366:	d102      	bne.n	801536e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015368:	f06f 0305 	mvn.w	r3, #5
 801536c:	e050      	b.n	8015410 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015372:	60fb      	str	r3, [r7, #12]
 8015374:	e00b      	b.n	801538e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015376:	68f8      	ldr	r0, [r7, #12]
 8015378:	f7ff fee4 	bl	8015144 <tcp_output_segment_busy>
 801537c:	4603      	mov	r3, r0
 801537e:	2b00      	cmp	r3, #0
 8015380:	d002      	beq.n	8015388 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015382:	f06f 0305 	mvn.w	r3, #5
 8015386:	e043      	b.n	8015410 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	60fb      	str	r3, [r7, #12]
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d1ef      	bne.n	8015376 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015396:	68f8      	ldr	r0, [r7, #12]
 8015398:	f7ff fed4 	bl	8015144 <tcp_output_segment_busy>
 801539c:	4603      	mov	r3, r0
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d002      	beq.n	80153a8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80153a2:	f06f 0305 	mvn.w	r3, #5
 80153a6:	e033      	b.n	8015410 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	2200      	movs	r2, #0
 80153bc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	8b5b      	ldrh	r3, [r3, #26]
 80153c2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80153c6:	b29a      	uxth	r2, r3
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	68db      	ldr	r3, [r3, #12]
 80153d0:	685b      	ldr	r3, [r3, #4]
 80153d2:	4618      	mov	r0, r3
 80153d4:	f7f5 fed6 	bl	800b184 <lwip_htonl>
 80153d8:	4604      	mov	r4, r0
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	891b      	ldrh	r3, [r3, #8]
 80153de:	461d      	mov	r5, r3
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	68db      	ldr	r3, [r3, #12]
 80153e4:	899b      	ldrh	r3, [r3, #12]
 80153e6:	b29b      	uxth	r3, r3
 80153e8:	4618      	mov	r0, r3
 80153ea:	f7f5 feb5 	bl	800b158 <lwip_htons>
 80153ee:	4603      	mov	r3, r0
 80153f0:	b2db      	uxtb	r3, r3
 80153f2:	f003 0303 	and.w	r3, r3, #3
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d001      	beq.n	80153fe <tcp_rexmit_rto_prepare+0xba>
 80153fa:	2301      	movs	r3, #1
 80153fc:	e000      	b.n	8015400 <tcp_rexmit_rto_prepare+0xbc>
 80153fe:	2300      	movs	r3, #0
 8015400:	442b      	add	r3, r5
 8015402:	18e2      	adds	r2, r4, r3
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	2200      	movs	r2, #0
 801540c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801540e:	2300      	movs	r3, #0
}
 8015410:	4618      	mov	r0, r3
 8015412:	3710      	adds	r7, #16
 8015414:	46bd      	mov	sp, r7
 8015416:	bdb0      	pop	{r4, r5, r7, pc}
 8015418:	0801ab10 	.word	0x0801ab10
 801541c:	0801b180 	.word	0x0801b180
 8015420:	0801ab98 	.word	0x0801ab98

08015424 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015424:	b580      	push	{r7, lr}
 8015426:	b082      	sub	sp, #8
 8015428:	af00      	add	r7, sp, #0
 801542a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d106      	bne.n	8015440 <tcp_rexmit_rto_commit+0x1c>
 8015432:	4b0d      	ldr	r3, [pc, #52]	@ (8015468 <tcp_rexmit_rto_commit+0x44>)
 8015434:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8015438:	490c      	ldr	r1, [pc, #48]	@ (801546c <tcp_rexmit_rto_commit+0x48>)
 801543a:	480d      	ldr	r0, [pc, #52]	@ (8015470 <tcp_rexmit_rto_commit+0x4c>)
 801543c:	f001 fd8e 	bl	8016f5c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015446:	2bff      	cmp	r3, #255	@ 0xff
 8015448:	d007      	beq.n	801545a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015450:	3301      	adds	r3, #1
 8015452:	b2da      	uxtb	r2, r3
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801545a:	6878      	ldr	r0, [r7, #4]
 801545c:	f7ff fc7e 	bl	8014d5c <tcp_output>
}
 8015460:	bf00      	nop
 8015462:	3708      	adds	r7, #8
 8015464:	46bd      	mov	sp, r7
 8015466:	bd80      	pop	{r7, pc}
 8015468:	0801ab10 	.word	0x0801ab10
 801546c:	0801b1a4 	.word	0x0801b1a4
 8015470:	0801ab98 	.word	0x0801ab98

08015474 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015474:	b580      	push	{r7, lr}
 8015476:	b082      	sub	sp, #8
 8015478:	af00      	add	r7, sp, #0
 801547a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	2b00      	cmp	r3, #0
 8015480:	d106      	bne.n	8015490 <tcp_rexmit_rto+0x1c>
 8015482:	4b0a      	ldr	r3, [pc, #40]	@ (80154ac <tcp_rexmit_rto+0x38>)
 8015484:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8015488:	4909      	ldr	r1, [pc, #36]	@ (80154b0 <tcp_rexmit_rto+0x3c>)
 801548a:	480a      	ldr	r0, [pc, #40]	@ (80154b4 <tcp_rexmit_rto+0x40>)
 801548c:	f001 fd66 	bl	8016f5c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015490:	6878      	ldr	r0, [r7, #4]
 8015492:	f7ff ff57 	bl	8015344 <tcp_rexmit_rto_prepare>
 8015496:	4603      	mov	r3, r0
 8015498:	2b00      	cmp	r3, #0
 801549a:	d102      	bne.n	80154a2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801549c:	6878      	ldr	r0, [r7, #4]
 801549e:	f7ff ffc1 	bl	8015424 <tcp_rexmit_rto_commit>
  }
}
 80154a2:	bf00      	nop
 80154a4:	3708      	adds	r7, #8
 80154a6:	46bd      	mov	sp, r7
 80154a8:	bd80      	pop	{r7, pc}
 80154aa:	bf00      	nop
 80154ac:	0801ab10 	.word	0x0801ab10
 80154b0:	0801b1c8 	.word	0x0801b1c8
 80154b4:	0801ab98 	.word	0x0801ab98

080154b8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80154b8:	b590      	push	{r4, r7, lr}
 80154ba:	b085      	sub	sp, #20
 80154bc:	af00      	add	r7, sp, #0
 80154be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d106      	bne.n	80154d4 <tcp_rexmit+0x1c>
 80154c6:	4b2f      	ldr	r3, [pc, #188]	@ (8015584 <tcp_rexmit+0xcc>)
 80154c8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80154cc:	492e      	ldr	r1, [pc, #184]	@ (8015588 <tcp_rexmit+0xd0>)
 80154ce:	482f      	ldr	r0, [pc, #188]	@ (801558c <tcp_rexmit+0xd4>)
 80154d0:	f001 fd44 	bl	8016f5c <iprintf>

  if (pcb->unacked == NULL) {
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d102      	bne.n	80154e2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80154dc:	f06f 0305 	mvn.w	r3, #5
 80154e0:	e04c      	b.n	801557c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80154e6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80154e8:	68b8      	ldr	r0, [r7, #8]
 80154ea:	f7ff fe2b 	bl	8015144 <tcp_output_segment_busy>
 80154ee:	4603      	mov	r3, r0
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d002      	beq.n	80154fa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80154f4:	f06f 0305 	mvn.w	r3, #5
 80154f8:	e040      	b.n	801557c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	681a      	ldr	r2, [r3, #0]
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	336c      	adds	r3, #108	@ 0x6c
 8015506:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015508:	e002      	b.n	8015510 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d011      	beq.n	801553c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	68db      	ldr	r3, [r3, #12]
 801551e:	685b      	ldr	r3, [r3, #4]
 8015520:	4618      	mov	r0, r3
 8015522:	f7f5 fe2f 	bl	800b184 <lwip_htonl>
 8015526:	4604      	mov	r4, r0
 8015528:	68bb      	ldr	r3, [r7, #8]
 801552a:	68db      	ldr	r3, [r3, #12]
 801552c:	685b      	ldr	r3, [r3, #4]
 801552e:	4618      	mov	r0, r3
 8015530:	f7f5 fe28 	bl	800b184 <lwip_htonl>
 8015534:	4603      	mov	r3, r0
 8015536:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015538:	2b00      	cmp	r3, #0
 801553a:	dbe6      	blt.n	801550a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	681a      	ldr	r2, [r3, #0]
 8015540:	68bb      	ldr	r3, [r7, #8]
 8015542:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	68ba      	ldr	r2, [r7, #8]
 8015548:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801554a:	68bb      	ldr	r3, [r7, #8]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d103      	bne.n	801555a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	2200      	movs	r2, #0
 8015556:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015560:	2bff      	cmp	r3, #255	@ 0xff
 8015562:	d007      	beq.n	8015574 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801556a:	3301      	adds	r3, #1
 801556c:	b2da      	uxtb	r2, r3
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	2200      	movs	r2, #0
 8015578:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801557a:	2300      	movs	r3, #0
}
 801557c:	4618      	mov	r0, r3
 801557e:	3714      	adds	r7, #20
 8015580:	46bd      	mov	sp, r7
 8015582:	bd90      	pop	{r4, r7, pc}
 8015584:	0801ab10 	.word	0x0801ab10
 8015588:	0801b1e4 	.word	0x0801b1e4
 801558c:	0801ab98 	.word	0x0801ab98

08015590 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015590:	b580      	push	{r7, lr}
 8015592:	b082      	sub	sp, #8
 8015594:	af00      	add	r7, sp, #0
 8015596:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d106      	bne.n	80155ac <tcp_rexmit_fast+0x1c>
 801559e:	4b2a      	ldr	r3, [pc, #168]	@ (8015648 <tcp_rexmit_fast+0xb8>)
 80155a0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80155a4:	4929      	ldr	r1, [pc, #164]	@ (801564c <tcp_rexmit_fast+0xbc>)
 80155a6:	482a      	ldr	r0, [pc, #168]	@ (8015650 <tcp_rexmit_fast+0xc0>)
 80155a8:	f001 fcd8 	bl	8016f5c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d045      	beq.n	8015640 <tcp_rexmit_fast+0xb0>
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	8b5b      	ldrh	r3, [r3, #26]
 80155b8:	f003 0304 	and.w	r3, r3, #4
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d13f      	bne.n	8015640 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80155c0:	6878      	ldr	r0, [r7, #4]
 80155c2:	f7ff ff79 	bl	80154b8 <tcp_rexmit>
 80155c6:	4603      	mov	r3, r0
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d139      	bne.n	8015640 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80155d8:	4293      	cmp	r3, r2
 80155da:	bf28      	it	cs
 80155dc:	4613      	movcs	r3, r2
 80155de:	b29b      	uxth	r3, r3
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	da00      	bge.n	80155e6 <tcp_rexmit_fast+0x56>
 80155e4:	3301      	adds	r3, #1
 80155e6:	105b      	asrs	r3, r3, #1
 80155e8:	b29a      	uxth	r2, r3
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80155f6:	461a      	mov	r2, r3
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80155fc:	005b      	lsls	r3, r3, #1
 80155fe:	429a      	cmp	r2, r3
 8015600:	d206      	bcs.n	8015610 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015606:	005b      	lsls	r3, r3, #1
 8015608:	b29a      	uxth	r2, r3
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801561a:	4619      	mov	r1, r3
 801561c:	0049      	lsls	r1, r1, #1
 801561e:	440b      	add	r3, r1
 8015620:	b29b      	uxth	r3, r3
 8015622:	4413      	add	r3, r2
 8015624:	b29a      	uxth	r2, r3
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	8b5b      	ldrh	r3, [r3, #26]
 8015630:	f043 0304 	orr.w	r3, r3, #4
 8015634:	b29a      	uxth	r2, r3
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	2200      	movs	r2, #0
 801563e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8015640:	bf00      	nop
 8015642:	3708      	adds	r7, #8
 8015644:	46bd      	mov	sp, r7
 8015646:	bd80      	pop	{r7, pc}
 8015648:	0801ab10 	.word	0x0801ab10
 801564c:	0801b1fc 	.word	0x0801b1fc
 8015650:	0801ab98 	.word	0x0801ab98

08015654 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b086      	sub	sp, #24
 8015658:	af00      	add	r7, sp, #0
 801565a:	60f8      	str	r0, [r7, #12]
 801565c:	607b      	str	r3, [r7, #4]
 801565e:	460b      	mov	r3, r1
 8015660:	817b      	strh	r3, [r7, #10]
 8015662:	4613      	mov	r3, r2
 8015664:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015666:	897a      	ldrh	r2, [r7, #10]
 8015668:	893b      	ldrh	r3, [r7, #8]
 801566a:	4413      	add	r3, r2
 801566c:	b29b      	uxth	r3, r3
 801566e:	3314      	adds	r3, #20
 8015670:	b29b      	uxth	r3, r3
 8015672:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015676:	4619      	mov	r1, r3
 8015678:	2022      	movs	r0, #34	@ 0x22
 801567a:	f7f9 fa3f 	bl	800eafc <pbuf_alloc>
 801567e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015680:	697b      	ldr	r3, [r7, #20]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d04d      	beq.n	8015722 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015686:	897b      	ldrh	r3, [r7, #10]
 8015688:	3313      	adds	r3, #19
 801568a:	697a      	ldr	r2, [r7, #20]
 801568c:	8952      	ldrh	r2, [r2, #10]
 801568e:	4293      	cmp	r3, r2
 8015690:	db06      	blt.n	80156a0 <tcp_output_alloc_header_common+0x4c>
 8015692:	4b26      	ldr	r3, [pc, #152]	@ (801572c <tcp_output_alloc_header_common+0xd8>)
 8015694:	f240 7223 	movw	r2, #1827	@ 0x723
 8015698:	4925      	ldr	r1, [pc, #148]	@ (8015730 <tcp_output_alloc_header_common+0xdc>)
 801569a:	4826      	ldr	r0, [pc, #152]	@ (8015734 <tcp_output_alloc_header_common+0xe0>)
 801569c:	f001 fc5e 	bl	8016f5c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80156a0:	697b      	ldr	r3, [r7, #20]
 80156a2:	685b      	ldr	r3, [r3, #4]
 80156a4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80156a6:	8c3b      	ldrh	r3, [r7, #32]
 80156a8:	4618      	mov	r0, r3
 80156aa:	f7f5 fd55 	bl	800b158 <lwip_htons>
 80156ae:	4603      	mov	r3, r0
 80156b0:	461a      	mov	r2, r3
 80156b2:	693b      	ldr	r3, [r7, #16]
 80156b4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80156b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80156b8:	4618      	mov	r0, r3
 80156ba:	f7f5 fd4d 	bl	800b158 <lwip_htons>
 80156be:	4603      	mov	r3, r0
 80156c0:	461a      	mov	r2, r3
 80156c2:	693b      	ldr	r3, [r7, #16]
 80156c4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80156c6:	693b      	ldr	r3, [r7, #16]
 80156c8:	687a      	ldr	r2, [r7, #4]
 80156ca:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80156cc:	68f8      	ldr	r0, [r7, #12]
 80156ce:	f7f5 fd59 	bl	800b184 <lwip_htonl>
 80156d2:	4602      	mov	r2, r0
 80156d4:	693b      	ldr	r3, [r7, #16]
 80156d6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80156d8:	897b      	ldrh	r3, [r7, #10]
 80156da:	089b      	lsrs	r3, r3, #2
 80156dc:	b29b      	uxth	r3, r3
 80156de:	3305      	adds	r3, #5
 80156e0:	b29b      	uxth	r3, r3
 80156e2:	031b      	lsls	r3, r3, #12
 80156e4:	b29a      	uxth	r2, r3
 80156e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80156ea:	b29b      	uxth	r3, r3
 80156ec:	4313      	orrs	r3, r2
 80156ee:	b29b      	uxth	r3, r3
 80156f0:	4618      	mov	r0, r3
 80156f2:	f7f5 fd31 	bl	800b158 <lwip_htons>
 80156f6:	4603      	mov	r3, r0
 80156f8:	461a      	mov	r2, r3
 80156fa:	693b      	ldr	r3, [r7, #16]
 80156fc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80156fe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015700:	4618      	mov	r0, r3
 8015702:	f7f5 fd29 	bl	800b158 <lwip_htons>
 8015706:	4603      	mov	r3, r0
 8015708:	461a      	mov	r2, r3
 801570a:	693b      	ldr	r3, [r7, #16]
 801570c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801570e:	693b      	ldr	r3, [r7, #16]
 8015710:	2200      	movs	r2, #0
 8015712:	741a      	strb	r2, [r3, #16]
 8015714:	2200      	movs	r2, #0
 8015716:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015718:	693b      	ldr	r3, [r7, #16]
 801571a:	2200      	movs	r2, #0
 801571c:	749a      	strb	r2, [r3, #18]
 801571e:	2200      	movs	r2, #0
 8015720:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015722:	697b      	ldr	r3, [r7, #20]
}
 8015724:	4618      	mov	r0, r3
 8015726:	3718      	adds	r7, #24
 8015728:	46bd      	mov	sp, r7
 801572a:	bd80      	pop	{r7, pc}
 801572c:	0801ab10 	.word	0x0801ab10
 8015730:	0801b21c 	.word	0x0801b21c
 8015734:	0801ab98 	.word	0x0801ab98

08015738 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015738:	b5b0      	push	{r4, r5, r7, lr}
 801573a:	b08a      	sub	sp, #40	@ 0x28
 801573c:	af04      	add	r7, sp, #16
 801573e:	60f8      	str	r0, [r7, #12]
 8015740:	607b      	str	r3, [r7, #4]
 8015742:	460b      	mov	r3, r1
 8015744:	817b      	strh	r3, [r7, #10]
 8015746:	4613      	mov	r3, r2
 8015748:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	2b00      	cmp	r3, #0
 801574e:	d106      	bne.n	801575e <tcp_output_alloc_header+0x26>
 8015750:	4b15      	ldr	r3, [pc, #84]	@ (80157a8 <tcp_output_alloc_header+0x70>)
 8015752:	f240 7242 	movw	r2, #1858	@ 0x742
 8015756:	4915      	ldr	r1, [pc, #84]	@ (80157ac <tcp_output_alloc_header+0x74>)
 8015758:	4815      	ldr	r0, [pc, #84]	@ (80157b0 <tcp_output_alloc_header+0x78>)
 801575a:	f001 fbff 	bl	8016f5c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	8adb      	ldrh	r3, [r3, #22]
 8015766:	68fa      	ldr	r2, [r7, #12]
 8015768:	8b12      	ldrh	r2, [r2, #24]
 801576a:	68f9      	ldr	r1, [r7, #12]
 801576c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801576e:	893d      	ldrh	r5, [r7, #8]
 8015770:	897c      	ldrh	r4, [r7, #10]
 8015772:	9103      	str	r1, [sp, #12]
 8015774:	2110      	movs	r1, #16
 8015776:	9102      	str	r1, [sp, #8]
 8015778:	9201      	str	r2, [sp, #4]
 801577a:	9300      	str	r3, [sp, #0]
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	462a      	mov	r2, r5
 8015780:	4621      	mov	r1, r4
 8015782:	f7ff ff67 	bl	8015654 <tcp_output_alloc_header_common>
 8015786:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015788:	697b      	ldr	r3, [r7, #20]
 801578a:	2b00      	cmp	r3, #0
 801578c:	d006      	beq.n	801579c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015792:	68fa      	ldr	r2, [r7, #12]
 8015794:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8015796:	441a      	add	r2, r3
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801579c:	697b      	ldr	r3, [r7, #20]
}
 801579e:	4618      	mov	r0, r3
 80157a0:	3718      	adds	r7, #24
 80157a2:	46bd      	mov	sp, r7
 80157a4:	bdb0      	pop	{r4, r5, r7, pc}
 80157a6:	bf00      	nop
 80157a8:	0801ab10 	.word	0x0801ab10
 80157ac:	0801b24c 	.word	0x0801b24c
 80157b0:	0801ab98 	.word	0x0801ab98

080157b4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80157b4:	b580      	push	{r7, lr}
 80157b6:	b088      	sub	sp, #32
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	60f8      	str	r0, [r7, #12]
 80157bc:	60b9      	str	r1, [r7, #8]
 80157be:	4611      	mov	r1, r2
 80157c0:	461a      	mov	r2, r3
 80157c2:	460b      	mov	r3, r1
 80157c4:	71fb      	strb	r3, [r7, #7]
 80157c6:	4613      	mov	r3, r2
 80157c8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80157ca:	2300      	movs	r3, #0
 80157cc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80157ce:	68bb      	ldr	r3, [r7, #8]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d106      	bne.n	80157e2 <tcp_output_fill_options+0x2e>
 80157d4:	4b12      	ldr	r3, [pc, #72]	@ (8015820 <tcp_output_fill_options+0x6c>)
 80157d6:	f240 7256 	movw	r2, #1878	@ 0x756
 80157da:	4912      	ldr	r1, [pc, #72]	@ (8015824 <tcp_output_fill_options+0x70>)
 80157dc:	4812      	ldr	r0, [pc, #72]	@ (8015828 <tcp_output_fill_options+0x74>)
 80157de:	f001 fbbd 	bl	8016f5c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80157e2:	68bb      	ldr	r3, [r7, #8]
 80157e4:	685b      	ldr	r3, [r3, #4]
 80157e6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80157e8:	69bb      	ldr	r3, [r7, #24]
 80157ea:	3314      	adds	r3, #20
 80157ec:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80157ee:	8bfb      	ldrh	r3, [r7, #30]
 80157f0:	009b      	lsls	r3, r3, #2
 80157f2:	461a      	mov	r2, r3
 80157f4:	79fb      	ldrb	r3, [r7, #7]
 80157f6:	009b      	lsls	r3, r3, #2
 80157f8:	f003 0304 	and.w	r3, r3, #4
 80157fc:	4413      	add	r3, r2
 80157fe:	3314      	adds	r3, #20
 8015800:	69ba      	ldr	r2, [r7, #24]
 8015802:	4413      	add	r3, r2
 8015804:	697a      	ldr	r2, [r7, #20]
 8015806:	429a      	cmp	r2, r3
 8015808:	d006      	beq.n	8015818 <tcp_output_fill_options+0x64>
 801580a:	4b05      	ldr	r3, [pc, #20]	@ (8015820 <tcp_output_fill_options+0x6c>)
 801580c:	f240 7275 	movw	r2, #1909	@ 0x775
 8015810:	4906      	ldr	r1, [pc, #24]	@ (801582c <tcp_output_fill_options+0x78>)
 8015812:	4805      	ldr	r0, [pc, #20]	@ (8015828 <tcp_output_fill_options+0x74>)
 8015814:	f001 fba2 	bl	8016f5c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015818:	bf00      	nop
 801581a:	3720      	adds	r7, #32
 801581c:	46bd      	mov	sp, r7
 801581e:	bd80      	pop	{r7, pc}
 8015820:	0801ab10 	.word	0x0801ab10
 8015824:	0801b274 	.word	0x0801b274
 8015828:	0801ab98 	.word	0x0801ab98
 801582c:	0801b16c 	.word	0x0801b16c

08015830 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b08a      	sub	sp, #40	@ 0x28
 8015834:	af04      	add	r7, sp, #16
 8015836:	60f8      	str	r0, [r7, #12]
 8015838:	60b9      	str	r1, [r7, #8]
 801583a:	607a      	str	r2, [r7, #4]
 801583c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801583e:	68bb      	ldr	r3, [r7, #8]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d106      	bne.n	8015852 <tcp_output_control_segment+0x22>
 8015844:	4b1c      	ldr	r3, [pc, #112]	@ (80158b8 <tcp_output_control_segment+0x88>)
 8015846:	f240 7287 	movw	r2, #1927	@ 0x787
 801584a:	491c      	ldr	r1, [pc, #112]	@ (80158bc <tcp_output_control_segment+0x8c>)
 801584c:	481c      	ldr	r0, [pc, #112]	@ (80158c0 <tcp_output_control_segment+0x90>)
 801584e:	f001 fb85 	bl	8016f5c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015852:	683a      	ldr	r2, [r7, #0]
 8015854:	6879      	ldr	r1, [r7, #4]
 8015856:	68f8      	ldr	r0, [r7, #12]
 8015858:	f7fe faea 	bl	8013e30 <tcp_route>
 801585c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801585e:	693b      	ldr	r3, [r7, #16]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d102      	bne.n	801586a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015864:	23fc      	movs	r3, #252	@ 0xfc
 8015866:	75fb      	strb	r3, [r7, #23]
 8015868:	e01c      	b.n	80158a4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d006      	beq.n	801587e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	7adb      	ldrb	r3, [r3, #11]
 8015874:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	7a9b      	ldrb	r3, [r3, #10]
 801587a:	757b      	strb	r3, [r7, #21]
 801587c:	e003      	b.n	8015886 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801587e:	23ff      	movs	r3, #255	@ 0xff
 8015880:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8015882:	2300      	movs	r3, #0
 8015884:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015886:	7dba      	ldrb	r2, [r7, #22]
 8015888:	693b      	ldr	r3, [r7, #16]
 801588a:	9302      	str	r3, [sp, #8]
 801588c:	2306      	movs	r3, #6
 801588e:	9301      	str	r3, [sp, #4]
 8015890:	7d7b      	ldrb	r3, [r7, #21]
 8015892:	9300      	str	r3, [sp, #0]
 8015894:	4613      	mov	r3, r2
 8015896:	683a      	ldr	r2, [r7, #0]
 8015898:	6879      	ldr	r1, [r7, #4]
 801589a:	68b8      	ldr	r0, [r7, #8]
 801589c:	f7f7 f8f4 	bl	800ca88 <ip4_output_if>
 80158a0:	4603      	mov	r3, r0
 80158a2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80158a4:	68b8      	ldr	r0, [r7, #8]
 80158a6:	f7f9 fc0d 	bl	800f0c4 <pbuf_free>
  return err;
 80158aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80158ae:	4618      	mov	r0, r3
 80158b0:	3718      	adds	r7, #24
 80158b2:	46bd      	mov	sp, r7
 80158b4:	bd80      	pop	{r7, pc}
 80158b6:	bf00      	nop
 80158b8:	0801ab10 	.word	0x0801ab10
 80158bc:	0801b29c 	.word	0x0801b29c
 80158c0:	0801ab98 	.word	0x0801ab98

080158c4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80158c4:	b590      	push	{r4, r7, lr}
 80158c6:	b08b      	sub	sp, #44	@ 0x2c
 80158c8:	af04      	add	r7, sp, #16
 80158ca:	60f8      	str	r0, [r7, #12]
 80158cc:	60b9      	str	r1, [r7, #8]
 80158ce:	607a      	str	r2, [r7, #4]
 80158d0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80158d2:	683b      	ldr	r3, [r7, #0]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d106      	bne.n	80158e6 <tcp_rst+0x22>
 80158d8:	4b1f      	ldr	r3, [pc, #124]	@ (8015958 <tcp_rst+0x94>)
 80158da:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80158de:	491f      	ldr	r1, [pc, #124]	@ (801595c <tcp_rst+0x98>)
 80158e0:	481f      	ldr	r0, [pc, #124]	@ (8015960 <tcp_rst+0x9c>)
 80158e2:	f001 fb3b 	bl	8016f5c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80158e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d106      	bne.n	80158fa <tcp_rst+0x36>
 80158ec:	4b1a      	ldr	r3, [pc, #104]	@ (8015958 <tcp_rst+0x94>)
 80158ee:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80158f2:	491c      	ldr	r1, [pc, #112]	@ (8015964 <tcp_rst+0xa0>)
 80158f4:	481a      	ldr	r0, [pc, #104]	@ (8015960 <tcp_rst+0x9c>)
 80158f6:	f001 fb31 	bl	8016f5c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80158fa:	2300      	movs	r3, #0
 80158fc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80158fe:	f246 0308 	movw	r3, #24584	@ 0x6008
 8015902:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015904:	7dfb      	ldrb	r3, [r7, #23]
 8015906:	b29c      	uxth	r4, r3
 8015908:	68b8      	ldr	r0, [r7, #8]
 801590a:	f7f5 fc3b 	bl	800b184 <lwip_htonl>
 801590e:	4602      	mov	r2, r0
 8015910:	8abb      	ldrh	r3, [r7, #20]
 8015912:	9303      	str	r3, [sp, #12]
 8015914:	2314      	movs	r3, #20
 8015916:	9302      	str	r3, [sp, #8]
 8015918:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801591a:	9301      	str	r3, [sp, #4]
 801591c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801591e:	9300      	str	r3, [sp, #0]
 8015920:	4613      	mov	r3, r2
 8015922:	2200      	movs	r2, #0
 8015924:	4621      	mov	r1, r4
 8015926:	6878      	ldr	r0, [r7, #4]
 8015928:	f7ff fe94 	bl	8015654 <tcp_output_alloc_header_common>
 801592c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801592e:	693b      	ldr	r3, [r7, #16]
 8015930:	2b00      	cmp	r3, #0
 8015932:	d00c      	beq.n	801594e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015934:	7dfb      	ldrb	r3, [r7, #23]
 8015936:	2200      	movs	r2, #0
 8015938:	6939      	ldr	r1, [r7, #16]
 801593a:	68f8      	ldr	r0, [r7, #12]
 801593c:	f7ff ff3a 	bl	80157b4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015942:	683a      	ldr	r2, [r7, #0]
 8015944:	6939      	ldr	r1, [r7, #16]
 8015946:	68f8      	ldr	r0, [r7, #12]
 8015948:	f7ff ff72 	bl	8015830 <tcp_output_control_segment>
 801594c:	e000      	b.n	8015950 <tcp_rst+0x8c>
    return;
 801594e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015950:	371c      	adds	r7, #28
 8015952:	46bd      	mov	sp, r7
 8015954:	bd90      	pop	{r4, r7, pc}
 8015956:	bf00      	nop
 8015958:	0801ab10 	.word	0x0801ab10
 801595c:	0801b2c8 	.word	0x0801b2c8
 8015960:	0801ab98 	.word	0x0801ab98
 8015964:	0801b2e4 	.word	0x0801b2e4

08015968 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015968:	b590      	push	{r4, r7, lr}
 801596a:	b087      	sub	sp, #28
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015970:	2300      	movs	r3, #0
 8015972:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015974:	2300      	movs	r3, #0
 8015976:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	2b00      	cmp	r3, #0
 801597c:	d106      	bne.n	801598c <tcp_send_empty_ack+0x24>
 801597e:	4b28      	ldr	r3, [pc, #160]	@ (8015a20 <tcp_send_empty_ack+0xb8>)
 8015980:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8015984:	4927      	ldr	r1, [pc, #156]	@ (8015a24 <tcp_send_empty_ack+0xbc>)
 8015986:	4828      	ldr	r0, [pc, #160]	@ (8015a28 <tcp_send_empty_ack+0xc0>)
 8015988:	f001 fae8 	bl	8016f5c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801598c:	7dfb      	ldrb	r3, [r7, #23]
 801598e:	009b      	lsls	r3, r3, #2
 8015990:	b2db      	uxtb	r3, r3
 8015992:	f003 0304 	and.w	r3, r3, #4
 8015996:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015998:	7d7b      	ldrb	r3, [r7, #21]
 801599a:	b29c      	uxth	r4, r3
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80159a0:	4618      	mov	r0, r3
 80159a2:	f7f5 fbef 	bl	800b184 <lwip_htonl>
 80159a6:	4603      	mov	r3, r0
 80159a8:	2200      	movs	r2, #0
 80159aa:	4621      	mov	r1, r4
 80159ac:	6878      	ldr	r0, [r7, #4]
 80159ae:	f7ff fec3 	bl	8015738 <tcp_output_alloc_header>
 80159b2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80159b4:	693b      	ldr	r3, [r7, #16]
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d109      	bne.n	80159ce <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	8b5b      	ldrh	r3, [r3, #26]
 80159be:	f043 0303 	orr.w	r3, r3, #3
 80159c2:	b29a      	uxth	r2, r3
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80159c8:	f06f 0301 	mvn.w	r3, #1
 80159cc:	e023      	b.n	8015a16 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80159ce:	7dbb      	ldrb	r3, [r7, #22]
 80159d0:	7dfa      	ldrb	r2, [r7, #23]
 80159d2:	6939      	ldr	r1, [r7, #16]
 80159d4:	6878      	ldr	r0, [r7, #4]
 80159d6:	f7ff feed 	bl	80157b4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80159da:	687a      	ldr	r2, [r7, #4]
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	3304      	adds	r3, #4
 80159e0:	6939      	ldr	r1, [r7, #16]
 80159e2:	6878      	ldr	r0, [r7, #4]
 80159e4:	f7ff ff24 	bl	8015830 <tcp_output_control_segment>
 80159e8:	4603      	mov	r3, r0
 80159ea:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80159ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d007      	beq.n	8015a04 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	8b5b      	ldrh	r3, [r3, #26]
 80159f8:	f043 0303 	orr.w	r3, r3, #3
 80159fc:	b29a      	uxth	r2, r3
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	835a      	strh	r2, [r3, #26]
 8015a02:	e006      	b.n	8015a12 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	8b5b      	ldrh	r3, [r3, #26]
 8015a08:	f023 0303 	bic.w	r3, r3, #3
 8015a0c:	b29a      	uxth	r2, r3
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015a16:	4618      	mov	r0, r3
 8015a18:	371c      	adds	r7, #28
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	bd90      	pop	{r4, r7, pc}
 8015a1e:	bf00      	nop
 8015a20:	0801ab10 	.word	0x0801ab10
 8015a24:	0801b300 	.word	0x0801b300
 8015a28:	0801ab98 	.word	0x0801ab98

08015a2c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015a2c:	b590      	push	{r4, r7, lr}
 8015a2e:	b087      	sub	sp, #28
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015a34:	2300      	movs	r3, #0
 8015a36:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d106      	bne.n	8015a4c <tcp_keepalive+0x20>
 8015a3e:	4b18      	ldr	r3, [pc, #96]	@ (8015aa0 <tcp_keepalive+0x74>)
 8015a40:	f640 0224 	movw	r2, #2084	@ 0x824
 8015a44:	4917      	ldr	r1, [pc, #92]	@ (8015aa4 <tcp_keepalive+0x78>)
 8015a46:	4818      	ldr	r0, [pc, #96]	@ (8015aa8 <tcp_keepalive+0x7c>)
 8015a48:	f001 fa88 	bl	8016f5c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015a4c:	7dfb      	ldrb	r3, [r7, #23]
 8015a4e:	b29c      	uxth	r4, r3
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015a54:	3b01      	subs	r3, #1
 8015a56:	4618      	mov	r0, r3
 8015a58:	f7f5 fb94 	bl	800b184 <lwip_htonl>
 8015a5c:	4603      	mov	r3, r0
 8015a5e:	2200      	movs	r2, #0
 8015a60:	4621      	mov	r1, r4
 8015a62:	6878      	ldr	r0, [r7, #4]
 8015a64:	f7ff fe68 	bl	8015738 <tcp_output_alloc_header>
 8015a68:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015a6a:	693b      	ldr	r3, [r7, #16]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d102      	bne.n	8015a76 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015a70:	f04f 33ff 	mov.w	r3, #4294967295
 8015a74:	e010      	b.n	8015a98 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015a76:	7dfb      	ldrb	r3, [r7, #23]
 8015a78:	2200      	movs	r2, #0
 8015a7a:	6939      	ldr	r1, [r7, #16]
 8015a7c:	6878      	ldr	r0, [r7, #4]
 8015a7e:	f7ff fe99 	bl	80157b4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015a82:	687a      	ldr	r2, [r7, #4]
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	3304      	adds	r3, #4
 8015a88:	6939      	ldr	r1, [r7, #16]
 8015a8a:	6878      	ldr	r0, [r7, #4]
 8015a8c:	f7ff fed0 	bl	8015830 <tcp_output_control_segment>
 8015a90:	4603      	mov	r3, r0
 8015a92:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015a98:	4618      	mov	r0, r3
 8015a9a:	371c      	adds	r7, #28
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	bd90      	pop	{r4, r7, pc}
 8015aa0:	0801ab10 	.word	0x0801ab10
 8015aa4:	0801b320 	.word	0x0801b320
 8015aa8:	0801ab98 	.word	0x0801ab98

08015aac <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015aac:	b590      	push	{r4, r7, lr}
 8015aae:	b08b      	sub	sp, #44	@ 0x2c
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d106      	bne.n	8015ace <tcp_zero_window_probe+0x22>
 8015ac0:	4b4c      	ldr	r3, [pc, #304]	@ (8015bf4 <tcp_zero_window_probe+0x148>)
 8015ac2:	f640 024f 	movw	r2, #2127	@ 0x84f
 8015ac6:	494c      	ldr	r1, [pc, #304]	@ (8015bf8 <tcp_zero_window_probe+0x14c>)
 8015ac8:	484c      	ldr	r0, [pc, #304]	@ (8015bfc <tcp_zero_window_probe+0x150>)
 8015aca:	f001 fa47 	bl	8016f5c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015ad2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8015ad4:	6a3b      	ldr	r3, [r7, #32]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d101      	bne.n	8015ade <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8015ada:	2300      	movs	r3, #0
 8015adc:	e086      	b.n	8015bec <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015ae4:	2bff      	cmp	r3, #255	@ 0xff
 8015ae6:	d007      	beq.n	8015af8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015aee:	3301      	adds	r3, #1
 8015af0:	b2da      	uxtb	r2, r3
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015af8:	6a3b      	ldr	r3, [r7, #32]
 8015afa:	68db      	ldr	r3, [r3, #12]
 8015afc:	899b      	ldrh	r3, [r3, #12]
 8015afe:	b29b      	uxth	r3, r3
 8015b00:	4618      	mov	r0, r3
 8015b02:	f7f5 fb29 	bl	800b158 <lwip_htons>
 8015b06:	4603      	mov	r3, r0
 8015b08:	b2db      	uxtb	r3, r3
 8015b0a:	f003 0301 	and.w	r3, r3, #1
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d005      	beq.n	8015b1e <tcp_zero_window_probe+0x72>
 8015b12:	6a3b      	ldr	r3, [r7, #32]
 8015b14:	891b      	ldrh	r3, [r3, #8]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d101      	bne.n	8015b1e <tcp_zero_window_probe+0x72>
 8015b1a:	2301      	movs	r3, #1
 8015b1c:	e000      	b.n	8015b20 <tcp_zero_window_probe+0x74>
 8015b1e:	2300      	movs	r3, #0
 8015b20:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015b22:	7ffb      	ldrb	r3, [r7, #31]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	bf0c      	ite	eq
 8015b28:	2301      	moveq	r3, #1
 8015b2a:	2300      	movne	r3, #0
 8015b2c:	b2db      	uxtb	r3, r3
 8015b2e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015b30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015b34:	b299      	uxth	r1, r3
 8015b36:	6a3b      	ldr	r3, [r7, #32]
 8015b38:	68db      	ldr	r3, [r3, #12]
 8015b3a:	685b      	ldr	r3, [r3, #4]
 8015b3c:	8bba      	ldrh	r2, [r7, #28]
 8015b3e:	6878      	ldr	r0, [r7, #4]
 8015b40:	f7ff fdfa 	bl	8015738 <tcp_output_alloc_header>
 8015b44:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015b46:	69bb      	ldr	r3, [r7, #24]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d102      	bne.n	8015b52 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8015b50:	e04c      	b.n	8015bec <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015b52:	69bb      	ldr	r3, [r7, #24]
 8015b54:	685b      	ldr	r3, [r3, #4]
 8015b56:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015b58:	7ffb      	ldrb	r3, [r7, #31]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d011      	beq.n	8015b82 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015b5e:	697b      	ldr	r3, [r7, #20]
 8015b60:	899b      	ldrh	r3, [r3, #12]
 8015b62:	b29b      	uxth	r3, r3
 8015b64:	b21b      	sxth	r3, r3
 8015b66:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015b6a:	b21c      	sxth	r4, r3
 8015b6c:	2011      	movs	r0, #17
 8015b6e:	f7f5 faf3 	bl	800b158 <lwip_htons>
 8015b72:	4603      	mov	r3, r0
 8015b74:	b21b      	sxth	r3, r3
 8015b76:	4323      	orrs	r3, r4
 8015b78:	b21b      	sxth	r3, r3
 8015b7a:	b29a      	uxth	r2, r3
 8015b7c:	697b      	ldr	r3, [r7, #20]
 8015b7e:	819a      	strh	r2, [r3, #12]
 8015b80:	e010      	b.n	8015ba4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015b82:	69bb      	ldr	r3, [r7, #24]
 8015b84:	685b      	ldr	r3, [r3, #4]
 8015b86:	3314      	adds	r3, #20
 8015b88:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015b8a:	6a3b      	ldr	r3, [r7, #32]
 8015b8c:	6858      	ldr	r0, [r3, #4]
 8015b8e:	6a3b      	ldr	r3, [r7, #32]
 8015b90:	685b      	ldr	r3, [r3, #4]
 8015b92:	891a      	ldrh	r2, [r3, #8]
 8015b94:	6a3b      	ldr	r3, [r7, #32]
 8015b96:	891b      	ldrh	r3, [r3, #8]
 8015b98:	1ad3      	subs	r3, r2, r3
 8015b9a:	b29b      	uxth	r3, r3
 8015b9c:	2201      	movs	r2, #1
 8015b9e:	6939      	ldr	r1, [r7, #16]
 8015ba0:	f7f9 fc96 	bl	800f4d0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015ba4:	6a3b      	ldr	r3, [r7, #32]
 8015ba6:	68db      	ldr	r3, [r3, #12]
 8015ba8:	685b      	ldr	r3, [r3, #4]
 8015baa:	4618      	mov	r0, r3
 8015bac:	f7f5 faea 	bl	800b184 <lwip_htonl>
 8015bb0:	4603      	mov	r3, r0
 8015bb2:	3301      	adds	r3, #1
 8015bb4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	1ad3      	subs	r3, r2, r3
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	da02      	bge.n	8015bc8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	68fa      	ldr	r2, [r7, #12]
 8015bc6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015bcc:	2200      	movs	r2, #0
 8015bce:	69b9      	ldr	r1, [r7, #24]
 8015bd0:	6878      	ldr	r0, [r7, #4]
 8015bd2:	f7ff fdef 	bl	80157b4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015bd6:	687a      	ldr	r2, [r7, #4]
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	3304      	adds	r3, #4
 8015bdc:	69b9      	ldr	r1, [r7, #24]
 8015bde:	6878      	ldr	r0, [r7, #4]
 8015be0:	f7ff fe26 	bl	8015830 <tcp_output_control_segment>
 8015be4:	4603      	mov	r3, r0
 8015be6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015be8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015bec:	4618      	mov	r0, r3
 8015bee:	372c      	adds	r7, #44	@ 0x2c
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	bd90      	pop	{r4, r7, pc}
 8015bf4:	0801ab10 	.word	0x0801ab10
 8015bf8:	0801b33c 	.word	0x0801b33c
 8015bfc:	0801ab98 	.word	0x0801ab98

08015c00 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b084      	sub	sp, #16
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6078      	str	r0, [r7, #4]
 8015c08:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8015c0a:	f000 fb17 	bl	801623c <sys_timeouts_sleeptime>
 8015c0e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c16:	d10b      	bne.n	8015c30 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8015c18:	4813      	ldr	r0, [pc, #76]	@ (8015c68 <tcpip_timeouts_mbox_fetch+0x68>)
 8015c1a:	f7f9 fefa 	bl	800fa12 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8015c1e:	2200      	movs	r2, #0
 8015c20:	6839      	ldr	r1, [r7, #0]
 8015c22:	6878      	ldr	r0, [r7, #4]
 8015c24:	f7f9 fdd0 	bl	800f7c8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8015c28:	480f      	ldr	r0, [pc, #60]	@ (8015c68 <tcpip_timeouts_mbox_fetch+0x68>)
 8015c2a:	f7f9 fee3 	bl	800f9f4 <sys_mutex_lock>
    return;
 8015c2e:	e018      	b.n	8015c62 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d102      	bne.n	8015c3c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8015c36:	f000 fac7 	bl	80161c8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8015c3a:	e7e6      	b.n	8015c0a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8015c3c:	480a      	ldr	r0, [pc, #40]	@ (8015c68 <tcpip_timeouts_mbox_fetch+0x68>)
 8015c3e:	f7f9 fee8 	bl	800fa12 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8015c42:	68fa      	ldr	r2, [r7, #12]
 8015c44:	6839      	ldr	r1, [r7, #0]
 8015c46:	6878      	ldr	r0, [r7, #4]
 8015c48:	f7f9 fdbe 	bl	800f7c8 <sys_arch_mbox_fetch>
 8015c4c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8015c4e:	4806      	ldr	r0, [pc, #24]	@ (8015c68 <tcpip_timeouts_mbox_fetch+0x68>)
 8015c50:	f7f9 fed0 	bl	800f9f4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8015c54:	68bb      	ldr	r3, [r7, #8]
 8015c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c5a:	d102      	bne.n	8015c62 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8015c5c:	f000 fab4 	bl	80161c8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8015c60:	e7d3      	b.n	8015c0a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8015c62:	3710      	adds	r7, #16
 8015c64:	46bd      	mov	sp, r7
 8015c66:	bd80      	pop	{r7, pc}
 8015c68:	2400ce10 	.word	0x2400ce10

08015c6c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b084      	sub	sp, #16
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8015c74:	4810      	ldr	r0, [pc, #64]	@ (8015cb8 <tcpip_thread+0x4c>)
 8015c76:	f7f9 febd 	bl	800f9f4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8015c7a:	4b10      	ldr	r3, [pc, #64]	@ (8015cbc <tcpip_thread+0x50>)
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d005      	beq.n	8015c8e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8015c82:	4b0e      	ldr	r3, [pc, #56]	@ (8015cbc <tcpip_thread+0x50>)
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	4a0e      	ldr	r2, [pc, #56]	@ (8015cc0 <tcpip_thread+0x54>)
 8015c88:	6812      	ldr	r2, [r2, #0]
 8015c8a:	4610      	mov	r0, r2
 8015c8c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8015c8e:	f107 030c 	add.w	r3, r7, #12
 8015c92:	4619      	mov	r1, r3
 8015c94:	480b      	ldr	r0, [pc, #44]	@ (8015cc4 <tcpip_thread+0x58>)
 8015c96:	f7ff ffb3 	bl	8015c00 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d106      	bne.n	8015cae <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8015ca0:	4b09      	ldr	r3, [pc, #36]	@ (8015cc8 <tcpip_thread+0x5c>)
 8015ca2:	2291      	movs	r2, #145	@ 0x91
 8015ca4:	4909      	ldr	r1, [pc, #36]	@ (8015ccc <tcpip_thread+0x60>)
 8015ca6:	480a      	ldr	r0, [pc, #40]	@ (8015cd0 <tcpip_thread+0x64>)
 8015ca8:	f001 f958 	bl	8016f5c <iprintf>
      continue;
 8015cac:	e003      	b.n	8015cb6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	f000 f80f 	bl	8015cd4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8015cb6:	e7ea      	b.n	8015c8e <tcpip_thread+0x22>
 8015cb8:	2400ce10 	.word	0x2400ce10
 8015cbc:	2400ce04 	.word	0x2400ce04
 8015cc0:	2400ce08 	.word	0x2400ce08
 8015cc4:	2400ce0c 	.word	0x2400ce0c
 8015cc8:	0801b360 	.word	0x0801b360
 8015ccc:	0801b3c4 	.word	0x0801b3c4
 8015cd0:	0801b3e4 	.word	0x0801b3e4

08015cd4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	b082      	sub	sp, #8
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	781b      	ldrb	r3, [r3, #0]
 8015ce0:	2b02      	cmp	r3, #2
 8015ce2:	d026      	beq.n	8015d32 <tcpip_thread_handle_msg+0x5e>
 8015ce4:	2b02      	cmp	r3, #2
 8015ce6:	dc2b      	bgt.n	8015d40 <tcpip_thread_handle_msg+0x6c>
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d002      	beq.n	8015cf2 <tcpip_thread_handle_msg+0x1e>
 8015cec:	2b01      	cmp	r3, #1
 8015cee:	d015      	beq.n	8015d1c <tcpip_thread_handle_msg+0x48>
 8015cf0:	e026      	b.n	8015d40 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	68db      	ldr	r3, [r3, #12]
 8015cf6:	687a      	ldr	r2, [r7, #4]
 8015cf8:	6850      	ldr	r0, [r2, #4]
 8015cfa:	687a      	ldr	r2, [r7, #4]
 8015cfc:	6892      	ldr	r2, [r2, #8]
 8015cfe:	4611      	mov	r1, r2
 8015d00:	4798      	blx	r3
 8015d02:	4603      	mov	r3, r0
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d004      	beq.n	8015d12 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	685b      	ldr	r3, [r3, #4]
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	f7f9 f9d9 	bl	800f0c4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8015d12:	6879      	ldr	r1, [r7, #4]
 8015d14:	2009      	movs	r0, #9
 8015d16:	f7f8 fb13 	bl	800e340 <memp_free>
      break;
 8015d1a:	e018      	b.n	8015d4e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	685b      	ldr	r3, [r3, #4]
 8015d20:	687a      	ldr	r2, [r7, #4]
 8015d22:	6892      	ldr	r2, [r2, #8]
 8015d24:	4610      	mov	r0, r2
 8015d26:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8015d28:	6879      	ldr	r1, [r7, #4]
 8015d2a:	2008      	movs	r0, #8
 8015d2c:	f7f8 fb08 	bl	800e340 <memp_free>
      break;
 8015d30:	e00d      	b.n	8015d4e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	685b      	ldr	r3, [r3, #4]
 8015d36:	687a      	ldr	r2, [r7, #4]
 8015d38:	6892      	ldr	r2, [r2, #8]
 8015d3a:	4610      	mov	r0, r2
 8015d3c:	4798      	blx	r3
      break;
 8015d3e:	e006      	b.n	8015d4e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8015d40:	4b05      	ldr	r3, [pc, #20]	@ (8015d58 <tcpip_thread_handle_msg+0x84>)
 8015d42:	22cf      	movs	r2, #207	@ 0xcf
 8015d44:	4905      	ldr	r1, [pc, #20]	@ (8015d5c <tcpip_thread_handle_msg+0x88>)
 8015d46:	4806      	ldr	r0, [pc, #24]	@ (8015d60 <tcpip_thread_handle_msg+0x8c>)
 8015d48:	f001 f908 	bl	8016f5c <iprintf>
      break;
 8015d4c:	bf00      	nop
  }
}
 8015d4e:	bf00      	nop
 8015d50:	3708      	adds	r7, #8
 8015d52:	46bd      	mov	sp, r7
 8015d54:	bd80      	pop	{r7, pc}
 8015d56:	bf00      	nop
 8015d58:	0801b360 	.word	0x0801b360
 8015d5c:	0801b3c4 	.word	0x0801b3c4
 8015d60:	0801b3e4 	.word	0x0801b3e4

08015d64 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8015d64:	b580      	push	{r7, lr}
 8015d66:	b086      	sub	sp, #24
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	60f8      	str	r0, [r7, #12]
 8015d6c:	60b9      	str	r1, [r7, #8]
 8015d6e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8015d70:	481a      	ldr	r0, [pc, #104]	@ (8015ddc <tcpip_inpkt+0x78>)
 8015d72:	f7f9 fd71 	bl	800f858 <sys_mbox_valid>
 8015d76:	4603      	mov	r3, r0
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d105      	bne.n	8015d88 <tcpip_inpkt+0x24>
 8015d7c:	4b18      	ldr	r3, [pc, #96]	@ (8015de0 <tcpip_inpkt+0x7c>)
 8015d7e:	22fc      	movs	r2, #252	@ 0xfc
 8015d80:	4918      	ldr	r1, [pc, #96]	@ (8015de4 <tcpip_inpkt+0x80>)
 8015d82:	4819      	ldr	r0, [pc, #100]	@ (8015de8 <tcpip_inpkt+0x84>)
 8015d84:	f001 f8ea 	bl	8016f5c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8015d88:	2009      	movs	r0, #9
 8015d8a:	f7f8 fa63 	bl	800e254 <memp_malloc>
 8015d8e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8015d90:	697b      	ldr	r3, [r7, #20]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d102      	bne.n	8015d9c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8015d96:	f04f 33ff 	mov.w	r3, #4294967295
 8015d9a:	e01a      	b.n	8015dd2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8015d9c:	697b      	ldr	r3, [r7, #20]
 8015d9e:	2200      	movs	r2, #0
 8015da0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8015da2:	697b      	ldr	r3, [r7, #20]
 8015da4:	68fa      	ldr	r2, [r7, #12]
 8015da6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8015da8:	697b      	ldr	r3, [r7, #20]
 8015daa:	68ba      	ldr	r2, [r7, #8]
 8015dac:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8015dae:	697b      	ldr	r3, [r7, #20]
 8015db0:	687a      	ldr	r2, [r7, #4]
 8015db2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8015db4:	6979      	ldr	r1, [r7, #20]
 8015db6:	4809      	ldr	r0, [pc, #36]	@ (8015ddc <tcpip_inpkt+0x78>)
 8015db8:	f7f9 fcec 	bl	800f794 <sys_mbox_trypost>
 8015dbc:	4603      	mov	r3, r0
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d006      	beq.n	8015dd0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8015dc2:	6979      	ldr	r1, [r7, #20]
 8015dc4:	2009      	movs	r0, #9
 8015dc6:	f7f8 fabb 	bl	800e340 <memp_free>
    return ERR_MEM;
 8015dca:	f04f 33ff 	mov.w	r3, #4294967295
 8015dce:	e000      	b.n	8015dd2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8015dd0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	3718      	adds	r7, #24
 8015dd6:	46bd      	mov	sp, r7
 8015dd8:	bd80      	pop	{r7, pc}
 8015dda:	bf00      	nop
 8015ddc:	2400ce0c 	.word	0x2400ce0c
 8015de0:	0801b360 	.word	0x0801b360
 8015de4:	0801b40c 	.word	0x0801b40c
 8015de8:	0801b3e4 	.word	0x0801b3e4

08015dec <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8015dec:	b580      	push	{r7, lr}
 8015dee:	b082      	sub	sp, #8
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	6078      	str	r0, [r7, #4]
 8015df4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8015df6:	683b      	ldr	r3, [r7, #0]
 8015df8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015dfc:	f003 0318 	and.w	r3, r3, #24
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d006      	beq.n	8015e12 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8015e04:	4a08      	ldr	r2, [pc, #32]	@ (8015e28 <tcpip_input+0x3c>)
 8015e06:	6839      	ldr	r1, [r7, #0]
 8015e08:	6878      	ldr	r0, [r7, #4]
 8015e0a:	f7ff ffab 	bl	8015d64 <tcpip_inpkt>
 8015e0e:	4603      	mov	r3, r0
 8015e10:	e005      	b.n	8015e1e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8015e12:	4a06      	ldr	r2, [pc, #24]	@ (8015e2c <tcpip_input+0x40>)
 8015e14:	6839      	ldr	r1, [r7, #0]
 8015e16:	6878      	ldr	r0, [r7, #4]
 8015e18:	f7ff ffa4 	bl	8015d64 <tcpip_inpkt>
 8015e1c:	4603      	mov	r3, r0
}
 8015e1e:	4618      	mov	r0, r3
 8015e20:	3708      	adds	r7, #8
 8015e22:	46bd      	mov	sp, r7
 8015e24:	bd80      	pop	{r7, pc}
 8015e26:	bf00      	nop
 8015e28:	0800c051 	.word	0x0800c051
 8015e2c:	0800c841 	.word	0x0800c841

08015e30 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b084      	sub	sp, #16
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]
 8015e38:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8015e3a:	4819      	ldr	r0, [pc, #100]	@ (8015ea0 <tcpip_try_callback+0x70>)
 8015e3c:	f7f9 fd0c 	bl	800f858 <sys_mbox_valid>
 8015e40:	4603      	mov	r3, r0
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d106      	bne.n	8015e54 <tcpip_try_callback+0x24>
 8015e46:	4b17      	ldr	r3, [pc, #92]	@ (8015ea4 <tcpip_try_callback+0x74>)
 8015e48:	f240 125d 	movw	r2, #349	@ 0x15d
 8015e4c:	4916      	ldr	r1, [pc, #88]	@ (8015ea8 <tcpip_try_callback+0x78>)
 8015e4e:	4817      	ldr	r0, [pc, #92]	@ (8015eac <tcpip_try_callback+0x7c>)
 8015e50:	f001 f884 	bl	8016f5c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8015e54:	2008      	movs	r0, #8
 8015e56:	f7f8 f9fd 	bl	800e254 <memp_malloc>
 8015e5a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d102      	bne.n	8015e68 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8015e62:	f04f 33ff 	mov.w	r3, #4294967295
 8015e66:	e017      	b.n	8015e98 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	2201      	movs	r2, #1
 8015e6c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	687a      	ldr	r2, [r7, #4]
 8015e72:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	683a      	ldr	r2, [r7, #0]
 8015e78:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8015e7a:	68f9      	ldr	r1, [r7, #12]
 8015e7c:	4808      	ldr	r0, [pc, #32]	@ (8015ea0 <tcpip_try_callback+0x70>)
 8015e7e:	f7f9 fc89 	bl	800f794 <sys_mbox_trypost>
 8015e82:	4603      	mov	r3, r0
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d006      	beq.n	8015e96 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8015e88:	68f9      	ldr	r1, [r7, #12]
 8015e8a:	2008      	movs	r0, #8
 8015e8c:	f7f8 fa58 	bl	800e340 <memp_free>
    return ERR_MEM;
 8015e90:	f04f 33ff 	mov.w	r3, #4294967295
 8015e94:	e000      	b.n	8015e98 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8015e96:	2300      	movs	r3, #0
}
 8015e98:	4618      	mov	r0, r3
 8015e9a:	3710      	adds	r7, #16
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	bd80      	pop	{r7, pc}
 8015ea0:	2400ce0c 	.word	0x2400ce0c
 8015ea4:	0801b360 	.word	0x0801b360
 8015ea8:	0801b40c 	.word	0x0801b40c
 8015eac:	0801b3e4 	.word	0x0801b3e4

08015eb0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8015eb0:	b580      	push	{r7, lr}
 8015eb2:	b084      	sub	sp, #16
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	60f8      	str	r0, [r7, #12]
 8015eb8:	60b9      	str	r1, [r7, #8]
 8015eba:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8015ebc:	4806      	ldr	r0, [pc, #24]	@ (8015ed8 <tcpip_send_msg_wait_sem+0x28>)
 8015ebe:	f7f9 fd99 	bl	800f9f4 <sys_mutex_lock>
  fn(apimsg);
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	68b8      	ldr	r0, [r7, #8]
 8015ec6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8015ec8:	4803      	ldr	r0, [pc, #12]	@ (8015ed8 <tcpip_send_msg_wait_sem+0x28>)
 8015eca:	f7f9 fda2 	bl	800fa12 <sys_mutex_unlock>
  return ERR_OK;
 8015ece:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	3710      	adds	r7, #16
 8015ed4:	46bd      	mov	sp, r7
 8015ed6:	bd80      	pop	{r7, pc}
 8015ed8:	2400ce10 	.word	0x2400ce10

08015edc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b084      	sub	sp, #16
 8015ee0:	af02      	add	r7, sp, #8
 8015ee2:	6078      	str	r0, [r7, #4]
 8015ee4:	6039      	str	r1, [r7, #0]
  lwip_init();
 8015ee6:	f7f6 fbf9 	bl	800c6dc <lwip_init>

  tcpip_init_done = initfunc;
 8015eea:	4a17      	ldr	r2, [pc, #92]	@ (8015f48 <tcpip_init+0x6c>)
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8015ef0:	4a16      	ldr	r2, [pc, #88]	@ (8015f4c <tcpip_init+0x70>)
 8015ef2:	683b      	ldr	r3, [r7, #0]
 8015ef4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8015ef6:	2106      	movs	r1, #6
 8015ef8:	4815      	ldr	r0, [pc, #84]	@ (8015f50 <tcpip_init+0x74>)
 8015efa:	f7f9 fc1f 	bl	800f73c <sys_mbox_new>
 8015efe:	4603      	mov	r3, r0
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d006      	beq.n	8015f12 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8015f04:	4b13      	ldr	r3, [pc, #76]	@ (8015f54 <tcpip_init+0x78>)
 8015f06:	f240 2261 	movw	r2, #609	@ 0x261
 8015f0a:	4913      	ldr	r1, [pc, #76]	@ (8015f58 <tcpip_init+0x7c>)
 8015f0c:	4813      	ldr	r0, [pc, #76]	@ (8015f5c <tcpip_init+0x80>)
 8015f0e:	f001 f825 	bl	8016f5c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8015f12:	4813      	ldr	r0, [pc, #76]	@ (8015f60 <tcpip_init+0x84>)
 8015f14:	f7f9 fd58 	bl	800f9c8 <sys_mutex_new>
 8015f18:	4603      	mov	r3, r0
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d006      	beq.n	8015f2c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8015f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8015f54 <tcpip_init+0x78>)
 8015f20:	f240 2265 	movw	r2, #613	@ 0x265
 8015f24:	490f      	ldr	r1, [pc, #60]	@ (8015f64 <tcpip_init+0x88>)
 8015f26:	480d      	ldr	r0, [pc, #52]	@ (8015f5c <tcpip_init+0x80>)
 8015f28:	f001 f818 	bl	8016f5c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8015f2c:	2318      	movs	r3, #24
 8015f2e:	9300      	str	r3, [sp, #0]
 8015f30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015f34:	2200      	movs	r2, #0
 8015f36:	490c      	ldr	r1, [pc, #48]	@ (8015f68 <tcpip_init+0x8c>)
 8015f38:	480c      	ldr	r0, [pc, #48]	@ (8015f6c <tcpip_init+0x90>)
 8015f3a:	f7f9 fd77 	bl	800fa2c <sys_thread_new>
}
 8015f3e:	bf00      	nop
 8015f40:	3708      	adds	r7, #8
 8015f42:	46bd      	mov	sp, r7
 8015f44:	bd80      	pop	{r7, pc}
 8015f46:	bf00      	nop
 8015f48:	2400ce04 	.word	0x2400ce04
 8015f4c:	2400ce08 	.word	0x2400ce08
 8015f50:	2400ce0c 	.word	0x2400ce0c
 8015f54:	0801b360 	.word	0x0801b360
 8015f58:	0801b41c 	.word	0x0801b41c
 8015f5c:	0801b3e4 	.word	0x0801b3e4
 8015f60:	2400ce10 	.word	0x2400ce10
 8015f64:	0801b440 	.word	0x0801b440
 8015f68:	08015c6d 	.word	0x08015c6d
 8015f6c:	0801b464 	.word	0x0801b464

08015f70 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	b082      	sub	sp, #8
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015f78:	f7f9 fde0 	bl	800fb3c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8015fa8 <tcpip_tcp_timer+0x38>)
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d103      	bne.n	8015f8c <tcpip_tcp_timer+0x1c>
 8015f84:	4b09      	ldr	r3, [pc, #36]	@ (8015fac <tcpip_tcp_timer+0x3c>)
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d005      	beq.n	8015f98 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	4908      	ldr	r1, [pc, #32]	@ (8015fb0 <tcpip_tcp_timer+0x40>)
 8015f90:	20fa      	movs	r0, #250	@ 0xfa
 8015f92:	f000 f8f3 	bl	801617c <sys_timeout>
 8015f96:	e003      	b.n	8015fa0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015f98:	4b06      	ldr	r3, [pc, #24]	@ (8015fb4 <tcpip_tcp_timer+0x44>)
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	601a      	str	r2, [r3, #0]
  }
}
 8015f9e:	bf00      	nop
 8015fa0:	bf00      	nop
 8015fa2:	3708      	adds	r7, #8
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	bd80      	pop	{r7, pc}
 8015fa8:	2400cdc0 	.word	0x2400cdc0
 8015fac:	2400cdc4 	.word	0x2400cdc4
 8015fb0:	08015f71 	.word	0x08015f71
 8015fb4:	2400ce1c 	.word	0x2400ce1c

08015fb8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015fb8:	b580      	push	{r7, lr}
 8015fba:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8015fe8 <tcp_timer_needed+0x30>)
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d10f      	bne.n	8015fe4 <tcp_timer_needed+0x2c>
 8015fc4:	4b09      	ldr	r3, [pc, #36]	@ (8015fec <tcp_timer_needed+0x34>)
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d103      	bne.n	8015fd4 <tcp_timer_needed+0x1c>
 8015fcc:	4b08      	ldr	r3, [pc, #32]	@ (8015ff0 <tcp_timer_needed+0x38>)
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d007      	beq.n	8015fe4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015fd4:	4b04      	ldr	r3, [pc, #16]	@ (8015fe8 <tcp_timer_needed+0x30>)
 8015fd6:	2201      	movs	r2, #1
 8015fd8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015fda:	2200      	movs	r2, #0
 8015fdc:	4905      	ldr	r1, [pc, #20]	@ (8015ff4 <tcp_timer_needed+0x3c>)
 8015fde:	20fa      	movs	r0, #250	@ 0xfa
 8015fe0:	f000 f8cc 	bl	801617c <sys_timeout>
  }
}
 8015fe4:	bf00      	nop
 8015fe6:	bd80      	pop	{r7, pc}
 8015fe8:	2400ce1c 	.word	0x2400ce1c
 8015fec:	2400cdc0 	.word	0x2400cdc0
 8015ff0:	2400cdc4 	.word	0x2400cdc4
 8015ff4:	08015f71 	.word	0x08015f71

08015ff8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b086      	sub	sp, #24
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	60f8      	str	r0, [r7, #12]
 8016000:	60b9      	str	r1, [r7, #8]
 8016002:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016004:	200a      	movs	r0, #10
 8016006:	f7f8 f925 	bl	800e254 <memp_malloc>
 801600a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801600c:	693b      	ldr	r3, [r7, #16]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d109      	bne.n	8016026 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016012:	693b      	ldr	r3, [r7, #16]
 8016014:	2b00      	cmp	r3, #0
 8016016:	d151      	bne.n	80160bc <sys_timeout_abs+0xc4>
 8016018:	4b2a      	ldr	r3, [pc, #168]	@ (80160c4 <sys_timeout_abs+0xcc>)
 801601a:	22be      	movs	r2, #190	@ 0xbe
 801601c:	492a      	ldr	r1, [pc, #168]	@ (80160c8 <sys_timeout_abs+0xd0>)
 801601e:	482b      	ldr	r0, [pc, #172]	@ (80160cc <sys_timeout_abs+0xd4>)
 8016020:	f000 ff9c 	bl	8016f5c <iprintf>
    return;
 8016024:	e04a      	b.n	80160bc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8016026:	693b      	ldr	r3, [r7, #16]
 8016028:	2200      	movs	r2, #0
 801602a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801602c:	693b      	ldr	r3, [r7, #16]
 801602e:	68ba      	ldr	r2, [r7, #8]
 8016030:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016032:	693b      	ldr	r3, [r7, #16]
 8016034:	687a      	ldr	r2, [r7, #4]
 8016036:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8016038:	693b      	ldr	r3, [r7, #16]
 801603a:	68fa      	ldr	r2, [r7, #12]
 801603c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801603e:	4b24      	ldr	r3, [pc, #144]	@ (80160d0 <sys_timeout_abs+0xd8>)
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	2b00      	cmp	r3, #0
 8016044:	d103      	bne.n	801604e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8016046:	4a22      	ldr	r2, [pc, #136]	@ (80160d0 <sys_timeout_abs+0xd8>)
 8016048:	693b      	ldr	r3, [r7, #16]
 801604a:	6013      	str	r3, [r2, #0]
    return;
 801604c:	e037      	b.n	80160be <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801604e:	693b      	ldr	r3, [r7, #16]
 8016050:	685a      	ldr	r2, [r3, #4]
 8016052:	4b1f      	ldr	r3, [pc, #124]	@ (80160d0 <sys_timeout_abs+0xd8>)
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	685b      	ldr	r3, [r3, #4]
 8016058:	1ad3      	subs	r3, r2, r3
 801605a:	0fdb      	lsrs	r3, r3, #31
 801605c:	f003 0301 	and.w	r3, r3, #1
 8016060:	b2db      	uxtb	r3, r3
 8016062:	2b00      	cmp	r3, #0
 8016064:	d007      	beq.n	8016076 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8016066:	4b1a      	ldr	r3, [pc, #104]	@ (80160d0 <sys_timeout_abs+0xd8>)
 8016068:	681a      	ldr	r2, [r3, #0]
 801606a:	693b      	ldr	r3, [r7, #16]
 801606c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801606e:	4a18      	ldr	r2, [pc, #96]	@ (80160d0 <sys_timeout_abs+0xd8>)
 8016070:	693b      	ldr	r3, [r7, #16]
 8016072:	6013      	str	r3, [r2, #0]
 8016074:	e023      	b.n	80160be <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016076:	4b16      	ldr	r3, [pc, #88]	@ (80160d0 <sys_timeout_abs+0xd8>)
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	617b      	str	r3, [r7, #20]
 801607c:	e01a      	b.n	80160b4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801607e:	697b      	ldr	r3, [r7, #20]
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d00b      	beq.n	801609e <sys_timeout_abs+0xa6>
 8016086:	693b      	ldr	r3, [r7, #16]
 8016088:	685a      	ldr	r2, [r3, #4]
 801608a:	697b      	ldr	r3, [r7, #20]
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	685b      	ldr	r3, [r3, #4]
 8016090:	1ad3      	subs	r3, r2, r3
 8016092:	0fdb      	lsrs	r3, r3, #31
 8016094:	f003 0301 	and.w	r3, r3, #1
 8016098:	b2db      	uxtb	r3, r3
 801609a:	2b00      	cmp	r3, #0
 801609c:	d007      	beq.n	80160ae <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801609e:	697b      	ldr	r3, [r7, #20]
 80160a0:	681a      	ldr	r2, [r3, #0]
 80160a2:	693b      	ldr	r3, [r7, #16]
 80160a4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80160a6:	697b      	ldr	r3, [r7, #20]
 80160a8:	693a      	ldr	r2, [r7, #16]
 80160aa:	601a      	str	r2, [r3, #0]
        break;
 80160ac:	e007      	b.n	80160be <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80160ae:	697b      	ldr	r3, [r7, #20]
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	617b      	str	r3, [r7, #20]
 80160b4:	697b      	ldr	r3, [r7, #20]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d1e1      	bne.n	801607e <sys_timeout_abs+0x86>
 80160ba:	e000      	b.n	80160be <sys_timeout_abs+0xc6>
    return;
 80160bc:	bf00      	nop
      }
    }
  }
}
 80160be:	3718      	adds	r7, #24
 80160c0:	46bd      	mov	sp, r7
 80160c2:	bd80      	pop	{r7, pc}
 80160c4:	0801b474 	.word	0x0801b474
 80160c8:	0801b4dc 	.word	0x0801b4dc
 80160cc:	0801b51c 	.word	0x0801b51c
 80160d0:	2400ce14 	.word	0x2400ce14

080160d4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b086      	sub	sp, #24
 80160d8:	af00      	add	r7, sp, #0
 80160da:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80160e0:	697b      	ldr	r3, [r7, #20]
 80160e2:	685b      	ldr	r3, [r3, #4]
 80160e4:	4798      	blx	r3

  now = sys_now();
 80160e6:	f7ee ff6b 	bl	8004fc0 <sys_now>
 80160ea:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80160ec:	697b      	ldr	r3, [r7, #20]
 80160ee:	681a      	ldr	r2, [r3, #0]
 80160f0:	4b0f      	ldr	r3, [pc, #60]	@ (8016130 <lwip_cyclic_timer+0x5c>)
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	4413      	add	r3, r2
 80160f6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80160f8:	68fa      	ldr	r2, [r7, #12]
 80160fa:	693b      	ldr	r3, [r7, #16]
 80160fc:	1ad3      	subs	r3, r2, r3
 80160fe:	0fdb      	lsrs	r3, r3, #31
 8016100:	f003 0301 	and.w	r3, r3, #1
 8016104:	b2db      	uxtb	r3, r3
 8016106:	2b00      	cmp	r3, #0
 8016108:	d009      	beq.n	801611e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801610a:	697b      	ldr	r3, [r7, #20]
 801610c:	681a      	ldr	r2, [r3, #0]
 801610e:	693b      	ldr	r3, [r7, #16]
 8016110:	4413      	add	r3, r2
 8016112:	687a      	ldr	r2, [r7, #4]
 8016114:	4907      	ldr	r1, [pc, #28]	@ (8016134 <lwip_cyclic_timer+0x60>)
 8016116:	4618      	mov	r0, r3
 8016118:	f7ff ff6e 	bl	8015ff8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801611c:	e004      	b.n	8016128 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801611e:	687a      	ldr	r2, [r7, #4]
 8016120:	4904      	ldr	r1, [pc, #16]	@ (8016134 <lwip_cyclic_timer+0x60>)
 8016122:	68f8      	ldr	r0, [r7, #12]
 8016124:	f7ff ff68 	bl	8015ff8 <sys_timeout_abs>
}
 8016128:	bf00      	nop
 801612a:	3718      	adds	r7, #24
 801612c:	46bd      	mov	sp, r7
 801612e:	bd80      	pop	{r7, pc}
 8016130:	2400ce18 	.word	0x2400ce18
 8016134:	080160d5 	.word	0x080160d5

08016138 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016138:	b580      	push	{r7, lr}
 801613a:	b082      	sub	sp, #8
 801613c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801613e:	2301      	movs	r3, #1
 8016140:	607b      	str	r3, [r7, #4]
 8016142:	e00e      	b.n	8016162 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016144:	4a0b      	ldr	r2, [pc, #44]	@ (8016174 <sys_timeouts_init+0x3c>)
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	00db      	lsls	r3, r3, #3
 8016150:	4a08      	ldr	r2, [pc, #32]	@ (8016174 <sys_timeouts_init+0x3c>)
 8016152:	4413      	add	r3, r2
 8016154:	461a      	mov	r2, r3
 8016156:	4908      	ldr	r1, [pc, #32]	@ (8016178 <sys_timeouts_init+0x40>)
 8016158:	f000 f810 	bl	801617c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	3301      	adds	r3, #1
 8016160:	607b      	str	r3, [r7, #4]
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	2b02      	cmp	r3, #2
 8016166:	d9ed      	bls.n	8016144 <sys_timeouts_init+0xc>
  }
}
 8016168:	bf00      	nop
 801616a:	bf00      	nop
 801616c:	3708      	adds	r7, #8
 801616e:	46bd      	mov	sp, r7
 8016170:	bd80      	pop	{r7, pc}
 8016172:	bf00      	nop
 8016174:	0801ba78 	.word	0x0801ba78
 8016178:	080160d5 	.word	0x080160d5

0801617c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801617c:	b580      	push	{r7, lr}
 801617e:	b086      	sub	sp, #24
 8016180:	af00      	add	r7, sp, #0
 8016182:	60f8      	str	r0, [r7, #12]
 8016184:	60b9      	str	r1, [r7, #8]
 8016186:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801618e:	d306      	bcc.n	801619e <sys_timeout+0x22>
 8016190:	4b0a      	ldr	r3, [pc, #40]	@ (80161bc <sys_timeout+0x40>)
 8016192:	f240 1229 	movw	r2, #297	@ 0x129
 8016196:	490a      	ldr	r1, [pc, #40]	@ (80161c0 <sys_timeout+0x44>)
 8016198:	480a      	ldr	r0, [pc, #40]	@ (80161c4 <sys_timeout+0x48>)
 801619a:	f000 fedf 	bl	8016f5c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801619e:	f7ee ff0f 	bl	8004fc0 <sys_now>
 80161a2:	4602      	mov	r2, r0
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	4413      	add	r3, r2
 80161a8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80161aa:	687a      	ldr	r2, [r7, #4]
 80161ac:	68b9      	ldr	r1, [r7, #8]
 80161ae:	6978      	ldr	r0, [r7, #20]
 80161b0:	f7ff ff22 	bl	8015ff8 <sys_timeout_abs>
#endif
}
 80161b4:	bf00      	nop
 80161b6:	3718      	adds	r7, #24
 80161b8:	46bd      	mov	sp, r7
 80161ba:	bd80      	pop	{r7, pc}
 80161bc:	0801b474 	.word	0x0801b474
 80161c0:	0801b544 	.word	0x0801b544
 80161c4:	0801b51c 	.word	0x0801b51c

080161c8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b084      	sub	sp, #16
 80161cc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80161ce:	f7ee fef7 	bl	8004fc0 <sys_now>
 80161d2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80161d4:	4b17      	ldr	r3, [pc, #92]	@ (8016234 <sys_check_timeouts+0x6c>)
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80161da:	68bb      	ldr	r3, [r7, #8]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d022      	beq.n	8016226 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80161e0:	68bb      	ldr	r3, [r7, #8]
 80161e2:	685b      	ldr	r3, [r3, #4]
 80161e4:	68fa      	ldr	r2, [r7, #12]
 80161e6:	1ad3      	subs	r3, r2, r3
 80161e8:	0fdb      	lsrs	r3, r3, #31
 80161ea:	f003 0301 	and.w	r3, r3, #1
 80161ee:	b2db      	uxtb	r3, r3
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d11a      	bne.n	801622a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80161f4:	68bb      	ldr	r3, [r7, #8]
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	4a0e      	ldr	r2, [pc, #56]	@ (8016234 <sys_check_timeouts+0x6c>)
 80161fa:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80161fc:	68bb      	ldr	r3, [r7, #8]
 80161fe:	689b      	ldr	r3, [r3, #8]
 8016200:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8016202:	68bb      	ldr	r3, [r7, #8]
 8016204:	68db      	ldr	r3, [r3, #12]
 8016206:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8016208:	68bb      	ldr	r3, [r7, #8]
 801620a:	685b      	ldr	r3, [r3, #4]
 801620c:	4a0a      	ldr	r2, [pc, #40]	@ (8016238 <sys_check_timeouts+0x70>)
 801620e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8016210:	68b9      	ldr	r1, [r7, #8]
 8016212:	200a      	movs	r0, #10
 8016214:	f7f8 f894 	bl	800e340 <memp_free>
    if (handler != NULL) {
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d0da      	beq.n	80161d4 <sys_check_timeouts+0xc>
      handler(arg);
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	6838      	ldr	r0, [r7, #0]
 8016222:	4798      	blx	r3
  do {
 8016224:	e7d6      	b.n	80161d4 <sys_check_timeouts+0xc>
      return;
 8016226:	bf00      	nop
 8016228:	e000      	b.n	801622c <sys_check_timeouts+0x64>
      return;
 801622a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801622c:	3710      	adds	r7, #16
 801622e:	46bd      	mov	sp, r7
 8016230:	bd80      	pop	{r7, pc}
 8016232:	bf00      	nop
 8016234:	2400ce14 	.word	0x2400ce14
 8016238:	2400ce18 	.word	0x2400ce18

0801623c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801623c:	b580      	push	{r7, lr}
 801623e:	b082      	sub	sp, #8
 8016240:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8016242:	4b16      	ldr	r3, [pc, #88]	@ (801629c <sys_timeouts_sleeptime+0x60>)
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d102      	bne.n	8016250 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801624a:	f04f 33ff 	mov.w	r3, #4294967295
 801624e:	e020      	b.n	8016292 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8016250:	f7ee feb6 	bl	8004fc0 <sys_now>
 8016254:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8016256:	4b11      	ldr	r3, [pc, #68]	@ (801629c <sys_timeouts_sleeptime+0x60>)
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	685a      	ldr	r2, [r3, #4]
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	1ad3      	subs	r3, r2, r3
 8016260:	0fdb      	lsrs	r3, r3, #31
 8016262:	f003 0301 	and.w	r3, r3, #1
 8016266:	b2db      	uxtb	r3, r3
 8016268:	2b00      	cmp	r3, #0
 801626a:	d001      	beq.n	8016270 <sys_timeouts_sleeptime+0x34>
    return 0;
 801626c:	2300      	movs	r3, #0
 801626e:	e010      	b.n	8016292 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8016270:	4b0a      	ldr	r3, [pc, #40]	@ (801629c <sys_timeouts_sleeptime+0x60>)
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	685a      	ldr	r2, [r3, #4]
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	1ad3      	subs	r3, r2, r3
 801627a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801627c:	683b      	ldr	r3, [r7, #0]
 801627e:	2b00      	cmp	r3, #0
 8016280:	da06      	bge.n	8016290 <sys_timeouts_sleeptime+0x54>
 8016282:	4b07      	ldr	r3, [pc, #28]	@ (80162a0 <sys_timeouts_sleeptime+0x64>)
 8016284:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8016288:	4906      	ldr	r1, [pc, #24]	@ (80162a4 <sys_timeouts_sleeptime+0x68>)
 801628a:	4807      	ldr	r0, [pc, #28]	@ (80162a8 <sys_timeouts_sleeptime+0x6c>)
 801628c:	f000 fe66 	bl	8016f5c <iprintf>
    return ret;
 8016290:	683b      	ldr	r3, [r7, #0]
  }
}
 8016292:	4618      	mov	r0, r3
 8016294:	3708      	adds	r7, #8
 8016296:	46bd      	mov	sp, r7
 8016298:	bd80      	pop	{r7, pc}
 801629a:	bf00      	nop
 801629c:	2400ce14 	.word	0x2400ce14
 80162a0:	0801b474 	.word	0x0801b474
 80162a4:	0801b57c 	.word	0x0801b57c
 80162a8:	0801b51c 	.word	0x0801b51c

080162ac <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80162b0:	f000 fd54 	bl	8016d5c <rand>
 80162b4:	4603      	mov	r3, r0
 80162b6:	b29b      	uxth	r3, r3
 80162b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80162bc:	b29b      	uxth	r3, r3
 80162be:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80162c2:	b29a      	uxth	r2, r3
 80162c4:	4b01      	ldr	r3, [pc, #4]	@ (80162cc <udp_init+0x20>)
 80162c6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80162c8:	bf00      	nop
 80162ca:	bd80      	pop	{r7, pc}
 80162cc:	24000030 	.word	0x24000030

080162d0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80162d0:	b480      	push	{r7}
 80162d2:	b083      	sub	sp, #12
 80162d4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80162d6:	2300      	movs	r3, #0
 80162d8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80162da:	4b17      	ldr	r3, [pc, #92]	@ (8016338 <udp_new_port+0x68>)
 80162dc:	881b      	ldrh	r3, [r3, #0]
 80162de:	1c5a      	adds	r2, r3, #1
 80162e0:	b291      	uxth	r1, r2
 80162e2:	4a15      	ldr	r2, [pc, #84]	@ (8016338 <udp_new_port+0x68>)
 80162e4:	8011      	strh	r1, [r2, #0]
 80162e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80162ea:	4293      	cmp	r3, r2
 80162ec:	d103      	bne.n	80162f6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80162ee:	4b12      	ldr	r3, [pc, #72]	@ (8016338 <udp_new_port+0x68>)
 80162f0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80162f4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80162f6:	4b11      	ldr	r3, [pc, #68]	@ (801633c <udp_new_port+0x6c>)
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	603b      	str	r3, [r7, #0]
 80162fc:	e011      	b.n	8016322 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80162fe:	683b      	ldr	r3, [r7, #0]
 8016300:	8a5a      	ldrh	r2, [r3, #18]
 8016302:	4b0d      	ldr	r3, [pc, #52]	@ (8016338 <udp_new_port+0x68>)
 8016304:	881b      	ldrh	r3, [r3, #0]
 8016306:	429a      	cmp	r2, r3
 8016308:	d108      	bne.n	801631c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801630a:	88fb      	ldrh	r3, [r7, #6]
 801630c:	3301      	adds	r3, #1
 801630e:	80fb      	strh	r3, [r7, #6]
 8016310:	88fb      	ldrh	r3, [r7, #6]
 8016312:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016316:	d3e0      	bcc.n	80162da <udp_new_port+0xa>
        return 0;
 8016318:	2300      	movs	r3, #0
 801631a:	e007      	b.n	801632c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801631c:	683b      	ldr	r3, [r7, #0]
 801631e:	68db      	ldr	r3, [r3, #12]
 8016320:	603b      	str	r3, [r7, #0]
 8016322:	683b      	ldr	r3, [r7, #0]
 8016324:	2b00      	cmp	r3, #0
 8016326:	d1ea      	bne.n	80162fe <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8016328:	4b03      	ldr	r3, [pc, #12]	@ (8016338 <udp_new_port+0x68>)
 801632a:	881b      	ldrh	r3, [r3, #0]
}
 801632c:	4618      	mov	r0, r3
 801632e:	370c      	adds	r7, #12
 8016330:	46bd      	mov	sp, r7
 8016332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016336:	4770      	bx	lr
 8016338:	24000030 	.word	0x24000030
 801633c:	2400ce20 	.word	0x2400ce20

08016340 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016340:	b580      	push	{r7, lr}
 8016342:	b084      	sub	sp, #16
 8016344:	af00      	add	r7, sp, #0
 8016346:	60f8      	str	r0, [r7, #12]
 8016348:	60b9      	str	r1, [r7, #8]
 801634a:	4613      	mov	r3, r2
 801634c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	2b00      	cmp	r3, #0
 8016352:	d105      	bne.n	8016360 <udp_input_local_match+0x20>
 8016354:	4b27      	ldr	r3, [pc, #156]	@ (80163f4 <udp_input_local_match+0xb4>)
 8016356:	2287      	movs	r2, #135	@ 0x87
 8016358:	4927      	ldr	r1, [pc, #156]	@ (80163f8 <udp_input_local_match+0xb8>)
 801635a:	4828      	ldr	r0, [pc, #160]	@ (80163fc <udp_input_local_match+0xbc>)
 801635c:	f000 fdfe 	bl	8016f5c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016360:	68bb      	ldr	r3, [r7, #8]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d105      	bne.n	8016372 <udp_input_local_match+0x32>
 8016366:	4b23      	ldr	r3, [pc, #140]	@ (80163f4 <udp_input_local_match+0xb4>)
 8016368:	2288      	movs	r2, #136	@ 0x88
 801636a:	4925      	ldr	r1, [pc, #148]	@ (8016400 <udp_input_local_match+0xc0>)
 801636c:	4823      	ldr	r0, [pc, #140]	@ (80163fc <udp_input_local_match+0xbc>)
 801636e:	f000 fdf5 	bl	8016f5c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	7a1b      	ldrb	r3, [r3, #8]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d00b      	beq.n	8016392 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	7a1a      	ldrb	r2, [r3, #8]
 801637e:	4b21      	ldr	r3, [pc, #132]	@ (8016404 <udp_input_local_match+0xc4>)
 8016380:	685b      	ldr	r3, [r3, #4]
 8016382:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016386:	3301      	adds	r3, #1
 8016388:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801638a:	429a      	cmp	r2, r3
 801638c:	d001      	beq.n	8016392 <udp_input_local_match+0x52>
    return 0;
 801638e:	2300      	movs	r3, #0
 8016390:	e02b      	b.n	80163ea <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016392:	79fb      	ldrb	r3, [r7, #7]
 8016394:	2b00      	cmp	r3, #0
 8016396:	d018      	beq.n	80163ca <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d013      	beq.n	80163c6 <udp_input_local_match+0x86>
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d00f      	beq.n	80163c6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80163a6:	4b17      	ldr	r3, [pc, #92]	@ (8016404 <udp_input_local_match+0xc4>)
 80163a8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80163aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163ae:	d00a      	beq.n	80163c6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	681a      	ldr	r2, [r3, #0]
 80163b4:	4b13      	ldr	r3, [pc, #76]	@ (8016404 <udp_input_local_match+0xc4>)
 80163b6:	695b      	ldr	r3, [r3, #20]
 80163b8:	405a      	eors	r2, r3
 80163ba:	68bb      	ldr	r3, [r7, #8]
 80163bc:	3308      	adds	r3, #8
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d110      	bne.n	80163e8 <udp_input_local_match+0xa8>
          return 1;
 80163c6:	2301      	movs	r3, #1
 80163c8:	e00f      	b.n	80163ea <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d009      	beq.n	80163e4 <udp_input_local_match+0xa4>
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d005      	beq.n	80163e4 <udp_input_local_match+0xa4>
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	681a      	ldr	r2, [r3, #0]
 80163dc:	4b09      	ldr	r3, [pc, #36]	@ (8016404 <udp_input_local_match+0xc4>)
 80163de:	695b      	ldr	r3, [r3, #20]
 80163e0:	429a      	cmp	r2, r3
 80163e2:	d101      	bne.n	80163e8 <udp_input_local_match+0xa8>
        return 1;
 80163e4:	2301      	movs	r3, #1
 80163e6:	e000      	b.n	80163ea <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80163e8:	2300      	movs	r3, #0
}
 80163ea:	4618      	mov	r0, r3
 80163ec:	3710      	adds	r7, #16
 80163ee:	46bd      	mov	sp, r7
 80163f0:	bd80      	pop	{r7, pc}
 80163f2:	bf00      	nop
 80163f4:	0801b590 	.word	0x0801b590
 80163f8:	0801b5f4 	.word	0x0801b5f4
 80163fc:	0801b618 	.word	0x0801b618
 8016400:	0801b640 	.word	0x0801b640
 8016404:	24009ca4 	.word	0x24009ca4

08016408 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016408:	b590      	push	{r4, r7, lr}
 801640a:	b08d      	sub	sp, #52	@ 0x34
 801640c:	af02      	add	r7, sp, #8
 801640e:	6078      	str	r0, [r7, #4]
 8016410:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016412:	2300      	movs	r3, #0
 8016414:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d105      	bne.n	8016428 <udp_input+0x20>
 801641c:	4b7c      	ldr	r3, [pc, #496]	@ (8016610 <udp_input+0x208>)
 801641e:	22cf      	movs	r2, #207	@ 0xcf
 8016420:	497c      	ldr	r1, [pc, #496]	@ (8016614 <udp_input+0x20c>)
 8016422:	487d      	ldr	r0, [pc, #500]	@ (8016618 <udp_input+0x210>)
 8016424:	f000 fd9a 	bl	8016f5c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016428:	683b      	ldr	r3, [r7, #0]
 801642a:	2b00      	cmp	r3, #0
 801642c:	d105      	bne.n	801643a <udp_input+0x32>
 801642e:	4b78      	ldr	r3, [pc, #480]	@ (8016610 <udp_input+0x208>)
 8016430:	22d0      	movs	r2, #208	@ 0xd0
 8016432:	497a      	ldr	r1, [pc, #488]	@ (801661c <udp_input+0x214>)
 8016434:	4878      	ldr	r0, [pc, #480]	@ (8016618 <udp_input+0x210>)
 8016436:	f000 fd91 	bl	8016f5c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	895b      	ldrh	r3, [r3, #10]
 801643e:	2b07      	cmp	r3, #7
 8016440:	d803      	bhi.n	801644a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016442:	6878      	ldr	r0, [r7, #4]
 8016444:	f7f8 fe3e 	bl	800f0c4 <pbuf_free>
    goto end;
 8016448:	e0de      	b.n	8016608 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	685b      	ldr	r3, [r3, #4]
 801644e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016450:	4b73      	ldr	r3, [pc, #460]	@ (8016620 <udp_input+0x218>)
 8016452:	695b      	ldr	r3, [r3, #20]
 8016454:	4a72      	ldr	r2, [pc, #456]	@ (8016620 <udp_input+0x218>)
 8016456:	6812      	ldr	r2, [r2, #0]
 8016458:	4611      	mov	r1, r2
 801645a:	4618      	mov	r0, r3
 801645c:	f7f6 fbec 	bl	800cc38 <ip4_addr_isbroadcast_u32>
 8016460:	4603      	mov	r3, r0
 8016462:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016464:	697b      	ldr	r3, [r7, #20]
 8016466:	881b      	ldrh	r3, [r3, #0]
 8016468:	b29b      	uxth	r3, r3
 801646a:	4618      	mov	r0, r3
 801646c:	f7f4 fe74 	bl	800b158 <lwip_htons>
 8016470:	4603      	mov	r3, r0
 8016472:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016474:	697b      	ldr	r3, [r7, #20]
 8016476:	885b      	ldrh	r3, [r3, #2]
 8016478:	b29b      	uxth	r3, r3
 801647a:	4618      	mov	r0, r3
 801647c:	f7f4 fe6c 	bl	800b158 <lwip_htons>
 8016480:	4603      	mov	r3, r0
 8016482:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016484:	2300      	movs	r3, #0
 8016486:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8016488:	2300      	movs	r3, #0
 801648a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801648c:	2300      	movs	r3, #0
 801648e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016490:	4b64      	ldr	r3, [pc, #400]	@ (8016624 <udp_input+0x21c>)
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	627b      	str	r3, [r7, #36]	@ 0x24
 8016496:	e054      	b.n	8016542 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801649a:	8a5b      	ldrh	r3, [r3, #18]
 801649c:	89fa      	ldrh	r2, [r7, #14]
 801649e:	429a      	cmp	r2, r3
 80164a0:	d14a      	bne.n	8016538 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80164a2:	7cfb      	ldrb	r3, [r7, #19]
 80164a4:	461a      	mov	r2, r3
 80164a6:	6839      	ldr	r1, [r7, #0]
 80164a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80164aa:	f7ff ff49 	bl	8016340 <udp_input_local_match>
 80164ae:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d041      	beq.n	8016538 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80164b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164b6:	7c1b      	ldrb	r3, [r3, #16]
 80164b8:	f003 0304 	and.w	r3, r3, #4
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d11d      	bne.n	80164fc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80164c0:	69fb      	ldr	r3, [r7, #28]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d102      	bne.n	80164cc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80164c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164c8:	61fb      	str	r3, [r7, #28]
 80164ca:	e017      	b.n	80164fc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80164cc:	7cfb      	ldrb	r3, [r7, #19]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d014      	beq.n	80164fc <udp_input+0xf4>
 80164d2:	4b53      	ldr	r3, [pc, #332]	@ (8016620 <udp_input+0x218>)
 80164d4:	695b      	ldr	r3, [r3, #20]
 80164d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164da:	d10f      	bne.n	80164fc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80164dc:	69fb      	ldr	r3, [r7, #28]
 80164de:	681a      	ldr	r2, [r3, #0]
 80164e0:	683b      	ldr	r3, [r7, #0]
 80164e2:	3304      	adds	r3, #4
 80164e4:	681b      	ldr	r3, [r3, #0]
 80164e6:	429a      	cmp	r2, r3
 80164e8:	d008      	beq.n	80164fc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80164ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164ec:	681a      	ldr	r2, [r3, #0]
 80164ee:	683b      	ldr	r3, [r7, #0]
 80164f0:	3304      	adds	r3, #4
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	429a      	cmp	r2, r3
 80164f6:	d101      	bne.n	80164fc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80164f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164fa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80164fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164fe:	8a9b      	ldrh	r3, [r3, #20]
 8016500:	8a3a      	ldrh	r2, [r7, #16]
 8016502:	429a      	cmp	r2, r3
 8016504:	d118      	bne.n	8016538 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016508:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801650a:	2b00      	cmp	r3, #0
 801650c:	d005      	beq.n	801651a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801650e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016510:	685a      	ldr	r2, [r3, #4]
 8016512:	4b43      	ldr	r3, [pc, #268]	@ (8016620 <udp_input+0x218>)
 8016514:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016516:	429a      	cmp	r2, r3
 8016518:	d10e      	bne.n	8016538 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801651a:	6a3b      	ldr	r3, [r7, #32]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d014      	beq.n	801654a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016522:	68da      	ldr	r2, [r3, #12]
 8016524:	6a3b      	ldr	r3, [r7, #32]
 8016526:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016528:	4b3e      	ldr	r3, [pc, #248]	@ (8016624 <udp_input+0x21c>)
 801652a:	681a      	ldr	r2, [r3, #0]
 801652c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801652e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016530:	4a3c      	ldr	r2, [pc, #240]	@ (8016624 <udp_input+0x21c>)
 8016532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016534:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016536:	e008      	b.n	801654a <udp_input+0x142>
      }
    }

    prev = pcb;
 8016538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801653a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801653c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801653e:	68db      	ldr	r3, [r3, #12]
 8016540:	627b      	str	r3, [r7, #36]	@ 0x24
 8016542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016544:	2b00      	cmp	r3, #0
 8016546:	d1a7      	bne.n	8016498 <udp_input+0x90>
 8016548:	e000      	b.n	801654c <udp_input+0x144>
        break;
 801654a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801654c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801654e:	2b00      	cmp	r3, #0
 8016550:	d101      	bne.n	8016556 <udp_input+0x14e>
    pcb = uncon_pcb;
 8016552:	69fb      	ldr	r3, [r7, #28]
 8016554:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016558:	2b00      	cmp	r3, #0
 801655a:	d002      	beq.n	8016562 <udp_input+0x15a>
    for_us = 1;
 801655c:	2301      	movs	r3, #1
 801655e:	76fb      	strb	r3, [r7, #27]
 8016560:	e00a      	b.n	8016578 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016562:	683b      	ldr	r3, [r7, #0]
 8016564:	3304      	adds	r3, #4
 8016566:	681a      	ldr	r2, [r3, #0]
 8016568:	4b2d      	ldr	r3, [pc, #180]	@ (8016620 <udp_input+0x218>)
 801656a:	695b      	ldr	r3, [r3, #20]
 801656c:	429a      	cmp	r2, r3
 801656e:	bf0c      	ite	eq
 8016570:	2301      	moveq	r3, #1
 8016572:	2300      	movne	r3, #0
 8016574:	b2db      	uxtb	r3, r3
 8016576:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016578:	7efb      	ldrb	r3, [r7, #27]
 801657a:	2b00      	cmp	r3, #0
 801657c:	d041      	beq.n	8016602 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801657e:	2108      	movs	r1, #8
 8016580:	6878      	ldr	r0, [r7, #4]
 8016582:	f7f8 fd19 	bl	800efb8 <pbuf_remove_header>
 8016586:	4603      	mov	r3, r0
 8016588:	2b00      	cmp	r3, #0
 801658a:	d00a      	beq.n	80165a2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801658c:	4b20      	ldr	r3, [pc, #128]	@ (8016610 <udp_input+0x208>)
 801658e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8016592:	4925      	ldr	r1, [pc, #148]	@ (8016628 <udp_input+0x220>)
 8016594:	4820      	ldr	r0, [pc, #128]	@ (8016618 <udp_input+0x210>)
 8016596:	f000 fce1 	bl	8016f5c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801659a:	6878      	ldr	r0, [r7, #4]
 801659c:	f7f8 fd92 	bl	800f0c4 <pbuf_free>
      goto end;
 80165a0:	e032      	b.n	8016608 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80165a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d012      	beq.n	80165ce <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80165a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165aa:	699b      	ldr	r3, [r3, #24]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d00a      	beq.n	80165c6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80165b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165b2:	699c      	ldr	r4, [r3, #24]
 80165b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165b6:	69d8      	ldr	r0, [r3, #28]
 80165b8:	8a3b      	ldrh	r3, [r7, #16]
 80165ba:	9300      	str	r3, [sp, #0]
 80165bc:	4b1b      	ldr	r3, [pc, #108]	@ (801662c <udp_input+0x224>)
 80165be:	687a      	ldr	r2, [r7, #4]
 80165c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80165c2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80165c4:	e021      	b.n	801660a <udp_input+0x202>
        pbuf_free(p);
 80165c6:	6878      	ldr	r0, [r7, #4]
 80165c8:	f7f8 fd7c 	bl	800f0c4 <pbuf_free>
        goto end;
 80165cc:	e01c      	b.n	8016608 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80165ce:	7cfb      	ldrb	r3, [r7, #19]
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d112      	bne.n	80165fa <udp_input+0x1f2>
 80165d4:	4b12      	ldr	r3, [pc, #72]	@ (8016620 <udp_input+0x218>)
 80165d6:	695b      	ldr	r3, [r3, #20]
 80165d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80165dc:	2be0      	cmp	r3, #224	@ 0xe0
 80165de:	d00c      	beq.n	80165fa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80165e0:	4b0f      	ldr	r3, [pc, #60]	@ (8016620 <udp_input+0x218>)
 80165e2:	899b      	ldrh	r3, [r3, #12]
 80165e4:	3308      	adds	r3, #8
 80165e6:	b29b      	uxth	r3, r3
 80165e8:	b21b      	sxth	r3, r3
 80165ea:	4619      	mov	r1, r3
 80165ec:	6878      	ldr	r0, [r7, #4]
 80165ee:	f7f8 fd56 	bl	800f09e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80165f2:	2103      	movs	r1, #3
 80165f4:	6878      	ldr	r0, [r7, #4]
 80165f6:	f7f5 ff21 	bl	800c43c <icmp_dest_unreach>
      pbuf_free(p);
 80165fa:	6878      	ldr	r0, [r7, #4]
 80165fc:	f7f8 fd62 	bl	800f0c4 <pbuf_free>
  return;
 8016600:	e003      	b.n	801660a <udp_input+0x202>
    pbuf_free(p);
 8016602:	6878      	ldr	r0, [r7, #4]
 8016604:	f7f8 fd5e 	bl	800f0c4 <pbuf_free>
  return;
 8016608:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801660a:	372c      	adds	r7, #44	@ 0x2c
 801660c:	46bd      	mov	sp, r7
 801660e:	bd90      	pop	{r4, r7, pc}
 8016610:	0801b590 	.word	0x0801b590
 8016614:	0801b668 	.word	0x0801b668
 8016618:	0801b618 	.word	0x0801b618
 801661c:	0801b680 	.word	0x0801b680
 8016620:	24009ca4 	.word	0x24009ca4
 8016624:	2400ce20 	.word	0x2400ce20
 8016628:	0801b69c 	.word	0x0801b69c
 801662c:	24009cb4 	.word	0x24009cb4

08016630 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8016630:	b580      	push	{r7, lr}
 8016632:	b082      	sub	sp, #8
 8016634:	af00      	add	r7, sp, #0
 8016636:	6078      	str	r0, [r7, #4]
 8016638:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	2b00      	cmp	r3, #0
 801663e:	d109      	bne.n	8016654 <udp_send+0x24>
 8016640:	4b11      	ldr	r3, [pc, #68]	@ (8016688 <udp_send+0x58>)
 8016642:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8016646:	4911      	ldr	r1, [pc, #68]	@ (801668c <udp_send+0x5c>)
 8016648:	4811      	ldr	r0, [pc, #68]	@ (8016690 <udp_send+0x60>)
 801664a:	f000 fc87 	bl	8016f5c <iprintf>
 801664e:	f06f 030f 	mvn.w	r3, #15
 8016652:	e015      	b.n	8016680 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8016654:	683b      	ldr	r3, [r7, #0]
 8016656:	2b00      	cmp	r3, #0
 8016658:	d109      	bne.n	801666e <udp_send+0x3e>
 801665a:	4b0b      	ldr	r3, [pc, #44]	@ (8016688 <udp_send+0x58>)
 801665c:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8016660:	490c      	ldr	r1, [pc, #48]	@ (8016694 <udp_send+0x64>)
 8016662:	480b      	ldr	r0, [pc, #44]	@ (8016690 <udp_send+0x60>)
 8016664:	f000 fc7a 	bl	8016f5c <iprintf>
 8016668:	f06f 030f 	mvn.w	r3, #15
 801666c:	e008      	b.n	8016680 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	1d1a      	adds	r2, r3, #4
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	8a9b      	ldrh	r3, [r3, #20]
 8016676:	6839      	ldr	r1, [r7, #0]
 8016678:	6878      	ldr	r0, [r7, #4]
 801667a:	f000 f80d 	bl	8016698 <udp_sendto>
 801667e:	4603      	mov	r3, r0
}
 8016680:	4618      	mov	r0, r3
 8016682:	3708      	adds	r7, #8
 8016684:	46bd      	mov	sp, r7
 8016686:	bd80      	pop	{r7, pc}
 8016688:	0801b590 	.word	0x0801b590
 801668c:	0801b6b8 	.word	0x0801b6b8
 8016690:	0801b618 	.word	0x0801b618
 8016694:	0801b6d0 	.word	0x0801b6d0

08016698 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b088      	sub	sp, #32
 801669c:	af02      	add	r7, sp, #8
 801669e:	60f8      	str	r0, [r7, #12]
 80166a0:	60b9      	str	r1, [r7, #8]
 80166a2:	607a      	str	r2, [r7, #4]
 80166a4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d109      	bne.n	80166c0 <udp_sendto+0x28>
 80166ac:	4b23      	ldr	r3, [pc, #140]	@ (801673c <udp_sendto+0xa4>)
 80166ae:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80166b2:	4923      	ldr	r1, [pc, #140]	@ (8016740 <udp_sendto+0xa8>)
 80166b4:	4823      	ldr	r0, [pc, #140]	@ (8016744 <udp_sendto+0xac>)
 80166b6:	f000 fc51 	bl	8016f5c <iprintf>
 80166ba:	f06f 030f 	mvn.w	r3, #15
 80166be:	e038      	b.n	8016732 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80166c0:	68bb      	ldr	r3, [r7, #8]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d109      	bne.n	80166da <udp_sendto+0x42>
 80166c6:	4b1d      	ldr	r3, [pc, #116]	@ (801673c <udp_sendto+0xa4>)
 80166c8:	f240 2219 	movw	r2, #537	@ 0x219
 80166cc:	491e      	ldr	r1, [pc, #120]	@ (8016748 <udp_sendto+0xb0>)
 80166ce:	481d      	ldr	r0, [pc, #116]	@ (8016744 <udp_sendto+0xac>)
 80166d0:	f000 fc44 	bl	8016f5c <iprintf>
 80166d4:	f06f 030f 	mvn.w	r3, #15
 80166d8:	e02b      	b.n	8016732 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d109      	bne.n	80166f4 <udp_sendto+0x5c>
 80166e0:	4b16      	ldr	r3, [pc, #88]	@ (801673c <udp_sendto+0xa4>)
 80166e2:	f240 221a 	movw	r2, #538	@ 0x21a
 80166e6:	4919      	ldr	r1, [pc, #100]	@ (801674c <udp_sendto+0xb4>)
 80166e8:	4816      	ldr	r0, [pc, #88]	@ (8016744 <udp_sendto+0xac>)
 80166ea:	f000 fc37 	bl	8016f5c <iprintf>
 80166ee:	f06f 030f 	mvn.w	r3, #15
 80166f2:	e01e      	b.n	8016732 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	7a1b      	ldrb	r3, [r3, #8]
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d006      	beq.n	801670a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	7a1b      	ldrb	r3, [r3, #8]
 8016700:	4618      	mov	r0, r3
 8016702:	f7f8 f951 	bl	800e9a8 <netif_get_by_index>
 8016706:	6178      	str	r0, [r7, #20]
 8016708:	e003      	b.n	8016712 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801670a:	6878      	ldr	r0, [r7, #4]
 801670c:	f7f5 fffe 	bl	800c70c <ip4_route>
 8016710:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8016712:	697b      	ldr	r3, [r7, #20]
 8016714:	2b00      	cmp	r3, #0
 8016716:	d102      	bne.n	801671e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8016718:	f06f 0303 	mvn.w	r3, #3
 801671c:	e009      	b.n	8016732 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801671e:	887a      	ldrh	r2, [r7, #2]
 8016720:	697b      	ldr	r3, [r7, #20]
 8016722:	9300      	str	r3, [sp, #0]
 8016724:	4613      	mov	r3, r2
 8016726:	687a      	ldr	r2, [r7, #4]
 8016728:	68b9      	ldr	r1, [r7, #8]
 801672a:	68f8      	ldr	r0, [r7, #12]
 801672c:	f000 f810 	bl	8016750 <udp_sendto_if>
 8016730:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016732:	4618      	mov	r0, r3
 8016734:	3718      	adds	r7, #24
 8016736:	46bd      	mov	sp, r7
 8016738:	bd80      	pop	{r7, pc}
 801673a:	bf00      	nop
 801673c:	0801b590 	.word	0x0801b590
 8016740:	0801b6e8 	.word	0x0801b6e8
 8016744:	0801b618 	.word	0x0801b618
 8016748:	0801b700 	.word	0x0801b700
 801674c:	0801b71c 	.word	0x0801b71c

08016750 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8016750:	b580      	push	{r7, lr}
 8016752:	b088      	sub	sp, #32
 8016754:	af02      	add	r7, sp, #8
 8016756:	60f8      	str	r0, [r7, #12]
 8016758:	60b9      	str	r1, [r7, #8]
 801675a:	607a      	str	r2, [r7, #4]
 801675c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	2b00      	cmp	r3, #0
 8016762:	d109      	bne.n	8016778 <udp_sendto_if+0x28>
 8016764:	4b2e      	ldr	r3, [pc, #184]	@ (8016820 <udp_sendto_if+0xd0>)
 8016766:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801676a:	492e      	ldr	r1, [pc, #184]	@ (8016824 <udp_sendto_if+0xd4>)
 801676c:	482e      	ldr	r0, [pc, #184]	@ (8016828 <udp_sendto_if+0xd8>)
 801676e:	f000 fbf5 	bl	8016f5c <iprintf>
 8016772:	f06f 030f 	mvn.w	r3, #15
 8016776:	e04f      	b.n	8016818 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8016778:	68bb      	ldr	r3, [r7, #8]
 801677a:	2b00      	cmp	r3, #0
 801677c:	d109      	bne.n	8016792 <udp_sendto_if+0x42>
 801677e:	4b28      	ldr	r3, [pc, #160]	@ (8016820 <udp_sendto_if+0xd0>)
 8016780:	f240 2281 	movw	r2, #641	@ 0x281
 8016784:	4929      	ldr	r1, [pc, #164]	@ (801682c <udp_sendto_if+0xdc>)
 8016786:	4828      	ldr	r0, [pc, #160]	@ (8016828 <udp_sendto_if+0xd8>)
 8016788:	f000 fbe8 	bl	8016f5c <iprintf>
 801678c:	f06f 030f 	mvn.w	r3, #15
 8016790:	e042      	b.n	8016818 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	2b00      	cmp	r3, #0
 8016796:	d109      	bne.n	80167ac <udp_sendto_if+0x5c>
 8016798:	4b21      	ldr	r3, [pc, #132]	@ (8016820 <udp_sendto_if+0xd0>)
 801679a:	f240 2282 	movw	r2, #642	@ 0x282
 801679e:	4924      	ldr	r1, [pc, #144]	@ (8016830 <udp_sendto_if+0xe0>)
 80167a0:	4821      	ldr	r0, [pc, #132]	@ (8016828 <udp_sendto_if+0xd8>)
 80167a2:	f000 fbdb 	bl	8016f5c <iprintf>
 80167a6:	f06f 030f 	mvn.w	r3, #15
 80167aa:	e035      	b.n	8016818 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80167ac:	6a3b      	ldr	r3, [r7, #32]
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d109      	bne.n	80167c6 <udp_sendto_if+0x76>
 80167b2:	4b1b      	ldr	r3, [pc, #108]	@ (8016820 <udp_sendto_if+0xd0>)
 80167b4:	f240 2283 	movw	r2, #643	@ 0x283
 80167b8:	491e      	ldr	r1, [pc, #120]	@ (8016834 <udp_sendto_if+0xe4>)
 80167ba:	481b      	ldr	r0, [pc, #108]	@ (8016828 <udp_sendto_if+0xd8>)
 80167bc:	f000 fbce 	bl	8016f5c <iprintf>
 80167c0:	f06f 030f 	mvn.w	r3, #15
 80167c4:	e028      	b.n	8016818 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d009      	beq.n	80167e0 <udp_sendto_if+0x90>
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d005      	beq.n	80167e0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80167dc:	2be0      	cmp	r3, #224	@ 0xe0
 80167de:	d103      	bne.n	80167e8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80167e0:	6a3b      	ldr	r3, [r7, #32]
 80167e2:	3304      	adds	r3, #4
 80167e4:	617b      	str	r3, [r7, #20]
 80167e6:	e00b      	b.n	8016800 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	681a      	ldr	r2, [r3, #0]
 80167ec:	6a3b      	ldr	r3, [r7, #32]
 80167ee:	3304      	adds	r3, #4
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	429a      	cmp	r2, r3
 80167f4:	d002      	beq.n	80167fc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80167f6:	f06f 0303 	mvn.w	r3, #3
 80167fa:	e00d      	b.n	8016818 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8016800:	887a      	ldrh	r2, [r7, #2]
 8016802:	697b      	ldr	r3, [r7, #20]
 8016804:	9301      	str	r3, [sp, #4]
 8016806:	6a3b      	ldr	r3, [r7, #32]
 8016808:	9300      	str	r3, [sp, #0]
 801680a:	4613      	mov	r3, r2
 801680c:	687a      	ldr	r2, [r7, #4]
 801680e:	68b9      	ldr	r1, [r7, #8]
 8016810:	68f8      	ldr	r0, [r7, #12]
 8016812:	f000 f811 	bl	8016838 <udp_sendto_if_src>
 8016816:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016818:	4618      	mov	r0, r3
 801681a:	3718      	adds	r7, #24
 801681c:	46bd      	mov	sp, r7
 801681e:	bd80      	pop	{r7, pc}
 8016820:	0801b590 	.word	0x0801b590
 8016824:	0801b738 	.word	0x0801b738
 8016828:	0801b618 	.word	0x0801b618
 801682c:	0801b754 	.word	0x0801b754
 8016830:	0801b770 	.word	0x0801b770
 8016834:	0801b790 	.word	0x0801b790

08016838 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8016838:	b580      	push	{r7, lr}
 801683a:	b08c      	sub	sp, #48	@ 0x30
 801683c:	af04      	add	r7, sp, #16
 801683e:	60f8      	str	r0, [r7, #12]
 8016840:	60b9      	str	r1, [r7, #8]
 8016842:	607a      	str	r2, [r7, #4]
 8016844:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	2b00      	cmp	r3, #0
 801684a:	d109      	bne.n	8016860 <udp_sendto_if_src+0x28>
 801684c:	4b65      	ldr	r3, [pc, #404]	@ (80169e4 <udp_sendto_if_src+0x1ac>)
 801684e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8016852:	4965      	ldr	r1, [pc, #404]	@ (80169e8 <udp_sendto_if_src+0x1b0>)
 8016854:	4865      	ldr	r0, [pc, #404]	@ (80169ec <udp_sendto_if_src+0x1b4>)
 8016856:	f000 fb81 	bl	8016f5c <iprintf>
 801685a:	f06f 030f 	mvn.w	r3, #15
 801685e:	e0bc      	b.n	80169da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8016860:	68bb      	ldr	r3, [r7, #8]
 8016862:	2b00      	cmp	r3, #0
 8016864:	d109      	bne.n	801687a <udp_sendto_if_src+0x42>
 8016866:	4b5f      	ldr	r3, [pc, #380]	@ (80169e4 <udp_sendto_if_src+0x1ac>)
 8016868:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801686c:	4960      	ldr	r1, [pc, #384]	@ (80169f0 <udp_sendto_if_src+0x1b8>)
 801686e:	485f      	ldr	r0, [pc, #380]	@ (80169ec <udp_sendto_if_src+0x1b4>)
 8016870:	f000 fb74 	bl	8016f5c <iprintf>
 8016874:	f06f 030f 	mvn.w	r3, #15
 8016878:	e0af      	b.n	80169da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	2b00      	cmp	r3, #0
 801687e:	d109      	bne.n	8016894 <udp_sendto_if_src+0x5c>
 8016880:	4b58      	ldr	r3, [pc, #352]	@ (80169e4 <udp_sendto_if_src+0x1ac>)
 8016882:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8016886:	495b      	ldr	r1, [pc, #364]	@ (80169f4 <udp_sendto_if_src+0x1bc>)
 8016888:	4858      	ldr	r0, [pc, #352]	@ (80169ec <udp_sendto_if_src+0x1b4>)
 801688a:	f000 fb67 	bl	8016f5c <iprintf>
 801688e:	f06f 030f 	mvn.w	r3, #15
 8016892:	e0a2      	b.n	80169da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8016894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016896:	2b00      	cmp	r3, #0
 8016898:	d109      	bne.n	80168ae <udp_sendto_if_src+0x76>
 801689a:	4b52      	ldr	r3, [pc, #328]	@ (80169e4 <udp_sendto_if_src+0x1ac>)
 801689c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80168a0:	4955      	ldr	r1, [pc, #340]	@ (80169f8 <udp_sendto_if_src+0x1c0>)
 80168a2:	4852      	ldr	r0, [pc, #328]	@ (80169ec <udp_sendto_if_src+0x1b4>)
 80168a4:	f000 fb5a 	bl	8016f5c <iprintf>
 80168a8:	f06f 030f 	mvn.w	r3, #15
 80168ac:	e095      	b.n	80169da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80168ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d109      	bne.n	80168c8 <udp_sendto_if_src+0x90>
 80168b4:	4b4b      	ldr	r3, [pc, #300]	@ (80169e4 <udp_sendto_if_src+0x1ac>)
 80168b6:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80168ba:	4950      	ldr	r1, [pc, #320]	@ (80169fc <udp_sendto_if_src+0x1c4>)
 80168bc:	484b      	ldr	r0, [pc, #300]	@ (80169ec <udp_sendto_if_src+0x1b4>)
 80168be:	f000 fb4d 	bl	8016f5c <iprintf>
 80168c2:	f06f 030f 	mvn.w	r3, #15
 80168c6:	e088      	b.n	80169da <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	8a5b      	ldrh	r3, [r3, #18]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d10f      	bne.n	80168f0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80168d0:	68f9      	ldr	r1, [r7, #12]
 80168d2:	68fb      	ldr	r3, [r7, #12]
 80168d4:	8a5b      	ldrh	r3, [r3, #18]
 80168d6:	461a      	mov	r2, r3
 80168d8:	68f8      	ldr	r0, [r7, #12]
 80168da:	f000 f893 	bl	8016a04 <udp_bind>
 80168de:	4603      	mov	r3, r0
 80168e0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80168e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d002      	beq.n	80168f0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80168ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80168ee:	e074      	b.n	80169da <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80168f0:	68bb      	ldr	r3, [r7, #8]
 80168f2:	891b      	ldrh	r3, [r3, #8]
 80168f4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80168f8:	4293      	cmp	r3, r2
 80168fa:	d902      	bls.n	8016902 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80168fc:	f04f 33ff 	mov.w	r3, #4294967295
 8016900:	e06b      	b.n	80169da <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8016902:	2108      	movs	r1, #8
 8016904:	68b8      	ldr	r0, [r7, #8]
 8016906:	f7f8 fb47 	bl	800ef98 <pbuf_add_header>
 801690a:	4603      	mov	r3, r0
 801690c:	2b00      	cmp	r3, #0
 801690e:	d015      	beq.n	801693c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8016910:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016914:	2108      	movs	r1, #8
 8016916:	2022      	movs	r0, #34	@ 0x22
 8016918:	f7f8 f8f0 	bl	800eafc <pbuf_alloc>
 801691c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801691e:	69fb      	ldr	r3, [r7, #28]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d102      	bne.n	801692a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8016924:	f04f 33ff 	mov.w	r3, #4294967295
 8016928:	e057      	b.n	80169da <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801692a:	68bb      	ldr	r3, [r7, #8]
 801692c:	891b      	ldrh	r3, [r3, #8]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d006      	beq.n	8016940 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8016932:	68b9      	ldr	r1, [r7, #8]
 8016934:	69f8      	ldr	r0, [r7, #28]
 8016936:	f7f8 fce9 	bl	800f30c <pbuf_chain>
 801693a:	e001      	b.n	8016940 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801693c:	68bb      	ldr	r3, [r7, #8]
 801693e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8016940:	69fb      	ldr	r3, [r7, #28]
 8016942:	895b      	ldrh	r3, [r3, #10]
 8016944:	2b07      	cmp	r3, #7
 8016946:	d806      	bhi.n	8016956 <udp_sendto_if_src+0x11e>
 8016948:	4b26      	ldr	r3, [pc, #152]	@ (80169e4 <udp_sendto_if_src+0x1ac>)
 801694a:	f240 320d 	movw	r2, #781	@ 0x30d
 801694e:	492c      	ldr	r1, [pc, #176]	@ (8016a00 <udp_sendto_if_src+0x1c8>)
 8016950:	4826      	ldr	r0, [pc, #152]	@ (80169ec <udp_sendto_if_src+0x1b4>)
 8016952:	f000 fb03 	bl	8016f5c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8016956:	69fb      	ldr	r3, [r7, #28]
 8016958:	685b      	ldr	r3, [r3, #4]
 801695a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	8a5b      	ldrh	r3, [r3, #18]
 8016960:	4618      	mov	r0, r3
 8016962:	f7f4 fbf9 	bl	800b158 <lwip_htons>
 8016966:	4603      	mov	r3, r0
 8016968:	461a      	mov	r2, r3
 801696a:	697b      	ldr	r3, [r7, #20]
 801696c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801696e:	887b      	ldrh	r3, [r7, #2]
 8016970:	4618      	mov	r0, r3
 8016972:	f7f4 fbf1 	bl	800b158 <lwip_htons>
 8016976:	4603      	mov	r3, r0
 8016978:	461a      	mov	r2, r3
 801697a:	697b      	ldr	r3, [r7, #20]
 801697c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801697e:	697b      	ldr	r3, [r7, #20]
 8016980:	2200      	movs	r2, #0
 8016982:	719a      	strb	r2, [r3, #6]
 8016984:	2200      	movs	r2, #0
 8016986:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8016988:	69fb      	ldr	r3, [r7, #28]
 801698a:	891b      	ldrh	r3, [r3, #8]
 801698c:	4618      	mov	r0, r3
 801698e:	f7f4 fbe3 	bl	800b158 <lwip_htons>
 8016992:	4603      	mov	r3, r0
 8016994:	461a      	mov	r2, r3
 8016996:	697b      	ldr	r3, [r7, #20]
 8016998:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801699a:	2311      	movs	r3, #17
 801699c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	7adb      	ldrb	r3, [r3, #11]
 80169a2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	7a9b      	ldrb	r3, [r3, #10]
 80169a8:	7cb9      	ldrb	r1, [r7, #18]
 80169aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80169ac:	9202      	str	r2, [sp, #8]
 80169ae:	7cfa      	ldrb	r2, [r7, #19]
 80169b0:	9201      	str	r2, [sp, #4]
 80169b2:	9300      	str	r3, [sp, #0]
 80169b4:	460b      	mov	r3, r1
 80169b6:	687a      	ldr	r2, [r7, #4]
 80169b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80169ba:	69f8      	ldr	r0, [r7, #28]
 80169bc:	f7f6 f88e 	bl	800cadc <ip4_output_if_src>
 80169c0:	4603      	mov	r3, r0
 80169c2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80169c4:	69fa      	ldr	r2, [r7, #28]
 80169c6:	68bb      	ldr	r3, [r7, #8]
 80169c8:	429a      	cmp	r2, r3
 80169ca:	d004      	beq.n	80169d6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80169cc:	69f8      	ldr	r0, [r7, #28]
 80169ce:	f7f8 fb79 	bl	800f0c4 <pbuf_free>
    q = NULL;
 80169d2:	2300      	movs	r3, #0
 80169d4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80169d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80169da:	4618      	mov	r0, r3
 80169dc:	3720      	adds	r7, #32
 80169de:	46bd      	mov	sp, r7
 80169e0:	bd80      	pop	{r7, pc}
 80169e2:	bf00      	nop
 80169e4:	0801b590 	.word	0x0801b590
 80169e8:	0801b7b0 	.word	0x0801b7b0
 80169ec:	0801b618 	.word	0x0801b618
 80169f0:	0801b7d0 	.word	0x0801b7d0
 80169f4:	0801b7f0 	.word	0x0801b7f0
 80169f8:	0801b814 	.word	0x0801b814
 80169fc:	0801b838 	.word	0x0801b838
 8016a00:	0801b85c 	.word	0x0801b85c

08016a04 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b086      	sub	sp, #24
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	60f8      	str	r0, [r7, #12]
 8016a0c:	60b9      	str	r1, [r7, #8]
 8016a0e:	4613      	mov	r3, r2
 8016a10:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016a12:	68bb      	ldr	r3, [r7, #8]
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d101      	bne.n	8016a1c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016a18:	4b39      	ldr	r3, [pc, #228]	@ (8016b00 <udp_bind+0xfc>)
 8016a1a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d109      	bne.n	8016a36 <udp_bind+0x32>
 8016a22:	4b38      	ldr	r3, [pc, #224]	@ (8016b04 <udp_bind+0x100>)
 8016a24:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8016a28:	4937      	ldr	r1, [pc, #220]	@ (8016b08 <udp_bind+0x104>)
 8016a2a:	4838      	ldr	r0, [pc, #224]	@ (8016b0c <udp_bind+0x108>)
 8016a2c:	f000 fa96 	bl	8016f5c <iprintf>
 8016a30:	f06f 030f 	mvn.w	r3, #15
 8016a34:	e060      	b.n	8016af8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8016a36:	2300      	movs	r3, #0
 8016a38:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016a3a:	4b35      	ldr	r3, [pc, #212]	@ (8016b10 <udp_bind+0x10c>)
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	617b      	str	r3, [r7, #20]
 8016a40:	e009      	b.n	8016a56 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8016a42:	68fa      	ldr	r2, [r7, #12]
 8016a44:	697b      	ldr	r3, [r7, #20]
 8016a46:	429a      	cmp	r2, r3
 8016a48:	d102      	bne.n	8016a50 <udp_bind+0x4c>
      rebind = 1;
 8016a4a:	2301      	movs	r3, #1
 8016a4c:	74fb      	strb	r3, [r7, #19]
      break;
 8016a4e:	e005      	b.n	8016a5c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016a50:	697b      	ldr	r3, [r7, #20]
 8016a52:	68db      	ldr	r3, [r3, #12]
 8016a54:	617b      	str	r3, [r7, #20]
 8016a56:	697b      	ldr	r3, [r7, #20]
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d1f2      	bne.n	8016a42 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8016a5c:	88fb      	ldrh	r3, [r7, #6]
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d109      	bne.n	8016a76 <udp_bind+0x72>
    port = udp_new_port();
 8016a62:	f7ff fc35 	bl	80162d0 <udp_new_port>
 8016a66:	4603      	mov	r3, r0
 8016a68:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016a6a:	88fb      	ldrh	r3, [r7, #6]
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d12c      	bne.n	8016aca <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8016a70:	f06f 0307 	mvn.w	r3, #7
 8016a74:	e040      	b.n	8016af8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016a76:	4b26      	ldr	r3, [pc, #152]	@ (8016b10 <udp_bind+0x10c>)
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	617b      	str	r3, [r7, #20]
 8016a7c:	e022      	b.n	8016ac4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8016a7e:	68fa      	ldr	r2, [r7, #12]
 8016a80:	697b      	ldr	r3, [r7, #20]
 8016a82:	429a      	cmp	r2, r3
 8016a84:	d01b      	beq.n	8016abe <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8016a86:	697b      	ldr	r3, [r7, #20]
 8016a88:	8a5b      	ldrh	r3, [r3, #18]
 8016a8a:	88fa      	ldrh	r2, [r7, #6]
 8016a8c:	429a      	cmp	r2, r3
 8016a8e:	d116      	bne.n	8016abe <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016a90:	697b      	ldr	r3, [r7, #20]
 8016a92:	681a      	ldr	r2, [r3, #0]
 8016a94:	68bb      	ldr	r3, [r7, #8]
 8016a96:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8016a98:	429a      	cmp	r2, r3
 8016a9a:	d00d      	beq.n	8016ab8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016a9c:	68bb      	ldr	r3, [r7, #8]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d00a      	beq.n	8016ab8 <udp_bind+0xb4>
 8016aa2:	68bb      	ldr	r3, [r7, #8]
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d006      	beq.n	8016ab8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016aaa:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d003      	beq.n	8016ab8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016ab0:	697b      	ldr	r3, [r7, #20]
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d102      	bne.n	8016abe <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8016ab8:	f06f 0307 	mvn.w	r3, #7
 8016abc:	e01c      	b.n	8016af8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016abe:	697b      	ldr	r3, [r7, #20]
 8016ac0:	68db      	ldr	r3, [r3, #12]
 8016ac2:	617b      	str	r3, [r7, #20]
 8016ac4:	697b      	ldr	r3, [r7, #20]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d1d9      	bne.n	8016a7e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8016aca:	68bb      	ldr	r3, [r7, #8]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d002      	beq.n	8016ad6 <udp_bind+0xd2>
 8016ad0:	68bb      	ldr	r3, [r7, #8]
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	e000      	b.n	8016ad8 <udp_bind+0xd4>
 8016ad6:	2300      	movs	r3, #0
 8016ad8:	68fa      	ldr	r2, [r7, #12]
 8016ada:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	88fa      	ldrh	r2, [r7, #6]
 8016ae0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8016ae2:	7cfb      	ldrb	r3, [r7, #19]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d106      	bne.n	8016af6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8016ae8:	4b09      	ldr	r3, [pc, #36]	@ (8016b10 <udp_bind+0x10c>)
 8016aea:	681a      	ldr	r2, [r3, #0]
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8016af0:	4a07      	ldr	r2, [pc, #28]	@ (8016b10 <udp_bind+0x10c>)
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8016af6:	2300      	movs	r3, #0
}
 8016af8:	4618      	mov	r0, r3
 8016afa:	3718      	adds	r7, #24
 8016afc:	46bd      	mov	sp, r7
 8016afe:	bd80      	pop	{r7, pc}
 8016b00:	0801b97c 	.word	0x0801b97c
 8016b04:	0801b590 	.word	0x0801b590
 8016b08:	0801b88c 	.word	0x0801b88c
 8016b0c:	0801b618 	.word	0x0801b618
 8016b10:	2400ce20 	.word	0x2400ce20

08016b14 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016b14:	b580      	push	{r7, lr}
 8016b16:	b086      	sub	sp, #24
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	60f8      	str	r0, [r7, #12]
 8016b1c:	60b9      	str	r1, [r7, #8]
 8016b1e:	4613      	mov	r3, r2
 8016b20:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d109      	bne.n	8016b3c <udp_connect+0x28>
 8016b28:	4b2c      	ldr	r3, [pc, #176]	@ (8016bdc <udp_connect+0xc8>)
 8016b2a:	f240 4235 	movw	r2, #1077	@ 0x435
 8016b2e:	492c      	ldr	r1, [pc, #176]	@ (8016be0 <udp_connect+0xcc>)
 8016b30:	482c      	ldr	r0, [pc, #176]	@ (8016be4 <udp_connect+0xd0>)
 8016b32:	f000 fa13 	bl	8016f5c <iprintf>
 8016b36:	f06f 030f 	mvn.w	r3, #15
 8016b3a:	e04b      	b.n	8016bd4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8016b3c:	68bb      	ldr	r3, [r7, #8]
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d109      	bne.n	8016b56 <udp_connect+0x42>
 8016b42:	4b26      	ldr	r3, [pc, #152]	@ (8016bdc <udp_connect+0xc8>)
 8016b44:	f240 4236 	movw	r2, #1078	@ 0x436
 8016b48:	4927      	ldr	r1, [pc, #156]	@ (8016be8 <udp_connect+0xd4>)
 8016b4a:	4826      	ldr	r0, [pc, #152]	@ (8016be4 <udp_connect+0xd0>)
 8016b4c:	f000 fa06 	bl	8016f5c <iprintf>
 8016b50:	f06f 030f 	mvn.w	r3, #15
 8016b54:	e03e      	b.n	8016bd4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	8a5b      	ldrh	r3, [r3, #18]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d10f      	bne.n	8016b7e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016b5e:	68f9      	ldr	r1, [r7, #12]
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	8a5b      	ldrh	r3, [r3, #18]
 8016b64:	461a      	mov	r2, r3
 8016b66:	68f8      	ldr	r0, [r7, #12]
 8016b68:	f7ff ff4c 	bl	8016a04 <udp_bind>
 8016b6c:	4603      	mov	r3, r0
 8016b6e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8016b70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d002      	beq.n	8016b7e <udp_connect+0x6a>
      return err;
 8016b78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016b7c:	e02a      	b.n	8016bd4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8016b7e:	68bb      	ldr	r3, [r7, #8]
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d002      	beq.n	8016b8a <udp_connect+0x76>
 8016b84:	68bb      	ldr	r3, [r7, #8]
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	e000      	b.n	8016b8c <udp_connect+0x78>
 8016b8a:	2300      	movs	r3, #0
 8016b8c:	68fa      	ldr	r2, [r7, #12]
 8016b8e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	88fa      	ldrh	r2, [r7, #6]
 8016b94:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	7c1b      	ldrb	r3, [r3, #16]
 8016b9a:	f043 0304 	orr.w	r3, r3, #4
 8016b9e:	b2da      	uxtb	r2, r3
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016ba4:	4b11      	ldr	r3, [pc, #68]	@ (8016bec <udp_connect+0xd8>)
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	617b      	str	r3, [r7, #20]
 8016baa:	e008      	b.n	8016bbe <udp_connect+0xaa>
    if (pcb == ipcb) {
 8016bac:	68fa      	ldr	r2, [r7, #12]
 8016bae:	697b      	ldr	r3, [r7, #20]
 8016bb0:	429a      	cmp	r2, r3
 8016bb2:	d101      	bne.n	8016bb8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	e00d      	b.n	8016bd4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016bb8:	697b      	ldr	r3, [r7, #20]
 8016bba:	68db      	ldr	r3, [r3, #12]
 8016bbc:	617b      	str	r3, [r7, #20]
 8016bbe:	697b      	ldr	r3, [r7, #20]
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d1f3      	bne.n	8016bac <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8016bc4:	4b09      	ldr	r3, [pc, #36]	@ (8016bec <udp_connect+0xd8>)
 8016bc6:	681a      	ldr	r2, [r3, #0]
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8016bcc:	4a07      	ldr	r2, [pc, #28]	@ (8016bec <udp_connect+0xd8>)
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8016bd2:	2300      	movs	r3, #0
}
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	3718      	adds	r7, #24
 8016bd8:	46bd      	mov	sp, r7
 8016bda:	bd80      	pop	{r7, pc}
 8016bdc:	0801b590 	.word	0x0801b590
 8016be0:	0801b8a4 	.word	0x0801b8a4
 8016be4:	0801b618 	.word	0x0801b618
 8016be8:	0801b8c0 	.word	0x0801b8c0
 8016bec:	2400ce20 	.word	0x2400ce20

08016bf0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	b084      	sub	sp, #16
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	60f8      	str	r0, [r7, #12]
 8016bf8:	60b9      	str	r1, [r7, #8]
 8016bfa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d107      	bne.n	8016c12 <udp_recv+0x22>
 8016c02:	4b08      	ldr	r3, [pc, #32]	@ (8016c24 <udp_recv+0x34>)
 8016c04:	f240 428a 	movw	r2, #1162	@ 0x48a
 8016c08:	4907      	ldr	r1, [pc, #28]	@ (8016c28 <udp_recv+0x38>)
 8016c0a:	4808      	ldr	r0, [pc, #32]	@ (8016c2c <udp_recv+0x3c>)
 8016c0c:	f000 f9a6 	bl	8016f5c <iprintf>
 8016c10:	e005      	b.n	8016c1e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	68ba      	ldr	r2, [r7, #8]
 8016c16:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	687a      	ldr	r2, [r7, #4]
 8016c1c:	61da      	str	r2, [r3, #28]
}
 8016c1e:	3710      	adds	r7, #16
 8016c20:	46bd      	mov	sp, r7
 8016c22:	bd80      	pop	{r7, pc}
 8016c24:	0801b590 	.word	0x0801b590
 8016c28:	0801b8f8 	.word	0x0801b8f8
 8016c2c:	0801b618 	.word	0x0801b618

08016c30 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8016c30:	b580      	push	{r7, lr}
 8016c32:	b084      	sub	sp, #16
 8016c34:	af00      	add	r7, sp, #0
 8016c36:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d107      	bne.n	8016c4e <udp_remove+0x1e>
 8016c3e:	4b19      	ldr	r3, [pc, #100]	@ (8016ca4 <udp_remove+0x74>)
 8016c40:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8016c44:	4918      	ldr	r1, [pc, #96]	@ (8016ca8 <udp_remove+0x78>)
 8016c46:	4819      	ldr	r0, [pc, #100]	@ (8016cac <udp_remove+0x7c>)
 8016c48:	f000 f988 	bl	8016f5c <iprintf>
 8016c4c:	e026      	b.n	8016c9c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8016c4e:	4b18      	ldr	r3, [pc, #96]	@ (8016cb0 <udp_remove+0x80>)
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	687a      	ldr	r2, [r7, #4]
 8016c54:	429a      	cmp	r2, r3
 8016c56:	d105      	bne.n	8016c64 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8016c58:	4b15      	ldr	r3, [pc, #84]	@ (8016cb0 <udp_remove+0x80>)
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	68db      	ldr	r3, [r3, #12]
 8016c5e:	4a14      	ldr	r2, [pc, #80]	@ (8016cb0 <udp_remove+0x80>)
 8016c60:	6013      	str	r3, [r2, #0]
 8016c62:	e017      	b.n	8016c94 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016c64:	4b12      	ldr	r3, [pc, #72]	@ (8016cb0 <udp_remove+0x80>)
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	60fb      	str	r3, [r7, #12]
 8016c6a:	e010      	b.n	8016c8e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	68db      	ldr	r3, [r3, #12]
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d009      	beq.n	8016c88 <udp_remove+0x58>
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	68db      	ldr	r3, [r3, #12]
 8016c78:	687a      	ldr	r2, [r7, #4]
 8016c7a:	429a      	cmp	r2, r3
 8016c7c:	d104      	bne.n	8016c88 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	68da      	ldr	r2, [r3, #12]
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	60da      	str	r2, [r3, #12]
        break;
 8016c86:	e005      	b.n	8016c94 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	68db      	ldr	r3, [r3, #12]
 8016c8c:	60fb      	str	r3, [r7, #12]
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d1eb      	bne.n	8016c6c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8016c94:	6879      	ldr	r1, [r7, #4]
 8016c96:	2000      	movs	r0, #0
 8016c98:	f7f7 fb52 	bl	800e340 <memp_free>
}
 8016c9c:	3710      	adds	r7, #16
 8016c9e:	46bd      	mov	sp, r7
 8016ca0:	bd80      	pop	{r7, pc}
 8016ca2:	bf00      	nop
 8016ca4:	0801b590 	.word	0x0801b590
 8016ca8:	0801b910 	.word	0x0801b910
 8016cac:	0801b618 	.word	0x0801b618
 8016cb0:	2400ce20 	.word	0x2400ce20

08016cb4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b082      	sub	sp, #8
 8016cb8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8016cba:	2000      	movs	r0, #0
 8016cbc:	f7f7 faca 	bl	800e254 <memp_malloc>
 8016cc0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d007      	beq.n	8016cd8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8016cc8:	2220      	movs	r2, #32
 8016cca:	2100      	movs	r1, #0
 8016ccc:	6878      	ldr	r0, [r7, #4]
 8016cce:	f000 f9e6 	bl	801709e <memset>
    pcb->ttl = UDP_TTL;
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	22ff      	movs	r2, #255	@ 0xff
 8016cd6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8016cd8:	687b      	ldr	r3, [r7, #4]
}
 8016cda:	4618      	mov	r0, r3
 8016cdc:	3708      	adds	r7, #8
 8016cde:	46bd      	mov	sp, r7
 8016ce0:	bd80      	pop	{r7, pc}

08016ce2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8016ce2:	b580      	push	{r7, lr}
 8016ce4:	b084      	sub	sp, #16
 8016ce6:	af00      	add	r7, sp, #0
 8016ce8:	4603      	mov	r3, r0
 8016cea:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8016cec:	f7ff ffe2 	bl	8016cb4 <udp_new>
 8016cf0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8016cf2:	68fb      	ldr	r3, [r7, #12]
}
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	3710      	adds	r7, #16
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	bd80      	pop	{r7, pc}

08016cfc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016cfc:	b480      	push	{r7}
 8016cfe:	b085      	sub	sp, #20
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	6078      	str	r0, [r7, #4]
 8016d04:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d01e      	beq.n	8016d4a <udp_netif_ip_addr_changed+0x4e>
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d01a      	beq.n	8016d4a <udp_netif_ip_addr_changed+0x4e>
 8016d14:	683b      	ldr	r3, [r7, #0]
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d017      	beq.n	8016d4a <udp_netif_ip_addr_changed+0x4e>
 8016d1a:	683b      	ldr	r3, [r7, #0]
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d013      	beq.n	8016d4a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016d22:	4b0d      	ldr	r3, [pc, #52]	@ (8016d58 <udp_netif_ip_addr_changed+0x5c>)
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	60fb      	str	r3, [r7, #12]
 8016d28:	e00c      	b.n	8016d44 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	681a      	ldr	r2, [r3, #0]
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	429a      	cmp	r2, r3
 8016d34:	d103      	bne.n	8016d3e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016d36:	683b      	ldr	r3, [r7, #0]
 8016d38:	681a      	ldr	r2, [r3, #0]
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016d3e:	68fb      	ldr	r3, [r7, #12]
 8016d40:	68db      	ldr	r3, [r3, #12]
 8016d42:	60fb      	str	r3, [r7, #12]
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d1ef      	bne.n	8016d2a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016d4a:	bf00      	nop
 8016d4c:	3714      	adds	r7, #20
 8016d4e:	46bd      	mov	sp, r7
 8016d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d54:	4770      	bx	lr
 8016d56:	bf00      	nop
 8016d58:	2400ce20 	.word	0x2400ce20

08016d5c <rand>:
 8016d5c:	4b16      	ldr	r3, [pc, #88]	@ (8016db8 <rand+0x5c>)
 8016d5e:	b510      	push	{r4, lr}
 8016d60:	681c      	ldr	r4, [r3, #0]
 8016d62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016d64:	b9b3      	cbnz	r3, 8016d94 <rand+0x38>
 8016d66:	2018      	movs	r0, #24
 8016d68:	f000 faec 	bl	8017344 <malloc>
 8016d6c:	4602      	mov	r2, r0
 8016d6e:	6320      	str	r0, [r4, #48]	@ 0x30
 8016d70:	b920      	cbnz	r0, 8016d7c <rand+0x20>
 8016d72:	4b12      	ldr	r3, [pc, #72]	@ (8016dbc <rand+0x60>)
 8016d74:	4812      	ldr	r0, [pc, #72]	@ (8016dc0 <rand+0x64>)
 8016d76:	2152      	movs	r1, #82	@ 0x52
 8016d78:	f000 fa7c 	bl	8017274 <__assert_func>
 8016d7c:	4911      	ldr	r1, [pc, #68]	@ (8016dc4 <rand+0x68>)
 8016d7e:	4b12      	ldr	r3, [pc, #72]	@ (8016dc8 <rand+0x6c>)
 8016d80:	e9c0 1300 	strd	r1, r3, [r0]
 8016d84:	4b11      	ldr	r3, [pc, #68]	@ (8016dcc <rand+0x70>)
 8016d86:	6083      	str	r3, [r0, #8]
 8016d88:	230b      	movs	r3, #11
 8016d8a:	8183      	strh	r3, [r0, #12]
 8016d8c:	2100      	movs	r1, #0
 8016d8e:	2001      	movs	r0, #1
 8016d90:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016d94:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016d96:	480e      	ldr	r0, [pc, #56]	@ (8016dd0 <rand+0x74>)
 8016d98:	690b      	ldr	r3, [r1, #16]
 8016d9a:	694c      	ldr	r4, [r1, #20]
 8016d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8016dd4 <rand+0x78>)
 8016d9e:	4358      	muls	r0, r3
 8016da0:	fb02 0004 	mla	r0, r2, r4, r0
 8016da4:	fba3 3202 	umull	r3, r2, r3, r2
 8016da8:	3301      	adds	r3, #1
 8016daa:	eb40 0002 	adc.w	r0, r0, r2
 8016dae:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016db2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016db6:	bd10      	pop	{r4, pc}
 8016db8:	24000040 	.word	0x24000040
 8016dbc:	0801ba90 	.word	0x0801ba90
 8016dc0:	0801baa7 	.word	0x0801baa7
 8016dc4:	abcd330e 	.word	0xabcd330e
 8016dc8:	e66d1234 	.word	0xe66d1234
 8016dcc:	0005deec 	.word	0x0005deec
 8016dd0:	5851f42d 	.word	0x5851f42d
 8016dd4:	4c957f2d 	.word	0x4c957f2d

08016dd8 <std>:
 8016dd8:	2300      	movs	r3, #0
 8016dda:	b510      	push	{r4, lr}
 8016ddc:	4604      	mov	r4, r0
 8016dde:	e9c0 3300 	strd	r3, r3, [r0]
 8016de2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016de6:	6083      	str	r3, [r0, #8]
 8016de8:	8181      	strh	r1, [r0, #12]
 8016dea:	6643      	str	r3, [r0, #100]	@ 0x64
 8016dec:	81c2      	strh	r2, [r0, #14]
 8016dee:	6183      	str	r3, [r0, #24]
 8016df0:	4619      	mov	r1, r3
 8016df2:	2208      	movs	r2, #8
 8016df4:	305c      	adds	r0, #92	@ 0x5c
 8016df6:	f000 f952 	bl	801709e <memset>
 8016dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8016e30 <std+0x58>)
 8016dfc:	6263      	str	r3, [r4, #36]	@ 0x24
 8016dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8016e34 <std+0x5c>)
 8016e00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016e02:	4b0d      	ldr	r3, [pc, #52]	@ (8016e38 <std+0x60>)
 8016e04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016e06:	4b0d      	ldr	r3, [pc, #52]	@ (8016e3c <std+0x64>)
 8016e08:	6323      	str	r3, [r4, #48]	@ 0x30
 8016e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8016e40 <std+0x68>)
 8016e0c:	6224      	str	r4, [r4, #32]
 8016e0e:	429c      	cmp	r4, r3
 8016e10:	d006      	beq.n	8016e20 <std+0x48>
 8016e12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016e16:	4294      	cmp	r4, r2
 8016e18:	d002      	beq.n	8016e20 <std+0x48>
 8016e1a:	33d0      	adds	r3, #208	@ 0xd0
 8016e1c:	429c      	cmp	r4, r3
 8016e1e:	d105      	bne.n	8016e2c <std+0x54>
 8016e20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e28:	f000 ba0a 	b.w	8017240 <__retarget_lock_init_recursive>
 8016e2c:	bd10      	pop	{r4, pc}
 8016e2e:	bf00      	nop
 8016e30:	08016fc5 	.word	0x08016fc5
 8016e34:	08016fe7 	.word	0x08016fe7
 8016e38:	0801701f 	.word	0x0801701f
 8016e3c:	08017043 	.word	0x08017043
 8016e40:	2400ce24 	.word	0x2400ce24

08016e44 <stdio_exit_handler>:
 8016e44:	4a02      	ldr	r2, [pc, #8]	@ (8016e50 <stdio_exit_handler+0xc>)
 8016e46:	4903      	ldr	r1, [pc, #12]	@ (8016e54 <stdio_exit_handler+0x10>)
 8016e48:	4803      	ldr	r0, [pc, #12]	@ (8016e58 <stdio_exit_handler+0x14>)
 8016e4a:	f000 b869 	b.w	8016f20 <_fwalk_sglue>
 8016e4e:	bf00      	nop
 8016e50:	24000034 	.word	0x24000034
 8016e54:	08017e05 	.word	0x08017e05
 8016e58:	24000044 	.word	0x24000044

08016e5c <cleanup_stdio>:
 8016e5c:	6841      	ldr	r1, [r0, #4]
 8016e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8016e90 <cleanup_stdio+0x34>)
 8016e60:	4299      	cmp	r1, r3
 8016e62:	b510      	push	{r4, lr}
 8016e64:	4604      	mov	r4, r0
 8016e66:	d001      	beq.n	8016e6c <cleanup_stdio+0x10>
 8016e68:	f000 ffcc 	bl	8017e04 <_fflush_r>
 8016e6c:	68a1      	ldr	r1, [r4, #8]
 8016e6e:	4b09      	ldr	r3, [pc, #36]	@ (8016e94 <cleanup_stdio+0x38>)
 8016e70:	4299      	cmp	r1, r3
 8016e72:	d002      	beq.n	8016e7a <cleanup_stdio+0x1e>
 8016e74:	4620      	mov	r0, r4
 8016e76:	f000 ffc5 	bl	8017e04 <_fflush_r>
 8016e7a:	68e1      	ldr	r1, [r4, #12]
 8016e7c:	4b06      	ldr	r3, [pc, #24]	@ (8016e98 <cleanup_stdio+0x3c>)
 8016e7e:	4299      	cmp	r1, r3
 8016e80:	d004      	beq.n	8016e8c <cleanup_stdio+0x30>
 8016e82:	4620      	mov	r0, r4
 8016e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e88:	f000 bfbc 	b.w	8017e04 <_fflush_r>
 8016e8c:	bd10      	pop	{r4, pc}
 8016e8e:	bf00      	nop
 8016e90:	2400ce24 	.word	0x2400ce24
 8016e94:	2400ce8c 	.word	0x2400ce8c
 8016e98:	2400cef4 	.word	0x2400cef4

08016e9c <global_stdio_init.part.0>:
 8016e9c:	b510      	push	{r4, lr}
 8016e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8016ecc <global_stdio_init.part.0+0x30>)
 8016ea0:	4c0b      	ldr	r4, [pc, #44]	@ (8016ed0 <global_stdio_init.part.0+0x34>)
 8016ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8016ed4 <global_stdio_init.part.0+0x38>)
 8016ea4:	601a      	str	r2, [r3, #0]
 8016ea6:	4620      	mov	r0, r4
 8016ea8:	2200      	movs	r2, #0
 8016eaa:	2104      	movs	r1, #4
 8016eac:	f7ff ff94 	bl	8016dd8 <std>
 8016eb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016eb4:	2201      	movs	r2, #1
 8016eb6:	2109      	movs	r1, #9
 8016eb8:	f7ff ff8e 	bl	8016dd8 <std>
 8016ebc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016ec0:	2202      	movs	r2, #2
 8016ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ec6:	2112      	movs	r1, #18
 8016ec8:	f7ff bf86 	b.w	8016dd8 <std>
 8016ecc:	2400cf5c 	.word	0x2400cf5c
 8016ed0:	2400ce24 	.word	0x2400ce24
 8016ed4:	08016e45 	.word	0x08016e45

08016ed8 <__sfp_lock_acquire>:
 8016ed8:	4801      	ldr	r0, [pc, #4]	@ (8016ee0 <__sfp_lock_acquire+0x8>)
 8016eda:	f000 b9b2 	b.w	8017242 <__retarget_lock_acquire_recursive>
 8016ede:	bf00      	nop
 8016ee0:	2400cf65 	.word	0x2400cf65

08016ee4 <__sfp_lock_release>:
 8016ee4:	4801      	ldr	r0, [pc, #4]	@ (8016eec <__sfp_lock_release+0x8>)
 8016ee6:	f000 b9ad 	b.w	8017244 <__retarget_lock_release_recursive>
 8016eea:	bf00      	nop
 8016eec:	2400cf65 	.word	0x2400cf65

08016ef0 <__sinit>:
 8016ef0:	b510      	push	{r4, lr}
 8016ef2:	4604      	mov	r4, r0
 8016ef4:	f7ff fff0 	bl	8016ed8 <__sfp_lock_acquire>
 8016ef8:	6a23      	ldr	r3, [r4, #32]
 8016efa:	b11b      	cbz	r3, 8016f04 <__sinit+0x14>
 8016efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f00:	f7ff bff0 	b.w	8016ee4 <__sfp_lock_release>
 8016f04:	4b04      	ldr	r3, [pc, #16]	@ (8016f18 <__sinit+0x28>)
 8016f06:	6223      	str	r3, [r4, #32]
 8016f08:	4b04      	ldr	r3, [pc, #16]	@ (8016f1c <__sinit+0x2c>)
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d1f5      	bne.n	8016efc <__sinit+0xc>
 8016f10:	f7ff ffc4 	bl	8016e9c <global_stdio_init.part.0>
 8016f14:	e7f2      	b.n	8016efc <__sinit+0xc>
 8016f16:	bf00      	nop
 8016f18:	08016e5d 	.word	0x08016e5d
 8016f1c:	2400cf5c 	.word	0x2400cf5c

08016f20 <_fwalk_sglue>:
 8016f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f24:	4607      	mov	r7, r0
 8016f26:	4688      	mov	r8, r1
 8016f28:	4614      	mov	r4, r2
 8016f2a:	2600      	movs	r6, #0
 8016f2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016f30:	f1b9 0901 	subs.w	r9, r9, #1
 8016f34:	d505      	bpl.n	8016f42 <_fwalk_sglue+0x22>
 8016f36:	6824      	ldr	r4, [r4, #0]
 8016f38:	2c00      	cmp	r4, #0
 8016f3a:	d1f7      	bne.n	8016f2c <_fwalk_sglue+0xc>
 8016f3c:	4630      	mov	r0, r6
 8016f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f42:	89ab      	ldrh	r3, [r5, #12]
 8016f44:	2b01      	cmp	r3, #1
 8016f46:	d907      	bls.n	8016f58 <_fwalk_sglue+0x38>
 8016f48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016f4c:	3301      	adds	r3, #1
 8016f4e:	d003      	beq.n	8016f58 <_fwalk_sglue+0x38>
 8016f50:	4629      	mov	r1, r5
 8016f52:	4638      	mov	r0, r7
 8016f54:	47c0      	blx	r8
 8016f56:	4306      	orrs	r6, r0
 8016f58:	3568      	adds	r5, #104	@ 0x68
 8016f5a:	e7e9      	b.n	8016f30 <_fwalk_sglue+0x10>

08016f5c <iprintf>:
 8016f5c:	b40f      	push	{r0, r1, r2, r3}
 8016f5e:	b507      	push	{r0, r1, r2, lr}
 8016f60:	4906      	ldr	r1, [pc, #24]	@ (8016f7c <iprintf+0x20>)
 8016f62:	ab04      	add	r3, sp, #16
 8016f64:	6808      	ldr	r0, [r1, #0]
 8016f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f6a:	6881      	ldr	r1, [r0, #8]
 8016f6c:	9301      	str	r3, [sp, #4]
 8016f6e:	f000 fc21 	bl	80177b4 <_vfiprintf_r>
 8016f72:	b003      	add	sp, #12
 8016f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8016f78:	b004      	add	sp, #16
 8016f7a:	4770      	bx	lr
 8016f7c:	24000040 	.word	0x24000040

08016f80 <siprintf>:
 8016f80:	b40e      	push	{r1, r2, r3}
 8016f82:	b510      	push	{r4, lr}
 8016f84:	b09d      	sub	sp, #116	@ 0x74
 8016f86:	ab1f      	add	r3, sp, #124	@ 0x7c
 8016f88:	9002      	str	r0, [sp, #8]
 8016f8a:	9006      	str	r0, [sp, #24]
 8016f8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016f90:	480a      	ldr	r0, [pc, #40]	@ (8016fbc <siprintf+0x3c>)
 8016f92:	9107      	str	r1, [sp, #28]
 8016f94:	9104      	str	r1, [sp, #16]
 8016f96:	490a      	ldr	r1, [pc, #40]	@ (8016fc0 <siprintf+0x40>)
 8016f98:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f9c:	9105      	str	r1, [sp, #20]
 8016f9e:	2400      	movs	r4, #0
 8016fa0:	a902      	add	r1, sp, #8
 8016fa2:	6800      	ldr	r0, [r0, #0]
 8016fa4:	9301      	str	r3, [sp, #4]
 8016fa6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8016fa8:	f000 fade 	bl	8017568 <_svfiprintf_r>
 8016fac:	9b02      	ldr	r3, [sp, #8]
 8016fae:	701c      	strb	r4, [r3, #0]
 8016fb0:	b01d      	add	sp, #116	@ 0x74
 8016fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016fb6:	b003      	add	sp, #12
 8016fb8:	4770      	bx	lr
 8016fba:	bf00      	nop
 8016fbc:	24000040 	.word	0x24000040
 8016fc0:	ffff0208 	.word	0xffff0208

08016fc4 <__sread>:
 8016fc4:	b510      	push	{r4, lr}
 8016fc6:	460c      	mov	r4, r1
 8016fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fcc:	f000 f8f0 	bl	80171b0 <_read_r>
 8016fd0:	2800      	cmp	r0, #0
 8016fd2:	bfab      	itete	ge
 8016fd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016fd6:	89a3      	ldrhlt	r3, [r4, #12]
 8016fd8:	181b      	addge	r3, r3, r0
 8016fda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016fde:	bfac      	ite	ge
 8016fe0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016fe2:	81a3      	strhlt	r3, [r4, #12]
 8016fe4:	bd10      	pop	{r4, pc}

08016fe6 <__swrite>:
 8016fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fea:	461f      	mov	r7, r3
 8016fec:	898b      	ldrh	r3, [r1, #12]
 8016fee:	05db      	lsls	r3, r3, #23
 8016ff0:	4605      	mov	r5, r0
 8016ff2:	460c      	mov	r4, r1
 8016ff4:	4616      	mov	r6, r2
 8016ff6:	d505      	bpl.n	8017004 <__swrite+0x1e>
 8016ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ffc:	2302      	movs	r3, #2
 8016ffe:	2200      	movs	r2, #0
 8017000:	f000 f8c4 	bl	801718c <_lseek_r>
 8017004:	89a3      	ldrh	r3, [r4, #12]
 8017006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801700a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801700e:	81a3      	strh	r3, [r4, #12]
 8017010:	4632      	mov	r2, r6
 8017012:	463b      	mov	r3, r7
 8017014:	4628      	mov	r0, r5
 8017016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801701a:	f000 b8db 	b.w	80171d4 <_write_r>

0801701e <__sseek>:
 801701e:	b510      	push	{r4, lr}
 8017020:	460c      	mov	r4, r1
 8017022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017026:	f000 f8b1 	bl	801718c <_lseek_r>
 801702a:	1c43      	adds	r3, r0, #1
 801702c:	89a3      	ldrh	r3, [r4, #12]
 801702e:	bf15      	itete	ne
 8017030:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017032:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017036:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801703a:	81a3      	strheq	r3, [r4, #12]
 801703c:	bf18      	it	ne
 801703e:	81a3      	strhne	r3, [r4, #12]
 8017040:	bd10      	pop	{r4, pc}

08017042 <__sclose>:
 8017042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017046:	f000 b833 	b.w	80170b0 <_close_r>

0801704a <memcmp>:
 801704a:	b510      	push	{r4, lr}
 801704c:	3901      	subs	r1, #1
 801704e:	4402      	add	r2, r0
 8017050:	4290      	cmp	r0, r2
 8017052:	d101      	bne.n	8017058 <memcmp+0xe>
 8017054:	2000      	movs	r0, #0
 8017056:	e005      	b.n	8017064 <memcmp+0x1a>
 8017058:	7803      	ldrb	r3, [r0, #0]
 801705a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801705e:	42a3      	cmp	r3, r4
 8017060:	d001      	beq.n	8017066 <memcmp+0x1c>
 8017062:	1b18      	subs	r0, r3, r4
 8017064:	bd10      	pop	{r4, pc}
 8017066:	3001      	adds	r0, #1
 8017068:	e7f2      	b.n	8017050 <memcmp+0x6>

0801706a <memmove>:
 801706a:	4288      	cmp	r0, r1
 801706c:	b510      	push	{r4, lr}
 801706e:	eb01 0402 	add.w	r4, r1, r2
 8017072:	d902      	bls.n	801707a <memmove+0x10>
 8017074:	4284      	cmp	r4, r0
 8017076:	4623      	mov	r3, r4
 8017078:	d807      	bhi.n	801708a <memmove+0x20>
 801707a:	1e43      	subs	r3, r0, #1
 801707c:	42a1      	cmp	r1, r4
 801707e:	d008      	beq.n	8017092 <memmove+0x28>
 8017080:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017084:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017088:	e7f8      	b.n	801707c <memmove+0x12>
 801708a:	4402      	add	r2, r0
 801708c:	4601      	mov	r1, r0
 801708e:	428a      	cmp	r2, r1
 8017090:	d100      	bne.n	8017094 <memmove+0x2a>
 8017092:	bd10      	pop	{r4, pc}
 8017094:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017098:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801709c:	e7f7      	b.n	801708e <memmove+0x24>

0801709e <memset>:
 801709e:	4402      	add	r2, r0
 80170a0:	4603      	mov	r3, r0
 80170a2:	4293      	cmp	r3, r2
 80170a4:	d100      	bne.n	80170a8 <memset+0xa>
 80170a6:	4770      	bx	lr
 80170a8:	f803 1b01 	strb.w	r1, [r3], #1
 80170ac:	e7f9      	b.n	80170a2 <memset+0x4>
	...

080170b0 <_close_r>:
 80170b0:	b538      	push	{r3, r4, r5, lr}
 80170b2:	4d06      	ldr	r5, [pc, #24]	@ (80170cc <_close_r+0x1c>)
 80170b4:	2300      	movs	r3, #0
 80170b6:	4604      	mov	r4, r0
 80170b8:	4608      	mov	r0, r1
 80170ba:	602b      	str	r3, [r5, #0]
 80170bc:	f7e9 fcf2 	bl	8000aa4 <_close>
 80170c0:	1c43      	adds	r3, r0, #1
 80170c2:	d102      	bne.n	80170ca <_close_r+0x1a>
 80170c4:	682b      	ldr	r3, [r5, #0]
 80170c6:	b103      	cbz	r3, 80170ca <_close_r+0x1a>
 80170c8:	6023      	str	r3, [r4, #0]
 80170ca:	bd38      	pop	{r3, r4, r5, pc}
 80170cc:	2400cf60 	.word	0x2400cf60

080170d0 <_reclaim_reent>:
 80170d0:	4b2d      	ldr	r3, [pc, #180]	@ (8017188 <_reclaim_reent+0xb8>)
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	4283      	cmp	r3, r0
 80170d6:	b570      	push	{r4, r5, r6, lr}
 80170d8:	4604      	mov	r4, r0
 80170da:	d053      	beq.n	8017184 <_reclaim_reent+0xb4>
 80170dc:	69c3      	ldr	r3, [r0, #28]
 80170de:	b31b      	cbz	r3, 8017128 <_reclaim_reent+0x58>
 80170e0:	68db      	ldr	r3, [r3, #12]
 80170e2:	b163      	cbz	r3, 80170fe <_reclaim_reent+0x2e>
 80170e4:	2500      	movs	r5, #0
 80170e6:	69e3      	ldr	r3, [r4, #28]
 80170e8:	68db      	ldr	r3, [r3, #12]
 80170ea:	5959      	ldr	r1, [r3, r5]
 80170ec:	b9b1      	cbnz	r1, 801711c <_reclaim_reent+0x4c>
 80170ee:	3504      	adds	r5, #4
 80170f0:	2d80      	cmp	r5, #128	@ 0x80
 80170f2:	d1f8      	bne.n	80170e6 <_reclaim_reent+0x16>
 80170f4:	69e3      	ldr	r3, [r4, #28]
 80170f6:	4620      	mov	r0, r4
 80170f8:	68d9      	ldr	r1, [r3, #12]
 80170fa:	f000 f8d9 	bl	80172b0 <_free_r>
 80170fe:	69e3      	ldr	r3, [r4, #28]
 8017100:	6819      	ldr	r1, [r3, #0]
 8017102:	b111      	cbz	r1, 801710a <_reclaim_reent+0x3a>
 8017104:	4620      	mov	r0, r4
 8017106:	f000 f8d3 	bl	80172b0 <_free_r>
 801710a:	69e3      	ldr	r3, [r4, #28]
 801710c:	689d      	ldr	r5, [r3, #8]
 801710e:	b15d      	cbz	r5, 8017128 <_reclaim_reent+0x58>
 8017110:	4629      	mov	r1, r5
 8017112:	4620      	mov	r0, r4
 8017114:	682d      	ldr	r5, [r5, #0]
 8017116:	f000 f8cb 	bl	80172b0 <_free_r>
 801711a:	e7f8      	b.n	801710e <_reclaim_reent+0x3e>
 801711c:	680e      	ldr	r6, [r1, #0]
 801711e:	4620      	mov	r0, r4
 8017120:	f000 f8c6 	bl	80172b0 <_free_r>
 8017124:	4631      	mov	r1, r6
 8017126:	e7e1      	b.n	80170ec <_reclaim_reent+0x1c>
 8017128:	6961      	ldr	r1, [r4, #20]
 801712a:	b111      	cbz	r1, 8017132 <_reclaim_reent+0x62>
 801712c:	4620      	mov	r0, r4
 801712e:	f000 f8bf 	bl	80172b0 <_free_r>
 8017132:	69e1      	ldr	r1, [r4, #28]
 8017134:	b111      	cbz	r1, 801713c <_reclaim_reent+0x6c>
 8017136:	4620      	mov	r0, r4
 8017138:	f000 f8ba 	bl	80172b0 <_free_r>
 801713c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801713e:	b111      	cbz	r1, 8017146 <_reclaim_reent+0x76>
 8017140:	4620      	mov	r0, r4
 8017142:	f000 f8b5 	bl	80172b0 <_free_r>
 8017146:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017148:	b111      	cbz	r1, 8017150 <_reclaim_reent+0x80>
 801714a:	4620      	mov	r0, r4
 801714c:	f000 f8b0 	bl	80172b0 <_free_r>
 8017150:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8017152:	b111      	cbz	r1, 801715a <_reclaim_reent+0x8a>
 8017154:	4620      	mov	r0, r4
 8017156:	f000 f8ab 	bl	80172b0 <_free_r>
 801715a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801715c:	b111      	cbz	r1, 8017164 <_reclaim_reent+0x94>
 801715e:	4620      	mov	r0, r4
 8017160:	f000 f8a6 	bl	80172b0 <_free_r>
 8017164:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017166:	b111      	cbz	r1, 801716e <_reclaim_reent+0x9e>
 8017168:	4620      	mov	r0, r4
 801716a:	f000 f8a1 	bl	80172b0 <_free_r>
 801716e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017170:	b111      	cbz	r1, 8017178 <_reclaim_reent+0xa8>
 8017172:	4620      	mov	r0, r4
 8017174:	f000 f89c 	bl	80172b0 <_free_r>
 8017178:	6a23      	ldr	r3, [r4, #32]
 801717a:	b11b      	cbz	r3, 8017184 <_reclaim_reent+0xb4>
 801717c:	4620      	mov	r0, r4
 801717e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017182:	4718      	bx	r3
 8017184:	bd70      	pop	{r4, r5, r6, pc}
 8017186:	bf00      	nop
 8017188:	24000040 	.word	0x24000040

0801718c <_lseek_r>:
 801718c:	b538      	push	{r3, r4, r5, lr}
 801718e:	4d07      	ldr	r5, [pc, #28]	@ (80171ac <_lseek_r+0x20>)
 8017190:	4604      	mov	r4, r0
 8017192:	4608      	mov	r0, r1
 8017194:	4611      	mov	r1, r2
 8017196:	2200      	movs	r2, #0
 8017198:	602a      	str	r2, [r5, #0]
 801719a:	461a      	mov	r2, r3
 801719c:	f7e9 fca9 	bl	8000af2 <_lseek>
 80171a0:	1c43      	adds	r3, r0, #1
 80171a2:	d102      	bne.n	80171aa <_lseek_r+0x1e>
 80171a4:	682b      	ldr	r3, [r5, #0]
 80171a6:	b103      	cbz	r3, 80171aa <_lseek_r+0x1e>
 80171a8:	6023      	str	r3, [r4, #0]
 80171aa:	bd38      	pop	{r3, r4, r5, pc}
 80171ac:	2400cf60 	.word	0x2400cf60

080171b0 <_read_r>:
 80171b0:	b538      	push	{r3, r4, r5, lr}
 80171b2:	4d07      	ldr	r5, [pc, #28]	@ (80171d0 <_read_r+0x20>)
 80171b4:	4604      	mov	r4, r0
 80171b6:	4608      	mov	r0, r1
 80171b8:	4611      	mov	r1, r2
 80171ba:	2200      	movs	r2, #0
 80171bc:	602a      	str	r2, [r5, #0]
 80171be:	461a      	mov	r2, r3
 80171c0:	f7e9 fc37 	bl	8000a32 <_read>
 80171c4:	1c43      	adds	r3, r0, #1
 80171c6:	d102      	bne.n	80171ce <_read_r+0x1e>
 80171c8:	682b      	ldr	r3, [r5, #0]
 80171ca:	b103      	cbz	r3, 80171ce <_read_r+0x1e>
 80171cc:	6023      	str	r3, [r4, #0]
 80171ce:	bd38      	pop	{r3, r4, r5, pc}
 80171d0:	2400cf60 	.word	0x2400cf60

080171d4 <_write_r>:
 80171d4:	b538      	push	{r3, r4, r5, lr}
 80171d6:	4d07      	ldr	r5, [pc, #28]	@ (80171f4 <_write_r+0x20>)
 80171d8:	4604      	mov	r4, r0
 80171da:	4608      	mov	r0, r1
 80171dc:	4611      	mov	r1, r2
 80171de:	2200      	movs	r2, #0
 80171e0:	602a      	str	r2, [r5, #0]
 80171e2:	461a      	mov	r2, r3
 80171e4:	f7e9 fc42 	bl	8000a6c <_write>
 80171e8:	1c43      	adds	r3, r0, #1
 80171ea:	d102      	bne.n	80171f2 <_write_r+0x1e>
 80171ec:	682b      	ldr	r3, [r5, #0]
 80171ee:	b103      	cbz	r3, 80171f2 <_write_r+0x1e>
 80171f0:	6023      	str	r3, [r4, #0]
 80171f2:	bd38      	pop	{r3, r4, r5, pc}
 80171f4:	2400cf60 	.word	0x2400cf60

080171f8 <__libc_init_array>:
 80171f8:	b570      	push	{r4, r5, r6, lr}
 80171fa:	4d0d      	ldr	r5, [pc, #52]	@ (8017230 <__libc_init_array+0x38>)
 80171fc:	4c0d      	ldr	r4, [pc, #52]	@ (8017234 <__libc_init_array+0x3c>)
 80171fe:	1b64      	subs	r4, r4, r5
 8017200:	10a4      	asrs	r4, r4, #2
 8017202:	2600      	movs	r6, #0
 8017204:	42a6      	cmp	r6, r4
 8017206:	d109      	bne.n	801721c <__libc_init_array+0x24>
 8017208:	4d0b      	ldr	r5, [pc, #44]	@ (8017238 <__libc_init_array+0x40>)
 801720a:	4c0c      	ldr	r4, [pc, #48]	@ (801723c <__libc_init_array+0x44>)
 801720c:	f000 ffde 	bl	80181cc <_init>
 8017210:	1b64      	subs	r4, r4, r5
 8017212:	10a4      	asrs	r4, r4, #2
 8017214:	2600      	movs	r6, #0
 8017216:	42a6      	cmp	r6, r4
 8017218:	d105      	bne.n	8017226 <__libc_init_array+0x2e>
 801721a:	bd70      	pop	{r4, r5, r6, pc}
 801721c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017220:	4798      	blx	r3
 8017222:	3601      	adds	r6, #1
 8017224:	e7ee      	b.n	8017204 <__libc_init_array+0xc>
 8017226:	f855 3b04 	ldr.w	r3, [r5], #4
 801722a:	4798      	blx	r3
 801722c:	3601      	adds	r6, #1
 801722e:	e7f2      	b.n	8017216 <__libc_init_array+0x1e>
 8017230:	0801bb78 	.word	0x0801bb78
 8017234:	0801bb78 	.word	0x0801bb78
 8017238:	0801bb78 	.word	0x0801bb78
 801723c:	0801bb7c 	.word	0x0801bb7c

08017240 <__retarget_lock_init_recursive>:
 8017240:	4770      	bx	lr

08017242 <__retarget_lock_acquire_recursive>:
 8017242:	4770      	bx	lr

08017244 <__retarget_lock_release_recursive>:
 8017244:	4770      	bx	lr

08017246 <strcpy>:
 8017246:	4603      	mov	r3, r0
 8017248:	f811 2b01 	ldrb.w	r2, [r1], #1
 801724c:	f803 2b01 	strb.w	r2, [r3], #1
 8017250:	2a00      	cmp	r2, #0
 8017252:	d1f9      	bne.n	8017248 <strcpy+0x2>
 8017254:	4770      	bx	lr

08017256 <memcpy>:
 8017256:	440a      	add	r2, r1
 8017258:	4291      	cmp	r1, r2
 801725a:	f100 33ff 	add.w	r3, r0, #4294967295
 801725e:	d100      	bne.n	8017262 <memcpy+0xc>
 8017260:	4770      	bx	lr
 8017262:	b510      	push	{r4, lr}
 8017264:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017268:	f803 4f01 	strb.w	r4, [r3, #1]!
 801726c:	4291      	cmp	r1, r2
 801726e:	d1f9      	bne.n	8017264 <memcpy+0xe>
 8017270:	bd10      	pop	{r4, pc}
	...

08017274 <__assert_func>:
 8017274:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017276:	4614      	mov	r4, r2
 8017278:	461a      	mov	r2, r3
 801727a:	4b09      	ldr	r3, [pc, #36]	@ (80172a0 <__assert_func+0x2c>)
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	4605      	mov	r5, r0
 8017280:	68d8      	ldr	r0, [r3, #12]
 8017282:	b14c      	cbz	r4, 8017298 <__assert_func+0x24>
 8017284:	4b07      	ldr	r3, [pc, #28]	@ (80172a4 <__assert_func+0x30>)
 8017286:	9100      	str	r1, [sp, #0]
 8017288:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801728c:	4906      	ldr	r1, [pc, #24]	@ (80172a8 <__assert_func+0x34>)
 801728e:	462b      	mov	r3, r5
 8017290:	f000 fde0 	bl	8017e54 <fiprintf>
 8017294:	f000 fe94 	bl	8017fc0 <abort>
 8017298:	4b04      	ldr	r3, [pc, #16]	@ (80172ac <__assert_func+0x38>)
 801729a:	461c      	mov	r4, r3
 801729c:	e7f3      	b.n	8017286 <__assert_func+0x12>
 801729e:	bf00      	nop
 80172a0:	24000040 	.word	0x24000040
 80172a4:	0801baff 	.word	0x0801baff
 80172a8:	0801bb0c 	.word	0x0801bb0c
 80172ac:	0801bb3a 	.word	0x0801bb3a

080172b0 <_free_r>:
 80172b0:	b538      	push	{r3, r4, r5, lr}
 80172b2:	4605      	mov	r5, r0
 80172b4:	2900      	cmp	r1, #0
 80172b6:	d041      	beq.n	801733c <_free_r+0x8c>
 80172b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80172bc:	1f0c      	subs	r4, r1, #4
 80172be:	2b00      	cmp	r3, #0
 80172c0:	bfb8      	it	lt
 80172c2:	18e4      	addlt	r4, r4, r3
 80172c4:	f000 f8e8 	bl	8017498 <__malloc_lock>
 80172c8:	4a1d      	ldr	r2, [pc, #116]	@ (8017340 <_free_r+0x90>)
 80172ca:	6813      	ldr	r3, [r2, #0]
 80172cc:	b933      	cbnz	r3, 80172dc <_free_r+0x2c>
 80172ce:	6063      	str	r3, [r4, #4]
 80172d0:	6014      	str	r4, [r2, #0]
 80172d2:	4628      	mov	r0, r5
 80172d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80172d8:	f000 b8e4 	b.w	80174a4 <__malloc_unlock>
 80172dc:	42a3      	cmp	r3, r4
 80172de:	d908      	bls.n	80172f2 <_free_r+0x42>
 80172e0:	6820      	ldr	r0, [r4, #0]
 80172e2:	1821      	adds	r1, r4, r0
 80172e4:	428b      	cmp	r3, r1
 80172e6:	bf01      	itttt	eq
 80172e8:	6819      	ldreq	r1, [r3, #0]
 80172ea:	685b      	ldreq	r3, [r3, #4]
 80172ec:	1809      	addeq	r1, r1, r0
 80172ee:	6021      	streq	r1, [r4, #0]
 80172f0:	e7ed      	b.n	80172ce <_free_r+0x1e>
 80172f2:	461a      	mov	r2, r3
 80172f4:	685b      	ldr	r3, [r3, #4]
 80172f6:	b10b      	cbz	r3, 80172fc <_free_r+0x4c>
 80172f8:	42a3      	cmp	r3, r4
 80172fa:	d9fa      	bls.n	80172f2 <_free_r+0x42>
 80172fc:	6811      	ldr	r1, [r2, #0]
 80172fe:	1850      	adds	r0, r2, r1
 8017300:	42a0      	cmp	r0, r4
 8017302:	d10b      	bne.n	801731c <_free_r+0x6c>
 8017304:	6820      	ldr	r0, [r4, #0]
 8017306:	4401      	add	r1, r0
 8017308:	1850      	adds	r0, r2, r1
 801730a:	4283      	cmp	r3, r0
 801730c:	6011      	str	r1, [r2, #0]
 801730e:	d1e0      	bne.n	80172d2 <_free_r+0x22>
 8017310:	6818      	ldr	r0, [r3, #0]
 8017312:	685b      	ldr	r3, [r3, #4]
 8017314:	6053      	str	r3, [r2, #4]
 8017316:	4408      	add	r0, r1
 8017318:	6010      	str	r0, [r2, #0]
 801731a:	e7da      	b.n	80172d2 <_free_r+0x22>
 801731c:	d902      	bls.n	8017324 <_free_r+0x74>
 801731e:	230c      	movs	r3, #12
 8017320:	602b      	str	r3, [r5, #0]
 8017322:	e7d6      	b.n	80172d2 <_free_r+0x22>
 8017324:	6820      	ldr	r0, [r4, #0]
 8017326:	1821      	adds	r1, r4, r0
 8017328:	428b      	cmp	r3, r1
 801732a:	bf04      	itt	eq
 801732c:	6819      	ldreq	r1, [r3, #0]
 801732e:	685b      	ldreq	r3, [r3, #4]
 8017330:	6063      	str	r3, [r4, #4]
 8017332:	bf04      	itt	eq
 8017334:	1809      	addeq	r1, r1, r0
 8017336:	6021      	streq	r1, [r4, #0]
 8017338:	6054      	str	r4, [r2, #4]
 801733a:	e7ca      	b.n	80172d2 <_free_r+0x22>
 801733c:	bd38      	pop	{r3, r4, r5, pc}
 801733e:	bf00      	nop
 8017340:	2400cf6c 	.word	0x2400cf6c

08017344 <malloc>:
 8017344:	4b02      	ldr	r3, [pc, #8]	@ (8017350 <malloc+0xc>)
 8017346:	4601      	mov	r1, r0
 8017348:	6818      	ldr	r0, [r3, #0]
 801734a:	f000 b825 	b.w	8017398 <_malloc_r>
 801734e:	bf00      	nop
 8017350:	24000040 	.word	0x24000040

08017354 <sbrk_aligned>:
 8017354:	b570      	push	{r4, r5, r6, lr}
 8017356:	4e0f      	ldr	r6, [pc, #60]	@ (8017394 <sbrk_aligned+0x40>)
 8017358:	460c      	mov	r4, r1
 801735a:	6831      	ldr	r1, [r6, #0]
 801735c:	4605      	mov	r5, r0
 801735e:	b911      	cbnz	r1, 8017366 <sbrk_aligned+0x12>
 8017360:	f000 fe1e 	bl	8017fa0 <_sbrk_r>
 8017364:	6030      	str	r0, [r6, #0]
 8017366:	4621      	mov	r1, r4
 8017368:	4628      	mov	r0, r5
 801736a:	f000 fe19 	bl	8017fa0 <_sbrk_r>
 801736e:	1c43      	adds	r3, r0, #1
 8017370:	d103      	bne.n	801737a <sbrk_aligned+0x26>
 8017372:	f04f 34ff 	mov.w	r4, #4294967295
 8017376:	4620      	mov	r0, r4
 8017378:	bd70      	pop	{r4, r5, r6, pc}
 801737a:	1cc4      	adds	r4, r0, #3
 801737c:	f024 0403 	bic.w	r4, r4, #3
 8017380:	42a0      	cmp	r0, r4
 8017382:	d0f8      	beq.n	8017376 <sbrk_aligned+0x22>
 8017384:	1a21      	subs	r1, r4, r0
 8017386:	4628      	mov	r0, r5
 8017388:	f000 fe0a 	bl	8017fa0 <_sbrk_r>
 801738c:	3001      	adds	r0, #1
 801738e:	d1f2      	bne.n	8017376 <sbrk_aligned+0x22>
 8017390:	e7ef      	b.n	8017372 <sbrk_aligned+0x1e>
 8017392:	bf00      	nop
 8017394:	2400cf68 	.word	0x2400cf68

08017398 <_malloc_r>:
 8017398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801739c:	1ccd      	adds	r5, r1, #3
 801739e:	f025 0503 	bic.w	r5, r5, #3
 80173a2:	3508      	adds	r5, #8
 80173a4:	2d0c      	cmp	r5, #12
 80173a6:	bf38      	it	cc
 80173a8:	250c      	movcc	r5, #12
 80173aa:	2d00      	cmp	r5, #0
 80173ac:	4606      	mov	r6, r0
 80173ae:	db01      	blt.n	80173b4 <_malloc_r+0x1c>
 80173b0:	42a9      	cmp	r1, r5
 80173b2:	d904      	bls.n	80173be <_malloc_r+0x26>
 80173b4:	230c      	movs	r3, #12
 80173b6:	6033      	str	r3, [r6, #0]
 80173b8:	2000      	movs	r0, #0
 80173ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80173be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017494 <_malloc_r+0xfc>
 80173c2:	f000 f869 	bl	8017498 <__malloc_lock>
 80173c6:	f8d8 3000 	ldr.w	r3, [r8]
 80173ca:	461c      	mov	r4, r3
 80173cc:	bb44      	cbnz	r4, 8017420 <_malloc_r+0x88>
 80173ce:	4629      	mov	r1, r5
 80173d0:	4630      	mov	r0, r6
 80173d2:	f7ff ffbf 	bl	8017354 <sbrk_aligned>
 80173d6:	1c43      	adds	r3, r0, #1
 80173d8:	4604      	mov	r4, r0
 80173da:	d158      	bne.n	801748e <_malloc_r+0xf6>
 80173dc:	f8d8 4000 	ldr.w	r4, [r8]
 80173e0:	4627      	mov	r7, r4
 80173e2:	2f00      	cmp	r7, #0
 80173e4:	d143      	bne.n	801746e <_malloc_r+0xd6>
 80173e6:	2c00      	cmp	r4, #0
 80173e8:	d04b      	beq.n	8017482 <_malloc_r+0xea>
 80173ea:	6823      	ldr	r3, [r4, #0]
 80173ec:	4639      	mov	r1, r7
 80173ee:	4630      	mov	r0, r6
 80173f0:	eb04 0903 	add.w	r9, r4, r3
 80173f4:	f000 fdd4 	bl	8017fa0 <_sbrk_r>
 80173f8:	4581      	cmp	r9, r0
 80173fa:	d142      	bne.n	8017482 <_malloc_r+0xea>
 80173fc:	6821      	ldr	r1, [r4, #0]
 80173fe:	1a6d      	subs	r5, r5, r1
 8017400:	4629      	mov	r1, r5
 8017402:	4630      	mov	r0, r6
 8017404:	f7ff ffa6 	bl	8017354 <sbrk_aligned>
 8017408:	3001      	adds	r0, #1
 801740a:	d03a      	beq.n	8017482 <_malloc_r+0xea>
 801740c:	6823      	ldr	r3, [r4, #0]
 801740e:	442b      	add	r3, r5
 8017410:	6023      	str	r3, [r4, #0]
 8017412:	f8d8 3000 	ldr.w	r3, [r8]
 8017416:	685a      	ldr	r2, [r3, #4]
 8017418:	bb62      	cbnz	r2, 8017474 <_malloc_r+0xdc>
 801741a:	f8c8 7000 	str.w	r7, [r8]
 801741e:	e00f      	b.n	8017440 <_malloc_r+0xa8>
 8017420:	6822      	ldr	r2, [r4, #0]
 8017422:	1b52      	subs	r2, r2, r5
 8017424:	d420      	bmi.n	8017468 <_malloc_r+0xd0>
 8017426:	2a0b      	cmp	r2, #11
 8017428:	d917      	bls.n	801745a <_malloc_r+0xc2>
 801742a:	1961      	adds	r1, r4, r5
 801742c:	42a3      	cmp	r3, r4
 801742e:	6025      	str	r5, [r4, #0]
 8017430:	bf18      	it	ne
 8017432:	6059      	strne	r1, [r3, #4]
 8017434:	6863      	ldr	r3, [r4, #4]
 8017436:	bf08      	it	eq
 8017438:	f8c8 1000 	streq.w	r1, [r8]
 801743c:	5162      	str	r2, [r4, r5]
 801743e:	604b      	str	r3, [r1, #4]
 8017440:	4630      	mov	r0, r6
 8017442:	f000 f82f 	bl	80174a4 <__malloc_unlock>
 8017446:	f104 000b 	add.w	r0, r4, #11
 801744a:	1d23      	adds	r3, r4, #4
 801744c:	f020 0007 	bic.w	r0, r0, #7
 8017450:	1ac2      	subs	r2, r0, r3
 8017452:	bf1c      	itt	ne
 8017454:	1a1b      	subne	r3, r3, r0
 8017456:	50a3      	strne	r3, [r4, r2]
 8017458:	e7af      	b.n	80173ba <_malloc_r+0x22>
 801745a:	6862      	ldr	r2, [r4, #4]
 801745c:	42a3      	cmp	r3, r4
 801745e:	bf0c      	ite	eq
 8017460:	f8c8 2000 	streq.w	r2, [r8]
 8017464:	605a      	strne	r2, [r3, #4]
 8017466:	e7eb      	b.n	8017440 <_malloc_r+0xa8>
 8017468:	4623      	mov	r3, r4
 801746a:	6864      	ldr	r4, [r4, #4]
 801746c:	e7ae      	b.n	80173cc <_malloc_r+0x34>
 801746e:	463c      	mov	r4, r7
 8017470:	687f      	ldr	r7, [r7, #4]
 8017472:	e7b6      	b.n	80173e2 <_malloc_r+0x4a>
 8017474:	461a      	mov	r2, r3
 8017476:	685b      	ldr	r3, [r3, #4]
 8017478:	42a3      	cmp	r3, r4
 801747a:	d1fb      	bne.n	8017474 <_malloc_r+0xdc>
 801747c:	2300      	movs	r3, #0
 801747e:	6053      	str	r3, [r2, #4]
 8017480:	e7de      	b.n	8017440 <_malloc_r+0xa8>
 8017482:	230c      	movs	r3, #12
 8017484:	6033      	str	r3, [r6, #0]
 8017486:	4630      	mov	r0, r6
 8017488:	f000 f80c 	bl	80174a4 <__malloc_unlock>
 801748c:	e794      	b.n	80173b8 <_malloc_r+0x20>
 801748e:	6005      	str	r5, [r0, #0]
 8017490:	e7d6      	b.n	8017440 <_malloc_r+0xa8>
 8017492:	bf00      	nop
 8017494:	2400cf6c 	.word	0x2400cf6c

08017498 <__malloc_lock>:
 8017498:	4801      	ldr	r0, [pc, #4]	@ (80174a0 <__malloc_lock+0x8>)
 801749a:	f7ff bed2 	b.w	8017242 <__retarget_lock_acquire_recursive>
 801749e:	bf00      	nop
 80174a0:	2400cf64 	.word	0x2400cf64

080174a4 <__malloc_unlock>:
 80174a4:	4801      	ldr	r0, [pc, #4]	@ (80174ac <__malloc_unlock+0x8>)
 80174a6:	f7ff becd 	b.w	8017244 <__retarget_lock_release_recursive>
 80174aa:	bf00      	nop
 80174ac:	2400cf64 	.word	0x2400cf64

080174b0 <__ssputs_r>:
 80174b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80174b4:	688e      	ldr	r6, [r1, #8]
 80174b6:	461f      	mov	r7, r3
 80174b8:	42be      	cmp	r6, r7
 80174ba:	680b      	ldr	r3, [r1, #0]
 80174bc:	4682      	mov	sl, r0
 80174be:	460c      	mov	r4, r1
 80174c0:	4690      	mov	r8, r2
 80174c2:	d82d      	bhi.n	8017520 <__ssputs_r+0x70>
 80174c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80174c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80174cc:	d026      	beq.n	801751c <__ssputs_r+0x6c>
 80174ce:	6965      	ldr	r5, [r4, #20]
 80174d0:	6909      	ldr	r1, [r1, #16]
 80174d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80174d6:	eba3 0901 	sub.w	r9, r3, r1
 80174da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80174de:	1c7b      	adds	r3, r7, #1
 80174e0:	444b      	add	r3, r9
 80174e2:	106d      	asrs	r5, r5, #1
 80174e4:	429d      	cmp	r5, r3
 80174e6:	bf38      	it	cc
 80174e8:	461d      	movcc	r5, r3
 80174ea:	0553      	lsls	r3, r2, #21
 80174ec:	d527      	bpl.n	801753e <__ssputs_r+0x8e>
 80174ee:	4629      	mov	r1, r5
 80174f0:	f7ff ff52 	bl	8017398 <_malloc_r>
 80174f4:	4606      	mov	r6, r0
 80174f6:	b360      	cbz	r0, 8017552 <__ssputs_r+0xa2>
 80174f8:	6921      	ldr	r1, [r4, #16]
 80174fa:	464a      	mov	r2, r9
 80174fc:	f7ff feab 	bl	8017256 <memcpy>
 8017500:	89a3      	ldrh	r3, [r4, #12]
 8017502:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801750a:	81a3      	strh	r3, [r4, #12]
 801750c:	6126      	str	r6, [r4, #16]
 801750e:	6165      	str	r5, [r4, #20]
 8017510:	444e      	add	r6, r9
 8017512:	eba5 0509 	sub.w	r5, r5, r9
 8017516:	6026      	str	r6, [r4, #0]
 8017518:	60a5      	str	r5, [r4, #8]
 801751a:	463e      	mov	r6, r7
 801751c:	42be      	cmp	r6, r7
 801751e:	d900      	bls.n	8017522 <__ssputs_r+0x72>
 8017520:	463e      	mov	r6, r7
 8017522:	6820      	ldr	r0, [r4, #0]
 8017524:	4632      	mov	r2, r6
 8017526:	4641      	mov	r1, r8
 8017528:	f7ff fd9f 	bl	801706a <memmove>
 801752c:	68a3      	ldr	r3, [r4, #8]
 801752e:	1b9b      	subs	r3, r3, r6
 8017530:	60a3      	str	r3, [r4, #8]
 8017532:	6823      	ldr	r3, [r4, #0]
 8017534:	4433      	add	r3, r6
 8017536:	6023      	str	r3, [r4, #0]
 8017538:	2000      	movs	r0, #0
 801753a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801753e:	462a      	mov	r2, r5
 8017540:	f000 fd45 	bl	8017fce <_realloc_r>
 8017544:	4606      	mov	r6, r0
 8017546:	2800      	cmp	r0, #0
 8017548:	d1e0      	bne.n	801750c <__ssputs_r+0x5c>
 801754a:	6921      	ldr	r1, [r4, #16]
 801754c:	4650      	mov	r0, sl
 801754e:	f7ff feaf 	bl	80172b0 <_free_r>
 8017552:	230c      	movs	r3, #12
 8017554:	f8ca 3000 	str.w	r3, [sl]
 8017558:	89a3      	ldrh	r3, [r4, #12]
 801755a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801755e:	81a3      	strh	r3, [r4, #12]
 8017560:	f04f 30ff 	mov.w	r0, #4294967295
 8017564:	e7e9      	b.n	801753a <__ssputs_r+0x8a>
	...

08017568 <_svfiprintf_r>:
 8017568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801756c:	4698      	mov	r8, r3
 801756e:	898b      	ldrh	r3, [r1, #12]
 8017570:	061b      	lsls	r3, r3, #24
 8017572:	b09d      	sub	sp, #116	@ 0x74
 8017574:	4607      	mov	r7, r0
 8017576:	460d      	mov	r5, r1
 8017578:	4614      	mov	r4, r2
 801757a:	d510      	bpl.n	801759e <_svfiprintf_r+0x36>
 801757c:	690b      	ldr	r3, [r1, #16]
 801757e:	b973      	cbnz	r3, 801759e <_svfiprintf_r+0x36>
 8017580:	2140      	movs	r1, #64	@ 0x40
 8017582:	f7ff ff09 	bl	8017398 <_malloc_r>
 8017586:	6028      	str	r0, [r5, #0]
 8017588:	6128      	str	r0, [r5, #16]
 801758a:	b930      	cbnz	r0, 801759a <_svfiprintf_r+0x32>
 801758c:	230c      	movs	r3, #12
 801758e:	603b      	str	r3, [r7, #0]
 8017590:	f04f 30ff 	mov.w	r0, #4294967295
 8017594:	b01d      	add	sp, #116	@ 0x74
 8017596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801759a:	2340      	movs	r3, #64	@ 0x40
 801759c:	616b      	str	r3, [r5, #20]
 801759e:	2300      	movs	r3, #0
 80175a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80175a2:	2320      	movs	r3, #32
 80175a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80175a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80175ac:	2330      	movs	r3, #48	@ 0x30
 80175ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801774c <_svfiprintf_r+0x1e4>
 80175b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80175b6:	f04f 0901 	mov.w	r9, #1
 80175ba:	4623      	mov	r3, r4
 80175bc:	469a      	mov	sl, r3
 80175be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80175c2:	b10a      	cbz	r2, 80175c8 <_svfiprintf_r+0x60>
 80175c4:	2a25      	cmp	r2, #37	@ 0x25
 80175c6:	d1f9      	bne.n	80175bc <_svfiprintf_r+0x54>
 80175c8:	ebba 0b04 	subs.w	fp, sl, r4
 80175cc:	d00b      	beq.n	80175e6 <_svfiprintf_r+0x7e>
 80175ce:	465b      	mov	r3, fp
 80175d0:	4622      	mov	r2, r4
 80175d2:	4629      	mov	r1, r5
 80175d4:	4638      	mov	r0, r7
 80175d6:	f7ff ff6b 	bl	80174b0 <__ssputs_r>
 80175da:	3001      	adds	r0, #1
 80175dc:	f000 80a7 	beq.w	801772e <_svfiprintf_r+0x1c6>
 80175e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80175e2:	445a      	add	r2, fp
 80175e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80175e6:	f89a 3000 	ldrb.w	r3, [sl]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	f000 809f 	beq.w	801772e <_svfiprintf_r+0x1c6>
 80175f0:	2300      	movs	r3, #0
 80175f2:	f04f 32ff 	mov.w	r2, #4294967295
 80175f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80175fa:	f10a 0a01 	add.w	sl, sl, #1
 80175fe:	9304      	str	r3, [sp, #16]
 8017600:	9307      	str	r3, [sp, #28]
 8017602:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017606:	931a      	str	r3, [sp, #104]	@ 0x68
 8017608:	4654      	mov	r4, sl
 801760a:	2205      	movs	r2, #5
 801760c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017610:	484e      	ldr	r0, [pc, #312]	@ (801774c <_svfiprintf_r+0x1e4>)
 8017612:	f7e8 fe65 	bl	80002e0 <memchr>
 8017616:	9a04      	ldr	r2, [sp, #16]
 8017618:	b9d8      	cbnz	r0, 8017652 <_svfiprintf_r+0xea>
 801761a:	06d0      	lsls	r0, r2, #27
 801761c:	bf44      	itt	mi
 801761e:	2320      	movmi	r3, #32
 8017620:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017624:	0711      	lsls	r1, r2, #28
 8017626:	bf44      	itt	mi
 8017628:	232b      	movmi	r3, #43	@ 0x2b
 801762a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801762e:	f89a 3000 	ldrb.w	r3, [sl]
 8017632:	2b2a      	cmp	r3, #42	@ 0x2a
 8017634:	d015      	beq.n	8017662 <_svfiprintf_r+0xfa>
 8017636:	9a07      	ldr	r2, [sp, #28]
 8017638:	4654      	mov	r4, sl
 801763a:	2000      	movs	r0, #0
 801763c:	f04f 0c0a 	mov.w	ip, #10
 8017640:	4621      	mov	r1, r4
 8017642:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017646:	3b30      	subs	r3, #48	@ 0x30
 8017648:	2b09      	cmp	r3, #9
 801764a:	d94b      	bls.n	80176e4 <_svfiprintf_r+0x17c>
 801764c:	b1b0      	cbz	r0, 801767c <_svfiprintf_r+0x114>
 801764e:	9207      	str	r2, [sp, #28]
 8017650:	e014      	b.n	801767c <_svfiprintf_r+0x114>
 8017652:	eba0 0308 	sub.w	r3, r0, r8
 8017656:	fa09 f303 	lsl.w	r3, r9, r3
 801765a:	4313      	orrs	r3, r2
 801765c:	9304      	str	r3, [sp, #16]
 801765e:	46a2      	mov	sl, r4
 8017660:	e7d2      	b.n	8017608 <_svfiprintf_r+0xa0>
 8017662:	9b03      	ldr	r3, [sp, #12]
 8017664:	1d19      	adds	r1, r3, #4
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	9103      	str	r1, [sp, #12]
 801766a:	2b00      	cmp	r3, #0
 801766c:	bfbb      	ittet	lt
 801766e:	425b      	neglt	r3, r3
 8017670:	f042 0202 	orrlt.w	r2, r2, #2
 8017674:	9307      	strge	r3, [sp, #28]
 8017676:	9307      	strlt	r3, [sp, #28]
 8017678:	bfb8      	it	lt
 801767a:	9204      	strlt	r2, [sp, #16]
 801767c:	7823      	ldrb	r3, [r4, #0]
 801767e:	2b2e      	cmp	r3, #46	@ 0x2e
 8017680:	d10a      	bne.n	8017698 <_svfiprintf_r+0x130>
 8017682:	7863      	ldrb	r3, [r4, #1]
 8017684:	2b2a      	cmp	r3, #42	@ 0x2a
 8017686:	d132      	bne.n	80176ee <_svfiprintf_r+0x186>
 8017688:	9b03      	ldr	r3, [sp, #12]
 801768a:	1d1a      	adds	r2, r3, #4
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	9203      	str	r2, [sp, #12]
 8017690:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017694:	3402      	adds	r4, #2
 8017696:	9305      	str	r3, [sp, #20]
 8017698:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801775c <_svfiprintf_r+0x1f4>
 801769c:	7821      	ldrb	r1, [r4, #0]
 801769e:	2203      	movs	r2, #3
 80176a0:	4650      	mov	r0, sl
 80176a2:	f7e8 fe1d 	bl	80002e0 <memchr>
 80176a6:	b138      	cbz	r0, 80176b8 <_svfiprintf_r+0x150>
 80176a8:	9b04      	ldr	r3, [sp, #16]
 80176aa:	eba0 000a 	sub.w	r0, r0, sl
 80176ae:	2240      	movs	r2, #64	@ 0x40
 80176b0:	4082      	lsls	r2, r0
 80176b2:	4313      	orrs	r3, r2
 80176b4:	3401      	adds	r4, #1
 80176b6:	9304      	str	r3, [sp, #16]
 80176b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80176bc:	4824      	ldr	r0, [pc, #144]	@ (8017750 <_svfiprintf_r+0x1e8>)
 80176be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80176c2:	2206      	movs	r2, #6
 80176c4:	f7e8 fe0c 	bl	80002e0 <memchr>
 80176c8:	2800      	cmp	r0, #0
 80176ca:	d036      	beq.n	801773a <_svfiprintf_r+0x1d2>
 80176cc:	4b21      	ldr	r3, [pc, #132]	@ (8017754 <_svfiprintf_r+0x1ec>)
 80176ce:	bb1b      	cbnz	r3, 8017718 <_svfiprintf_r+0x1b0>
 80176d0:	9b03      	ldr	r3, [sp, #12]
 80176d2:	3307      	adds	r3, #7
 80176d4:	f023 0307 	bic.w	r3, r3, #7
 80176d8:	3308      	adds	r3, #8
 80176da:	9303      	str	r3, [sp, #12]
 80176dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80176de:	4433      	add	r3, r6
 80176e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80176e2:	e76a      	b.n	80175ba <_svfiprintf_r+0x52>
 80176e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80176e8:	460c      	mov	r4, r1
 80176ea:	2001      	movs	r0, #1
 80176ec:	e7a8      	b.n	8017640 <_svfiprintf_r+0xd8>
 80176ee:	2300      	movs	r3, #0
 80176f0:	3401      	adds	r4, #1
 80176f2:	9305      	str	r3, [sp, #20]
 80176f4:	4619      	mov	r1, r3
 80176f6:	f04f 0c0a 	mov.w	ip, #10
 80176fa:	4620      	mov	r0, r4
 80176fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017700:	3a30      	subs	r2, #48	@ 0x30
 8017702:	2a09      	cmp	r2, #9
 8017704:	d903      	bls.n	801770e <_svfiprintf_r+0x1a6>
 8017706:	2b00      	cmp	r3, #0
 8017708:	d0c6      	beq.n	8017698 <_svfiprintf_r+0x130>
 801770a:	9105      	str	r1, [sp, #20]
 801770c:	e7c4      	b.n	8017698 <_svfiprintf_r+0x130>
 801770e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017712:	4604      	mov	r4, r0
 8017714:	2301      	movs	r3, #1
 8017716:	e7f0      	b.n	80176fa <_svfiprintf_r+0x192>
 8017718:	ab03      	add	r3, sp, #12
 801771a:	9300      	str	r3, [sp, #0]
 801771c:	462a      	mov	r2, r5
 801771e:	4b0e      	ldr	r3, [pc, #56]	@ (8017758 <_svfiprintf_r+0x1f0>)
 8017720:	a904      	add	r1, sp, #16
 8017722:	4638      	mov	r0, r7
 8017724:	f3af 8000 	nop.w
 8017728:	1c42      	adds	r2, r0, #1
 801772a:	4606      	mov	r6, r0
 801772c:	d1d6      	bne.n	80176dc <_svfiprintf_r+0x174>
 801772e:	89ab      	ldrh	r3, [r5, #12]
 8017730:	065b      	lsls	r3, r3, #25
 8017732:	f53f af2d 	bmi.w	8017590 <_svfiprintf_r+0x28>
 8017736:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017738:	e72c      	b.n	8017594 <_svfiprintf_r+0x2c>
 801773a:	ab03      	add	r3, sp, #12
 801773c:	9300      	str	r3, [sp, #0]
 801773e:	462a      	mov	r2, r5
 8017740:	4b05      	ldr	r3, [pc, #20]	@ (8017758 <_svfiprintf_r+0x1f0>)
 8017742:	a904      	add	r1, sp, #16
 8017744:	4638      	mov	r0, r7
 8017746:	f000 f9bb 	bl	8017ac0 <_printf_i>
 801774a:	e7ed      	b.n	8017728 <_svfiprintf_r+0x1c0>
 801774c:	0801bb3b 	.word	0x0801bb3b
 8017750:	0801bb45 	.word	0x0801bb45
 8017754:	00000000 	.word	0x00000000
 8017758:	080174b1 	.word	0x080174b1
 801775c:	0801bb41 	.word	0x0801bb41

08017760 <__sfputc_r>:
 8017760:	6893      	ldr	r3, [r2, #8]
 8017762:	3b01      	subs	r3, #1
 8017764:	2b00      	cmp	r3, #0
 8017766:	b410      	push	{r4}
 8017768:	6093      	str	r3, [r2, #8]
 801776a:	da08      	bge.n	801777e <__sfputc_r+0x1e>
 801776c:	6994      	ldr	r4, [r2, #24]
 801776e:	42a3      	cmp	r3, r4
 8017770:	db01      	blt.n	8017776 <__sfputc_r+0x16>
 8017772:	290a      	cmp	r1, #10
 8017774:	d103      	bne.n	801777e <__sfputc_r+0x1e>
 8017776:	f85d 4b04 	ldr.w	r4, [sp], #4
 801777a:	f000 bb7d 	b.w	8017e78 <__swbuf_r>
 801777e:	6813      	ldr	r3, [r2, #0]
 8017780:	1c58      	adds	r0, r3, #1
 8017782:	6010      	str	r0, [r2, #0]
 8017784:	7019      	strb	r1, [r3, #0]
 8017786:	4608      	mov	r0, r1
 8017788:	f85d 4b04 	ldr.w	r4, [sp], #4
 801778c:	4770      	bx	lr

0801778e <__sfputs_r>:
 801778e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017790:	4606      	mov	r6, r0
 8017792:	460f      	mov	r7, r1
 8017794:	4614      	mov	r4, r2
 8017796:	18d5      	adds	r5, r2, r3
 8017798:	42ac      	cmp	r4, r5
 801779a:	d101      	bne.n	80177a0 <__sfputs_r+0x12>
 801779c:	2000      	movs	r0, #0
 801779e:	e007      	b.n	80177b0 <__sfputs_r+0x22>
 80177a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80177a4:	463a      	mov	r2, r7
 80177a6:	4630      	mov	r0, r6
 80177a8:	f7ff ffda 	bl	8017760 <__sfputc_r>
 80177ac:	1c43      	adds	r3, r0, #1
 80177ae:	d1f3      	bne.n	8017798 <__sfputs_r+0xa>
 80177b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080177b4 <_vfiprintf_r>:
 80177b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177b8:	460d      	mov	r5, r1
 80177ba:	b09d      	sub	sp, #116	@ 0x74
 80177bc:	4614      	mov	r4, r2
 80177be:	4698      	mov	r8, r3
 80177c0:	4606      	mov	r6, r0
 80177c2:	b118      	cbz	r0, 80177cc <_vfiprintf_r+0x18>
 80177c4:	6a03      	ldr	r3, [r0, #32]
 80177c6:	b90b      	cbnz	r3, 80177cc <_vfiprintf_r+0x18>
 80177c8:	f7ff fb92 	bl	8016ef0 <__sinit>
 80177cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80177ce:	07d9      	lsls	r1, r3, #31
 80177d0:	d405      	bmi.n	80177de <_vfiprintf_r+0x2a>
 80177d2:	89ab      	ldrh	r3, [r5, #12]
 80177d4:	059a      	lsls	r2, r3, #22
 80177d6:	d402      	bmi.n	80177de <_vfiprintf_r+0x2a>
 80177d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80177da:	f7ff fd32 	bl	8017242 <__retarget_lock_acquire_recursive>
 80177de:	89ab      	ldrh	r3, [r5, #12]
 80177e0:	071b      	lsls	r3, r3, #28
 80177e2:	d501      	bpl.n	80177e8 <_vfiprintf_r+0x34>
 80177e4:	692b      	ldr	r3, [r5, #16]
 80177e6:	b99b      	cbnz	r3, 8017810 <_vfiprintf_r+0x5c>
 80177e8:	4629      	mov	r1, r5
 80177ea:	4630      	mov	r0, r6
 80177ec:	f000 fb82 	bl	8017ef4 <__swsetup_r>
 80177f0:	b170      	cbz	r0, 8017810 <_vfiprintf_r+0x5c>
 80177f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80177f4:	07dc      	lsls	r4, r3, #31
 80177f6:	d504      	bpl.n	8017802 <_vfiprintf_r+0x4e>
 80177f8:	f04f 30ff 	mov.w	r0, #4294967295
 80177fc:	b01d      	add	sp, #116	@ 0x74
 80177fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017802:	89ab      	ldrh	r3, [r5, #12]
 8017804:	0598      	lsls	r0, r3, #22
 8017806:	d4f7      	bmi.n	80177f8 <_vfiprintf_r+0x44>
 8017808:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801780a:	f7ff fd1b 	bl	8017244 <__retarget_lock_release_recursive>
 801780e:	e7f3      	b.n	80177f8 <_vfiprintf_r+0x44>
 8017810:	2300      	movs	r3, #0
 8017812:	9309      	str	r3, [sp, #36]	@ 0x24
 8017814:	2320      	movs	r3, #32
 8017816:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801781a:	f8cd 800c 	str.w	r8, [sp, #12]
 801781e:	2330      	movs	r3, #48	@ 0x30
 8017820:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80179d0 <_vfiprintf_r+0x21c>
 8017824:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017828:	f04f 0901 	mov.w	r9, #1
 801782c:	4623      	mov	r3, r4
 801782e:	469a      	mov	sl, r3
 8017830:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017834:	b10a      	cbz	r2, 801783a <_vfiprintf_r+0x86>
 8017836:	2a25      	cmp	r2, #37	@ 0x25
 8017838:	d1f9      	bne.n	801782e <_vfiprintf_r+0x7a>
 801783a:	ebba 0b04 	subs.w	fp, sl, r4
 801783e:	d00b      	beq.n	8017858 <_vfiprintf_r+0xa4>
 8017840:	465b      	mov	r3, fp
 8017842:	4622      	mov	r2, r4
 8017844:	4629      	mov	r1, r5
 8017846:	4630      	mov	r0, r6
 8017848:	f7ff ffa1 	bl	801778e <__sfputs_r>
 801784c:	3001      	adds	r0, #1
 801784e:	f000 80a7 	beq.w	80179a0 <_vfiprintf_r+0x1ec>
 8017852:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017854:	445a      	add	r2, fp
 8017856:	9209      	str	r2, [sp, #36]	@ 0x24
 8017858:	f89a 3000 	ldrb.w	r3, [sl]
 801785c:	2b00      	cmp	r3, #0
 801785e:	f000 809f 	beq.w	80179a0 <_vfiprintf_r+0x1ec>
 8017862:	2300      	movs	r3, #0
 8017864:	f04f 32ff 	mov.w	r2, #4294967295
 8017868:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801786c:	f10a 0a01 	add.w	sl, sl, #1
 8017870:	9304      	str	r3, [sp, #16]
 8017872:	9307      	str	r3, [sp, #28]
 8017874:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017878:	931a      	str	r3, [sp, #104]	@ 0x68
 801787a:	4654      	mov	r4, sl
 801787c:	2205      	movs	r2, #5
 801787e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017882:	4853      	ldr	r0, [pc, #332]	@ (80179d0 <_vfiprintf_r+0x21c>)
 8017884:	f7e8 fd2c 	bl	80002e0 <memchr>
 8017888:	9a04      	ldr	r2, [sp, #16]
 801788a:	b9d8      	cbnz	r0, 80178c4 <_vfiprintf_r+0x110>
 801788c:	06d1      	lsls	r1, r2, #27
 801788e:	bf44      	itt	mi
 8017890:	2320      	movmi	r3, #32
 8017892:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017896:	0713      	lsls	r3, r2, #28
 8017898:	bf44      	itt	mi
 801789a:	232b      	movmi	r3, #43	@ 0x2b
 801789c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80178a0:	f89a 3000 	ldrb.w	r3, [sl]
 80178a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80178a6:	d015      	beq.n	80178d4 <_vfiprintf_r+0x120>
 80178a8:	9a07      	ldr	r2, [sp, #28]
 80178aa:	4654      	mov	r4, sl
 80178ac:	2000      	movs	r0, #0
 80178ae:	f04f 0c0a 	mov.w	ip, #10
 80178b2:	4621      	mov	r1, r4
 80178b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80178b8:	3b30      	subs	r3, #48	@ 0x30
 80178ba:	2b09      	cmp	r3, #9
 80178bc:	d94b      	bls.n	8017956 <_vfiprintf_r+0x1a2>
 80178be:	b1b0      	cbz	r0, 80178ee <_vfiprintf_r+0x13a>
 80178c0:	9207      	str	r2, [sp, #28]
 80178c2:	e014      	b.n	80178ee <_vfiprintf_r+0x13a>
 80178c4:	eba0 0308 	sub.w	r3, r0, r8
 80178c8:	fa09 f303 	lsl.w	r3, r9, r3
 80178cc:	4313      	orrs	r3, r2
 80178ce:	9304      	str	r3, [sp, #16]
 80178d0:	46a2      	mov	sl, r4
 80178d2:	e7d2      	b.n	801787a <_vfiprintf_r+0xc6>
 80178d4:	9b03      	ldr	r3, [sp, #12]
 80178d6:	1d19      	adds	r1, r3, #4
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	9103      	str	r1, [sp, #12]
 80178dc:	2b00      	cmp	r3, #0
 80178de:	bfbb      	ittet	lt
 80178e0:	425b      	neglt	r3, r3
 80178e2:	f042 0202 	orrlt.w	r2, r2, #2
 80178e6:	9307      	strge	r3, [sp, #28]
 80178e8:	9307      	strlt	r3, [sp, #28]
 80178ea:	bfb8      	it	lt
 80178ec:	9204      	strlt	r2, [sp, #16]
 80178ee:	7823      	ldrb	r3, [r4, #0]
 80178f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80178f2:	d10a      	bne.n	801790a <_vfiprintf_r+0x156>
 80178f4:	7863      	ldrb	r3, [r4, #1]
 80178f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80178f8:	d132      	bne.n	8017960 <_vfiprintf_r+0x1ac>
 80178fa:	9b03      	ldr	r3, [sp, #12]
 80178fc:	1d1a      	adds	r2, r3, #4
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	9203      	str	r2, [sp, #12]
 8017902:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017906:	3402      	adds	r4, #2
 8017908:	9305      	str	r3, [sp, #20]
 801790a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80179e0 <_vfiprintf_r+0x22c>
 801790e:	7821      	ldrb	r1, [r4, #0]
 8017910:	2203      	movs	r2, #3
 8017912:	4650      	mov	r0, sl
 8017914:	f7e8 fce4 	bl	80002e0 <memchr>
 8017918:	b138      	cbz	r0, 801792a <_vfiprintf_r+0x176>
 801791a:	9b04      	ldr	r3, [sp, #16]
 801791c:	eba0 000a 	sub.w	r0, r0, sl
 8017920:	2240      	movs	r2, #64	@ 0x40
 8017922:	4082      	lsls	r2, r0
 8017924:	4313      	orrs	r3, r2
 8017926:	3401      	adds	r4, #1
 8017928:	9304      	str	r3, [sp, #16]
 801792a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801792e:	4829      	ldr	r0, [pc, #164]	@ (80179d4 <_vfiprintf_r+0x220>)
 8017930:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017934:	2206      	movs	r2, #6
 8017936:	f7e8 fcd3 	bl	80002e0 <memchr>
 801793a:	2800      	cmp	r0, #0
 801793c:	d03f      	beq.n	80179be <_vfiprintf_r+0x20a>
 801793e:	4b26      	ldr	r3, [pc, #152]	@ (80179d8 <_vfiprintf_r+0x224>)
 8017940:	bb1b      	cbnz	r3, 801798a <_vfiprintf_r+0x1d6>
 8017942:	9b03      	ldr	r3, [sp, #12]
 8017944:	3307      	adds	r3, #7
 8017946:	f023 0307 	bic.w	r3, r3, #7
 801794a:	3308      	adds	r3, #8
 801794c:	9303      	str	r3, [sp, #12]
 801794e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017950:	443b      	add	r3, r7
 8017952:	9309      	str	r3, [sp, #36]	@ 0x24
 8017954:	e76a      	b.n	801782c <_vfiprintf_r+0x78>
 8017956:	fb0c 3202 	mla	r2, ip, r2, r3
 801795a:	460c      	mov	r4, r1
 801795c:	2001      	movs	r0, #1
 801795e:	e7a8      	b.n	80178b2 <_vfiprintf_r+0xfe>
 8017960:	2300      	movs	r3, #0
 8017962:	3401      	adds	r4, #1
 8017964:	9305      	str	r3, [sp, #20]
 8017966:	4619      	mov	r1, r3
 8017968:	f04f 0c0a 	mov.w	ip, #10
 801796c:	4620      	mov	r0, r4
 801796e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017972:	3a30      	subs	r2, #48	@ 0x30
 8017974:	2a09      	cmp	r2, #9
 8017976:	d903      	bls.n	8017980 <_vfiprintf_r+0x1cc>
 8017978:	2b00      	cmp	r3, #0
 801797a:	d0c6      	beq.n	801790a <_vfiprintf_r+0x156>
 801797c:	9105      	str	r1, [sp, #20]
 801797e:	e7c4      	b.n	801790a <_vfiprintf_r+0x156>
 8017980:	fb0c 2101 	mla	r1, ip, r1, r2
 8017984:	4604      	mov	r4, r0
 8017986:	2301      	movs	r3, #1
 8017988:	e7f0      	b.n	801796c <_vfiprintf_r+0x1b8>
 801798a:	ab03      	add	r3, sp, #12
 801798c:	9300      	str	r3, [sp, #0]
 801798e:	462a      	mov	r2, r5
 8017990:	4b12      	ldr	r3, [pc, #72]	@ (80179dc <_vfiprintf_r+0x228>)
 8017992:	a904      	add	r1, sp, #16
 8017994:	4630      	mov	r0, r6
 8017996:	f3af 8000 	nop.w
 801799a:	4607      	mov	r7, r0
 801799c:	1c78      	adds	r0, r7, #1
 801799e:	d1d6      	bne.n	801794e <_vfiprintf_r+0x19a>
 80179a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80179a2:	07d9      	lsls	r1, r3, #31
 80179a4:	d405      	bmi.n	80179b2 <_vfiprintf_r+0x1fe>
 80179a6:	89ab      	ldrh	r3, [r5, #12]
 80179a8:	059a      	lsls	r2, r3, #22
 80179aa:	d402      	bmi.n	80179b2 <_vfiprintf_r+0x1fe>
 80179ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80179ae:	f7ff fc49 	bl	8017244 <__retarget_lock_release_recursive>
 80179b2:	89ab      	ldrh	r3, [r5, #12]
 80179b4:	065b      	lsls	r3, r3, #25
 80179b6:	f53f af1f 	bmi.w	80177f8 <_vfiprintf_r+0x44>
 80179ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80179bc:	e71e      	b.n	80177fc <_vfiprintf_r+0x48>
 80179be:	ab03      	add	r3, sp, #12
 80179c0:	9300      	str	r3, [sp, #0]
 80179c2:	462a      	mov	r2, r5
 80179c4:	4b05      	ldr	r3, [pc, #20]	@ (80179dc <_vfiprintf_r+0x228>)
 80179c6:	a904      	add	r1, sp, #16
 80179c8:	4630      	mov	r0, r6
 80179ca:	f000 f879 	bl	8017ac0 <_printf_i>
 80179ce:	e7e4      	b.n	801799a <_vfiprintf_r+0x1e6>
 80179d0:	0801bb3b 	.word	0x0801bb3b
 80179d4:	0801bb45 	.word	0x0801bb45
 80179d8:	00000000 	.word	0x00000000
 80179dc:	0801778f 	.word	0x0801778f
 80179e0:	0801bb41 	.word	0x0801bb41

080179e4 <_printf_common>:
 80179e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179e8:	4616      	mov	r6, r2
 80179ea:	4698      	mov	r8, r3
 80179ec:	688a      	ldr	r2, [r1, #8]
 80179ee:	690b      	ldr	r3, [r1, #16]
 80179f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80179f4:	4293      	cmp	r3, r2
 80179f6:	bfb8      	it	lt
 80179f8:	4613      	movlt	r3, r2
 80179fa:	6033      	str	r3, [r6, #0]
 80179fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017a00:	4607      	mov	r7, r0
 8017a02:	460c      	mov	r4, r1
 8017a04:	b10a      	cbz	r2, 8017a0a <_printf_common+0x26>
 8017a06:	3301      	adds	r3, #1
 8017a08:	6033      	str	r3, [r6, #0]
 8017a0a:	6823      	ldr	r3, [r4, #0]
 8017a0c:	0699      	lsls	r1, r3, #26
 8017a0e:	bf42      	ittt	mi
 8017a10:	6833      	ldrmi	r3, [r6, #0]
 8017a12:	3302      	addmi	r3, #2
 8017a14:	6033      	strmi	r3, [r6, #0]
 8017a16:	6825      	ldr	r5, [r4, #0]
 8017a18:	f015 0506 	ands.w	r5, r5, #6
 8017a1c:	d106      	bne.n	8017a2c <_printf_common+0x48>
 8017a1e:	f104 0a19 	add.w	sl, r4, #25
 8017a22:	68e3      	ldr	r3, [r4, #12]
 8017a24:	6832      	ldr	r2, [r6, #0]
 8017a26:	1a9b      	subs	r3, r3, r2
 8017a28:	42ab      	cmp	r3, r5
 8017a2a:	dc26      	bgt.n	8017a7a <_printf_common+0x96>
 8017a2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017a30:	6822      	ldr	r2, [r4, #0]
 8017a32:	3b00      	subs	r3, #0
 8017a34:	bf18      	it	ne
 8017a36:	2301      	movne	r3, #1
 8017a38:	0692      	lsls	r2, r2, #26
 8017a3a:	d42b      	bmi.n	8017a94 <_printf_common+0xb0>
 8017a3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017a40:	4641      	mov	r1, r8
 8017a42:	4638      	mov	r0, r7
 8017a44:	47c8      	blx	r9
 8017a46:	3001      	adds	r0, #1
 8017a48:	d01e      	beq.n	8017a88 <_printf_common+0xa4>
 8017a4a:	6823      	ldr	r3, [r4, #0]
 8017a4c:	6922      	ldr	r2, [r4, #16]
 8017a4e:	f003 0306 	and.w	r3, r3, #6
 8017a52:	2b04      	cmp	r3, #4
 8017a54:	bf02      	ittt	eq
 8017a56:	68e5      	ldreq	r5, [r4, #12]
 8017a58:	6833      	ldreq	r3, [r6, #0]
 8017a5a:	1aed      	subeq	r5, r5, r3
 8017a5c:	68a3      	ldr	r3, [r4, #8]
 8017a5e:	bf0c      	ite	eq
 8017a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017a64:	2500      	movne	r5, #0
 8017a66:	4293      	cmp	r3, r2
 8017a68:	bfc4      	itt	gt
 8017a6a:	1a9b      	subgt	r3, r3, r2
 8017a6c:	18ed      	addgt	r5, r5, r3
 8017a6e:	2600      	movs	r6, #0
 8017a70:	341a      	adds	r4, #26
 8017a72:	42b5      	cmp	r5, r6
 8017a74:	d11a      	bne.n	8017aac <_printf_common+0xc8>
 8017a76:	2000      	movs	r0, #0
 8017a78:	e008      	b.n	8017a8c <_printf_common+0xa8>
 8017a7a:	2301      	movs	r3, #1
 8017a7c:	4652      	mov	r2, sl
 8017a7e:	4641      	mov	r1, r8
 8017a80:	4638      	mov	r0, r7
 8017a82:	47c8      	blx	r9
 8017a84:	3001      	adds	r0, #1
 8017a86:	d103      	bne.n	8017a90 <_printf_common+0xac>
 8017a88:	f04f 30ff 	mov.w	r0, #4294967295
 8017a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a90:	3501      	adds	r5, #1
 8017a92:	e7c6      	b.n	8017a22 <_printf_common+0x3e>
 8017a94:	18e1      	adds	r1, r4, r3
 8017a96:	1c5a      	adds	r2, r3, #1
 8017a98:	2030      	movs	r0, #48	@ 0x30
 8017a9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017a9e:	4422      	add	r2, r4
 8017aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017aa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017aa8:	3302      	adds	r3, #2
 8017aaa:	e7c7      	b.n	8017a3c <_printf_common+0x58>
 8017aac:	2301      	movs	r3, #1
 8017aae:	4622      	mov	r2, r4
 8017ab0:	4641      	mov	r1, r8
 8017ab2:	4638      	mov	r0, r7
 8017ab4:	47c8      	blx	r9
 8017ab6:	3001      	adds	r0, #1
 8017ab8:	d0e6      	beq.n	8017a88 <_printf_common+0xa4>
 8017aba:	3601      	adds	r6, #1
 8017abc:	e7d9      	b.n	8017a72 <_printf_common+0x8e>
	...

08017ac0 <_printf_i>:
 8017ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017ac4:	7e0f      	ldrb	r7, [r1, #24]
 8017ac6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017ac8:	2f78      	cmp	r7, #120	@ 0x78
 8017aca:	4691      	mov	r9, r2
 8017acc:	4680      	mov	r8, r0
 8017ace:	460c      	mov	r4, r1
 8017ad0:	469a      	mov	sl, r3
 8017ad2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017ad6:	d807      	bhi.n	8017ae8 <_printf_i+0x28>
 8017ad8:	2f62      	cmp	r7, #98	@ 0x62
 8017ada:	d80a      	bhi.n	8017af2 <_printf_i+0x32>
 8017adc:	2f00      	cmp	r7, #0
 8017ade:	f000 80d1 	beq.w	8017c84 <_printf_i+0x1c4>
 8017ae2:	2f58      	cmp	r7, #88	@ 0x58
 8017ae4:	f000 80b8 	beq.w	8017c58 <_printf_i+0x198>
 8017ae8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017aec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017af0:	e03a      	b.n	8017b68 <_printf_i+0xa8>
 8017af2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017af6:	2b15      	cmp	r3, #21
 8017af8:	d8f6      	bhi.n	8017ae8 <_printf_i+0x28>
 8017afa:	a101      	add	r1, pc, #4	@ (adr r1, 8017b00 <_printf_i+0x40>)
 8017afc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017b00:	08017b59 	.word	0x08017b59
 8017b04:	08017b6d 	.word	0x08017b6d
 8017b08:	08017ae9 	.word	0x08017ae9
 8017b0c:	08017ae9 	.word	0x08017ae9
 8017b10:	08017ae9 	.word	0x08017ae9
 8017b14:	08017ae9 	.word	0x08017ae9
 8017b18:	08017b6d 	.word	0x08017b6d
 8017b1c:	08017ae9 	.word	0x08017ae9
 8017b20:	08017ae9 	.word	0x08017ae9
 8017b24:	08017ae9 	.word	0x08017ae9
 8017b28:	08017ae9 	.word	0x08017ae9
 8017b2c:	08017c6b 	.word	0x08017c6b
 8017b30:	08017b97 	.word	0x08017b97
 8017b34:	08017c25 	.word	0x08017c25
 8017b38:	08017ae9 	.word	0x08017ae9
 8017b3c:	08017ae9 	.word	0x08017ae9
 8017b40:	08017c8d 	.word	0x08017c8d
 8017b44:	08017ae9 	.word	0x08017ae9
 8017b48:	08017b97 	.word	0x08017b97
 8017b4c:	08017ae9 	.word	0x08017ae9
 8017b50:	08017ae9 	.word	0x08017ae9
 8017b54:	08017c2d 	.word	0x08017c2d
 8017b58:	6833      	ldr	r3, [r6, #0]
 8017b5a:	1d1a      	adds	r2, r3, #4
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	6032      	str	r2, [r6, #0]
 8017b60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017b64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017b68:	2301      	movs	r3, #1
 8017b6a:	e09c      	b.n	8017ca6 <_printf_i+0x1e6>
 8017b6c:	6833      	ldr	r3, [r6, #0]
 8017b6e:	6820      	ldr	r0, [r4, #0]
 8017b70:	1d19      	adds	r1, r3, #4
 8017b72:	6031      	str	r1, [r6, #0]
 8017b74:	0606      	lsls	r6, r0, #24
 8017b76:	d501      	bpl.n	8017b7c <_printf_i+0xbc>
 8017b78:	681d      	ldr	r5, [r3, #0]
 8017b7a:	e003      	b.n	8017b84 <_printf_i+0xc4>
 8017b7c:	0645      	lsls	r5, r0, #25
 8017b7e:	d5fb      	bpl.n	8017b78 <_printf_i+0xb8>
 8017b80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017b84:	2d00      	cmp	r5, #0
 8017b86:	da03      	bge.n	8017b90 <_printf_i+0xd0>
 8017b88:	232d      	movs	r3, #45	@ 0x2d
 8017b8a:	426d      	negs	r5, r5
 8017b8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017b90:	4858      	ldr	r0, [pc, #352]	@ (8017cf4 <_printf_i+0x234>)
 8017b92:	230a      	movs	r3, #10
 8017b94:	e011      	b.n	8017bba <_printf_i+0xfa>
 8017b96:	6821      	ldr	r1, [r4, #0]
 8017b98:	6833      	ldr	r3, [r6, #0]
 8017b9a:	0608      	lsls	r0, r1, #24
 8017b9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8017ba0:	d402      	bmi.n	8017ba8 <_printf_i+0xe8>
 8017ba2:	0649      	lsls	r1, r1, #25
 8017ba4:	bf48      	it	mi
 8017ba6:	b2ad      	uxthmi	r5, r5
 8017ba8:	2f6f      	cmp	r7, #111	@ 0x6f
 8017baa:	4852      	ldr	r0, [pc, #328]	@ (8017cf4 <_printf_i+0x234>)
 8017bac:	6033      	str	r3, [r6, #0]
 8017bae:	bf14      	ite	ne
 8017bb0:	230a      	movne	r3, #10
 8017bb2:	2308      	moveq	r3, #8
 8017bb4:	2100      	movs	r1, #0
 8017bb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017bba:	6866      	ldr	r6, [r4, #4]
 8017bbc:	60a6      	str	r6, [r4, #8]
 8017bbe:	2e00      	cmp	r6, #0
 8017bc0:	db05      	blt.n	8017bce <_printf_i+0x10e>
 8017bc2:	6821      	ldr	r1, [r4, #0]
 8017bc4:	432e      	orrs	r6, r5
 8017bc6:	f021 0104 	bic.w	r1, r1, #4
 8017bca:	6021      	str	r1, [r4, #0]
 8017bcc:	d04b      	beq.n	8017c66 <_printf_i+0x1a6>
 8017bce:	4616      	mov	r6, r2
 8017bd0:	fbb5 f1f3 	udiv	r1, r5, r3
 8017bd4:	fb03 5711 	mls	r7, r3, r1, r5
 8017bd8:	5dc7      	ldrb	r7, [r0, r7]
 8017bda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017bde:	462f      	mov	r7, r5
 8017be0:	42bb      	cmp	r3, r7
 8017be2:	460d      	mov	r5, r1
 8017be4:	d9f4      	bls.n	8017bd0 <_printf_i+0x110>
 8017be6:	2b08      	cmp	r3, #8
 8017be8:	d10b      	bne.n	8017c02 <_printf_i+0x142>
 8017bea:	6823      	ldr	r3, [r4, #0]
 8017bec:	07df      	lsls	r7, r3, #31
 8017bee:	d508      	bpl.n	8017c02 <_printf_i+0x142>
 8017bf0:	6923      	ldr	r3, [r4, #16]
 8017bf2:	6861      	ldr	r1, [r4, #4]
 8017bf4:	4299      	cmp	r1, r3
 8017bf6:	bfde      	ittt	le
 8017bf8:	2330      	movle	r3, #48	@ 0x30
 8017bfa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017bfe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017c02:	1b92      	subs	r2, r2, r6
 8017c04:	6122      	str	r2, [r4, #16]
 8017c06:	f8cd a000 	str.w	sl, [sp]
 8017c0a:	464b      	mov	r3, r9
 8017c0c:	aa03      	add	r2, sp, #12
 8017c0e:	4621      	mov	r1, r4
 8017c10:	4640      	mov	r0, r8
 8017c12:	f7ff fee7 	bl	80179e4 <_printf_common>
 8017c16:	3001      	adds	r0, #1
 8017c18:	d14a      	bne.n	8017cb0 <_printf_i+0x1f0>
 8017c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8017c1e:	b004      	add	sp, #16
 8017c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c24:	6823      	ldr	r3, [r4, #0]
 8017c26:	f043 0320 	orr.w	r3, r3, #32
 8017c2a:	6023      	str	r3, [r4, #0]
 8017c2c:	4832      	ldr	r0, [pc, #200]	@ (8017cf8 <_printf_i+0x238>)
 8017c2e:	2778      	movs	r7, #120	@ 0x78
 8017c30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017c34:	6823      	ldr	r3, [r4, #0]
 8017c36:	6831      	ldr	r1, [r6, #0]
 8017c38:	061f      	lsls	r7, r3, #24
 8017c3a:	f851 5b04 	ldr.w	r5, [r1], #4
 8017c3e:	d402      	bmi.n	8017c46 <_printf_i+0x186>
 8017c40:	065f      	lsls	r7, r3, #25
 8017c42:	bf48      	it	mi
 8017c44:	b2ad      	uxthmi	r5, r5
 8017c46:	6031      	str	r1, [r6, #0]
 8017c48:	07d9      	lsls	r1, r3, #31
 8017c4a:	bf44      	itt	mi
 8017c4c:	f043 0320 	orrmi.w	r3, r3, #32
 8017c50:	6023      	strmi	r3, [r4, #0]
 8017c52:	b11d      	cbz	r5, 8017c5c <_printf_i+0x19c>
 8017c54:	2310      	movs	r3, #16
 8017c56:	e7ad      	b.n	8017bb4 <_printf_i+0xf4>
 8017c58:	4826      	ldr	r0, [pc, #152]	@ (8017cf4 <_printf_i+0x234>)
 8017c5a:	e7e9      	b.n	8017c30 <_printf_i+0x170>
 8017c5c:	6823      	ldr	r3, [r4, #0]
 8017c5e:	f023 0320 	bic.w	r3, r3, #32
 8017c62:	6023      	str	r3, [r4, #0]
 8017c64:	e7f6      	b.n	8017c54 <_printf_i+0x194>
 8017c66:	4616      	mov	r6, r2
 8017c68:	e7bd      	b.n	8017be6 <_printf_i+0x126>
 8017c6a:	6833      	ldr	r3, [r6, #0]
 8017c6c:	6825      	ldr	r5, [r4, #0]
 8017c6e:	6961      	ldr	r1, [r4, #20]
 8017c70:	1d18      	adds	r0, r3, #4
 8017c72:	6030      	str	r0, [r6, #0]
 8017c74:	062e      	lsls	r6, r5, #24
 8017c76:	681b      	ldr	r3, [r3, #0]
 8017c78:	d501      	bpl.n	8017c7e <_printf_i+0x1be>
 8017c7a:	6019      	str	r1, [r3, #0]
 8017c7c:	e002      	b.n	8017c84 <_printf_i+0x1c4>
 8017c7e:	0668      	lsls	r0, r5, #25
 8017c80:	d5fb      	bpl.n	8017c7a <_printf_i+0x1ba>
 8017c82:	8019      	strh	r1, [r3, #0]
 8017c84:	2300      	movs	r3, #0
 8017c86:	6123      	str	r3, [r4, #16]
 8017c88:	4616      	mov	r6, r2
 8017c8a:	e7bc      	b.n	8017c06 <_printf_i+0x146>
 8017c8c:	6833      	ldr	r3, [r6, #0]
 8017c8e:	1d1a      	adds	r2, r3, #4
 8017c90:	6032      	str	r2, [r6, #0]
 8017c92:	681e      	ldr	r6, [r3, #0]
 8017c94:	6862      	ldr	r2, [r4, #4]
 8017c96:	2100      	movs	r1, #0
 8017c98:	4630      	mov	r0, r6
 8017c9a:	f7e8 fb21 	bl	80002e0 <memchr>
 8017c9e:	b108      	cbz	r0, 8017ca4 <_printf_i+0x1e4>
 8017ca0:	1b80      	subs	r0, r0, r6
 8017ca2:	6060      	str	r0, [r4, #4]
 8017ca4:	6863      	ldr	r3, [r4, #4]
 8017ca6:	6123      	str	r3, [r4, #16]
 8017ca8:	2300      	movs	r3, #0
 8017caa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017cae:	e7aa      	b.n	8017c06 <_printf_i+0x146>
 8017cb0:	6923      	ldr	r3, [r4, #16]
 8017cb2:	4632      	mov	r2, r6
 8017cb4:	4649      	mov	r1, r9
 8017cb6:	4640      	mov	r0, r8
 8017cb8:	47d0      	blx	sl
 8017cba:	3001      	adds	r0, #1
 8017cbc:	d0ad      	beq.n	8017c1a <_printf_i+0x15a>
 8017cbe:	6823      	ldr	r3, [r4, #0]
 8017cc0:	079b      	lsls	r3, r3, #30
 8017cc2:	d413      	bmi.n	8017cec <_printf_i+0x22c>
 8017cc4:	68e0      	ldr	r0, [r4, #12]
 8017cc6:	9b03      	ldr	r3, [sp, #12]
 8017cc8:	4298      	cmp	r0, r3
 8017cca:	bfb8      	it	lt
 8017ccc:	4618      	movlt	r0, r3
 8017cce:	e7a6      	b.n	8017c1e <_printf_i+0x15e>
 8017cd0:	2301      	movs	r3, #1
 8017cd2:	4632      	mov	r2, r6
 8017cd4:	4649      	mov	r1, r9
 8017cd6:	4640      	mov	r0, r8
 8017cd8:	47d0      	blx	sl
 8017cda:	3001      	adds	r0, #1
 8017cdc:	d09d      	beq.n	8017c1a <_printf_i+0x15a>
 8017cde:	3501      	adds	r5, #1
 8017ce0:	68e3      	ldr	r3, [r4, #12]
 8017ce2:	9903      	ldr	r1, [sp, #12]
 8017ce4:	1a5b      	subs	r3, r3, r1
 8017ce6:	42ab      	cmp	r3, r5
 8017ce8:	dcf2      	bgt.n	8017cd0 <_printf_i+0x210>
 8017cea:	e7eb      	b.n	8017cc4 <_printf_i+0x204>
 8017cec:	2500      	movs	r5, #0
 8017cee:	f104 0619 	add.w	r6, r4, #25
 8017cf2:	e7f5      	b.n	8017ce0 <_printf_i+0x220>
 8017cf4:	0801bb4c 	.word	0x0801bb4c
 8017cf8:	0801bb5d 	.word	0x0801bb5d

08017cfc <__sflush_r>:
 8017cfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d04:	0716      	lsls	r6, r2, #28
 8017d06:	4605      	mov	r5, r0
 8017d08:	460c      	mov	r4, r1
 8017d0a:	d454      	bmi.n	8017db6 <__sflush_r+0xba>
 8017d0c:	684b      	ldr	r3, [r1, #4]
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	dc02      	bgt.n	8017d18 <__sflush_r+0x1c>
 8017d12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	dd48      	ble.n	8017daa <__sflush_r+0xae>
 8017d18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017d1a:	2e00      	cmp	r6, #0
 8017d1c:	d045      	beq.n	8017daa <__sflush_r+0xae>
 8017d1e:	2300      	movs	r3, #0
 8017d20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017d24:	682f      	ldr	r7, [r5, #0]
 8017d26:	6a21      	ldr	r1, [r4, #32]
 8017d28:	602b      	str	r3, [r5, #0]
 8017d2a:	d030      	beq.n	8017d8e <__sflush_r+0x92>
 8017d2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017d2e:	89a3      	ldrh	r3, [r4, #12]
 8017d30:	0759      	lsls	r1, r3, #29
 8017d32:	d505      	bpl.n	8017d40 <__sflush_r+0x44>
 8017d34:	6863      	ldr	r3, [r4, #4]
 8017d36:	1ad2      	subs	r2, r2, r3
 8017d38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017d3a:	b10b      	cbz	r3, 8017d40 <__sflush_r+0x44>
 8017d3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017d3e:	1ad2      	subs	r2, r2, r3
 8017d40:	2300      	movs	r3, #0
 8017d42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017d44:	6a21      	ldr	r1, [r4, #32]
 8017d46:	4628      	mov	r0, r5
 8017d48:	47b0      	blx	r6
 8017d4a:	1c43      	adds	r3, r0, #1
 8017d4c:	89a3      	ldrh	r3, [r4, #12]
 8017d4e:	d106      	bne.n	8017d5e <__sflush_r+0x62>
 8017d50:	6829      	ldr	r1, [r5, #0]
 8017d52:	291d      	cmp	r1, #29
 8017d54:	d82b      	bhi.n	8017dae <__sflush_r+0xb2>
 8017d56:	4a2a      	ldr	r2, [pc, #168]	@ (8017e00 <__sflush_r+0x104>)
 8017d58:	40ca      	lsrs	r2, r1
 8017d5a:	07d6      	lsls	r6, r2, #31
 8017d5c:	d527      	bpl.n	8017dae <__sflush_r+0xb2>
 8017d5e:	2200      	movs	r2, #0
 8017d60:	6062      	str	r2, [r4, #4]
 8017d62:	04d9      	lsls	r1, r3, #19
 8017d64:	6922      	ldr	r2, [r4, #16]
 8017d66:	6022      	str	r2, [r4, #0]
 8017d68:	d504      	bpl.n	8017d74 <__sflush_r+0x78>
 8017d6a:	1c42      	adds	r2, r0, #1
 8017d6c:	d101      	bne.n	8017d72 <__sflush_r+0x76>
 8017d6e:	682b      	ldr	r3, [r5, #0]
 8017d70:	b903      	cbnz	r3, 8017d74 <__sflush_r+0x78>
 8017d72:	6560      	str	r0, [r4, #84]	@ 0x54
 8017d74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017d76:	602f      	str	r7, [r5, #0]
 8017d78:	b1b9      	cbz	r1, 8017daa <__sflush_r+0xae>
 8017d7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017d7e:	4299      	cmp	r1, r3
 8017d80:	d002      	beq.n	8017d88 <__sflush_r+0x8c>
 8017d82:	4628      	mov	r0, r5
 8017d84:	f7ff fa94 	bl	80172b0 <_free_r>
 8017d88:	2300      	movs	r3, #0
 8017d8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8017d8c:	e00d      	b.n	8017daa <__sflush_r+0xae>
 8017d8e:	2301      	movs	r3, #1
 8017d90:	4628      	mov	r0, r5
 8017d92:	47b0      	blx	r6
 8017d94:	4602      	mov	r2, r0
 8017d96:	1c50      	adds	r0, r2, #1
 8017d98:	d1c9      	bne.n	8017d2e <__sflush_r+0x32>
 8017d9a:	682b      	ldr	r3, [r5, #0]
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d0c6      	beq.n	8017d2e <__sflush_r+0x32>
 8017da0:	2b1d      	cmp	r3, #29
 8017da2:	d001      	beq.n	8017da8 <__sflush_r+0xac>
 8017da4:	2b16      	cmp	r3, #22
 8017da6:	d11e      	bne.n	8017de6 <__sflush_r+0xea>
 8017da8:	602f      	str	r7, [r5, #0]
 8017daa:	2000      	movs	r0, #0
 8017dac:	e022      	b.n	8017df4 <__sflush_r+0xf8>
 8017dae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017db2:	b21b      	sxth	r3, r3
 8017db4:	e01b      	b.n	8017dee <__sflush_r+0xf2>
 8017db6:	690f      	ldr	r7, [r1, #16]
 8017db8:	2f00      	cmp	r7, #0
 8017dba:	d0f6      	beq.n	8017daa <__sflush_r+0xae>
 8017dbc:	0793      	lsls	r3, r2, #30
 8017dbe:	680e      	ldr	r6, [r1, #0]
 8017dc0:	bf08      	it	eq
 8017dc2:	694b      	ldreq	r3, [r1, #20]
 8017dc4:	600f      	str	r7, [r1, #0]
 8017dc6:	bf18      	it	ne
 8017dc8:	2300      	movne	r3, #0
 8017dca:	eba6 0807 	sub.w	r8, r6, r7
 8017dce:	608b      	str	r3, [r1, #8]
 8017dd0:	f1b8 0f00 	cmp.w	r8, #0
 8017dd4:	dde9      	ble.n	8017daa <__sflush_r+0xae>
 8017dd6:	6a21      	ldr	r1, [r4, #32]
 8017dd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017dda:	4643      	mov	r3, r8
 8017ddc:	463a      	mov	r2, r7
 8017dde:	4628      	mov	r0, r5
 8017de0:	47b0      	blx	r6
 8017de2:	2800      	cmp	r0, #0
 8017de4:	dc08      	bgt.n	8017df8 <__sflush_r+0xfc>
 8017de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017dea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017dee:	81a3      	strh	r3, [r4, #12]
 8017df0:	f04f 30ff 	mov.w	r0, #4294967295
 8017df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017df8:	4407      	add	r7, r0
 8017dfa:	eba8 0800 	sub.w	r8, r8, r0
 8017dfe:	e7e7      	b.n	8017dd0 <__sflush_r+0xd4>
 8017e00:	20400001 	.word	0x20400001

08017e04 <_fflush_r>:
 8017e04:	b538      	push	{r3, r4, r5, lr}
 8017e06:	690b      	ldr	r3, [r1, #16]
 8017e08:	4605      	mov	r5, r0
 8017e0a:	460c      	mov	r4, r1
 8017e0c:	b913      	cbnz	r3, 8017e14 <_fflush_r+0x10>
 8017e0e:	2500      	movs	r5, #0
 8017e10:	4628      	mov	r0, r5
 8017e12:	bd38      	pop	{r3, r4, r5, pc}
 8017e14:	b118      	cbz	r0, 8017e1e <_fflush_r+0x1a>
 8017e16:	6a03      	ldr	r3, [r0, #32]
 8017e18:	b90b      	cbnz	r3, 8017e1e <_fflush_r+0x1a>
 8017e1a:	f7ff f869 	bl	8016ef0 <__sinit>
 8017e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d0f3      	beq.n	8017e0e <_fflush_r+0xa>
 8017e26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017e28:	07d0      	lsls	r0, r2, #31
 8017e2a:	d404      	bmi.n	8017e36 <_fflush_r+0x32>
 8017e2c:	0599      	lsls	r1, r3, #22
 8017e2e:	d402      	bmi.n	8017e36 <_fflush_r+0x32>
 8017e30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017e32:	f7ff fa06 	bl	8017242 <__retarget_lock_acquire_recursive>
 8017e36:	4628      	mov	r0, r5
 8017e38:	4621      	mov	r1, r4
 8017e3a:	f7ff ff5f 	bl	8017cfc <__sflush_r>
 8017e3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017e40:	07da      	lsls	r2, r3, #31
 8017e42:	4605      	mov	r5, r0
 8017e44:	d4e4      	bmi.n	8017e10 <_fflush_r+0xc>
 8017e46:	89a3      	ldrh	r3, [r4, #12]
 8017e48:	059b      	lsls	r3, r3, #22
 8017e4a:	d4e1      	bmi.n	8017e10 <_fflush_r+0xc>
 8017e4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017e4e:	f7ff f9f9 	bl	8017244 <__retarget_lock_release_recursive>
 8017e52:	e7dd      	b.n	8017e10 <_fflush_r+0xc>

08017e54 <fiprintf>:
 8017e54:	b40e      	push	{r1, r2, r3}
 8017e56:	b503      	push	{r0, r1, lr}
 8017e58:	4601      	mov	r1, r0
 8017e5a:	ab03      	add	r3, sp, #12
 8017e5c:	4805      	ldr	r0, [pc, #20]	@ (8017e74 <fiprintf+0x20>)
 8017e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e62:	6800      	ldr	r0, [r0, #0]
 8017e64:	9301      	str	r3, [sp, #4]
 8017e66:	f7ff fca5 	bl	80177b4 <_vfiprintf_r>
 8017e6a:	b002      	add	sp, #8
 8017e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017e70:	b003      	add	sp, #12
 8017e72:	4770      	bx	lr
 8017e74:	24000040 	.word	0x24000040

08017e78 <__swbuf_r>:
 8017e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e7a:	460e      	mov	r6, r1
 8017e7c:	4614      	mov	r4, r2
 8017e7e:	4605      	mov	r5, r0
 8017e80:	b118      	cbz	r0, 8017e8a <__swbuf_r+0x12>
 8017e82:	6a03      	ldr	r3, [r0, #32]
 8017e84:	b90b      	cbnz	r3, 8017e8a <__swbuf_r+0x12>
 8017e86:	f7ff f833 	bl	8016ef0 <__sinit>
 8017e8a:	69a3      	ldr	r3, [r4, #24]
 8017e8c:	60a3      	str	r3, [r4, #8]
 8017e8e:	89a3      	ldrh	r3, [r4, #12]
 8017e90:	071a      	lsls	r2, r3, #28
 8017e92:	d501      	bpl.n	8017e98 <__swbuf_r+0x20>
 8017e94:	6923      	ldr	r3, [r4, #16]
 8017e96:	b943      	cbnz	r3, 8017eaa <__swbuf_r+0x32>
 8017e98:	4621      	mov	r1, r4
 8017e9a:	4628      	mov	r0, r5
 8017e9c:	f000 f82a 	bl	8017ef4 <__swsetup_r>
 8017ea0:	b118      	cbz	r0, 8017eaa <__swbuf_r+0x32>
 8017ea2:	f04f 37ff 	mov.w	r7, #4294967295
 8017ea6:	4638      	mov	r0, r7
 8017ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017eaa:	6823      	ldr	r3, [r4, #0]
 8017eac:	6922      	ldr	r2, [r4, #16]
 8017eae:	1a98      	subs	r0, r3, r2
 8017eb0:	6963      	ldr	r3, [r4, #20]
 8017eb2:	b2f6      	uxtb	r6, r6
 8017eb4:	4283      	cmp	r3, r0
 8017eb6:	4637      	mov	r7, r6
 8017eb8:	dc05      	bgt.n	8017ec6 <__swbuf_r+0x4e>
 8017eba:	4621      	mov	r1, r4
 8017ebc:	4628      	mov	r0, r5
 8017ebe:	f7ff ffa1 	bl	8017e04 <_fflush_r>
 8017ec2:	2800      	cmp	r0, #0
 8017ec4:	d1ed      	bne.n	8017ea2 <__swbuf_r+0x2a>
 8017ec6:	68a3      	ldr	r3, [r4, #8]
 8017ec8:	3b01      	subs	r3, #1
 8017eca:	60a3      	str	r3, [r4, #8]
 8017ecc:	6823      	ldr	r3, [r4, #0]
 8017ece:	1c5a      	adds	r2, r3, #1
 8017ed0:	6022      	str	r2, [r4, #0]
 8017ed2:	701e      	strb	r6, [r3, #0]
 8017ed4:	6962      	ldr	r2, [r4, #20]
 8017ed6:	1c43      	adds	r3, r0, #1
 8017ed8:	429a      	cmp	r2, r3
 8017eda:	d004      	beq.n	8017ee6 <__swbuf_r+0x6e>
 8017edc:	89a3      	ldrh	r3, [r4, #12]
 8017ede:	07db      	lsls	r3, r3, #31
 8017ee0:	d5e1      	bpl.n	8017ea6 <__swbuf_r+0x2e>
 8017ee2:	2e0a      	cmp	r6, #10
 8017ee4:	d1df      	bne.n	8017ea6 <__swbuf_r+0x2e>
 8017ee6:	4621      	mov	r1, r4
 8017ee8:	4628      	mov	r0, r5
 8017eea:	f7ff ff8b 	bl	8017e04 <_fflush_r>
 8017eee:	2800      	cmp	r0, #0
 8017ef0:	d0d9      	beq.n	8017ea6 <__swbuf_r+0x2e>
 8017ef2:	e7d6      	b.n	8017ea2 <__swbuf_r+0x2a>

08017ef4 <__swsetup_r>:
 8017ef4:	b538      	push	{r3, r4, r5, lr}
 8017ef6:	4b29      	ldr	r3, [pc, #164]	@ (8017f9c <__swsetup_r+0xa8>)
 8017ef8:	4605      	mov	r5, r0
 8017efa:	6818      	ldr	r0, [r3, #0]
 8017efc:	460c      	mov	r4, r1
 8017efe:	b118      	cbz	r0, 8017f08 <__swsetup_r+0x14>
 8017f00:	6a03      	ldr	r3, [r0, #32]
 8017f02:	b90b      	cbnz	r3, 8017f08 <__swsetup_r+0x14>
 8017f04:	f7fe fff4 	bl	8016ef0 <__sinit>
 8017f08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f0c:	0719      	lsls	r1, r3, #28
 8017f0e:	d422      	bmi.n	8017f56 <__swsetup_r+0x62>
 8017f10:	06da      	lsls	r2, r3, #27
 8017f12:	d407      	bmi.n	8017f24 <__swsetup_r+0x30>
 8017f14:	2209      	movs	r2, #9
 8017f16:	602a      	str	r2, [r5, #0]
 8017f18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017f1c:	81a3      	strh	r3, [r4, #12]
 8017f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8017f22:	e033      	b.n	8017f8c <__swsetup_r+0x98>
 8017f24:	0758      	lsls	r0, r3, #29
 8017f26:	d512      	bpl.n	8017f4e <__swsetup_r+0x5a>
 8017f28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017f2a:	b141      	cbz	r1, 8017f3e <__swsetup_r+0x4a>
 8017f2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017f30:	4299      	cmp	r1, r3
 8017f32:	d002      	beq.n	8017f3a <__swsetup_r+0x46>
 8017f34:	4628      	mov	r0, r5
 8017f36:	f7ff f9bb 	bl	80172b0 <_free_r>
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8017f3e:	89a3      	ldrh	r3, [r4, #12]
 8017f40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017f44:	81a3      	strh	r3, [r4, #12]
 8017f46:	2300      	movs	r3, #0
 8017f48:	6063      	str	r3, [r4, #4]
 8017f4a:	6923      	ldr	r3, [r4, #16]
 8017f4c:	6023      	str	r3, [r4, #0]
 8017f4e:	89a3      	ldrh	r3, [r4, #12]
 8017f50:	f043 0308 	orr.w	r3, r3, #8
 8017f54:	81a3      	strh	r3, [r4, #12]
 8017f56:	6923      	ldr	r3, [r4, #16]
 8017f58:	b94b      	cbnz	r3, 8017f6e <__swsetup_r+0x7a>
 8017f5a:	89a3      	ldrh	r3, [r4, #12]
 8017f5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017f64:	d003      	beq.n	8017f6e <__swsetup_r+0x7a>
 8017f66:	4621      	mov	r1, r4
 8017f68:	4628      	mov	r0, r5
 8017f6a:	f000 f884 	bl	8018076 <__smakebuf_r>
 8017f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f72:	f013 0201 	ands.w	r2, r3, #1
 8017f76:	d00a      	beq.n	8017f8e <__swsetup_r+0x9a>
 8017f78:	2200      	movs	r2, #0
 8017f7a:	60a2      	str	r2, [r4, #8]
 8017f7c:	6962      	ldr	r2, [r4, #20]
 8017f7e:	4252      	negs	r2, r2
 8017f80:	61a2      	str	r2, [r4, #24]
 8017f82:	6922      	ldr	r2, [r4, #16]
 8017f84:	b942      	cbnz	r2, 8017f98 <__swsetup_r+0xa4>
 8017f86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017f8a:	d1c5      	bne.n	8017f18 <__swsetup_r+0x24>
 8017f8c:	bd38      	pop	{r3, r4, r5, pc}
 8017f8e:	0799      	lsls	r1, r3, #30
 8017f90:	bf58      	it	pl
 8017f92:	6962      	ldrpl	r2, [r4, #20]
 8017f94:	60a2      	str	r2, [r4, #8]
 8017f96:	e7f4      	b.n	8017f82 <__swsetup_r+0x8e>
 8017f98:	2000      	movs	r0, #0
 8017f9a:	e7f7      	b.n	8017f8c <__swsetup_r+0x98>
 8017f9c:	24000040 	.word	0x24000040

08017fa0 <_sbrk_r>:
 8017fa0:	b538      	push	{r3, r4, r5, lr}
 8017fa2:	4d06      	ldr	r5, [pc, #24]	@ (8017fbc <_sbrk_r+0x1c>)
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	4604      	mov	r4, r0
 8017fa8:	4608      	mov	r0, r1
 8017faa:	602b      	str	r3, [r5, #0]
 8017fac:	f7e8 fdae 	bl	8000b0c <_sbrk>
 8017fb0:	1c43      	adds	r3, r0, #1
 8017fb2:	d102      	bne.n	8017fba <_sbrk_r+0x1a>
 8017fb4:	682b      	ldr	r3, [r5, #0]
 8017fb6:	b103      	cbz	r3, 8017fba <_sbrk_r+0x1a>
 8017fb8:	6023      	str	r3, [r4, #0]
 8017fba:	bd38      	pop	{r3, r4, r5, pc}
 8017fbc:	2400cf60 	.word	0x2400cf60

08017fc0 <abort>:
 8017fc0:	b508      	push	{r3, lr}
 8017fc2:	2006      	movs	r0, #6
 8017fc4:	f000 f8bc 	bl	8018140 <raise>
 8017fc8:	2001      	movs	r0, #1
 8017fca:	f7e8 fd27 	bl	8000a1c <_exit>

08017fce <_realloc_r>:
 8017fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fd2:	4607      	mov	r7, r0
 8017fd4:	4614      	mov	r4, r2
 8017fd6:	460d      	mov	r5, r1
 8017fd8:	b921      	cbnz	r1, 8017fe4 <_realloc_r+0x16>
 8017fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017fde:	4611      	mov	r1, r2
 8017fe0:	f7ff b9da 	b.w	8017398 <_malloc_r>
 8017fe4:	b92a      	cbnz	r2, 8017ff2 <_realloc_r+0x24>
 8017fe6:	f7ff f963 	bl	80172b0 <_free_r>
 8017fea:	4625      	mov	r5, r4
 8017fec:	4628      	mov	r0, r5
 8017fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ff2:	f000 f8e3 	bl	80181bc <_malloc_usable_size_r>
 8017ff6:	4284      	cmp	r4, r0
 8017ff8:	4606      	mov	r6, r0
 8017ffa:	d802      	bhi.n	8018002 <_realloc_r+0x34>
 8017ffc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018000:	d8f4      	bhi.n	8017fec <_realloc_r+0x1e>
 8018002:	4621      	mov	r1, r4
 8018004:	4638      	mov	r0, r7
 8018006:	f7ff f9c7 	bl	8017398 <_malloc_r>
 801800a:	4680      	mov	r8, r0
 801800c:	b908      	cbnz	r0, 8018012 <_realloc_r+0x44>
 801800e:	4645      	mov	r5, r8
 8018010:	e7ec      	b.n	8017fec <_realloc_r+0x1e>
 8018012:	42b4      	cmp	r4, r6
 8018014:	4622      	mov	r2, r4
 8018016:	4629      	mov	r1, r5
 8018018:	bf28      	it	cs
 801801a:	4632      	movcs	r2, r6
 801801c:	f7ff f91b 	bl	8017256 <memcpy>
 8018020:	4629      	mov	r1, r5
 8018022:	4638      	mov	r0, r7
 8018024:	f7ff f944 	bl	80172b0 <_free_r>
 8018028:	e7f1      	b.n	801800e <_realloc_r+0x40>

0801802a <__swhatbuf_r>:
 801802a:	b570      	push	{r4, r5, r6, lr}
 801802c:	460c      	mov	r4, r1
 801802e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018032:	2900      	cmp	r1, #0
 8018034:	b096      	sub	sp, #88	@ 0x58
 8018036:	4615      	mov	r5, r2
 8018038:	461e      	mov	r6, r3
 801803a:	da0d      	bge.n	8018058 <__swhatbuf_r+0x2e>
 801803c:	89a3      	ldrh	r3, [r4, #12]
 801803e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018042:	f04f 0100 	mov.w	r1, #0
 8018046:	bf14      	ite	ne
 8018048:	2340      	movne	r3, #64	@ 0x40
 801804a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801804e:	2000      	movs	r0, #0
 8018050:	6031      	str	r1, [r6, #0]
 8018052:	602b      	str	r3, [r5, #0]
 8018054:	b016      	add	sp, #88	@ 0x58
 8018056:	bd70      	pop	{r4, r5, r6, pc}
 8018058:	466a      	mov	r2, sp
 801805a:	f000 f879 	bl	8018150 <_fstat_r>
 801805e:	2800      	cmp	r0, #0
 8018060:	dbec      	blt.n	801803c <__swhatbuf_r+0x12>
 8018062:	9901      	ldr	r1, [sp, #4]
 8018064:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018068:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801806c:	4259      	negs	r1, r3
 801806e:	4159      	adcs	r1, r3
 8018070:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018074:	e7eb      	b.n	801804e <__swhatbuf_r+0x24>

08018076 <__smakebuf_r>:
 8018076:	898b      	ldrh	r3, [r1, #12]
 8018078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801807a:	079d      	lsls	r5, r3, #30
 801807c:	4606      	mov	r6, r0
 801807e:	460c      	mov	r4, r1
 8018080:	d507      	bpl.n	8018092 <__smakebuf_r+0x1c>
 8018082:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018086:	6023      	str	r3, [r4, #0]
 8018088:	6123      	str	r3, [r4, #16]
 801808a:	2301      	movs	r3, #1
 801808c:	6163      	str	r3, [r4, #20]
 801808e:	b003      	add	sp, #12
 8018090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018092:	ab01      	add	r3, sp, #4
 8018094:	466a      	mov	r2, sp
 8018096:	f7ff ffc8 	bl	801802a <__swhatbuf_r>
 801809a:	9f00      	ldr	r7, [sp, #0]
 801809c:	4605      	mov	r5, r0
 801809e:	4639      	mov	r1, r7
 80180a0:	4630      	mov	r0, r6
 80180a2:	f7ff f979 	bl	8017398 <_malloc_r>
 80180a6:	b948      	cbnz	r0, 80180bc <__smakebuf_r+0x46>
 80180a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80180ac:	059a      	lsls	r2, r3, #22
 80180ae:	d4ee      	bmi.n	801808e <__smakebuf_r+0x18>
 80180b0:	f023 0303 	bic.w	r3, r3, #3
 80180b4:	f043 0302 	orr.w	r3, r3, #2
 80180b8:	81a3      	strh	r3, [r4, #12]
 80180ba:	e7e2      	b.n	8018082 <__smakebuf_r+0xc>
 80180bc:	89a3      	ldrh	r3, [r4, #12]
 80180be:	6020      	str	r0, [r4, #0]
 80180c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80180c4:	81a3      	strh	r3, [r4, #12]
 80180c6:	9b01      	ldr	r3, [sp, #4]
 80180c8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80180cc:	b15b      	cbz	r3, 80180e6 <__smakebuf_r+0x70>
 80180ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80180d2:	4630      	mov	r0, r6
 80180d4:	f000 f84e 	bl	8018174 <_isatty_r>
 80180d8:	b128      	cbz	r0, 80180e6 <__smakebuf_r+0x70>
 80180da:	89a3      	ldrh	r3, [r4, #12]
 80180dc:	f023 0303 	bic.w	r3, r3, #3
 80180e0:	f043 0301 	orr.w	r3, r3, #1
 80180e4:	81a3      	strh	r3, [r4, #12]
 80180e6:	89a3      	ldrh	r3, [r4, #12]
 80180e8:	431d      	orrs	r5, r3
 80180ea:	81a5      	strh	r5, [r4, #12]
 80180ec:	e7cf      	b.n	801808e <__smakebuf_r+0x18>

080180ee <_raise_r>:
 80180ee:	291f      	cmp	r1, #31
 80180f0:	b538      	push	{r3, r4, r5, lr}
 80180f2:	4605      	mov	r5, r0
 80180f4:	460c      	mov	r4, r1
 80180f6:	d904      	bls.n	8018102 <_raise_r+0x14>
 80180f8:	2316      	movs	r3, #22
 80180fa:	6003      	str	r3, [r0, #0]
 80180fc:	f04f 30ff 	mov.w	r0, #4294967295
 8018100:	bd38      	pop	{r3, r4, r5, pc}
 8018102:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018104:	b112      	cbz	r2, 801810c <_raise_r+0x1e>
 8018106:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801810a:	b94b      	cbnz	r3, 8018120 <_raise_r+0x32>
 801810c:	4628      	mov	r0, r5
 801810e:	f000 f853 	bl	80181b8 <_getpid_r>
 8018112:	4622      	mov	r2, r4
 8018114:	4601      	mov	r1, r0
 8018116:	4628      	mov	r0, r5
 8018118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801811c:	f000 b83a 	b.w	8018194 <_kill_r>
 8018120:	2b01      	cmp	r3, #1
 8018122:	d00a      	beq.n	801813a <_raise_r+0x4c>
 8018124:	1c59      	adds	r1, r3, #1
 8018126:	d103      	bne.n	8018130 <_raise_r+0x42>
 8018128:	2316      	movs	r3, #22
 801812a:	6003      	str	r3, [r0, #0]
 801812c:	2001      	movs	r0, #1
 801812e:	e7e7      	b.n	8018100 <_raise_r+0x12>
 8018130:	2100      	movs	r1, #0
 8018132:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018136:	4620      	mov	r0, r4
 8018138:	4798      	blx	r3
 801813a:	2000      	movs	r0, #0
 801813c:	e7e0      	b.n	8018100 <_raise_r+0x12>
	...

08018140 <raise>:
 8018140:	4b02      	ldr	r3, [pc, #8]	@ (801814c <raise+0xc>)
 8018142:	4601      	mov	r1, r0
 8018144:	6818      	ldr	r0, [r3, #0]
 8018146:	f7ff bfd2 	b.w	80180ee <_raise_r>
 801814a:	bf00      	nop
 801814c:	24000040 	.word	0x24000040

08018150 <_fstat_r>:
 8018150:	b538      	push	{r3, r4, r5, lr}
 8018152:	4d07      	ldr	r5, [pc, #28]	@ (8018170 <_fstat_r+0x20>)
 8018154:	2300      	movs	r3, #0
 8018156:	4604      	mov	r4, r0
 8018158:	4608      	mov	r0, r1
 801815a:	4611      	mov	r1, r2
 801815c:	602b      	str	r3, [r5, #0]
 801815e:	f7e8 fcad 	bl	8000abc <_fstat>
 8018162:	1c43      	adds	r3, r0, #1
 8018164:	d102      	bne.n	801816c <_fstat_r+0x1c>
 8018166:	682b      	ldr	r3, [r5, #0]
 8018168:	b103      	cbz	r3, 801816c <_fstat_r+0x1c>
 801816a:	6023      	str	r3, [r4, #0]
 801816c:	bd38      	pop	{r3, r4, r5, pc}
 801816e:	bf00      	nop
 8018170:	2400cf60 	.word	0x2400cf60

08018174 <_isatty_r>:
 8018174:	b538      	push	{r3, r4, r5, lr}
 8018176:	4d06      	ldr	r5, [pc, #24]	@ (8018190 <_isatty_r+0x1c>)
 8018178:	2300      	movs	r3, #0
 801817a:	4604      	mov	r4, r0
 801817c:	4608      	mov	r0, r1
 801817e:	602b      	str	r3, [r5, #0]
 8018180:	f7e8 fcac 	bl	8000adc <_isatty>
 8018184:	1c43      	adds	r3, r0, #1
 8018186:	d102      	bne.n	801818e <_isatty_r+0x1a>
 8018188:	682b      	ldr	r3, [r5, #0]
 801818a:	b103      	cbz	r3, 801818e <_isatty_r+0x1a>
 801818c:	6023      	str	r3, [r4, #0]
 801818e:	bd38      	pop	{r3, r4, r5, pc}
 8018190:	2400cf60 	.word	0x2400cf60

08018194 <_kill_r>:
 8018194:	b538      	push	{r3, r4, r5, lr}
 8018196:	4d07      	ldr	r5, [pc, #28]	@ (80181b4 <_kill_r+0x20>)
 8018198:	2300      	movs	r3, #0
 801819a:	4604      	mov	r4, r0
 801819c:	4608      	mov	r0, r1
 801819e:	4611      	mov	r1, r2
 80181a0:	602b      	str	r3, [r5, #0]
 80181a2:	f7e8 fc29 	bl	80009f8 <_kill>
 80181a6:	1c43      	adds	r3, r0, #1
 80181a8:	d102      	bne.n	80181b0 <_kill_r+0x1c>
 80181aa:	682b      	ldr	r3, [r5, #0]
 80181ac:	b103      	cbz	r3, 80181b0 <_kill_r+0x1c>
 80181ae:	6023      	str	r3, [r4, #0]
 80181b0:	bd38      	pop	{r3, r4, r5, pc}
 80181b2:	bf00      	nop
 80181b4:	2400cf60 	.word	0x2400cf60

080181b8 <_getpid_r>:
 80181b8:	f7e8 bc16 	b.w	80009e8 <_getpid>

080181bc <_malloc_usable_size_r>:
 80181bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80181c0:	1f18      	subs	r0, r3, #4
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	bfbc      	itt	lt
 80181c6:	580b      	ldrlt	r3, [r1, r0]
 80181c8:	18c0      	addlt	r0, r0, r3
 80181ca:	4770      	bx	lr

080181cc <_init>:
 80181cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181ce:	bf00      	nop
 80181d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80181d2:	bc08      	pop	{r3}
 80181d4:	469e      	mov	lr, r3
 80181d6:	4770      	bx	lr

080181d8 <_fini>:
 80181d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181da:	bf00      	nop
 80181dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80181de:	bc08      	pop	{r3}
 80181e0:	469e      	mov	lr, r3
 80181e2:	4770      	bx	lr
